<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工藤旧二の博客</title>
  
  
  <link href="http://huang_zhao.gitee.io/task/atom.xml" rel="self"/>
  
  <link href="http://huang_zhao.gitee.io/task/"/>
  <updated>2021-07-01T05:56:12.250Z</updated>
  <id>http://huang_zhao.gitee.io/task/</id>
  
  <author>
    <name>爱肖彤真是太好了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rabbitmq使用</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/rabbitmq/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/rabbitmq/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T05:56:12.250Z</updated>
    
    <content type="html"><![CDATA[<h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><p>tips：mac安装rabbitmq报错解决</p><ul><li><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 替换brew.git</span><span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<span class="token comment" spellcheck="true"># 替换homebrew-core.git</span><span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<span class="token comment" spellcheck="true"># 刷新源</span>brew update</code></pre></li><li><p>如果还报错先检查网络问题，是否翻墙等</p></li><li><p>再检查依赖是否全部安装</p></li></ul><h4 id="AMQP和JMS"><a href="#AMQP和JMS" class="headerlink" title="AMQP和JMS"></a>AMQP和JMS</h4><p>MQ是消息通信的模型，并发具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li></ul><ul><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li></ul><ul><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><p>常见MQ产品</p><ul><li><p>ActiveMQ：基于JMS</p></li><li><p>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</p></li></ul><ul><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li></ul><ul><li>Kafka：分布式消息系统，高吞吐量</li></ul><p>基本使用</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p><img src="https://img-blog.csdnimg.cn/20190610225910220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2thdml0bw==,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><p>组成部分说明：</p><p>Broker：消息队列服务进程，此进程包括两个部分：Exchange和Queue<br>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过虑。<br>Queue：消息队列，存储消息的队列，消息到达队列并转发给指定的<br>Producer：消息生产者，即生产方客户端，生产方客户端将消息发送<br>Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。<br>生产者发送消息流程：</p><p>1、生产者和Broker建立TCP连接。</p><p>2、生产者和Broker建立通道。</p><p>3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。</p><p>4、Exchange将消息转发到指定的Queue（队列）</p><p>消费者接收消息流程：</p><p>1、消费者和Broker建立TCP连接</p><p>2、消费者和Broker建立通道</p><p>3、消费者监听指定的Queue（队列）</p><p>4、当有消息到达Queue时Broker默认将消息推送给消费者。</p><p>5、消费者接收到消息。</p><p>6、ack回复</p><p><strong>写demo的时候注意点</strong></p><ul><li>连接时所需的用户需提前创建</li><li>连接虚拟机时需给用户对这个虚拟机的权限</li><li>connection error; protocol method: #method&lt;connection.close&gt;(reply-code=530, reply-text=NOT_ALLOWED   当出现这个报错就是这个用户没有对这个虚拟机的权限</li></ul><h4 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span>、安装brew install rabbitmq<span class="token number">2</span>、启动及关闭RabbitMQ服务前台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server    或sudo su<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>Cellar<span class="token operator">/</span>rabbitmq<span class="token operator">/</span><span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">/</span>sbin<span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detacted后台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detached后台关闭 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmqctl stop<span class="token number">3</span> 、登录http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">15672</span>    guest\guest<span class="token number">4</span>、创建用户与虚拟机并授权rabbitmqctl add_user USER PASSWORD <span class="token comment" spellcheck="true">##创建用户</span>rabbitmqctl change_password USER PASSWORD <span class="token comment" spellcheck="true">##修改密码</span>rabbitmqctl set_user_tags USER administrator  <span class="token comment" spellcheck="true">##设置为管理员</span>rabbitmqctl add_vhost VHOST <span class="token comment" spellcheck="true">##添加虚拟机</span>rabbitmqctl set_permissions <span class="token operator">-</span>p VHOST USER <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>  <span class="token comment" spellcheck="true">##给用户分配虚拟主机权限</span></code></pre><p>创建连接</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">rabbitmqUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 建立与RabbitMQ的连接     *     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义连接工厂</span>        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//端口</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置账号信息，用户名、密码、vhost</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"mqv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置虚拟机，一个mq服务可以设置多个虚拟机，每个虚拟机就相当于一个独立的mq</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过工厂获取连接</span>        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生产者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、从连接中创建通道，使用通道才能完成消息相关的操作</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、声明（创建）队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、消息内容</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向指定的队列中发送消息</span>        <span class="token comment" spellcheck="true">//参数：String exchange, String routingKey, BasicProperties props, byte[] body</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、exchange，交换机，如果不指定将使用mq的默认交换机（设置为""）         * 2、routingKey，路由key，交换机根据路由key来将消息转发到指定的队列，如果使用默认交换机，routingKey设置为队列的名称         * 3、props，消息的属性         * 4、body，消息内容         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> QUEUE_NAME<span class="token punctuation">,</span> null<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] Sent '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭通道和连接(资源关闭最好用try-catch-finally语句处理)</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建会话通道,生产者和mq服务所有通信都在channel通道中完成</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声明队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实现消费方法</span>        DefaultConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>            <span class="token comment" spellcheck="true">/**             * 当接收到消息后此方法将被调用             * @param consumerTag  消费者标签，用来标识消费者的，在监听队列时设置channel.basicConsume             * @param envelope 信封，通过envelope             * @param properties 消息属性             * @param body 消息内容             * @throws IOException             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//交换机</span>                String exchange <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//消息id，mq在channel中用来标识消息的id，可用于确认消息已接收</span>                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// body 即消息体</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] received : "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听队列，第二个参数：是否自动进行消息确认。</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean autoAck, Consumer callback</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、queue 队列名称         * 2、autoAck 自动回复，当消费者接收到消息后要告诉mq消息已接收，如果将此参数设置为tru表示会自动回复mq，如果设置为false要通过编程实现回复         * 3、callback，消费方法，当消费者接收到消息要执行的方法         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ack确认机制"><a href="#ack确认机制" class="headerlink" title="ack确认机制"></a>ack确认机制</h4><p>自动ack会在处理消息过程中即使出现异常，也会消息确认</p><p>在消息重要的情况下切换手动ack，手动ack后要主动发送ack，否在消息状态为未确认（unacked），在关闭消费者后，状态会回退到ready</p><p>消息队列发送后，在消息消费过程中出现异常处理：第一次执行，报错，捕获，重试，第二次执行，报错，捕获记录错误日志到数据库，确认消费</p><p>配置direct交换机（直连交换机）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dq<span class="token punctuation">.</span>config<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CachingConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 定义队列名和交换机 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectMqConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 交换机名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DIRECT_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_exchange"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 绑定key，交换机绑定队列时需要指定     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST1 <span class="token operator">=</span> <span class="token string">"direct_key1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST2 <span class="token operator">=</span> <span class="token string">"direct_key2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST3 <span class="token operator">=</span> <span class="token string">"direct_key3"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队列名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST1 <span class="token operator">=</span> <span class="token string">"addProductUsderBid"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST2 <span class="token operator">=</span> <span class="token string">"updateProduct1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST3 <span class="token operator">=</span> <span class="token string">"updateStateProduct1"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构建DirectExchange交换机     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化，长期不用补删除</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DIRECT_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构建序列     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST1<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST2<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST3<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绑定交交换机和     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test1Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test2Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test3Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实例化操作模板     *     * @param connectionFactory     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">rabbitTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须为true,否则无法触发returnedMessage回调，消息丢失</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="消息分发与能者多劳"><a href="#消息分发与能者多劳" class="headerlink" title="消息分发与能者多劳"></a>消息分发与能者多劳</h4><p>当出现两个消费者时，消费者2处理消息的速度远小于消费者1的情况下，他们会受到同样数量的消息</p><p>此时消费者1有大量时间处于空闲状态，可以通过 BasicQos 方法设置prefetchCount = 1</p><p>这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理1个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。相反，它会将其分派给不是仍然忙碌的下一个Consumer。</p><p>值得注意的是：prefetchCount在手动ack的情况下才生效，自动ack不生效。</p><h4 id="订阅模式"><a href="#订阅模式" class="headerlink" title="订阅模式"></a>订阅模式</h4><h4 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h4><h4 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;rabbitmq&quot;&gt;&lt;a href=&quot;#rabbitmq&quot; class=&quot;headerlink&quot; title=&quot;rabbitmq&quot;&gt;&lt;/a&gt;rabbitmq&lt;/h3&gt;&lt;p&gt;tips：mac安装rabbitmq报错解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;pre class</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="消息队列" scheme="http://huang_zhao.gitee.io/task/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="中间件" scheme="http://huang_zhao.gitee.io/task/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="mq" scheme="http://huang_zhao.gitee.io/task/tags/mq/"/>
    
  </entry>
  
  <entry>
    <title>web服务器与协议</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%8D%8F%E8%AE%AE/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T06:02:33.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web服务器与协议"><a href="#web服务器与协议" class="headerlink" title="web服务器与协议"></a>web服务器与协议</h2><p><a href="http://liuqingzheng.top/article/1/05-CGI,FastCGI,WSGI,uWSGI,uwsgi%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82/">http://liuqingzheng.top/article/1/05-CGI,FastCGI,WSGI,uWSGI,uwsgi%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82/</a></p><h4 id="1-WSGI-Web-Server-Gateway-Interface-服务器网关接口"><a href="#1-WSGI-Web-Server-Gateway-Interface-服务器网关接口" class="headerlink" title="1 WSGI(Web Server Gateway Interface)服务器网关接口"></a>1 WSGI(Web Server Gateway Interface)服务器网关接口</h4><p>是一种python程序或者框架和web服务器之间通信的一种接口</p><p>由于官方没有实现，WSGI更像是一种协议，一种标准，大部分框架和web服务器都遵循这种协议规范</p><h4 id="2-CGI-FastCGI"><a href="#2-CGI-FastCGI" class="headerlink" title="2 CGI FastCGI"></a>2 CGI FastCGI</h4><p>CGI是通用网关接口，和WSGI是一个东西，只不过支持的语言不同，CGI支持php，FastCGI是CGI的升级版，支持任意语言</p><h4 id="3-uWSGI-uwsgi"><a href="#3-uWSGI-uwsgi" class="headerlink" title="3 uWSGI uwsgi"></a>3 uWSGI uwsgi</h4><p>uWSGI是一个web服务器，用来处理和python的web框架之间通信，他们之间的通信规范是WSGI</p><p>uwsgi是uWSGI自有的协议，是用于uWSGI与前端服务器通行规范</p><p>总结：协议本身其实都是一个东西，只是他们支持的语言不通，使用场景不通</p><p>一个请求从前端来，到了nginx，nginx会吧静态文件直接返回，动态内容就会反向代理到web服务器上，这中间就会通过对应的web服务器的协议，如fastcgi，http，uwsgi，web服务器又要通过和对应web框架的协议，如wsgi通过socket发送给web框架</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web服务器与协议&quot;&gt;&lt;a href=&quot;#web服务器与协议&quot; class=&quot;headerlink&quot; title=&quot;web服务器与协议&quot;&gt;&lt;/a&gt;web服务器与协议&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://liuqingzheng.top/article/1</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="web服务器" scheme="http://huang_zhao.gitee.io/task/tags/web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="协议" scheme="http://huang_zhao.gitee.io/task/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T06:00:39.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h2><h3 id="工厂模式（Factory-Method）"><a href="#工厂模式（Factory-Method）" class="headerlink" title="工厂模式（Factory Method）"></a>工厂模式（Factory Method）</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqvnqhkwn4j31340b4wft.jpg" alt="image-20210526111500187" loading="lazy"></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""    通过方法控制对不同类的实例化"""</span><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{self.name}teacher age {self.age}"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{self.name}student age {self.age}"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Teacher<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Student<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>user <span class="token operator">=</span> create_people<span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="建造者模式（Bulider）"><a href="#建造者模式（Bulider）" class="headerlink" title="建造者模式（Bulider）"></a>建造者模式（Bulider）</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqwrdcue2fj317r0u0qcc.jpg" alt="image-20210527100607813" loading="lazy"></p><pre><code>建造者模式包含以下四种角色产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个零部件。抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()。具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。个人理解建造者模式主要用于构建复杂的对象，当对象创建过程非常复杂，且参数众多，使用者不需要知道其中构建过程即可使用这种模式一个复杂的实体类  就是ProductBuilder包含创建Product这个复杂实体的接口Concrete Builder 是Builder的实现类，完成复杂组件创建的各种方法Director调用Builder不同属性装配，完成实体类创建例子：Product人类    属性：各种可选可不选参数        -学校        -家庭        -工作Builder接口规定了创建各种属性的方法Concrete Builder 实现了这些方法Director创建对象时即可不需要知道这些调用方法的具体逻辑，只要传入对应的参数即可创建需要的对象和工厂模式的异同    都是为了创建对象    工厂模式一般用于创建简单的固定的对象    建造者模式用于创建复杂的丰富的对象</code></pre><p>python代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">orderDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    order_builder<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>order_builder<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>order_builder<span class="token operator">=</span>order_builder    <span class="token keyword">def</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>burger<span class="token punctuation">,</span>snack<span class="token punctuation">,</span>beverage<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>addBurger<span class="token punctuation">(</span>burger<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>addSnack<span class="token punctuation">(</span>snack<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>addBeverage<span class="token punctuation">(</span>beverage<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>java代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Builder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParlourDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Decorator d<span class="token punctuation">;</span>            d <span class="token operator">=</span> <span class="token punctuation">(</span>Decorator<span class="token punctuation">)</span> ReadXML<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ProjectManager m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProjectManager</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            Parlour p <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//产品：客厅</span><span class="token keyword">class</span> <span class="token class-name">Parlour</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String wall<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//墙</span>    <span class="token keyword">private</span> String TV<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电视</span>    <span class="token keyword">private</span> String sofa<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//沙发 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWall</span><span class="token punctuation">(</span>String wall<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wall <span class="token operator">=</span> wall<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTV</span><span class="token punctuation">(</span>String TV<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>TV <span class="token operator">=</span> TV<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSofa</span><span class="token punctuation">(</span>String sofa<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sofa <span class="token operator">=</span> sofa<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JFrame jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"建造者模式测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Container contentPane <span class="token operator">=</span> jf<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPanel p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JScrollPane sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        String parlour <span class="token operator">=</span> wall <span class="token operator">+</span> TV <span class="token operator">+</span> sofa<span class="token punctuation">;</span>        JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"src/"</span> <span class="token operator">+</span> parlour <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"客厅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象建造者：装修工人</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建产品对象</span>    <span class="token keyword">protected</span> Parlour product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回产品对象</span>    <span class="token keyword">public</span> Parlour <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体建造者：具体装修工人1</span><span class="token keyword">class</span> <span class="token class-name">ConcreteDecorator1</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setWall</span><span class="token punctuation">(</span><span class="token string">"w1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setTV</span><span class="token punctuation">(</span><span class="token string">"TV1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setSofa</span><span class="token punctuation">(</span><span class="token string">"sf1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体建造者：具体装修工人2</span><span class="token keyword">class</span> <span class="token class-name">ConcreteDecorator2</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setWall</span><span class="token punctuation">(</span><span class="token string">"w2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setTV</span><span class="token punctuation">(</span><span class="token string">"TV2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setSofa</span><span class="token punctuation">(</span><span class="token string">"sf2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指挥者：项目经理</span><span class="token keyword">class</span> <span class="token class-name">ProjectManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Decorator builder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProjectManager</span><span class="token punctuation">(</span>Decorator builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//产品构建与组装方法</span>    <span class="token keyword">public</span> Parlour <span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> Builder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Node<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ReadXML</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DocumentBuilderFactory dFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder builder <span class="token operator">=</span> dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document doc<span class="token punctuation">;</span>            doc <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/Builder/config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NodeList nl <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node classNode <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String cName <span class="token operator">=</span> <span class="token string">"Builder."</span> <span class="token operator">+</span> classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新类名："</span> <span class="token operator">+</span> cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqwt2yvnf5j316v0u0agu.jpg" alt="image-20210527110533091" loading="lazy"></p><p>个人理解</p><pre><code>实际上原型模式在python中不需要这么复杂的操作，当然这种操作的具有可扩展性    例如我已有原型是一个复杂的对象，但是我需要复制出来的是一个只带部分属性的简单对象，这里甚至可以通过原型模式和建造者模式结合，复制出具有特殊意义的新的对象，而不用重复去创建    但是实际的代码中，很少使用复制原型的操作，一是部分编程语言对复制原型的支持性，二是部分复制并来的那么高效    如果是数据库对象的原型复制，那就有意义了，因为复制可以少走数据库    python中可以直接通过deepcopy复制，是最简单的原型模式</code></pre><p>python代码</p><pre class=" language-Python"><code class="language-Python"># 示例import copyfrom collections import OrderedDictclass Book:    def __init__(self, name, authors, price, **rest):        '''rest的例子有：出版商、长度、标签、出版日期'''        self.name = name        self.authors = authors        self.price = price        self.__dict__.update(rest)      # 添加其他额外属性    def __str__(self):        mylist = []        ordered = OrderedDict(sorted(self.__dict__.items()))        for i in ordered.keys():            mylist.append('{}: {}'.format(i, ordered[i]))            if i == 'price':                mylist.append('$')            mylist.append('\n')        return ''.join(mylist)class Prototype:    def __init__(self):        self.objects = dict()    # 初始化一个原型列表    def register(self, identifier, obj):        # 在原型列表中注册原型对象        self.objects[identifier] = obj    def unregister(self, identifier):        # 从原型列表中删除原型对象        del self.objects[identifier]    def clone(self, identifier, **attr):        # 根据 identifier 在原型列表中查找原型对象并克隆        found = self.objects.get(identifier)        if not found:            raise ValueError('Incorrect object identifier: {}'.format(identifier))        obj = copy.deepcopy(found)        obj.__dict__.update(attr)   # 用新的属性值替换原型对象中的对应属性        return objdef main():    b1 = Book('The C Programming Language', ('Brian W. Kernighan', 'Dennis M.Ritchie'),    price=118, publisher='Prentice Hall', length=228, publication_date='1978-02-22',    tags=('C', 'programming', 'algorithms', 'data structures'))    prototype = Prototype()    cid = 'k&r-first'    prototype.register(cid, b1)    b2 = prototype.clone(cid, name='The C Programming Language(ANSI)', price=48.99, length=274, publication_date='1988-04-01', edition=2)    for i in (b1, b2):        print(i)    print("ID b1 : {} != ID b2 : {}".format(id(b1), id(b2)))if __name__ == '__main__':    main()</code></pre><h2 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqvno10gt9j30rw0940ti.jpg" alt="image-20210526111211393" loading="lazy"></p><h4 id="方式一：通过类的实例化控制"><a href="#方式一：通过类的实例化控制" class="headerlink" title="方式一：通过类的实例化控制"></a>方式一：通过类的实例化控制</h4><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">""" 单例模式实现1：通过类实例化调用元类的__call__方式实例化同一个对象        解析：实例化Singleton本质是调用了type.__call__方法，call中调用了new            __new__方法在内存中开辟了一块空间存放实例化的对象，返回值是一个空对象            然后会调用__init__来对对象初始化            此处第一次实例化获取的是正常实例化得到的Singleton对象，            此时在实例化结束后为类中的_instance赋值为type.__call__，            以至于第二次实例化还是走的同一个type.__call__，形成单例"""</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    _instance <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>_instance <span class="token keyword">is</span> None<span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance</code></pre><h4 id="方式二：导入对象"><a href="#方式二：导入对象" class="headerlink" title="方式二：导入对象"></a>方式二：导入对象</h4><h4 id="方式三：装饰器"><a href="#方式三：装饰器" class="headerlink" title="方式三：装饰器"></a>方式三：装饰器</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 实现3：装饰器储存第一次实例化的对象</span><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    _instance <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">_singleton</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> _instance<span class="token punctuation">:</span>            _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>    <span class="token keyword">return</span> _singleton@singleton<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;创建型&quot;&gt;&lt;a href=&quot;#创建型&quot; class=&quot;headerlink&quot; title=&quot;创建型&quot;&gt;&lt;/a&gt;创建</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="设计模式" scheme="http://huang_zhao.gitee.io/task/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>mysql深入学习</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Mysql%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Mysql%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T05:58:54.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql深入学习"><a href="#Mysql深入学习" class="headerlink" title="Mysql深入学习"></a>Mysql深入学习</h1><p>MySQL简介</p><ul><li>关于MySQL发音的官方答案：<br>The official way to pronounce “MySQL” is “My Ess Que Ell” (not “my sequel”), but we do not mind if you pronounce it as “my sequel” or in some other localized way.</li></ul><p>​        MySQL 可以分为 Server 层和存储引擎层两部分</p><p>​        <strong>Server层包括连接器、查询缓存、分析器、优化器、执行器等</strong>，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>​        <strong>存储引擎层负责数据的存储和提取。</strong>其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了默认存储引擎。<strong>create table 语句中使用 engine=memory，来指定使用内存引擎创建表。</strong></p><p>​        现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了默认存储引擎。create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。</p><h2 id="查询语句执行过程"><a href="#查询语句执行过程" class="headerlink" title="查询语句执行过程"></a>查询语句执行过程</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugu76st2j313y0u0arb.jpg" alt="image-20210525103044520" loading="lazy"></p><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><p>​        第一步，连接器连接到数据库，连接器负责跟客户端建立连接、获取权限、维持和管理连接。</p><blockquote><p>连接命令一般是这么写的：mysql -h$ip -P$port -u$user -p$password</p><p>账号密码错误会报错：Access denied for user</p></blockquote><p>​        连接完成后，如果没有后续的动作，这个连接就处于空闲状态，可以在<strong>show processlist</strong>命令中看到它。文本中这个图是show processlist的结果，其中的Command列显示为”Sleep”的这一行，就表示现在系统里面有一个空闲连接。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugulh05cj31aw08ijwn.jpg" alt="image-20210525103108004" loading="lazy"></p><p>​        客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数<strong>wait timeout</strong>控制的，默认值是8小时。</p><blockquote><p>断开后再执行sql会报错：Lost connection to MySQL server during query</p></blockquote><p>​        建立连接的过程通常是比较复杂的，所以建议在使用中要尽量减少建立连接的动作，也就是<strong>尽量使用长连接。</strong></p><p>​        但是 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启。</p><p>​        怎么解决这个问题呢？可以考虑以下两种方案。</p><ol><li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li><li><strong>如果用的是MySQL 5.7或更新版本，可以在每次执行一个比较大的操作后，通过执行mysql reset connection来重新初始化连接资源。这个过程不需要重连和重新做权限验证但是会将连接恢复到刚刚创建完时的状态。</strong></li></ol><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p>​        第二步，查询语句会先查询缓存，之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。</p><p>​        但是<strong>查询缓存利大于弊</strong>，因为查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。</p><p>​        除非是静态配置表才适合用查询缓存。<strong>可以将参数 query_cache_type 设置成DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。SQL_CACHE 显式指定使用查询缓存。</strong></p><blockquote><p>select SQL_CACHE * from T where ID=10；</p></blockquote><p>​        但是，<strong>MySQL 8.0版本彻底删除了查询缓存功能。</strong></p><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><p>​        第三步，分析语句，先是词法分析，找出select，表名，列名等关键字；然后是语法分析，判断语法是否正确。<strong>表名列名不对的sql，会在语法分析时报错。</strong></p><blockquote><p>语法错误：ERROR 1064 (42000): You have an error in your SQL syntax;</p></blockquote><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>​        第四步，<strong>决定使用哪个索引，join的时候决定各个表的连接顺序。</strong></p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>​        第五步，<strong>先判断对当前表是否有权限（如果命中查询缓存，会在返回结果时验证权限）。</strong></p><blockquote><p>ERROR 1142 (42000): SELECT command denied to user ‘b’@’localhost’ for table ‘T’</p></blockquote><p>​        如：select * from T where ID=10; 执行过程</p><ol><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>​        慢查询日志中有一行 rows_examined 字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。但是引擎扫描行数跟 rows_examined 并不是完全相同的。</p><h4 id="查询的数据如何返回"><a href="#查询的数据如何返回" class="headerlink" title="查询的数据如何返回"></a>查询的数据如何返回</h4><ul><li>对一个200G的大表做全表扫描，而内存只有16G，会不会把数据库主机的内存用光了？<br>实际上，MySQL不是取到全部数据再返回客户端。取数据和发数据的流程是这样的：</li></ul><ol><li><ol><li>获取一行，写到 net_buffer 中。这块内存的大小是由参数 net_buffer_length 定义的，默认是 16k。</li><li>重复获取行，直到 net_buffer 写满，调用网络接口发出去。</li><li>如果发送成功，就清空 net_buffer，然后继续取下一行，并写入 net_buffer。</li><li>如果发送函数返回 EAGAIN 或 WSAEWOULDBLOCK，就表示本地网络栈（socket send buffer）写满了，进入等待。直到网络栈重新可写，再继续发送。</li></ol></li></ol><ul><li>MySQL 客户端发送请求后，接收服务端返回结果的方式有两种：</li></ul><ol><li><ol><li>一种是本地缓存，也就是在本地开一片内存，先把结果存起来。如果用 API 开发，对应的就是 mysql_store_result 方法。</li><li>另一种是不缓存，读一个处理一个。如果用 API 开发，对应的就是 mysql_use_result 方法。</li></ol></li></ol><blockquote><p><strong>MySQL 客户端默认采用第一种方式，而如果加上–quick 参数，就会使用第二种不缓存的方式。</strong></p><p>采用不缓存的方式时，如果本地处理得慢，就会导致服务端发送结果被阻塞，因此会让服务端变慢。</p></blockquote><p>​        <strong>MySQL 是“边读边发的”。这就意味着，如果客户端接收得慢，会导致 MySQL 服务端由于结果发不出去，这个事务的执行时间变长。</strong></p><p>​        <strong>对于正常的线上业务来说，如果一个查询的返回结果不会很多的话，都建议使用 mysql_store_result 这个接口，直接把查询结果保存到本地内存。</strong></p><h2 id="更新语句执行过程"><a href="#更新语句执行过程" class="headerlink" title="更新语句执行过程"></a>更新语句执行过程</h2><p>​        更新语句同样会走连接器，查询缓存（清空该表缓存），分析器，优化器这一套流程，与查询流程不一样的是，更新流程还涉及两个重要的日志模块，redo log（重做日志）和 binlog（归档日志）。</p><h4 id="重做日志：redo-log"><a href="#重做日志：redo-log" class="headerlink" title="重做日志：redo log"></a>重做日志：redo log</h4><p>​        如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。</p><p>​        MySQL采用了WAL技术，全称是 Write-Ahead Logging，的关键点就是<strong>先写日志，再写磁盘。</strong></p><p>​        具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</p><p>​        但是如果 InnoDB 的 redo log 写满了。这时候系统会停止所有更新操作，把 checkpoint 往前推进(对应的所有脏页都 flush 到磁盘上)，redo log 留出空间可以继续写。</p><p>​        一旦一个查询请求需要在执行过程中先 flush 掉一个脏页时，这个查询就可能要比平时慢了。由于刷脏页的逻辑会占用 IO 资源并可能影响到了更新语句，要尽量避免这种情况，就要合理地设置 innodb_io_capacity 的值，<strong>并且平时要多关注脏页比例，不要让它经常接近 75%。</strong>脏页比例是通过 Innodb_buffer_pool_pages_dirty/Innodb_buffer_pool_pages_total 得到的，具体的命令参考下面代码：</p><blockquote><p>mysql&gt; select VARIABLE_VALUE into @a from global_status where VARIABLE_NAME = ‘Innodb_buffer_pool_pages_dirty’;</p><p>select VARIABLE_VALUE into @b from global_status where VARIABLE_NAME = ‘Innodb_buffer_pool_pages_total’;</p><p>select @a/@b;</p><p>在 InnoDB 中，innodb_flush_neighbors 参数就是用来控制这个行为的，值为 1 的时候会有“连坐”机制，值为 0 时表示不找邻居，自己刷自己的。固态硬盘建议设置为0。</p></blockquote><p>​        InnoDB 的 redo log 是可以配置的固定大小，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。<strong>如果redo log 设置的太小，磁盘压力很小，但是数据库出现间歇性的性能下跌。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugv0kg57j313x0u0qac.jpg" alt="image-20210525103131637" loading="lazy"></p><p>​        write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>​        write pos 和 checkpoint 之间的是还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，这时候就得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><p>​        <strong>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。</strong></p><p>​        <strong>redo log buffer</strong> ：插入数据的过程中，生成的日志都得先保存起来，但又不能在还没 commit 的时候就直接写到 redo log 文件里。所以，redo log buffer 就是一块内存，用来先存 redo 日志的。也就是说，在执行第一个 insert 的时候，数据的内存被修改了，在执行 commit 的时候 redo log buffer 才写入了日志。</p><p>​        为了控制 redo log 的写入策略，innodb_flush_log_at_trx_commit 参数，它有三种可能取值：</p><ol><li>设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;</li><li>设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘；</li><li>设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache。</li></ol><p>​        InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。也就是说，<strong>一个没有提交的事务的 redo log，也是可能已经持久化到磁盘的。</strong></p><p>​        还有两种场景也会把没有提交的redo log 写到硬盘。</p><ol><li><strong>redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动写盘。</strong>注意，由于这个事务并没有提交，所以这个写盘动作只是 write，而没有调用 fsync，也就是只留在了文件系统的 page cache。</li><li><strong>并行的事务提交的时候，顺带将这个事务的 redo log buffer 持久化到磁盘。</strong>假设一个事务 A 执行到一半，另一个事务B提交，事务B要把 redo log buffer 里的日志全部持久化到磁盘。</li></ol><h4 id="归档日志：binlog"><a href="#归档日志：binlog" class="headerlink" title="归档日志：binlog"></a>归档日志：binlog</h4><p>​        redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p><p>​        binlog 的三种格式对比：</p><p>​                <strong>statement：记录到 binlog 里的是语句原文，最后会有 COMMIT；可能会导致主备不一致，因为limit 、等sql 执行时可能主备优化器选择的索引不一样，排序也不一样。now()执行的结果也不一样。</strong></p><p>​                <strong>row ：记录了操作的事件每一条数据的变化情况，最后会有一个 XID event。缺点是太占空间。</strong></p><p>​                <strong>mixed：同时使用两种格式，由数据库判断具体某条sql使用哪种格式。但是有选择错误的情况。</strong></p><p>这两种日志有以下三点不同。</p><ol><li><strong>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</strong></li><li><strong>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</strong></li><li><strong>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</strong></li></ol><p>redo log 和 binlog 是怎么关联起来的?</p><p>它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 redo log：</p><ul><li>如果碰到既有 prepare、又有 commit 的 redo log，就直接提交；</li><li>如果碰到只有 parepare、而没有 commit 的 redo log，就拿着 XID 去 binlog 找对应的事务。</li></ul><p>​        处于 prepare 阶段的 redo log 加上完整 binlog，重启也能恢复，因为 binlog 完整了，那么从库就同步过去了，为了保证主从一致，有完整的 binlog 就算成功。</p><p>​        <strong>事务执行过程中，先把日志写到 binlog cache，事务提交的时候，再把 binlog cache 写到 binlog 文件中。</strong></p><p>​        write 和 fsync 的时机，是由参数 sync_binlog 控制的：</p><ol><li>sync_binlog=0 的时候，表示每次提交事务都只 write，不 fsync；</li><li>sync_binlog=1 的时候，表示每次提交务都会执行 fsync；</li><li>sync_binlog=N(N&gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。</li></ol><blockquote><p>比较常见的是将其设置为 100~1000 中的某个数值。对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。</p></blockquote><h4 id="更新语句执行过程-1"><a href="#更新语句执行过程-1" class="headerlink" title="更新语句执行过程"></a>更新语句执行过程</h4><p>比如：update T set c=c+1 where ID=2;</p><ol><li>执行器先找引擎取 ID=2 这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li><strong>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</strong></li><li><strong>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</strong></li><li><strong>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</strong></li></ol><p>​        这里给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。<strong>其实就是把redo log 和binlog 做两阶段提交，为了让两份日志之间的逻辑一致。</strong></p><h4 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h4><p>​        <strong>保存一定时间的binlog，同时系统会定期做整库备份。</strong></p><p>​        当需要恢复到指定的某一秒时，</p><ol><li>首先，找到最近的一次全量备份，如果运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库</li><li>然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到指定的那个时刻。</li></ol><p>​        <strong>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。</strong>这个参数建议设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p><p>​        <strong>binlog用于备份恢复和从库同步。sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。</strong>这个参数也建议设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p><h4 id="主备同步"><a href="#主备同步" class="headerlink" title="主备同步"></a>主备同步</h4><ol><li>在备库 B 上通过 change master 命令，设置主库 A 的 IP、端口、用户名、密码，以及要从哪个位置开始请求 binlog，这个位置包含文件名和日志偏移量。</li><li>在备库 B 上执行 start slave 命令，这时候备库会启动两个线程，就是图中的 io_thread 和 sql_thread。其中 io_thread 负责与主库建立连接。</li><li>主库 A 校验完用户名、密码后，开始按照备库 B 传过来的位置，从本地读取 binlog，发给 B。</li><li>备库 B 拿到 binlog 后，写到本地文件，称为中转日志（relay log）。</li><li>sql_thread 读取中转日志，解析出日志里的命令，并执行。</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugvfag12j313v0u015g.jpg" alt="image-20210525103157119" loading="lazy"></p><p>​        一主一备结构，需要注意主备切换，备库设置只读，避免切换bug造成双写不一致问题（设置 readonly 对超级用户是无效的，同步更新的线程有超级权限，所以还能写入同步数据）。</p><p>​        双主结构，要避免循环更新问题，因为MySQL 在 binlog 中记录了这个命令第一次执行时所在实例的 server id。所以可以规定两个库的 server id 必须不同，每个库在收到从自己的主库发过来的日志后，先判断 server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志。</p><h4 id="主备延迟"><a href="#主备延迟" class="headerlink" title="主备延迟"></a>主备延迟</h4><p>​        <strong>可以在备库上执行 show slave status 命令，它的返回结果里面会显示 seconds_behind_master，用于表示当前备库延迟了多少秒。</strong>每个事务的 binlog 里面都有一个时间字段，用于记录主库上写入的时间； 备库取出当前正在执行的事务的时间字段的值，计算它与当前系统时间的差值，得到 seconds_behind_master。</p><p>​        主备延迟最直接的表现是，备库消费中转日志（relay log）的速度，比主库生产 binlog 的速度要慢。</p><p>​        主备延迟的来源</p><ol><li>有些部署条件下，备库所在机器的性能要比主库所在的机器性能差。</li><li>考虑到主备切换，主备机器一般都一样了，但是还可能备库读的压力太大，</li></ol><blockquote><p>一主多从，或者通过binlog输出到外部系统(比如Hadoop)，让外部系统提供部分统计查询能力。</p></blockquote><ol><li><strong>大事务，如果事务执行十分钟，那就会导致主从延迟十分钟。</strong></li></ol><h4 id="主备复制策略"><a href="#主备复制策略" class="headerlink" title="主备复制策略"></a>主备复制策略</h4><p>​        <strong>在官方的 5.6 版本之前，MySQL 只支持单线程复制</strong>，由此在主库并发高、TPS 高时就会出现严重的主备延迟问题。</p><p>​        并行复制策略有按表并行分发策略，按行并行分发策略，但是按行分发在决定线程分发的时候，需要消耗更多的计算资源。这两个方案其实都有一些约束条件：</p><ol><li>要能够从 binlog 里面解析出表名、主键值和唯一索引的值。也就是说，主库的 binlog 格式必须是 row；</li><li>表必须有主键；</li><li>不能有外键。表上如果有外键，级联更新的行不会记录在 binlog 中，这样冲突检测就不准确。</li></ol><p>​        <strong>官方 MySQL5.6 版本，支持了并行复制，只是支持的粒度是按库并行。</strong>相比于按表和按行分发，这个策略有两个优势：</p><ol><li>构造 hash 值的时候很快，只需要库名；而且一个实例上 DB 数也不会很多，不会出现需要构造 100 万个项这种情况。</li><li>不要求 binlog 的格式。因为 statement 格式的 binlog 也可以很容易拿到库名。</li></ol><p>​        <strong>MariaDB 的并行复制策略，伪模拟主库并发度</strong>，主库 redo log 组提交 (group commit) 优化，同一组提交会记录commit_id，备库把同一个commit_id分发到多个worker执行。</p><p>​        官方的 MySQL5.7 版本，由参数 slave-parallel-type 来控制并行复制策略：</p><ol><li>配置为 DATABASE，表示使用 MySQL 5.6 版本的按库并行策略；</li><li>配置为 LOGICAL_CLOCK，表示的就是类似 MariaDB 的策略。不过，MySQL 5.7 这个策略，针对并行度做了优化。</li></ol><p>​        <strong>MySQL 5.7.22 版本里，MySQL 增加了一个新的并行复制策略，基于 WRITESET 的并行复制。</strong>对于事务涉及更新的每一行，计算出这一行的 hash 值，组成集合 writeset。如果两个事务没有操作相同的行，也就是说它们的 writeset 没有交集，就可以并行。</p><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>​        读写分离有两种方案：</p><ol><li>客户端直连方案，因为少了一层 proxy 转发，所以查询性能稍微好一点儿，并且整体架构简单，排查问题更方便。但是这种方案，由于要了解后端部署细节，所以在出现主备切换、库迁移等作的时候，客户端都会感知到，并且需要调整数据库连接信息。 可能会觉得这样客户端也太麻烦了，信息大量冗余，架构很丑。其实也未必，一般采用这样的架构，一定会伴随一个负责管理后端的组件，比如 Zookeeper，尽量让业务端只专注于业务逻辑开发。</li><li>带 proxy 的架构，对客户端比较友好。客户端不需要关注后端细节，连接维护、后端信息维护等工作，都是由 proxy 完成的。但这样的话，对后端维护团队的要求会更高。而且，proxy 也需要有高可用架构。因此，带 proxy 架构的整体就相对比较复杂。</li></ol><p>​        <strong>主从延迟的情况下怎么办？</strong></p><ol><li><p>强制走主库方案；对于必须要拿到最新结果的请求，强制将其发到主库上。</p></li><li><p>sleep 方案；主库更新后，读从库之前先 sleep 一下。因为大多数情况下主备延迟在 1 秒之内。</p></li><li><p>判断主备无延迟方案； 每次从库执行查询请求前，先判断 seconds_behind_master 是否已经等于 0。如果还不等于 0 ，那就必须等到这个参数变为 0 才能执行查询请求。</p></li><li><p>配合 semi-sync 方案；半同步复制：</p></li><li><ol><li>事务提交的时候，主库把 binlog 发给从库；</li><li>从库收到 binlog 以后，发回给主库一个 ack，表示收到了；</li><li>主库收到这个 ack 以后，才能给客户端客户端返回“事务完成”的确认。</li></ol></li><li><p>等主库位点方案；</p></li><li><p>等 GTID 方案。</p></li></ol><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h4 id="数据库特性"><a href="#数据库特性" class="headerlink" title="数据库特性"></a>数据库特性</h4><p>​        <strong>ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、、隔离性、持久性）。</strong></p><p>​        当数据库上有多个事务同时执行的时候，就可能出现<strong>脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）</strong>的问题，为了解决这些问题，就有了“隔离级别”的概念。</p><ul><li>脏读：指的是一个事务的读操作读到了另一个未提交的事务修改的值。</li><li>不可重复读：指的是一个事务读了同一个值两次，但是两次的值不同，因为中间另一个事务修改了这个值。</li><li>幻读：仍然指的是一个事务中读了两次，结果不同，但是与不可重复读不同的是，这里不同是因为别的事物做了插入操作，而是读的条件是一个范围的条件，这样第二次会多读到一条数据。</li></ul><blockquote><p>不可重复读重点在于update和delete，而幻读的重点在于insert。</p></blockquote><h4 id="幻读问题——间隙锁"><a href="#幻读问题——间隙锁" class="headerlink" title="幻读问题——间隙锁"></a>幻读问题——间隙锁</h4><p>​        即使把所有的记录都加上锁，还是阻止不了新插入的记录，也就是说行锁解决不了幻读问题，行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”。因此，为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 (Gap Lock)。</p><p>​        当执行 select * from t where d=5 for update 的时候，就不止是给数据库中已有的 6 个记录加上了行锁，还同时加了 7 个间隙锁。这样就确保了无法再插入新的记录。</p><p>​        间隙锁和行锁合称 next-key lock，每个 next-key lock 是前开后闭区间。也就是说，表 t 初始化以后，如果用 select * from t for update 要把整个表所有记录锁起来，就形成了 7 个 next-key lock，分别是(-∞,0]、(0,5]、(5,10]、(10,15]、(15,20]、(20, 25]、(25, +supremum]。</p><p>​        <strong>间隙锁和 next-key lock 的引入，解决了幻读的问题，但同时也带来了一些“困扰”。间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。</strong></p><h4 id="隔离级别-1"><a href="#隔离级别-1" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>​        SQL 标准的事务隔离级别包括：读未提交read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。<strong>隔离级别越高，效率越低。</strong></p><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读” 会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p>​        <strong>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。</strong></p><ol><li>“可重复读”隔离级别下：这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。</li><li>“读提交”隔离级别下：这个视图是在每个 SQL 语句开始执行的时候创建的。</li><li>“读未提交”隔离级别下：直接返回记录上的最新值，没有视图概念</li><li>“串行化”隔离级别下：直接用加锁的方式来避免并行访问。<pre><code>在 MySQL 里，有两个“视图”的概念：</code></pre></li></ol><ul><li>一个是 view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view … ，而它的查询方法与表一样。</li><li>另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。</li></ul><p>​        <strong>MySQL 默认隔离级别是可重复读，Oracle 默认隔离级别是“读提交”。</strong></p><p>​        将启动参数 <strong>transaction-isolation</strong> 的值设置成 READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ 、SERIALIZABLE。</p><p>​        可以用 show variables 来查看当前的值。</p><h4 id="事务隔离的实现——undo-log"><a href="#事务隔离的实现——undo-log" class="headerlink" title="事务隔离的实现——undo log"></a>事务隔离的实现——undo log</h4><p>​        每条记录在更新的时候都会同时记录一条回滚操作。同一条记录在系统中可以存在多个版本，这就是数据库的（MVCC）。</p><p>​        <strong>MVCC的全称是“多版本并发控制”。</strong>为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，不用等待另一个事务释放锁。</p><p>​        <strong>InnoDB会给数据库中的每一行增加三个字段，它们分别是DB_TRX_ID（事务版本号）、DB_ROLL_PTR（创建时间）、DB_ROW_ID（唯一id）。</strong></p><p>​        <strong>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。</strong></p><p>​        <strong>InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。</strong></p><p>​        B+Tree叶结点上，始终存储的是最新的数据（可能是还未提交的数据）。而旧版本数据，通过UNDO记录存储在回滚段（Rollback Segment）里。每一条记录都会维护一个ROW HEADER元信息，存储有创建这条记录的事务ID，一个指向UNDO记录的指针。<strong>通过最新记录和UNDO信息，可以还原出旧版本的记录。</strong></p><p>​        假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugvsu9u9j31af0u07bx.jpg" alt="image-20210525103218808" loading="lazy"></p><p>​        当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。这些回滚信息记录在undo log 里。</p><p>​        当系统里没有比这个回滚日志更早的 read-view 的时候会删除老的undo log。</p><h4 id="避免长事务"><a href="#避免长事务" class="headerlink" title="避免长事务"></a>避免长事务</h4><p>​        <strong>尽量不要使用长事务，长事务意味着系统里面会存在很老的事务视图。会有很大的undo log日志占用空间。而且长事务还会占据锁资源，也可能拖垮整个库。</strong></p><p>​        可以在 <strong>information_schema 库的innodb_trx</strong> 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。可以监控这个表，设置长事务阈值报警或者直接kill。</p><blockquote><p>select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</p></blockquote><p>​        可以通过 SET MAX_EXECUTION_TIME 命令来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。</p><p>​        确认是否有不必要的只读事务。</p><p>​        如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2或更大的值）。如果真的出现大事务导致undo log过大，这样设置后清理起来更方便。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h4 id="常见索引模型"><a href="#常见索引模型" class="headerlink" title="常见索引模型"></a>常见索引模型</h4><p>​        Hash表 + 链表，查询新增都很快，但是只适用于只有等值查询的场景，不能区间查询， Memcached 及其他一些 NoSQL 引擎在用。</p><p>​        有序数组，等值查询和范围查询场景中的性能就都非常优秀，二分查找O(log(N))，但是更新的效率很低，所以只适用于静态存储引擎。</p><p>​        平衡二叉树，更新和查询都比较快。</p><p>​        还有跳跃表，LSM树等。</p><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+ 树"></a>B+ 树</h4><p>​        为了让一个查询尽量少地读磁盘，就需要使用多叉树。MySQL采用的是B+树，由于索引不止存在内存中，还要写到磁盘上。二叉树的树高太高，100万数据，就有20层，在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。就要花费200ms的寻址时间，就太慢了。MySQL  B+树 的一层节点数量在1200左右，只需要1-3次磁盘IO就可以了，因为InnoDB存储引擎的最小储存单元页（Page），一个页的大小是16K。一般来说主键id为bigint类型，长度8字节，指针6字节，那么16284/14 = 1170。所以一次IO最多读取1170个节点。</p><p>​        相对于B树，B+树把所有的数据都放在了叶子节点上，这样虽然每次都需要查询叶子节点，但也不过两三层，如果干节点也放数据，那干节点就变大了，一次就读取不了1200节点了，层高会变大很多。</p><p>​        并且MySQL把B+树的所有叶子节点的数据用指针连起来了，这样做区间查询是非常快的。</p><h4 id="主键索引和非主键索引"><a href="#主键索引和非主键索引" class="headerlink" title="主键索引和非主键索引"></a>主键索引和非主键索引</h4><p>​        <strong>主键索引的叶子节点存的是整行数据。</strong>在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</p><p>​        <strong>非主键索引的叶子节点内容是主键的值。</strong>在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</p><p>​        <strong>查询语句，如果走主键索引，会直接得到数据，如果走非主键索引，查到主键后，还需要回主键索引再查一次数据。这个过程称为回表。（覆盖索引不需要回表）</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugw4o0iej313v0u0thn.jpg" alt="image-20210525103238211" loading="lazy"></p><p>​        分为聚簇索引和非聚簇索引的原因：更新数据的时候，由于数据的地址变了，需要更改索引，但是由于数据只跟主键索引绑定，索引只需要更新聚簇索引，当然还有被更新列涉及到的索引也要更新。如果所有所有都跟数据绑定，虽然省掉了回表的过程，但是每次更新，需要更新所有的索引，得不偿失。</p><h4 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h4><p>​        B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。</p><p>​        比如按顺序插入1-499,501-1000，索引都在一页，再插入一个500，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据(501到1000的数据)过去。这个过程称为<strong>页分裂</strong>。在这种情况下，性能自然会受影响。</p><p>​        <strong>除了影响性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。</strong></p><p>​        当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p><p>​        所以一般建表规范都要求用自增主键，避免页分裂，当然也有特殊情况，使用别的字段当做主键。</p><p>​        并且索引可能因为删除，或者页分裂等原因，导致数据页有空洞，<strong>重建索引</strong>的过程会创建一个新的索引，把数据按顺序插入，这样页面的利用率最高，也就是索引更紧凑、更省空间。</p><blockquote><p>alter table T drop index k;</p><p>alter table T add index(k);</p></blockquote><p>​        但是<strong>不能重建主键索引</strong>，不论是删除主键还是创建主键，都会将整个表重建。可以使用 alter table T engine=InnoDB 重建表。</p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>​        如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”查询需求，称为覆盖索引。</p><p>​        由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p><p>​        如果有根据身份证号查询市民信息的需求，只要在身份证号字段上建立索引就够了。如果现在有一个高频请求，要根据市民的身份证号查询他的姓名，再建立一个（身份证号、姓名）的联合索引就是覆盖索引，省去了回表环节。</p><h4 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h4><p>​        如果为每一种查询都设计一个索引，索引是不是太多了。</p><p>​        B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。</p><p>​        为了直观地说明这个概念，用（name，age）这个联合索引来分析。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugwgmmmtj315x0u016n.jpg" alt="image-20210525103258069" loading="lazy"></p><p>​        可以看到，索引项是按照索引定义里面出现的字段顺序排序的。</p><p>​        当逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。</p><p>​        如果要查的是所有名字第一个字是“张”的人，SQL 语句的条件是”where name like ‘张 %’”。这时，也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。</p><p>​        可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个<strong>最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</strong></p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>​        <strong>使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</strong></p><p>​        在建立索引时关注的是区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。因此，可以通过统计索引上有多少个不同的值来判断要使用多长的前缀。</p><p>​        可以使用下面这个语句，算出这个列上有多少个不同的值：</p><blockquote><p>select count(distinct email) as L from SUser;</p></blockquote><p>​        使用前缀索引就用不上覆盖索引对查询性能的优化了，这是在选择是否使用前缀索引时需要考虑的一个因素。</p><p>​        那么对于身份证号，一共 18 位，其中前 6 位是地址码，所以同一个县的人的身份证号前 6 位一般会是相同的。该怎么存储，怎么设计索引呢？</p><ol><li>第一种方式是使用倒序存储。身份证号的最后 6 位没有地址码这样的重复逻辑。</li></ol><blockquote><p>select field_list from t where id_card = reverse(‘input_id_card_string’);</p><p>select field_list from t where id_card = reverse(‘input_id_card_string’);</p></blockquote><ol><li>第二种方式是使用 hash 字段。在表上再创建一个整数字段，来保存身份证的校验码，同时在这个字段上创建索引。</li></ol><blockquote><p>alter table t add id_card_crc int unsigned, add index(id_card_crc);</p><p>然后每次插入新记录的时候，都同时用 crc32() 这个函数得到校验码填到这个新字段。由于校验码可能存在冲突，所以查询语句 where 部分要判断 id_card 的值是否精确相同。</p><p>select field_list from t where id_card_crc=crc32(‘input_id_card_string’) and id_card=’input_id_card_string’</p></blockquote><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><p>​        最左前缀的时候，那些不符合最左前缀的部分，会怎么样呢？</p><p>​        如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：</p><blockquote><p>mysql&gt; select * from tuser where name like ‘张 %’ and age=10 and ismale=1;</p></blockquote><p>​        这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。</p><p>​        然后需要判断其他条件是否满足。</p><p>​        在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p><p>​        <strong>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)，可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugwq4mrgj313y0u07im.jpg" alt="image-20210525103313205" loading="lazy"></p><h4 id="change-buffer"><a href="#change-buffer" class="headerlink" title="change buffer"></a>change buffer</h4><p>​        当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。<strong>虽然是只更新内存，但是在事务提交的时候，把 change buffer 的操作也记录到 redo log 里了，所以崩溃恢复的时候，change buffer 也能找回来。</strong></p><p>​        需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p><p>​        将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 merge。除了访问这个数据页会触发 merge 外，系统有后台线程会定期 merge。在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。</p><p>​        显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式能够避免占用内存，提高内存利用率。</p><p>​        <strong>唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。</strong></p><p>​        change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。</p><p>​        如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。</p><p>​        第一种情况是，这个记录要更新的目标页在内存中。这时，InnoDB 的处理流程如下：</p><ul><li>对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</li></ul><blockquote><p>这个判断只会耗费微小的 CPU 时间。不是重点</p></blockquote><ul><li>第二种情况是，这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下：</li><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</li><li><strong>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</strong></li></ul><p>​    将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><p>​        <strong>change buffer 适用于写多读少的业务，比如账单类、日志类的系统。因为会记录很多change buffer（写的时候） 才会merge（读的时候）</strong></p><p>​        反过来，读多写少的业务，几乎每次把更新记录在change buffer 后，就会立即出发merge，这样随机访问 IO 的次数不会减少，反而增加了change buffer 的维护代价。</p><p>​        所以，对于身份证号这类字段，如果业务已经保证不会写入重复数据，不需要数据库做约束，加普通索引比加主键索引要好，如果所有的更新后面，都马上伴随着对这个记录的查询，那么应该关闭 change buffer。而在其他情况下，change buffer 都能提升更新性能。</p><p>​        在实际使用中，可以发现，<strong>普通索引和 change buffer 的配合使用，对于数据量大的表的更新优化还是很明显的，特别是在使用机械硬盘时。</strong></p><p><strong>change buffer 和 redo log 对比</strong></p><blockquote><p>insert into t(id,k) values(id1,k1),(id2,k2);</p></blockquote><p>这条更新语句做了如下操作：</p><ol><li>Page 在内存中，直接更新内存；</li><li>Page 没有在内存中，就在内存的 change buffer 区域，记录下“要往 Page 插入一行”这个信。</li><li>将上述两个动作记入 redo log 中。</li></ol><p>后续的更新操作</p><ol><li>Page 在内存中，会直接从内存返回。</li><li>Page 不在内容中，需要把 Page 从磁盘读入内存中，然后应用 change buffer 里面的操作日志，生成一个正确的版本并返回结果。</li></ol><p>所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，<strong>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</strong></p><h4 id="优化器如何选择索引"><a href="#优化器如何选择索引" class="headerlink" title="优化器如何选择索引"></a>优化器如何选择索引</h4><p>​        优化器结合是否扫描行数、是否使用临时表、是否排序等因素进行综合判断。</p><p>​        MySQL 在真正开始执行语句之前，并不能精确地知道满足条件的记录有多少条，而只能根据统计信息来估算记录数。</p><p>​        这个统计信息就是索引的“区分度”。显然，一个索引上不同的值越多，这个索引的区分度就越好。而一个索引上不同的值的个数，称之为“基数”（cardinality）。也就是说，这个基数越大，索引的区分度越好。</p><p>​        <strong>可以使用 show index 方法，看到一个索引的基数。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugx8xlsuj31b405aado.jpg" alt="image-20210525103329731" loading="lazy"></p><p>​        MySQL 采样统计的方法获得基数，InnoDB 默认会选择 N 个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。当变更的数据行数超过 1/M 的时候，会自动触发重新做一次索引统计。<strong>analyze table t 命令，可以用来重新统计索引信息。</strong></p><p>​        在 MySQL 中，有两种存储索引统计的方式，可以通过设置参数 innodb_stats_persistent 的值来选择：</p><ul><li>设置为 on 的时候，表示统计信息会持久化存储。这时，默认的 N 是 20，M 是 10。</li><li>设置为 off 的时候，表示统计信息只存储在内存中。这时，默认的 N 是 8，M 是 16。<br>其实索引统计只是一个输入，对于一个具体的语句来说，优化器还要判断，执行这个语句本身要扫描多少行。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugx9egufj31b60bedr0.jpg" alt="image-20210525103343554" loading="lazy"></p><p>​        rows 这个字段表示的是预计扫描行数。</p><p>​        少数情况下优化器会选错索引，<strong>第一种方法可以采用 force index 强行选择一个索引。</strong></p><p>​        但其实使用 force index 最主要的问题还是变更的及时性。因为选错索引的情况还是比较少出现的，所以开发的时候通常不会先写上 force index。而是等到线上出现问题的时候，才会再去修改 SQL 语句、加上 force index。但是修改之后还要测试和发布，对于生产系统来说，这个过程不够敏捷。</p><p>​        所以，数据库的问题最好还是在数据库内部来解决。既然优化器放弃了使用索引 a，说明 a 还不够合适，所以<strong>第二种方法就是，可以考虑修改语句，引导 MySQL 使用期望的索引</strong>。比如，在这个例子里，显然把“order by b limit 1” 改成 “order by b,a limit 1” ，语义的逻辑是相同的。</p><p>​        之前优化器选择使用索引 b，是因为它认为使用索引 b 可以避免排序（b 本身是索引，已经是有序的了，如果选择索引 b 的话，不需要再做排序，只需要遍历），所以即使扫描行数多，也判定为代价更小。</p><p>​        现在 order by b,a 这种写法，要求按照 b,a 排序，就意味着使用这两个索引都需要排序。因此，扫描行数成了影响决策的主要条件，于是此时优化器选了只需要扫描 1000 行的索引 a。</p><p>​        当然，这种修改并不是通用的优化手段，可能修改语义这件事儿不太好，可以用 limit 100 让优化器意识到，使用 b 索引代价是很高的。其实是根据数据特征诱导了一下优化器，也不具备通用性。</p><blockquote><p>select  <em>from  (select</em>  from t where (a between 1 and 1000)  and (b between 50000 and 100000) order by b limit 100)alias limit 1;</p></blockquote><p>​        <strong>第三种方法是：在有些场景下，可以新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引。</strong></p><p>​        <strong>对索引字段做函数操作，可能会破坏索引值的有序性，因此优化器就决定放弃走树搜索功能。</strong></p><ol><li>条件字段函数操作</li></ol><blockquote><p>select count(*) from tradelog where month(t_modified)=7;</p><p>同理 where id+1=1000  也不会用索引，改成 where id =1000 - 1 会用索引。</p></blockquote><ol><li>隐式类型转换</li></ol><blockquote><p>select * from tradelog where tradeid=110717;  （tradeid 是varchar）</p><p>等同于 select * from tradelog where  CAST(tradid AS signed int) = 110717;</p></blockquote><ol><li>隐式字符编码转换</li></ol><blockquote><p>select * from trade_detail where tradeid=$L2.tradeid.value;</p><p>$L2.tradeid.value 的字符集是 utf8mb4。字符集 utf8mb4 是 utf8 的超集，所以当这两个类型的字符串在做比较的时候，MySQL 内部的操作是，先把 utf8 字符串转成 utf8mb4 字符集，再做比较。</p><p>相当于 select * from trade_detail  where CONVERT(traideid USING utf8mb4)=$L2.tradeid.value;</p></blockquote><h2 id="全局锁和表锁"><a href="#全局锁和表锁" class="headerlink" title="全局锁和表锁"></a>全局锁和表锁</h2><h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><p>​        <strong>顾名思义，全局锁就是对整个数据库实例加锁。</strong>MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当需要<strong>让整个库处于只读状态的时候</strong>，可以使用可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。</p><p>​        <strong>全局锁的典型使用场景是，做全库逻辑备份。</strong>也就是把整库每个表都 select 出来存成文本。</p><p>​        通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。在备份过程中整个库完全处于只读状，这是很危险的。但是不加锁，备份的数据会有不一致的问题。</p><p>​        <strong>可以拿到一个一致性视图来备份，官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。</strong>而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p><p>​        那为什么还需要FTWRL呢，因为一致性读是好，<strong>但前提是引擎要支持这个隔离级别</strong>。对于 MyISAM 这种不支持事务的引擎，就需要使用 FTWRL 命令了。</p><p>​        既然要全库只读，为什么不使用 set global readonly=true 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但还是建议用 FTWRL 方式，主要有两个原因：</p><ul><li>在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，不建议使用。</li><li><strong>在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</strong></li></ul><h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><p>​        MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p><p>​        <strong>表锁的语法是 lock tables … read/write。</strong>与 FTWRL 类似，<strong>可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。</strong>需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。</p><p>​        对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。</p><p>​        <strong>另一类表级的锁是 MDL（metadata lock)。</strong>MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>​        因此，在 MySQL 5.5 版本中引入了 MDL，<strong>当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</strong></p><ul><li>读锁之间不互斥，因此可以有多个线程同时对一张表增删改查。</li><li>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。</li></ul><h4 id="安全的给表增加字段"><a href="#安全的给表增加字段" class="headerlink" title="安全的给表增加字段"></a>安全的给表增加字段</h4><p>​        有几个请求在读写表，会加上MDL读锁，然后修改表字段的请求会被blocked，请求MDL写锁，这个时候，后面的全部读写请求都会被MDL写锁 blocked，如果查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。</p><p>​        那么如何安全的给表加字段呢？</p><p>​        首先要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，可以查到当前执行中的事务。如果要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。</p><p>​        其次，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。</p><blockquote><p>ALTER TABLE tbl_name NOWAIT add column …</p><p>ALTER TABLE tbl_name WAIT N add column …</p></blockquote><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p>​        <strong>MyISAM 引擎就不支持行锁。</strong>不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。</p><p>​        <strong>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</strong></p><p>​        <strong>如果事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</strong></p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>​        当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。这里用数据库中的行锁举个例子。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugxnetw4j31430u0k6s.jpg" alt="image-20210525103402197" loading="lazy"></p><p>​        这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略：</p><ul><li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</li></ul><blockquote><p>设置时间长，等待时间太长；设置时间短，有的长事务，不是死锁的也会结束。</p></blockquote><ul><li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</li></ul><blockquote><p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。会耗费大量的CPU资源。</p></blockquote><h4 id="慢SQL问题排查"><a href="#慢SQL问题排查" class="headerlink" title="慢SQL问题排查"></a>慢SQL问题排查</h4><p>​        使用 show processlist 命令查看 Waiting for table metadata lock 的示意图。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugxuzztlj31b007m42t.jpg" alt="image-20210525103418827" loading="lazy"></p><p>这个状态表示的是，现在有一个线程正在表 t 上请求或者持有 MDL 写锁，把 select 语句堵住了。</p><p>​        通过查询 sys.schema_table_lock_waits 这张表，就可以直接找出造成阻塞的 process id，把这个连接用 kill 命令断开即可。</p><p>​        通过 sys.innodb_lock_waits 查行锁</p><blockquote><p>select * from t sys.innodb_lock_waits where locked_table=<code>&#39;test&#39;.&#39;t&#39;</code>\G</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugy6bwf9j312t0u01df.jpg" alt="image-20210525103436523" loading="lazy"></p><p>这个信息很全，4 号线程是造成堵塞的罪魁祸首。而干掉这个罪魁祸首的方式，就是 KILL QUERY 4 或 KILL 4。实际上，这里 KILL 4 才有效。</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="count-语句分析"><a href="#count-语句分析" class="headerlink" title="count(*) 语句分析"></a>count(*) 语句分析</h4><p>​        MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高；</p><p>​        InnoDB 引擎就麻烦了，执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。因为多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。</p><p>​        count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加。最后返回累计值。</p><p>​        所以，count(*)、count(主键 id) 和 count(1) 都表示返回满足条件的结果集的总行数；而 count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p><p>​        <strong>按照效率排序的话，count(字段) &lt; count(主键id) &lt; count(1) &lt; count(*)，所以建议，尽量使用count(*)。</strong></p><h4 id="order-by-语句分析"><a href="#order-by-语句分析" class="headerlink" title="order by 语句分析"></a>order by 语句分析</h4><p>​        MySQL 会给每个线程分配一块内存用于<strong>快速排序</strong>，称为 <strong>sort_buffer</strong>。</p><p>​        explain 结果里的 Extra 这个字段中的“Using filesort”表示的就是需要排序。</p><p>​        sort_buffer_size，就是 MySQL 为排序开辟的内存（sort_buffer）的大小。如果要排序的数据量小于 sort_buffer_size，排序就在内存中完成。但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。</p><p>​        <strong>建立联合索引，甚至覆盖索引，可以避免排序过程。</strong></p><h4 id="join-语句分析"><a href="#join-语句分析" class="headerlink" title="join 语句分析"></a>join 语句分析</h4><p>​        直接使用 join 语句，MySQL 优化器可能会选择表 t1 或 t2 作为驱动表，改用 straight_join 让 MySQL 使用固定的连接方式执行查询，这样优化器只会按照指定的方式去 join。</p><blockquote><p>select * from t1 straight_join t2 on (t1.a=t2.a);</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugyez02rj31b005adjj.jpg" alt="image-20210525103450579" loading="lazy"></p><p>​        在这条语句里，<strong>被驱动表 t2 的字段 a 上有索引，join 过程用上了这个索引，因此效率是很高的。称之为“Index Nested-Loop Join”，简称 NLJ。</strong></p><p>​        <strong>如果被驱动表 t2 的字段 a 上没有索引，那每次到 t2 去匹配的时候，就要做一次全表扫描。这个效率很低。这个算法叫做“Simple Nested-Loop Join”的算法，简称 BNL。</strong></p><p>​        所以在判断要不要使用 join 语句时，就是看 explain 结果里面，Extra 字段里面有没有出现“Block Nested Loop”字样。</p><p>​        在决定哪个表做驱动表的时候，应该是两个表按照各自的条件过滤，过滤完成之后，计算参与 join 的各个字段的总数据量，数据量小的那个表，就是“小表”，应该作为驱动表。</p><p>​        <strong>Multi-Range Read 优化，这个优化的主要目的是尽量使用顺序读盘。因为大多数的数据都是按照主键递增顺序插入得到的，所以可以认为，如果按照主键的递增顺序查询的话，对磁盘的读比较接近顺序读，能够提升读性能。</strong></p><blockquote><p>select * from t1 where a&gt;=1 and a&lt;=100;</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugyp2ntij31as04c0wa.jpg" alt="image-20210525103506464" loading="lazy"></p><p>​        <strong>Batched Key Access(BKA) 算法。这个 BKA 算法，其实就是对 NLJ 算法的优化。</strong></p><p>​        NLJ 算法执行的逻辑是：从驱动表 t1，一行行地取出 a 的值，再到被驱动表 t2 去做 join。也就是说，对于表 t2 来说，每次都是匹配一个值。这时，MRR 的优势就用不上了。</p><p>​        既然如此，就把表 t1 的数据取出来一部分，先放到一个临时内存。这个临时内存就是 join_buffer。</p><h4 id="自增主键"><a href="#自增主键" class="headerlink" title="自增主键"></a>自增主键</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugyxvutej31aw0hs4ix.jpg" alt="image-20210525103520405" loading="lazy"></p><p>​        表定义里面出现了一个 AUTO_INCREMENT=2，表示下一次插入数据时，如果需要自动生成自增值，会生成 id=2。</p><p>​        实际上，表的结构定义存放在后缀名为.frm 的文件中，但是并不会保存自增值。</p><ul><li><p>MyISAM 引擎的自增值保存在数据文件中。</p></li><li><p>InnoDB 引擎的自增值，其实是保存在了内存里，MySQL 8.0 版本后，才有了“自增值持久化”的能力。</p></li><li><p>MySQL 5.7 及之前的版本，自增值保存在内存里，并没有持久化。每次重启后，第一次打开表的时候，都会去找自增值的最大值 max(id)，然后将 max(id)+1  作为这个表当前的自增值。</p></li><li><ul><li>MySQL 8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。</li></ul></li></ul><p>​        <strong>自增值修改机制</strong></p><ul><li><p>如果插入数据时 id 字段指定为 0、null 或未指定值，那么就把这个表当前的 AUTO_INCREMENT 值填到自增字段；</p></li><li><p>如果插入数据时 id 字段指定了具体的值 X ，就直接使用语句里指定的值 Y。</p></li><li><ul><li>如果 X &lt; Y，那么这个表的自增值不变；</li><li>如果 X≥Y，就需要把当前自增值修改为新的自增值。</li></ul></li></ul><p>​        <strong>新的自增值生成算法是：从 auto_increment_offset 开始，以 auto_increment_increment 为步长，持续叠加，直到找到第一个大于 X 的值，作为新的自增值。</strong></p><p>​        <strong>自增值的修改时机</strong></p><ol><li>执行器调用 InnoDB 引擎接口写入一行，传入的这一行的值(0,1,1);</li><li>InnoDB 发现用户没有指定自增 id 的值，获取表 t 当前的自增值 2；</li><li>将传入的行的值改成 (2,1,1);</li><li>将表的自增值改成 3；</li><li>继续执行插入数据操作，由于已经存在 c=1 的记录，所以报 Duplicate key error，语句返回。</li></ol><p>所以，sql执行报错了，自增值已经改变了，<strong>唯一键冲突是导致自增主键 id 不连续的第一种原因。同样地，事务回滚也会产生类似的现象，这就是第二种原因。</strong></p><p>​        <strong>批量插入的时候，由于系统预先不知道要申请多少个自增 id，所以就先申请一个，然后两个，然后四个，直到够用。这是主键 id 出现自增 id 不连续的第三种原因。</strong></p><h4 id="自增id用完怎么办"><a href="#自增id用完怎么办" class="headerlink" title="自增id用完怎么办"></a>自增id用完怎么办</h4><ol><li><strong>主键id</strong><pre><code>    **再申请下一个 id 时，得到的值保持不变。**所以到最大值之后，再申请id，由于id不变，所以插入会报主键冲突，如果数据量比较大，主键id应该用 bigint unsigned。默认是无符号整型 (unsigned int) ，4 个字节232-1（4294967295）。</code></pre></li><li><strong>系统row_id</strong><pre><code>    **如果创建的 InnoDB 表没有指定主键，那么 InnoDB 会创建一个不可见的，长度为 6 个字节的 row_id。**InnoDB 维护了一个全局的 dict_sys.row_id 值，所有无主键的 InnoDB 表，每插入一行数据，都把当前的 dict_sys.row_id 值作为要插入数据的 row_id，然后把 dict_sys.row_id 的值加 1。    实际上，在代码实现时 row_id 是一个长度为 8 字节的无符号长整型 (bigint unsigned)。但是，InnoDB 在设计时，给 row_id 留的只是 6 个节的长度，这样写到数据表中时只放了最后 6 个字节，所以 row_id 能写到数据表中的值，就有两个特征：    **248-1到 264 之间，row_id 会是0，264 之后会从0开始。**    **在 InnoDB 逻辑里，申请到 row_id=N 后，就将这行数据写入表中；如果表中已经存在 row_id=N 的行，新写入的行就会覆盖原有的行。**    **覆盖数据，就意味着数据丢失，影响的是数据可靠性；报主键冲突，是插入失败，影响的是可用性。而一般情况下，可靠性优先于可用性。**</code></pre></li><li><strong>Xid</strong><pre><code>    redo log 和 binlog 相配合的时候，提到了有一个共同的字段叫作 Xid。它在 MySQL 中是用来对应事务的。    MySQL 内部维护了一个全局变量 global_query_id，每次执行语句的时候将它赋值给 Query_id，然后给这个变量加 1。如果当前语句是这个事务执行的第一条语句，那么 MySQL 还会同时把 Query_id 赋值给这个事务的 Xid。    **而 global_query_id 是一个纯内存变量，重启之后就清零了。所以就知道了，在同一个数据库实例中，不同事务的 Xid 也是有可能相同的。**    **但是 MySQL 重启之后会重新生成新的 binlog 文件，这就保证了，同一个 binlog 文件里，Xid 一定是惟一的。**    **但是 global_query_id 定义的长度是 8 个字节，这个自增值的上限是 264-1。理论上也是可能重复的。**</code></pre></li><li><strong>trx_id</strong><pre><code>    **Xid 是由 server 层维护的。InnoDB 内部使用 Xid，就是为了能够在 InnoDB 事务和 server 之间做关联。但是，InnoDB 自己的 trx_id，是另外维护的。**    InnoDB 内部维护了一个 max_trx_id 全局变量，每次需要申请一个新的 trx_id 时，就获得 max_trx_id 的当前值，然后并将 max_trx_id 加 1。    **InnoDB 数据可见性的核心思想是：每一行数据都记录了更新它的 trx_id，当一个事务读到一行数据的时候，判断这个数据是否可见的方法，就是通过事务的一致性视图与这行数据的 trx_id 做对比。**    **对于正在执行的事务，可以从 information_schema.innodb_trx 表中看到事务的 trx_id。**</code></pre></li></ol><blockquote><p>​        update 和 delete 语句除了事务本身，还涉及到标记删除旧数据，也就是要把数据放到 purge 队列里等待后续物理删除，这个操作也会把 max_trx_id+1， 因此在一个事务中至少加 2；</p><p>​        InnoDB 的后台操作，比如表的索引信息统计这类操作，也是会启动内部事务的，因此你可能看到，trx_id 值并不是按照加 1 递增的。</p></blockquote><ol><li><pre><code>    **只读事务会分配一个特殊的，比较大的id，**把当前事务的 trx 变量的指针地址转成整数，再加上 248，使用这个算法，就可以保证以下两点：</code></pre></li><li><ol><li>因为同一个只读事务在执行期间，它的指针地址是不会变的，所以不论是在 innodb_trx 还是在 innodb_locks 表里，同一个只读事务查出来的 trx_id 就会是一样的。</li><li>如果有并行的多个只读事务，每个事务的 trx 变量的指针地址肯定不同。这样，不同的并发只读事务，查出来的 trx_id 就是不同的。</li></ol></li></ol><p>​        加上248是为了保证只读事务显示的 trx_id 值比较大，正常情况下就会区别于读写事务的 id。理论情况下也可能只读事务与读写事务相等，但是没有影响。</p><p>​        max_trx_id 会持久化存储，重启也不会重置为 0，那么从理论上讲，只要一个 MySQL 服务跑得足够久，就<strong>可能出现 max_trx_id 达到 248-1 的上限，然后从 0 开始的情况。当达到这个状态后，MySQL 就会持续出现一个脏读的 bug。因为后续的trx_id肯定比末尾那些trx_id大，能看到这些数据。</strong></p><ol><li><strong>thread_id</strong><pre><code>    系统保存了一个全局变量 thread_id_counter，每新建一个连接，就将 thread_id_counter 赋值给这个新连接的线程变量。定义的大小是 4 个字节，因此达到 232-1 后，它就会重置为 0，然后继续增加。但是，在 show processlist 里不会看到两个相同的 thread_id。因为 MySQL 设计了一个唯一数组的逻辑，给新线程分配 thread_id 的时候，逻辑代码是这样的：</code></pre></li></ol><blockquote><p>do {</p><p>new_id= thread_id_counter++;</p><p>} while (!thread_ids.insert_unique(new_id).second);</p></blockquote><h4 id="误删数据怎么办"><a href="#误删数据怎么办" class="headerlink" title="误删数据怎么办"></a>误删数据怎么办</h4><ol><li>delete 语句误删数据行：Flashback工具过闪回把数据恢复回来。 原理是修改 binlog 的内容，拿回原库重放。而能够使用这个方案的前提是，需要确保 binlog_format=row 和 binlog_row_image=FULL。</li></ol><blockquote><p>如何预防：把 sql_safe_updates 参数设置为 on。，delete 或者 update 语句必须有where条件，否则执行会报错。</p></blockquote><ol><li><p>误删库 / 表：全量备份，加增量日志，在应用日志的时候，需要跳过 12 点误操作的那个语句的 binlog：</p></li><li><ol><li>如果原实例没有使用 GTID 模式，只能在应用到包含 12 点的 binlog 文件的时候，先用–stop-position 参数执行到误操作之前的日志，然后再用–start-position 从误操作之后的日志继续执行；</li><li>如果实例使用了 GTID 模式，就方便多了。假设误操作命令的 GTID 是 gtid1，那么只需要执行 set gtid_next=gtid1;begin;commit; 先把这个 GTID 加到临时实例的 GTID 集合，之后按顺序执行 binlog 的时候，就会自动跳过误操作的语句。</li></ol></li></ol><blockquote><p>如何加速恢复：使用 mysqlbinlog 命令时，加上一个–database 参数，用来指定误删表所在的库。</p><p>在 start slave 之前，先通过执行﻿ ﻿change replication filter replicate_do_table = (tbl_name) 命令，就可以让临时库只同步误操作的表；</p></blockquote><p>​        <strong>延迟复制备库</strong>，一般的主备复制结构存在的问题是，如果主库上有个表被误删了，这个命令很快也会被发给所有从库，进而导致所有从库的数据表也都一起被误删了。延迟复制的备库是一种特殊的备库，通过 CHANGE MASTER TO MASTER_DELAY = N 命令，可以指定这个备库持续保持跟主库有 N 秒的延迟。</p><p>​        比如把 N 设置为 3600，这就代表了如果主库上有数据被误删了，并且在 1 小时内发现了这个误操作命令，这个命令就还没有在这个延迟复制的备库执行。这时候到这个备库上执行 stop slave，再通过之前介绍的方法，跳过误操作命令，就可以恢复出需要的数据。</p><p>​        预防误删库 / 表的方法，制定操作规范。这样做的目的，是避免写错要删除的表名。</p><ol><li>在删除数据表之前，必须先对表做改名操作。然后，观察一段时间，确保对业务无影响以后再删除这张表。</li><li>改表名的时候，要求给表名加固定的后缀（比如加_to_be_deleted)，然后删除表的动作必须通过管理系统执行。并且，管理系删除表的时候，只能删除固定后缀的表。</li></ol><h4 id="删除数据，表文件大小不变"><a href="#删除数据，表文件大小不变" class="headerlink" title="删除数据，表文件大小不变"></a>删除数据，表文件大小不变</h4><p>​        <strong>delete 命令其实只是把记录的位置，或者数据页标记为了“可复用”，但磁盘文件的大小是不会变的。</strong>也就是说，通过 delete 命令是不能回收表空间的。这些可以复用，而没有被使用的空间，看起来就像是“空洞”。</p><p>​        实际上，不止是删除数据会造成空洞，插入数据也会。如果数据是随机插入的，就可能造成索引的数据页分裂。更新索引上的值，可以理解为删除一个旧的值，再插入一个新值。不难理解，这也是会造成空洞的。</p><p>​        也就是说，<strong>经过大量增删改的表，都是可能是存在空洞的。所以，如果能够把这些空洞去掉，就能达到收缩表空间的目的。而重建表，就可以达到这样的目的。</strong></p><p>​        <strong>使用 alter table A engine=InnoDB 命令来重建表。MySQL 会自动完成转存数据、交换表名、删除旧表的操作。</strong></p><p>​        重建表的时候，InnoDB 不会把整张表占满，每个页留了 1/16 给后续的更新用。也就是说，其实重建表之后不是“最”紧凑的。</p><h4 id="怎么复制一张表"><a href="#怎么复制一张表" class="headerlink" title="怎么复制一张表"></a>怎么复制一张表</h4><ol><li>mysqldump 方法</li></ol><p>​        使用 mysqldump 命令将数据导出成一组 INSERT 语句。你可以使用下面的命令：</p><blockquote><p>mysqldump -h$host -P$port -u$user –add-locks=0 –no-create-info –single-transaction  –set-gtid-purged=OFF db1 t –where=”a&gt;900” –result-file=/client_tmp/t.sql</p></blockquote><p>​        然后可以通过下面这条命令，将这些 INSERT 语句放到 db2 库里去执行。</p><blockquote><p>mysql -h127.0.0.1 -P13000  -uroot db2 -e “source /client_tmp/t.sql”</p></blockquote><ol><li>导出 CSV 文件</li></ol><p>​        直接将结果导出成.csv 文件。MySQL 提供了下面的语法，用来将查询结果导出到服务端本地目录：</p><blockquote><p>select * from db1.t where a&gt;900 into outfile ‘/server_tmp/t.csv’;</p></blockquote><p>​        然后用下面的 load data 命令将数据导入到目标表 db2.t 中。</p><blockquote><p>load data infile ‘/server_tmp/t.csv’ into table db2.t;</p></blockquote><ol><li>物理拷贝方法</li></ol><p>​        直接拷贝文件是不行的，需要在数据字典中注册。</p><p>​        MySQL 5.6 版本引入了可传输表空间(transportable tablespace) 的方法，，可以通过导出 + 导入表空间的方式，实现物理拷贝表的功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql深入学习&quot;&gt;&lt;a href=&quot;#Mysql深入学习&quot; class=&quot;headerlink&quot; title=&quot;Mysql深入学习&quot;&gt;&lt;/a&gt;Mysql深入学习&lt;/h1&gt;&lt;p&gt;MySQL简介&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于MySQL发音的官方答案：&lt;br&gt;Th</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="http://huang_zhao.gitee.io/task/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>chean code读书笔记</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/clean%20code/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/clean%20code/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T05:57:49.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="clean-code"><a href="#clean-code" class="headerlink" title="clean code"></a>clean code</h1><h2 id="1-命名的意义"><a href="#1-命名的意义" class="headerlink" title="1 命名的意义"></a>1 命名的意义</h2><h3 id="1-1-名副其实"><a href="#1-1-名副其实" class="headerlink" title="1.1 名副其实"></a>1.1 名副其实</h3><p>一段代码若中间出现太多不可预知的变量，常量，类型，我们就必须去其他地方找到他们的出处</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> d <span class="token comment" spellcheck="true">//今天</span><span class="token keyword">int</span> today</code></pre><p>d和today都代表今天，但是today在后续的程序中会更容易让人理解，而d就显得不那么名副其实，会浪费我们很多时间去翻看以前的代码。</p><p>不仅仅是变量命名</p><p>例如：</p><p>![image-20210202120312436](/Users/apple/Library/Application Support/typora-user-images/image-20210202120312436.png)</p><p>虽然上述代码逻辑很简单，但是我们弄不清楚其中的含义，list1是什么类型，i的0索引代表着什么，4又代表什么</p><p>大部分的人对于变量命名可能会有规范，但是没有习惯对值和常量做规范</p><p>![image-20210202120232380](/Users/apple/Library/Application Support/typora-user-images/image-20210202120232380.png)</p><h3 id="1-2-做有意义的区分"><a href="#1-2-做有意义的区分" class="headerlink" title="1.2 做有意义的区分"></a>1.2 做有意义的区分</h3><p>类似的名称就应该有具体的名称区别</p><p>例如 user与user_info两个对象，我们在获取用户手机的时候，这个变量可能会出现上述两个对象中的任意一个，也可能不出现，应该加以有意义的区分，不然很多类似的区别反而会造成误导，只是在定义的时候偷了懒，后续使用就需要花更多的时间去变量的源头</p><h3 id="1-3-类与方法"><a href="#1-3-类与方法" class="headerlink" title="1.3 类与方法"></a>1.3 类与方法</h3><p>类名应当是名词或者名词短语，方法名应当是动词或者动词短语</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;clean-code&quot;&gt;&lt;a href=&quot;#clean-code&quot; class=&quot;headerlink&quot; title=&quot;clean code&quot;&gt;&lt;/a&gt;clean code&lt;/h1&gt;&lt;h2 id=&quot;1-命名的意义&quot;&gt;&lt;a href=&quot;#1-命名的意义&quot; class</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="读书笔记" scheme="http://huang_zhao.gitee.io/task/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>mysql事务的四种隔离级别</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T06:01:44.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-事务的基本要素"><a href="#1-事务的基本要素" class="headerlink" title="1 事务的基本要素"></a>1 事务的基本要素</h3><ul><li><p>原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</p><p>原子性强调的是事务不可分隔的状态，只要存在间隙，就不是原子性，各种锁的机制也是基于原子性产生，锁的目的就是为了保证在sql执行的过程中阻止其他线程的sql影响形成脏数据</p></li><li><p>一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</p><p>一致性强调的是事务前后的状态，任务只有成功和失败，不存在第三种情况。</p></li><li><p>隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p><p>隔离性强调的是多个事务互不影响，开启一个事务相当于开启了一片独立的空间，多个独立的空间互不影响，但是最后会把结束的结果汇总到数据库上</p></li><li><p>持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p><p>持久性强调的是事务执行完毕后，事务本身就不存在了，留下的只有事务执行的结果，不可回滚</p></li></ul><h3 id="2-事务的并发问题"><a href="#2-事务的并发问题" class="headerlink" title="2 事务的并发问题"></a>2 事务的并发问题</h3><ul><li>脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li></ul><ul><li>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</li><li>幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li></ul><p>　　小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p><p>![image-20210616164055048](/Users/apple/Library/Application Support/typora-user-images/image-20210616164055048.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-事务的基本要素&quot;&gt;&lt;a href=&quot;#1-事务的基本要素&quot; class=&quot;headerlink&quot; title=&quot;1 事务的基本要素&quot;&gt;&lt;/a&gt;1 事务的基本要素&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原子性（Atomicity）：事务开始后所有操作，要么全部做完，要</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="http://huang_zhao.gitee.io/task/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>流畅的python学习记录</title>
    <link href="http://huang_zhao.gitee.io/task/2021/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://huang_zhao.gitee.io/task/2021/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-06-27T06:10:11.000Z</published>
    <updated>2021-06-27T09:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流畅的python学习记录"><a href="#流畅的python学习记录" class="headerlink" title="流畅的python学习记录"></a>流畅的python学习记录</h1><h2 id="第一章：python数据模型"><a href="#第一章：python数据模型" class="headerlink" title="第一章：python数据模型"></a>第一章：python数据模型</h2><h3 id="1-一副python风格的纸牌"><a href="#1-一副python风格的纸牌" class="headerlink" title="1 一副python风格的纸牌"></a>1 一副python风格的纸牌</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># import collections</span><span class="token comment" spellcheck="true"># Card = collections.namedtuple('Card',['rank','suit'])</span><span class="token comment" spellcheck="true"># collections.namedtuple常用于创建一个只有少数属性但没有方法的类，比如数据库条目？</span><span class="token keyword">import</span> collectionsCard <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">'Card'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rank'</span><span class="token punctuation">,</span> <span class="token string">'suit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">FrenchDeck</span><span class="token punctuation">:</span>    ranks <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> list<span class="token punctuation">(</span><span class="token string">'JQKA'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用于创建一组牌</span>    suits <span class="token operator">=</span> <span class="token string">'spades diamonds clubs hearts'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用于创建一个组</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_cards <span class="token operator">=</span> <span class="token punctuation">[</span>Card<span class="token punctuation">(</span>rank<span class="token punctuation">,</span> suit<span class="token punctuation">)</span>                       <span class="token keyword">for</span> suit <span class="token keyword">in</span> self<span class="token punctuation">.</span>suits                            <span class="token keyword">for</span> rank <span class="token keyword">in</span> self<span class="token punctuation">.</span>ranks<span class="token punctuation">]</span>                        <span class="token comment" spellcheck="true"># 列表生成式，每循环一次生成一个对象</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_cards<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_cards<span class="token punctuation">[</span>position<span class="token punctuation">]</span>deck <span class="token operator">=</span> FrenchDeck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(deck.ranks)</span><span class="token comment" spellcheck="true"># print(deck.suits)</span><span class="token comment" spellcheck="true"># print(deck._cards[51])</span><span class="token comment" spellcheck="true"># print(len(deck))</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 24点小游戏</span>game24 <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>deck<span class="token punctuation">.</span>_cards<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(game24)</span>res <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>rank <span class="token keyword">for</span> i <span class="token keyword">in</span> game24<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># res = map(lambda card:card.rank,game24)</span><span class="token comment" spellcheck="true"># print(res)</span></code></pre><p>总结：</p><p>1 学会了一个快速实例化得到对象的方法<code>collections.namedtuple</code>由这个方法得到的对象只有属性没有方法</p><p>2 我们在创建一个数据模型的时候，尽量把它做得像基本数据类型，比如说我要看这个牌对象的总张数，不需要去想是obj.length还是obj.len()。应当做成<code>res = len(obj)</code>一样简洁明了</p><h3 id="2-如何使用特殊方法"><a href="#2-如何使用特殊方法" class="headerlink" title="2 如何使用特殊方法"></a>2 如何使用特殊方法</h3><p>python中的特殊方法比如<code>__len__</code>并不是拿来给我们直接使用的，而是给解释器使用的，也就是说没有<code>obj.__len__()</code>这种写法。这里要注意一个小点：<code>len(obj)</code>如果这个obj是一个自定义类的对象，那会调用这个对象的<code>__len__</code>方法，如果obj是python的一个基本数据类型，那CPython会抄个近路，<code>__len__</code>实际上会直接返回 PyVarObject 里的 ob_size 属 性，PyVarObject 是表示内存中长度可变的内置对象的 C 语言结构体。直接读取这个值比 调用一个方法要快很多。</p><p><strong>python实现向量</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> hypot<span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Vector(%r, %r)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__abs__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hypot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> bool<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x        y <span class="token operator">=</span> self<span class="token punctuation">.</span>y <span class="token operator">+</span> other<span class="token punctuation">.</span>y        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__mul__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scalar<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">*</span> scalar<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">*</span> scalar<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># v1 = Vector(1,2)</span><span class="token comment" spellcheck="true"># v2 = Vector(3,4)</span><span class="token comment" spellcheck="true"># print(v)</span></code></pre><p><strong>测试<code>__bool__,__len__</code></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Mynum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> num        self<span class="token punctuation">.</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># def __bool__(self):</span>    <span class="token comment" spellcheck="true">#     if self.num&lt;10:</span>    <span class="token comment" spellcheck="true">#         return False</span>    <span class="token comment" spellcheck="true">#     return True</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>l1<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果l1有值则返回真</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>num <span class="token operator">=</span> Mynum<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># num.l1.append(123)</span><span class="token comment" spellcheck="true"># 在这里调用了对象的__bool__方法</span><span class="token keyword">if</span> num<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></code></pre><p>总结：</p><p>1 <code>__repr__</code> 和 <code>__str__</code> 的区别在于，后者是在 str() 函数被使用，或是在用 print 函数打印 一个对象的时候才被调用的，并且它返回的字符串对终端用户更友好。 如果你只想实现这两个特殊方法中的一个，<code>__repr__</code> 是更好的选择，因为如果一个对象没 有 <code>__str__</code> 函数，而 Python 又需要调用它的时候，解释器会用 <code>__repr__</code> 作为替代。</p><p>2 中缀运算符的基本原则就是不改变操作对 象，而是产出一个新的值,就像如果我们要构造一个x+y，那得到的结果就不应该影响xy原本的数值，而应该返回一个新值</p><p>3 python中在判断一个值是真还是假就会调用<code>bool(x)</code>这个函数只会返回True/False，如果这个对象没有<code>__bool__</code>方法，那python就会尝试使用它的<code>__len__</code>如果长度是0，返回False</p><p><strong>表1-1：跟运算符无关的特殊方法</strong></p><table><thead><tr><th>类别</th><th>方法名</th></tr></thead><tbody><tr><td>字符串 / 字节序列 表示形式</td><td><code>__repr__、__str__、__format__、__bytes__</code></td></tr><tr><td>数值转换</td><td><code>__abs__、__bool__、__complex__、__int__、__float__、__hash__、__index__</code></td></tr><tr><td>集合模拟</td><td><code>__len__、__getitem__、__setitem__、__delitem__、__contains__</code></td></tr><tr><td>迭代枚举</td><td><code>__iter__、__reversed__、__next__</code></td></tr><tr><td>可调用模拟</td><td><code>__call__</code></td></tr><tr><td>上下文管理</td><td><code>__enter__、__exit__</code></td></tr><tr><td>实例创建和销毁</td><td><code>__new__、__init__、__del__</code></td></tr><tr><td>属性管理</td><td><code>__getattr__、__getattribute__、__setattr__、__delattr__、__dir__</code></td></tr><tr><td>属性描述符</td><td><code>__get__、__set__、__delete__</code></td></tr><tr><td>跟类相关的服务</td><td><code>__prepare__、__instancecheck__、__subclasscheck__</code></td></tr></tbody></table><p><strong>表1-2：跟运算符相关的特殊方法</strong></p><table><thead><tr><th>类别</th><th>方法名和对应的运算符</th></tr></thead><tbody><tr><td>一元运算符</td><td><code>__neg__ -、__pos__ +、__abs__ abs()</code></td></tr><tr><td>众多比较运算符</td><td><code>__lt__ &lt;、__le__ &lt;=、__eq__ ==、__ne__ !=、__gt__ &gt;、__ge__ &gt;=</code></td></tr><tr><td>算术运算符</td><td><code>__add__ +、__sub__ -、__mul__ *、__truediv__ /、__floordiv__ //、__ mod__ %、__divmod__ divmod()、__pow__ ** 或 pow()、__round__ round()</code></td></tr><tr><td>反向算术运算符</td><td><code>__radd__、__rsub__、__rmul__、__rtruediv__、__rfloordiv__、__rmod__、 __rdivmod__、__rpow__</code></td></tr><tr><td>增量赋值算术运算符</td><td><code>__iadd__、__isub__、__imul__、__itruediv__、__ifloordiv__、__imod__、 __ipow__</code></td></tr><tr><td>位运算符</td><td><code>__invert__ ~、__lshift__ &lt;&lt;、__rshift__ &gt;&gt;、__and__ &amp;、__or__</code></td></tr><tr><td>反向位运算符</td><td><code>__rlshift__、__rrshift__、__rand__、__rxor__、__ror__</code></td></tr><tr><td>增量赋值位运算符</td><td><code>__ilshift__、__irshift__、__iand__、__ixor__、__ior__</code></td></tr></tbody></table><h2 id="第二章：序列构成的数组"><a href="#第二章：序列构成的数组" class="headerlink" title="第二章：序列构成的数组"></a>第二章：序列构成的数组</h2><h3 id="1-变量泄露"><a href="#1-变量泄露" class="headerlink" title="1 变量泄露"></a>1 变量泄露</h3><p>python2中使用列表生成式容易造成变量泄露的问题，例如：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># python2.7中</span>x <span class="token operator">=</span> <span class="token string">'my precious'</span>dummy <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'ABC'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'C'</span><span class="token comment" spellcheck="true"># python3.x中</span>x <span class="token operator">=</span> <span class="token string">'ABC'</span>dummy <span class="token operator">=</span> <span class="token punctuation">[</span>ord<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token string">'ABC'</span><span class="token keyword">print</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">]</span> </code></pre><h3 id="2-具名元组"><a href="#2-具名元组" class="headerlink" title="2 具名元组"></a>2 具名元组</h3><p>collections.namedtuple 是一个工厂函数，它可以用来构建一个带字段名的元组和一个有 名字的类——这个带名字的类对调试程序有很大帮助。</p><p>创建一个具名元组需要两个参数，一个是类名，另一个是类的各个字段的名字。后者可 以是由数个字符串组成的可迭代对象，或者是由空格分隔开的字段名组成的字符串。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtupleCity <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'City'</span><span class="token punctuation">,</span> <span class="token string">'name country population coordinates'</span><span class="token punctuation">)</span> </code></pre><p><strong>切片赋值</strong></p><pre class=" language-python"><code class="language-python">l <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment" spellcheck="true"># 如果赋值对象是一个切片，那赋值语句的右侧必须是一个可迭代对象</span>l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 可以执行</span></code></pre><p>*<em>对序列使用+和**</em></p><p>对序列使用*与+的时候，要知道，得到的是一个新的结果不会再原来的结果上修改</p><p>但是如果a*n中，序列a中包含了其他可变类型的话，内部可变类型的复制，最终指向的都是同一个内存地址</p><pre class=" language-python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p><strong>关于返回值</strong></p><p>要判断一个语句的返回值是什么，首先判断的是是否会产生新值，这句话也可以逆向判断，例如<code>list.sort</code>的返回值是None，那我们就可以知道得到的列表还是原来的列表，并没有新值产生，当然只针对内置的数据类型的基本方法。</p><p>继续展开对例子的描述</p><p><code>列表的方法：list.sort 与内置函数sorted()对比</code></p><p><strong>最大的区别就是</strong>，<code>list.sort</code>是在原列表上直接排序，返回值None，内置函数<code>sorted</code>是创建一个新列表，源列表不动，返回值为新排序列表</p><p>这两种方法都有两个可选参数：</p><ul><li>reverse<ul><li>默认False，降序，可改为True，升序</li></ul></li><li>key<ul><li>一个只有一个参数的函数，不写的话，就是按自己的值排序，比如<code>key=str.lower</code>来实现忽略大小写，注意这里不能加括号调用</li></ul></li></ul><pre class=" language-python"><code class="language-python">fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span>sorted<span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">]</span> ➊fruits<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span> ➋sorted<span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">]</span> ➌sorted<span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> key<span class="token operator">=</span>len<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">]</span> ➍sorted<span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> key<span class="token operator">=</span>len<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">]</span> ➎fruits<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span> ➏fruits<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> ➐fruits<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">]</span> ➑</code></pre><h2 id="第三章：字典和集合"><a href="#第三章：字典和集合" class="headerlink" title="第三章：字典和集合"></a>第三章：字典和集合</h2><h3 id="1-映射的弹性键查询"><a href="#1-映射的弹性键查询" class="headerlink" title="1 映射的弹性键查询"></a>1 映射的弹性键查询</h3><p>如果有这么一个需求，在字典中查询一个值，如果查询不到，给我们返回一个特定的值。完成这个需求有两个方法，一是使用defaultdict这个类型而不是使用普通的dict，二是自己写一个新的dict继承dict然后重写<code>__missing__</code>方法</p><p>注意：defaultdict实现的原理就是重写了<code>__missing__</code>方法，所以也只会在[]取值找不到的时候调用</p><h4 id="1-1-defaultdict的使用"><a href="#1-1-defaultdict的使用" class="headerlink" title="1.1 defaultdict的使用"></a>1.1 defaultdict的使用</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> collections<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'没有找到指定的值'</span><span class="token comment" spellcheck="true"># defaultdict如果索引找不到值会调用实例化的时候传入的第一个可调用对象</span><span class="token comment" spellcheck="true"># 将它的返回值作为a['xx']的返回值返回</span>a <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token punctuation">:</span><span class="token string">'没有找到指定的值'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a = collections.defaultdict(test,{})</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">'xx'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="1-2-missing-使用"><a href="#1-2-missing-使用" class="headerlink" title="1.2 __missing__使用"></a>1.2 <code>__missing__</code>使用</h4><p>在映射类型找不到键的时候都会牵扯到<code>__missing__</code>，虽然dict没有写这个方法，但是它知道有这个东西的存在，也就是如果我们重写了这个方法，并继承dict，那在<code>__getitem__</code>进行取值的时候只要找不到，就会自动调用这个方法而不是返回报错信息。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CommonDict</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__missing__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'{key}这种键不存在于该字典中'</span>dict1 <span class="token operator">=</span> CommonDict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span>这种键不存在于该字典中</code></pre><h3 id="2-不可变的映射类型"><a href="#2-不可变的映射类型" class="headerlink" title="2 不可变的映射类型"></a>2 不可变的映射类型</h3><p>标准库中所有的映射类型都是可变的，但是我们可能会有这样的需求，不能让用户错误的修改某个映射，在现实中实现这样的需求有一个很具体的例子：如果我们有一个密码锁，别人能看到密码锁，但是不能修改，我们自己也能看到但是能修改。这种情况只要在密码锁上放一层玻璃覆盖，外人是无法隔着玻璃修改原值的，而我们可以把玻璃拿掉去修改原值，且原值和玻璃后的值应当是同步更新的。</p><p>从 Python 3.3 开始，<strong>types</strong> 模块中引入了一个封装类名叫 <strong>MappingProxyType</strong>。如果给这个类 一个映射，它会返回一个只读的映射视图。虽然是个只读视图，但是它是动态的。这意味 着如果对原映射做出了改动，我们通过这个视图可以观察到，但是无法通过这个视图对原 映射做出修改。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> types <span class="token keyword">import</span> MappingProxyTyped <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'hz'</span><span class="token punctuation">}</span>d_map <span class="token operator">=</span> MappingProxyType<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d_map<span class="token punctuation">,</span>type<span class="token punctuation">(</span>d_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'hz'</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'mappingproxy'</span><span class="token operator">></span>d<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>  <span class="token operator">=</span><span class="token number">18</span><span class="token keyword">print</span><span class="token punctuation">(</span>d_map<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;流畅的python学习记录&quot;&gt;&lt;a href=&quot;#流畅的python学习记录&quot; class=&quot;headerlink&quot; title=&quot;流畅的python学习记录&quot;&gt;&lt;/a&gt;流畅的python学习记录&lt;/h1&gt;&lt;h2 id=&quot;第一章：python数据模型&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://huang_zhao.gitee.io/task/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://huang_zhao.gitee.io/task/2021/06/27/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis/"/>
    <id>http://huang_zhao.gitee.io/task/2021/06/27/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis/</id>
    <published>2021-06-27T06:10:11.000Z</published>
    <updated>2021-06-27T09:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>[TOC]</p><h2 id="一、redis简介"><a href="#一、redis简介" class="headerlink" title="一、redis简介"></a>一、redis简介</h2><p>介绍：</p><p>redis是一个<strong>key-value</strong>存储系统。和Memcached类似，它支持存储的value类型相对更多，包括<strong>string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）</strong>。这些数据类型都支持<strong>push/pop、add/remove</strong>及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)<strong>同步</strong></p><p>Q：为什么redis这么快</p><p>A：用了io多路复用减少了io操作对资源的消耗，在内存中使用，单线程单进程，避免了线程之前数据交互的资源消耗</p><h3 id="1-使用redis的好处"><a href="#1-使用redis的好处" class="headerlink" title="1 使用redis的好处"></a>1 使用redis的好处</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比mysql这种关系型数据库速度更快，原因是查找方式和存储方式</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 支持丰富数据类型，支持string，list，set，sorted set，hash<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行<span class="token comment" spellcheck="true"># 事务性支持也没那么好，如果需要事务严格遵守的流程，比如转账功能，必定用的还是mysql等</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</code></pre><h3 id="2-redis相比于memcached的优势"><a href="#2-redis相比于memcached的优势" class="headerlink" title="2 redis相比于memcached的优势"></a>2 redis相比于memcached的优势</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> redis的速度比memcached快很多（其实差不多，分具体场景）<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> redis可以持久化其数据</code></pre><h3 id="3-redis常见的性能问题和解决方案"><a href="#3-redis常见的性能问题和解决方案" class="headerlink" title="3 redis常见的性能问题和解决方案"></a>3 redis常见的性能问题和解决方案</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 尽量避免在压力很大的主库上增加从库<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <span class="token operator">&lt;</span><span class="token operator">-</span> Slave1 <span class="token operator">&lt;</span><span class="token operator">-</span> Slave2 <span class="token operator">&lt;</span><span class="token operator">-</span> Slave3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</code></pre><h3 id="4-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"><a href="#4-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据" class="headerlink" title="4 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"></a>4 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h3><pre class=" language-python"><code class="language-python"> 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 <span class="token number">6</span>种数据淘汰策略：voltile<span class="token operator">-</span>lru：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中挑选最近最少使用的数据淘汰volatile<span class="token operator">-</span>ttl：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中挑选将要过期的数据淘汰volatile<span class="token operator">-</span>random：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中任意选择数据淘汰allkeys<span class="token operator">-</span>lru：从数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dict）中挑选最近最少使用的数据淘汰allkeys<span class="token operator">-</span>random：从数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dict）中任意选择数据淘汰no<span class="token operator">-</span>enviction（驱逐）：禁止驱逐数据</code></pre><h3 id="5-redis-最适合的场景"><a href="#5-redis-最适合的场景" class="headerlink" title="5 redis 最适合的场景"></a>5 redis 最适合的场景</h3><pre class=" language-python"><code class="language-python">Redis最适合所有数据<span class="token keyword">in</span><span class="token operator">-</span>momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk<span class="token operator">-</span>backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached<span class="token punctuation">,</span>何时使用Redis呢?       如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：     <span class="token number">1</span> 、Redis不仅仅支持简单的k<span class="token operator">/</span>v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。     <span class="token number">2</span> 、Redis支持数据的备份，即master<span class="token operator">-</span>slave模式的数据备份。     <span class="token number">3</span> 、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。（<span class="token number">1</span>）、会话缓存（Session Cache）最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。（<span class="token number">2</span>）、全页缓存（FPC）除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp<span class="token operator">-</span>redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。（<span class="token number">3</span>）、队列Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push<span class="token operator">/</span>pop 操作。如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。（<span class="token number">4</span>），排行榜<span class="token operator">/</span>计数器Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的<span class="token number">10</span>个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：ZRANGE user_scores <span class="token number">0</span> <span class="token number">10</span> WITHSCORESAgora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。（<span class="token number">5</span>）、发布<span class="token operator">/</span>订阅最后（但肯定不是最不重要的）是Redis的发布<span class="token operator">/</span>订阅功能。发布<span class="token operator">/</span>订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布<span class="token operator">/</span>订阅的脚本触发器，甚至用Redis的发布<span class="token operator">/</span>订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。</code></pre><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>安装好redis后，顺便可以安装一个Another Redis Desktop Manager，这是redis版的navicat</p><ul><li><code>redis-server</code>启动服务端（通常会自动设成自启服务，不需要手动开）</li><li><code>redis-cli</code>启动客户端</li><li>python中安装操作redis的模块  <code>pip install redis</code></li></ul><h3 id="1-python操作redis之普通链接"><a href="#1-python操作redis之普通链接" class="headerlink" title="1 python操作redis之普通链接"></a>1 python操作redis之普通链接</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token comment" spellcheck="true"># Redis实例化有很多可以设定的参数，其中decode_responses=True是把拿到的二进制数据转换成字符串</span>conn <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'hz'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="2-python操作redis之连接池"><a href="#2-python操作redis之连接池" class="headerlink" title="2 python操作redis之连接池"></a>2 python操作redis之连接池</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用连接池来管理链接对象，如果每一次请求都要建立链接，当请求量很大时会造成内存堵塞</span><span class="token comment" spellcheck="true"># 连接池的连接数量是固定的，超过这个最大链接数的其他链接只能在外面等着</span><span class="token comment" spellcheck="true"># 这里注意连接池要做成单例模式，不然每次链接进来都要实例化一个连接池，那限定的意义就没了</span><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>r<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'Bar'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="三、redis字符串操作"><a href="#三、redis字符串操作" class="headerlink" title="三、redis字符串操作"></a>三、redis字符串操作</h2><p><strong>set(name, value, ex=None, px=None, nx=False, xx=False)</strong></p><pre><code>在Redis中设置值，默认，不存在则创建，存在则修改参数：     ex，过期时间（秒）     px，过期时间（毫秒）     nx，如果设置为True，则只有name不存在时，当前set操作才执行,值存在，就修改不了，执行没效果     xx，如果设置为True，则只有name存在时，当前set操作才执行，值存在才能修改，值不存在，不会设置新值</code></pre><p><strong>setnx(name, value)</strong></p><pre><code>设置值，只有name不存在时，执行设置操作（添加）,如果存在，不会修改</code></pre><p><strong>setex(name, value, time)</strong></p><pre><code># 设置值# 参数：    # time，过期时间（数字秒 或 timedelta对象）</code></pre><p><strong>psetex(name, time_ms, value)</strong></p><pre><code># 设置值# 参数：    # time_ms，过期时间（数字毫秒 或 timedelta对象</code></pre><p><strong>mset(*args, \</strong>kwargs)**</p><pre><code>批量设置值如：    mset(k1=&#39;v1&#39;, k2=&#39;v2&#39;)    或    mget(&#123;&#39;k1&#39;: &#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;)</code></pre><p><strong>get(name)</strong></p><pre><code>获取值</code></pre><p><strong>mget(keys, *args)</strong></p><pre><code>批量获取如：    mget(&#39;k1&#39;, &#39;k2&#39;)    或    r.mget([&#39;k3&#39;, &#39;k4&#39;])</code></pre><p><strong>getset(name, value)</strong></p><pre><code>设置新值并获取原来的值</code></pre><p><strong>getrange(key, start, end)</strong></p><pre><code># 获取子序列（根据字节获取，非字符）# 参数：    # name，Redis 的 name    # start，起始位置（字节）    # end，结束位置（字节）# 如： &quot;刘清政&quot; ，0-3表示 &quot;刘&quot;</code></pre><p><strong>setrange(name, offset, value)</strong></p><pre><code># 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）# 参数：    # offset，字符串的索引，字节（一个汉字三个字节）    # value，要设置的值</code></pre><p><strong>setbit(name, offset, value)</strong></p><pre><code># 对name对应值的二进制表示的位进行操作# 参数：    # name，redis的name    # offset，位的索引（将值变换成二进制后再进行索引）    # value，值只能是 1 或 0# 注：如果在Redis中有一个对应： n1 = &quot;foo&quot;，        那么字符串foo的二进制表示为：01100110 01101111 01101111    所以，如果执行 setbit(&#39;n1&#39;, 7, 1)，则就会将第7位设置为1，        那么最终二进制则变成 01100111 01101111 01101111，即：&quot;goo&quot;</code></pre><p><strong>getbit(name, offset)</strong></p><pre><code># 获取name对应的值的二进制表示中的某位的值 （0或1）</code></pre><p><strong>bitcount(key, start=None, end=None)</strong></p><pre><code># 获取name对应的值的二进制表示中 1 的个数# 参数：    # key，Redis的name    # start，位起始位置    # end，位结束位置</code></pre><p><strong>bitop(operation, dest, *keys)</strong></p><pre><code># 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值# 参数：    # operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）    # dest, 新的Redis的name    # *keys,要查找的Redis的name# 如：    bitop(&quot;AND&quot;, &#39;new_name&#39;, &#39;n1&#39;, &#39;n2&#39;, &#39;n3&#39;)    # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中</code></pre><p><strong>strlen(name)</strong></p><pre><code># 返回name对应值的字节长度（一个汉字3个字节）</code></pre><p><strong>incr(self, name, amount=1)</strong></p><pre><code># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。# 参数：    # name,Redis的name    # amount,自增数（必须是整数）# 注：同incrby</code></pre><p><strong>incrbyfloat(self, name, amount=1.0)</strong></p><pre><code># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。# 参数：    # name,Redis的name    # amount,自增数（浮点型）</code></pre><p><strong>decr(self, name, amount=1)</strong></p><pre><code># 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。# 参数：    # name,Redis的name    # amount,自减数（整数）</code></pre><p><strong>append(key, value)</strong></p><pre><code># 在redis name对应的值后面追加内容# 参数：    key, redis的name    value, 要追加的字符串</code></pre><p><strong>总结</strong>：</p><p>需要注意的操作：</p><ul><li>set  存值，有很多可以修改的参数，主要是可以设置超时时间</li><li>get  获取值，没有返回None</li><li>mset 批量存值，可以传一个字典，也可直接传关键字参数</li><li>mget 批量取值</li><li>incr name存在就自增，没有就新增，并设置自增最小值</li><li>decr 自减，本质上和上面一样，甚至incr设置为负数也能完成一样的操作</li><li>append 对指定的key的value拼接字符串</li></ul><h2 id="四、redis哈希类型操作"><a href="#四、redis哈希类型操作" class="headerlink" title="四、redis哈希类型操作"></a>四、redis哈希类型操作</h2><p><strong>hset(name, key, value)</strong></p><pre><code># name对应的hash中设置一个键值对（不存在，则创建；否则，修改）# 参数：    # name，redis的name    # key，name对应的hash中的key    # value，name对应的hash中的value# 注：    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</code></pre><p><strong>hmset(name, mapping)</strong></p><pre><code># 在name对应的hash中批量设置键值对# 参数：    # name，redis的name    # mapping，字典，如：&#123;&#39;k1&#39;:&#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;# 如：    # r.hmset(&#39;xx&#39;, &#123;&#39;k1&#39;:&#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;)</code></pre><p><strong>hget(name,key)</strong></p><pre><code># 在name对应的hash中获取根据key获取value</code></pre><p><strong>hmget(name, keys, *args)</strong></p><pre><code># 在name对应的hash中获取多个key的值# 参数：    # name，reids对应的name    # keys，要获取key集合，如：[&#39;k1&#39;, &#39;k2&#39;, &#39;k3&#39;]    # *args，要获取的key，如：k1,k2,k3# 如：    # r.mget(&#39;xx&#39;, [&#39;k1&#39;, &#39;k2&#39;])    # 或    # print r.hmget(&#39;xx&#39;, &#39;k1&#39;, &#39;k2&#39;)</code></pre><p><strong>hgetall(name)</strong></p><pre><code># 获取name对应hash的所有键值print(re.hgetall(&#39;xxx&#39;).get(b&#39;name&#39;))</code></pre><p><strong>hlen(name)</strong></p><pre><code># 获取name对应的hash中键值对的个数</code></pre><p><strong>hkeys(name)</strong></p><pre><code># 获取name对应的hash中所有的key的值</code></pre><p><strong>hvals(name)</strong></p><pre><code># 获取name对应的hash中所有的value的值</code></pre><p><strong>hexists(name, key)</strong></p><pre><code># 检查name对应的hash是否存在当前传入的key</code></pre><p><strong>hdel(name,*keys)</strong></p><pre><code># 将name对应的hash中指定key的键值对删除print(re.hdel(&#39;xxx&#39;,&#39;sex&#39;,&#39;name&#39;))</code></pre><p><strong>hincrby(name, key, amount=1)</strong></p><pre><code># 自增name对应的hash中的指定key的值，不存在则创建key=amount# 参数：    # name，redis中的name    # key， hash对应的key    # amount，自增数（整数）</code></pre><p><strong>hincrbyfloat(name, key, amount=1.0)</strong></p><pre><code># 自增name对应的hash中的指定key的值，不存在则创建key=amount# 参数：    # name，redis中的name    # key， hash对应的key    # amount，自增数（浮点数）# 自增name对应的hash中的指定key的值，不存在则创建key=amount</code></pre><p><strong>hscan(name, cursor=0, match=None, count=None)</strong></p><pre><code># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆# 参数：    # name，redis的name    # cursor，游标（基于游标分批取获取数据）    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # 第一次：cursor1, data1 = r.hscan(&#39;xx&#39;, cursor=0, match=None, count=None)    # 第二次：cursor2, data1 = r.hscan(&#39;xx&#39;, cursor=cursor1, match=None, count=None)    # ...    # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</code></pre><p><strong>hscan_iter(name, match=None, count=None)</strong></p><pre><code># 利用yield封装hscan创建生成器，实现分批去redis中获取数据# 参数：    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # for item in r.hscan_iter(&#39;xx&#39;):    #     print item</code></pre><p><strong>总结：</strong></p><p>需要注意的操作：</p><ul><li>hset 给name的value设置{key,value}的值，存在就修改</li><li>hget 获取值</li><li>hmset 批量设置，mapping参数放一个字典</li><li>hmget 批量获取</li><li>hincrby 自增name对应的key值，不存在则创建key：amout（自增数），只能自增value是数字的类型</li><li>hgetall 获取name对于的hash的所有键值</li><li>hscan_iter  利用yield创建生成器，分批去redis中取值</li></ul><h2 id="五、redis链表类型操作"><a href="#五、redis链表类型操作" class="headerlink" title="五、redis链表类型操作"></a>五、redis链表类型操作</h2><p><strong>lpush(name,values)</strong></p><pre><code># 在name对应的list中添加元素，每个新的元素都添加到列表的最左边# 如：    # r.lpush(&#39;oo&#39;, 11,22,33)    # 保存顺序为: 33,22,11# 扩展：    # rpush(name, values) 表示从右向左操作</code></pre><p><strong>lpushx(name,value)</strong></p><pre><code># 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边# 更多：    # rpushx(name, value) 表示从右向左操作</code></pre><p><strong>llen(name)</strong></p><pre><code># name对应的list元素的个数</code></pre><p><strong>linsert(name, where, refvalue, value))</strong></p><pre><code># 在name对应的列表的某一个值前或后插入一个新值# 参数：    # name，redis的name    # where，BEFORE或AFTER(小写也可以)    # refvalue，标杆值，即：在它前后插入数据（如果存在多个标杆值，以找到的第一个为准）    # value，要插入的数据</code></pre><p><strong>r.lset(name, index, value)</strong></p><pre><code># 对name对应的list中的某一个索引位置重新赋值# 参数：    # name，redis的name    # index，list的索引位置    # value，要设置的值</code></pre><p><strong>r.lrem(name, value, num)</strong></p><pre><code># 在name对应的list中删除指定的值# 参数：    # name，redis的name    # value，要删除的值    # num，  num=0，删除列表中所有的指定值；           # num=2,从前到后，删除2个；           # num=-2,从后向前，删除2个</code></pre><p><strong>lpop(name)</strong></p><pre><code># 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素# 更多：    # rpop(name) 表示从右向左操作</code></pre><p><strong>lindex(name, index)</strong></p><pre><code>在name对应的列表中根据索引获取列表元素</code></pre><p><strong>lrange(name, start, end)</strong></p><pre><code># 在name对应的列表分片获取数据# 参数：    # name，redis的name    # start，索引的起始位置    # end，索引结束位置  print(re.lrange(&#39;aa&#39;,0,re.llen(&#39;aa&#39;)))</code></pre><p><strong>ltrim(name, start, end)</strong></p><pre><code># 在name对应的列表中移除没有在start-end索引之间的值# 参数：    # name，redis的name    # start，索引的起始位置    # end，索引结束位置（大于列表长度，则代表不移除任何）</code></pre><p><strong>rpoplpush(src, dst)</strong></p><pre><code># 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边# 参数：    # src，要取数据的列表的name    # dst，要添加数据的列表的name</code></pre><p><strong>blpop(keys, timeout)</strong></p><pre><code># 将多个列表排列，按照从左到右去pop对应列表的元素# 参数：    # keys，redis的name的集合    # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞# 更多：    # r.brpop(keys, timeout)，从右向左获取数据爬虫实现简单分布式：多个url放到列表里，往里不停放URL，程序循环取值，但是只能一台机器运行取值，可以把url放到redis中，多台机器从redis中取值，爬取数据，实现简单分布式</code></pre><p><strong>brpoplpush(src, dst, timeout=0)</strong></p><pre><code># 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧# 参数：    # src，取出并要移除元素的列表对应的name    # dst，要插入元素的列表对应的name    # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞</code></pre><p><strong>自定义增量迭代</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</span>    <span class="token comment" spellcheck="true"># 1、获取name对应的所有列表</span>    <span class="token comment" spellcheck="true"># 2、循环列表</span><span class="token comment" spellcheck="true"># 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</span><span class="token keyword">import</span> redisconn<span class="token operator">=</span>redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># conn.lpush('test',*[1,2,3,4,45,5,6,7,7,8,43,5,6,768,89,9,65,4,23,54,6757,8,68])</span><span class="token comment" spellcheck="true"># conn.flushall()</span><span class="token keyword">def</span> <span class="token function">scan_list</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    index<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data_list<span class="token operator">=</span>conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span>name<span class="token punctuation">,</span>index<span class="token punctuation">,</span>count<span class="token operator">+</span>index<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data_list<span class="token punctuation">:</span>            <span class="token keyword">return</span>        index<span class="token operator">+=</span>count        <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            <span class="token keyword">yield</span> item<span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> scan_list<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p><strong>总结</strong>：</p><p>需要注意的操作：</p><ul><li>lpush 每个新元素都添加到列表的最左边，最早来的在最后，rpush与之相反</li><li>lpop 删除name对应列表的左侧的第一个值，并返回，rpop与之相反</li><li>blpop 将多个列表排列从左到右pop对于列表的元素阻塞时间内如果还有新增数据，就会继续pop</li><li>lrange 切片start开始，end结束，闭区间</li><li>llen 统计元素个数</li></ul><h2 id="六、其他操作"><a href="#六、其他操作" class="headerlink" title="六、其他操作"></a>六、其他操作</h2><p><strong>delete(*names)</strong></p><pre><code># 根据删除redis中的任意数据类型</code></pre><p><strong>exists(name)</strong></p><pre><code># 检测redis的name是否存在</code></pre><p><strong>keys(pattern=’*‘)</strong></p><pre><code># 根据模型获取redis的name（其实就是通过正则匹配）# 更多：    # KEYS * 匹配数据库中所有 key 。    # KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。    # KEYS h*llo 匹配 hllo 和 heeeeello 等。    # KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo </code></pre><p><strong>expire(name ,time)</strong></p><pre><code># 为某个redis的某个name设置超时时间</code></pre><p><strong>rename(src, dst)</strong></p><pre><code># 对redis的name重命名为</code></pre><p><strong>move(name, db))</strong></p><pre><code># 将redis的某个值移动到指定的db下（换数据库）</code></pre><p><strong>randomkey()</strong></p><pre><code># 随机获取一个redis的name（不删除）（抽奖）</code></pre><p><strong>type(name)</strong></p><pre><code># 获取name对应值的类型</code></pre><p><strong>scan(cursor=0, match=None, count=None)</strong><br><strong>scan_iter(match=None, count=None)</strong></p><pre><code># 同字符串操作，用于增量迭代获取key</code></pre><h2 id="七、管道"><a href="#七、管道" class="headerlink" title="七、管道"></a>七、管道</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis支持事务</span><span class="token comment" spellcheck="true"># 管道实现事务</span><span class="token comment" spellcheck="true"># import redis</span><span class="token comment" spellcheck="true"># pool = redis.ConnectionPool(host='127.0.0.1', port=6379)</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># conn = redis.Redis(connection_pool=pool)</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># # pipe = r.pipeline(transaction=False)</span><span class="token comment" spellcheck="true"># pipe = conn.pipeline(transaction=True)</span><span class="token comment" spellcheck="true"># pipe.multi() # 开启管道，开启事务</span><span class="token comment" spellcheck="true"># pipe.set('name', 'alex')</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># pipe.set('role', 'sb')</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># pipe.execute()  # 这句话，才真正的去执行，结束管道</span></code></pre><h2 id="八、django中使用redis"><a href="#八、django中使用redis" class="headerlink" title="八、django中使用redis"></a>八、django中使用redis</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一（通用方式）</span><span class="token comment" spellcheck="true"># 方式二：django-redis</span>    <span class="token operator">-</span>pip install django<span class="token operator">-</span>redis    <span class="token operator">-</span>setting中配置        CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span>                    <span class="token string">"LOCATION"</span><span class="token punctuation">:</span> <span class="token string">"redis://127.0.0.1:6379"</span><span class="token punctuation">,</span>                    <span class="token string">"OPTIONS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"CLIENT_CLASS"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.client.DefaultClient"</span><span class="token punctuation">,</span>                        <span class="token string">"CONNECTION_POOL_KWARGS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"max_connections"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true"># "PASSWORD": "123",</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>       <span class="token operator">-</span>使用两种方式        <span class="token number">1</span> 使用cache        <span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache        cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>         <span class="token number">2</span> 直接使用conn对象        <span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connection        conn <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="九、接口缓存"><a href="#九、接口缓存" class="headerlink" title="九、接口缓存"></a>九、接口缓存</h2><p>接口缓存简单来说就是把需要经常从mysql数据查的数据放到redis等内存数据库（快速读取）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 首页轮播图数据缓存到redis中</span><span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># response=super().list(request, *args, **kwargs)</span>    <span class="token comment" spellcheck="true"># 把data的数据加缓存</span>    <span class="token comment" spellcheck="true"># 1 先去缓存拿数据</span>    banner_list<span class="token operator">=</span>cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> banner_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'走数据库了'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 缓存中没有，去数据库拿</span>        response <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>list<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 加到缓存</span>        cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token operator">=</span>banner_list<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、redis简介&quot;&gt;&lt;a href=&quot;#一、redis简介&quot; class=&quot;h</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="redis" scheme="http://huang_zhao.gitee.io/task/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>django知识点扩展</title>
    <link href="http://huang_zhao.gitee.io/task/2021/05/15/python/%E6%A1%86%E6%9E%B6/django%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%89%A9%E5%B1%95/"/>
    <id>http://huang_zhao.gitee.io/task/2021/05/15/python/%E6%A1%86%E6%9E%B6/django%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%89%A9%E5%B1%95/</id>
    <published>2021-05-15T07:11:23.000Z</published>
    <updated>2021-06-27T09:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django-知识点扩展"><a href="#django-知识点扩展" class="headerlink" title="django 知识点扩展"></a>django 知识点扩展</h1><h2 id="一、模型部分"><a href="#一、模型部分" class="headerlink" title="一、模型部分"></a>一、模型部分</h2><h3 id="1-关于ForeignKey"><a href="#1-关于ForeignKey" class="headerlink" title="1 关于ForeignKey"></a>1 关于ForeignKey</h3><h4 id="1-1-级联"><a href="#1-1-级联" class="headerlink" title="1.1 级联"></a>1.1 级联</h4><p>在django2版本以上，外键关联的数据需要设置级联更新</p><pre class=" language-python"><code class="language-python">xxx <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>关联的表<span class="token punctuation">,</span>on_delete<span class="token operator">=</span>model<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 级联操作需要注意，如果是一对一的关联，那没问题应该级联删除</span><span class="token comment" spellcheck="true"># 但如果是一对多，删除了一个出版社，就把这个出版社的所有书都删了，显然不合理，因为书和出版社只是逻辑联系，不是真的物理关联</span><span class="token comment" spellcheck="true"># 所以通常我们会断开一对多的关联表</span> publish <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>to<span class="token operator">=</span><span class="token string">'Publish'</span><span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>DO_NOTHING<span class="token punctuation">,</span>db_constraint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># db_constraint=False 表示这个外键只有逻辑关联，没有实质的关联</span><span class="token comment" spellcheck="true"># 级联也应当修改</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>DO_NOTHING <span class="token comment" spellcheck="true"># 删除出版社的时候，书表什么都不做</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>CASCADE <span class="token comment" spellcheck="true"># 级联删除</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>SET_NULL <span class="token comment" spellcheck="true"># 前提是这个字段可以为空</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>SET_DEFAULT <span class="token comment" spellcheck="true"># 前提是有默认值</span></code></pre><h4 id="1-2-参数"><a href="#1-2-参数" class="headerlink" title="1.2 参数"></a>1.2 参数</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># to 设置要关联的表</span><span class="token comment" spellcheck="true"># to_field 设置要关联表的字段</span><span class="token comment" spellcheck="true"># related_name 反向查询的时候替代原来的‘表名_set’</span><span class="token comment" spellcheck="true"># db_constraint 是否在数据库中创建外键约束，默认为True</span></code></pre><h3 id="2-关于内部类"><a href="#2-关于内部类" class="headerlink" title="2 关于内部类"></a>2 关于内部类</h3><p>内部类class Meta提供模型的元数据，元数据不属于任何字段的东西，是对整张表的描述</p><p>具体拥有的参数</p><ul><li><p>ordering 排序选项</p><ul><li><pre class=" language-python"><code class="language-python">ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要注意排序的根据是一个元组，所以如果只有一个根据就要加逗号，排序如果出现重复就会根据第二个元素的排序依据进行排序</span></code></pre></li></ul></li></ul><ul><li><p>db_table 数据库表名</p><ul><li><pre class=" language-python"><code class="language-python">db_table <span class="token operator">=</span> <span class="token string">'数据库表名'</span><span class="token comment" spellcheck="true"># 注意此处修改表名是真实的在数据库中的表名被修改了，所以需要重新进行数据迁移</span></code></pre></li></ul></li><li><p>verbose_name_plural/verbose_name 单复数名称</p><ul><li>这是在admin后台管理的时候显示的名称，复数后缀会在中文后加s通常用中文的话就用单数</li></ul></li></ul><p><strong>其他相关字段</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>        nid <span class="token operator">=</span> models<span class="token punctuation">.</span>AutoField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 设置成虚拟表，通常用于通用表，添加一些每个表必有的字段，让其他表继承</span>            abstract <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true"># 数据库中生成的表名称 默认 app名称 + 下划线 + 类名</span>            db_table <span class="token operator">=</span> <span class="token string">"table_name"</span>            <span class="token comment" spellcheck="true"># 联合索引</span>            index_together <span class="token operator">=</span> <span class="token punctuation">[</span>                <span class="token punctuation">(</span><span class="token string">"pub_date"</span><span class="token punctuation">,</span> <span class="token string">"deadline"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 联合唯一索引</span>            unique_together <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span> <span class="token string">"restaurant"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>            ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># admin中显示的表名称</span>            verbose_name<span class="token operator">=</span><span class="token string">'哈哈'</span>            <span class="token comment" spellcheck="true"># verbose_name加s</span>            verbose_name_plural<span class="token operator">=</span>verbose_name</code></pre><h2 id="二、视图函数部分"><a href="#二、视图函数部分" class="headerlink" title="二、视图函数部分"></a>二、视图函数部分</h2><h3 id="1-关于markdown使用"><a href="#1-关于markdown使用" class="headerlink" title="1 关于markdown使用"></a>1 关于markdown使用</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> markdown<span class="token comment" spellcheck="true"># 将markdown语法渲染成html样式</span>    article<span class="token punctuation">.</span>body <span class="token operator">=</span> markdown<span class="token punctuation">.</span>markdown<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">,</span>        extensions<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true"># 包含 缩写、表格等常用扩展</span>        <span class="token string">'markdown.extensions.extra'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 语法高亮扩展</span>        <span class="token string">'markdown.extensions.codehilite'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里需要注意，原本的文本格式的文章现在转化成了html代码，如果要展示到前端，就要对数据进行转义</span><span class="token comment" spellcheck="true"># 复习:转义的两种方式</span><span class="token number">1</span> 直接在前端参数后面加safe过滤器<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> article<span class="token punctuation">.</span>body<span class="token operator">|</span>safe <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token number">2</span> 在后端给html代码做标记<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>safestring <span class="token keyword">import</span> mark_saferes <span class="token operator">=</span> mark_safe<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><h3 id="2、queryset对象"><a href="#2、queryset对象" class="headerlink" title="2、queryset对象"></a>2、queryset对象</h3><h4 id="2-1-可切片"><a href="#2-1-可切片" class="headerlink" title="2.1 可切片"></a>2.1 可切片</h4><p>用python的切片语法去限制查询的数据条数</p><pre class=" language-python"><code class="language-python">Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># (LIMIT 5)</span>Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># (OFFSET 5 LIMIT 5)</span></code></pre><p>不支持负的索引，切片返回的是一个新的查询集，是由原来的查询集筛选得到的。</p><h4 id="2-2-可迭代"><a href="#2-2-可迭代" class="headerlink" title="2.2 可迭代"></a>2.2 可迭代</h4><p>取出的是每一个数据对象</p><h4 id="2-3-惰性查询"><a href="#2-3-惰性查询" class="headerlink" title="2.3 惰性查询"></a>2.3 惰性查询</h4><p>简单来说就是如果只是把查询结果赋值给了一个变量，而没使用这个变量的话，查询语句是不会执行的，只有真正对数据进行操作了才会回过头来执行查询语句。</p><h4 id="2-4-缓存机制？"><a href="#2-4-缓存机制？" class="headerlink" title="2.4 缓存机制？"></a>2.4 缓存机制？</h4><h4 id="2-5-exists-与iterator-方法"><a href="#2-5-exists-与iterator-方法" class="headerlink" title="2.5 exists()与iterator()方法"></a>2.5 exists()与iterator()方法</h4><p><strong>exists</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 由于简单的if判断也会把整个数据对象集放入cache中，但是我们不需要判断这么多就可以用到exists</span><span class="token keyword">if</span> 查询集<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 相当于只从查询集中拿出一条数据进行判断</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><strong>iterator</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询得到的数据集可能会非常大，一次性放入内存就会影响性能，我们可以通过iterator把数据集做成一个迭代器</span><span class="token comment" spellcheck="true"># 注意做成迭代器的特点，取完数据后数据需要重新查询，无法回头</span><span class="token comment" spellcheck="true"># 每次在内存中只会存在一个数据</span>objs <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterator<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面两种方法都是为了防止出现cache，所以他可能会增多了我们对数据库的查询，没有完美的方法只有合适的方法。</p><h4 id="2-6-orm额外方法"><a href="#2-6-orm额外方法" class="headerlink" title="2.6 orm额外方法"></a>2.6 orm额外方法</h4><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>object<span class="token punctuation">.</span>update_or_create<span class="token punctuation">(</span>aa<span class="token operator">=</span>aa<span class="token punctuation">,</span>defaults<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'bb=bb'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拿第一个参数作为查询依据，如果存在则修改，如果不存在则新增</span></code></pre><h3 id="3-extra"><a href="#3-extra" class="headerlink" title="3 extra"></a>3 extra</h3><p>由于orm对mysql的封装程度太高，有些情况下我们需要用一些复杂的查询就可以通过extra来对查询注入新的sql语句</p><p>extra可以指定一个或多个 <code>参数</code>,例如 <code>select</code>, <code>where</code> or <code>tables</code>. 这些参数都不是必须的，但是你至少要使用一个!要注意这些额外的方式对不同的数据库引擎可能存在移植性问题.(因为你在显式的书写SQL语句),除非万不得已,尽量避免这样做</p><h4 id="4-1参数之select"><a href="#4-1参数之select" class="headerlink" title="4.1参数之select"></a>4.1参数之select</h4><p>The <code>select</code> 参数可以让你在 <code>SELECT</code> 从句中添加其他字段信息，它应该是一个字典，存放着属性名到 SQL 从句的映射。</p><pre class=" language-python"><code class="language-python">queryResult<span class="token operator">=</span>models<span class="token punctuation">.</span>Article　　　　　　　　　　　<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'is_recent'</span><span class="token punctuation">:</span> <span class="token string">"create_time > '2017-09-05'"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>结果集中每个 Entry 对象都有一个额外的属性is_recent, 它是一个布尔值，表示 Article对象的create_time 是否晚于2017-09-05.</p><p>练习：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># in sqlite:</span>    article_obj<span class="token operator">=</span>models<span class="token punctuation">.</span>Article<span class="token punctuation">.</span>objects　　　　　　　　　　　　　　<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>nid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>　　　　　　　　　　　　　　<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"standard_time"</span><span class="token punctuation">:</span><span class="token string">"strftime('%%Y-%%m-%%d',create_time)"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>　　　　　　　　　　　　　　<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">"standard_time"</span><span class="token punctuation">,</span><span class="token string">"nid"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>article_obj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;QuerySet [{'title': 'MongoDb 入门教程', 'standard_time': '2017-09-03', 'nid': 1}]></span></code></pre><h4 id="4-2参数之where-tables"><a href="#4-2参数之where-tables" class="headerlink" title="4.2参数之where / tables"></a>4.2参数之<code>where</code> / <code>tables</code></h4><p>您可以使用<code>where</code>定义显式SQL <code>WHERE</code>子句 - 也许执行非显式连接。您可以使用<code>tables</code>手动将表添加到SQL <code>FROM</code>子句。</p><p><code>where</code>和<code>tables</code>都接受字符串列表。所有<code>where</code>参数均为“与”任何其他搜索条件。</p><p>举例来讲：</p><pre class=" language-python"><code class="language-python">queryResult<span class="token operator">=</span>models<span class="token punctuation">.</span>Article　　　　　　　　　　　<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>where<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'nid in (1,3) OR title like "py%" '</span><span class="token punctuation">,</span><span class="token string">'nid>2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">extra<span class="token punctuation">,</span> 额外查询条件以及相关表，排序                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># id name age ut_id</span>                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>self<span class="token punctuation">,</span> select<span class="token operator">=</span>None<span class="token punctuation">,</span> where<span class="token operator">=</span>None<span class="token punctuation">,</span> params<span class="token operator">=</span>None<span class="token punctuation">,</span> tables<span class="token operator">=</span>None<span class="token punctuation">,</span> order_by<span class="token operator">=</span>None<span class="token punctuation">,</span> select_params<span class="token operator">=</span>None<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># a. 映射</span>                    <span class="token comment" spellcheck="true"># select </span>                    <span class="token comment" spellcheck="true"># select_params=None</span>                    <span class="token comment" spellcheck="true"># select 此处 from 表</span>                <span class="token comment" spellcheck="true"># b. 条件</span>                    <span class="token comment" spellcheck="true"># where=None</span>                    <span class="token comment" spellcheck="true"># params=None,</span>                    <span class="token comment" spellcheck="true"># select * from 表 where 此处</span>                <span class="token comment" spellcheck="true"># c. 表</span>                    <span class="token comment" spellcheck="true"># tables</span>                    <span class="token comment" spellcheck="true"># select * from 表,此处</span>                <span class="token comment" spellcheck="true"># c. 排序</span>                    <span class="token comment" spellcheck="true"># order_by=None</span>                    <span class="token comment" spellcheck="true"># select * from 表 order by 此处</span>                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>                    select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'newid'</span><span class="token punctuation">:</span><span class="token string">'select count(1) from app01_usertype where id>%s'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    select_params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    where <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'age>%s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    order_by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'-age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    tables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'app01_usertype'</span><span class="token punctuation">]</span>                <span class="token punctuation">)</span>                <span class="token triple-quoted-string string">"""                select                     app01_userinfo.id,                    (select count(1) from app01_usertype where id>1) as newid                from app01_userinfo,app01_usertype                where                     app01_userinfo.age > 18                order by                     app01_userinfo.age desc                """</span>                result <span class="token operator">=</span> models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extra<span class="token punctuation">(</span>                    where<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'app01_userinfo.id &lt; %s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    tables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'app01_usertype'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    order_by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'-app01_userinfo.id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'uid'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'sw'</span><span class="token punctuation">:</span><span class="token string">"select count(1) from app01_userinfo"</span><span class="token punctuation">}</span>                <span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>query<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># SELECT (1) AS "uid", (select count(1) from app01_userinfo) AS "sw", "app01_userinfo"."id", "app01_userinfo"."name", "app01_userinfo"."age", "app01_userinfo"."ut_id" FROM "app01_userinfo" , "app01_usertype" WHERE ("app01_userinfo"."id" > 1 AND (app01_userinfo.id &lt; 100)) ORDER BY ("app01_userinfo".id) DESC</span></code></pre><h2 id="三、路由部分"><a href="#三、路由部分" class="headerlink" title="三、路由部分"></a>三、路由部分</h2><h3 id="1-url和path的区别"><a href="#1-url和path的区别" class="headerlink" title="1 url和path的区别"></a>1 url和path的区别</h3><p>django1.x版本用的是url</p><p>基本用法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url，include<span class="token comment" spellcheck="true"># 参数部分是放一个{}内部键值对的key在views函数内要以关键字参数接受</span><span class="token comment" spellcheck="true"># 别名用于反向解析</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     url<span class="token punctuation">(</span>正则表达式<span class="token punctuation">,</span> views视图函数，参数，别名<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 有名分组 year = 4位数的数字</span>re_path<span class="token punctuation">(</span>r<span class="token string">'^articles/(?P&lt;year>[0-9]{4})/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>year_archive<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 无名分组</span>re_path<span class="token punctuation">(</span>r<span class="token string">'^articles/([0-9]{4})/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>year_archive<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 路由分发</span>path<span class="token punctuation">(</span><span class="token string">'app01/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 反向解析的应用场景，当我们视图中或者模版中多次用到了某个url</span><span class="token comment" spellcheck="true"># 为了防止这个url后期修改导致所有用到的地方都要改，这里通过一个别名反向解析就行</span><span class="token comment" spellcheck="true"># 两种反向解析</span><span class="token comment" spellcheck="true"># 在视图函数中</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> reverseurl <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'tag'</span><span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">/</span>mytag_test<span class="token operator">/</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 得到的是url路径，args是拼接在后面的参数</span><span class="token comment" spellcheck="true"># 在页面中</span><span class="token punctuation">{</span><span class="token operator">%</span> url <span class="token string">"别名"</span> 参数  参数<span class="token operator">%</span><span class="token punctuation">}</span></code></pre><p>django2.x用的大部分是path，也可以导入url去使用，也有结合两种特性的re_path</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># path的第一个是一个写死的路径，不支持正则</span><span class="token comment" spellcheck="true"># 第二个参数是具体的视图函数</span><span class="token comment" spellcheck="true"># 也可以反向解析</span><span class="token comment" spellcheck="true"># 在1.x版本的分组到2中变成了转换器拼接在url后面</span>path<span class="token punctuation">(</span><span class="token string">'article-create/&lt;int:id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_create<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'article_create'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 内置了5中转化器</span>str<span class="token punctuation">,</span>匹配除了路径分隔符（<span class="token operator">/</span>）之外的非空字符串，这是默认的形式int<span class="token punctuation">,</span>匹配正整数，包含<span class="token number">0</span>。slug<span class="token punctuation">,</span>匹配字母、数字以及横杠、下划线组成的字符串。uuid<span class="token punctuation">,</span>匹配格式化的uuid，如 <span class="token number">075194d3</span><span class="token operator">-</span><span class="token number">6885</span><span class="token operator">-</span><span class="token number">417e</span><span class="token operator">-</span>a8a8<span class="token number">-6c931e272f00</span>。path<span class="token punctuation">,</span>匹配任何非空字符串，包含了路径分隔符（<span class="token operator">/</span>）（不能用？）</code></pre><h2 id="四、模版部分"><a href="#四、模版部分" class="headerlink" title="四、模版部分"></a>四、模版部分</h2><h3 id="1-xss攻击"><a href="#1-xss攻击" class="headerlink" title="1 xss攻击"></a>1 xss攻击</h3><p>当我们服务端提供用户提交js代码的接口，就容易受到xss攻击，去用一些js代码影响我们的服务器。</p><p>如何解决xss攻击？</p><p>python中用了转义，让被设计者标记安全的语言才能显示到页面，内部原理是，如果用户给了<code>&lt;a href = &#39;meizitu.com&#39;&gt; 点击&lt;/a&gt;</code>这样的标签上传，如果标记安全，那这个字符串就会直接渲染到页面上变成一个标签。</p><p>如果我们没有对其转义，他会原封不动的显示在html页面上</p><p>展示的就是一些特殊字符，比如<code>&amp;gt</code>表示的就是&gt;，所以展示到页面的就是在后端显示的</p><h2 id="五、settings"><a href="#五、settings" class="headerlink" title="五、settings"></a>五、settings</h2><h3 id="1-静态资源暴露"><a href="#1-静态资源暴露" class="headerlink" title="1 静态资源暴露"></a>1 静态资源暴露</h3><p>网站所用的静态文件我们通常都放在static内，比如js，css文件，如果要让前端可以用这些静态文件渲染页面，就需要开放接口，关于网站的静态文件，django已经给我们开放了令牌（功能类似于反向解析），我们只要配置路径即可</p><pre class=" language-python"><code class="language-python">STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>而用户上传的静态文件，也需要专门有一个文件夹来接收，通常我们用media做文件夹的名字，也可以修改</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># settings.py</span>MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'media'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用户上传的文件就会保存到该文件夹下</span><span class="token comment" spellcheck="true"># media是文件夹的名字，可以自定义，一般使用media作为名字</span></code></pre><p>用户只要上传文件，就会自动创建media目录，会自动在media内创建相应的上传目录</p><p>例如models中，avatar字段</p><pre class=" language-python"><code class="language-python">avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>FileField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'avatar/default.png'</span><span class="token punctuation">)</span></code></pre><p>在上传了头像后，media内会自动创建一个avatar文件夹来存放头像</p><p>当然我们配置了路径只能在服务端使用这个路径，如果前端要访问后端的资源，就必须要开放相应的接口</p><p>在urls配置</p><p>固定写法，复制就能使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>static <span class="token keyword">import</span> serve<span class="token keyword">from</span> bbs <span class="token keyword">import</span> settingsurl<span class="token punctuation">(</span>r<span class="token string">'^media/(?P&lt;path>.*)'</span><span class="token punctuation">,</span> serve<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'document_root'</span><span class="token punctuation">:</span> settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="2-项目修改成中文"><a href="#2-项目修改成中文" class="headerlink" title="2 项目修改成中文"></a>2 项目修改成中文</h3><pre class=" language-python"><code class="language-python">LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/shanghai'</span>USE_I18N <span class="token operator">=</span> <span class="token boolean">True</span>USE_L10N <span class="token operator">=</span> <span class="token boolean">True</span>USE_TZ <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><h2 id="六、RBAC：基于角色的权限控制（django内置的auth体系）"><a href="#六、RBAC：基于角色的权限控制（django内置的auth体系）" class="headerlink" title="六、RBAC：基于角色的权限控制（django内置的auth体系）"></a>六、RBAC：基于角色的权限控制（django内置的auth体系）</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># RBAC :是基于角色的访问控制（Role-Based Access Control ）,公司内部系统</span><span class="token comment" spellcheck="true"># django的auth就是内置了一套基于RBAC的权限系统</span><span class="token comment" spellcheck="true"># django中</span>    <span class="token comment" spellcheck="true"># 后台的权限控制（公司内部系统，crm，erp，协同平台）</span>    user表  <span class="token comment" spellcheck="true">#用户表</span>    permssion表 <span class="token comment" spellcheck="true"># 权限表</span>    group表 <span class="token comment" spellcheck="true"># 组别表</span>    user_groups表是user和group的中间表    group_permissions表是group和permssion中间表    user_user_permissions表是user和permission中间表    <span class="token comment" spellcheck="true"># 前台（主站），需要用三大认证</span><span class="token comment" spellcheck="true"># 用户和组别是多对多</span>用户a可以是销售组也可以是开发组销售组也可以有多个人<span class="token comment" spellcheck="true"># 组别和权限是多对多</span>销售组的人有销售产品的权限，也有检查产品的权限检查产品的权限可能管理组也有<span class="token comment" spellcheck="true"># 用户和权限</span>用户可以有多重权限一个权限也可以有多个用户拥有</code></pre><h2 id="七、django的缓存"><a href="#七、django的缓存" class="headerlink" title="七、django的缓存"></a>七、django的缓存</h2><h3 id="1-缓存6中配置位置"><a href="#1-缓存6中配置位置" class="headerlink" title="1 缓存6中配置位置"></a>1 缓存6中配置位置</h3><ol><li><p>开发调试(此模式为开发调试使用,实际上不执行任何操作)</p></li><li><p>内存缓存</p><pre class=" language-python"><code class="language-python">CACHES <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.core.cache.backends.locmem.LocMemCache'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 指定缓存使用的引擎</span>  <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token string">'unique-snowflake'</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># 写在内存中的变量的唯一值 </span>  <span class="token string">'TIMEOUT'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># 缓存超时时间(默认为300秒,None表示永不过期)</span>  <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>   <span class="token string">'MAX_ENTRIES'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># 最大缓存记录的数量（默认300）</span>   <span class="token string">'CULL_FREQUENCY'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span>  <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>文件缓存</p></li><li><p>数据库缓存</p><pre class=" language-pythhon"><code class="language-pythhon">CACHES = { 'default': {  'BACKEND': 'django.core.cache.backends.db.DatabaseCache',  # 指定缓存使用的引擎  'LOCATION': 'cache_table',          # 数据库表      'OPTIONS':{   'MAX_ENTRIES': 300,           # 最大缓存记录的数量（默认300）   'CULL_FREQUENCY': 3,          # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）  }   }   }</code></pre></li><li><p>Memcache缓存(使用python-memcached模块连接memcache)</p></li><li><p>Memcache缓存(使用pylibmc模块连接memcache)</p></li></ol><h3 id="2-缓存应用"><a href="#2-缓存应用" class="headerlink" title="2 缓存应用"></a>2 缓存应用</h3><p>Django提供了不同粒度的缓存,可以缓存某个页面,可以只缓存一个页面的某个部分,甚至可以缓存整个网站.</p><h4 id="2-1-视图中使用缓存"><a href="#2-1-视图中使用缓存" class="headerlink" title="2.1 视图中使用缓存"></a>2.1 视图中使用缓存</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache_page<span class="token keyword">import</span> time<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span>@cache_page<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#超时时间为15秒</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>　　t<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#获取当前时间</span>　　bookList<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>　　<span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"index.html"</span><span class="token punctuation">,</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># index.html</span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>当前时间<span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span> t <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> book <span class="token keyword">in</span> bookList <span class="token operator">%</span><span class="token punctuation">}</span>       <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> book<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> book<span class="token punctuation">.</span>price <span class="token punctuation">}</span><span class="token punctuation">}</span>$<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token comment" spellcheck="true"># 我们可以看到的效果是15秒内不管前端刷新了几次 t都不会改变</span></code></pre><h4 id="2-2-全局使用缓存"><a href="#2-2-全局使用缓存" class="headerlink" title="2.2 全局使用缓存"></a>2.2 全局使用缓存</h4><p>既然是全站缓存,当然要使用Django中的中间件.</p><p>用户的请求通过中间件,经过一系列的认证等操作,如果请求的内容在缓存中存在,则使用FetchFromCacheMiddleware获取内容并返回给用户</p><p>当返回给用户之前,判断缓存中是否已经存在,如果不存在,则UpdateCacheMiddleware会将缓存保存至Django的缓存之中,以实现全站缓存</p><pre class=" language-python"><code class="language-python">缓存整个站点，是最简单的缓存方法在 MIDDLEWARE_CLASSES 中加入 “update” 和 “fetch” 中间件MIDDLEWARE_CLASSES <span class="token operator">=</span> <span class="token punctuation">(</span>    ‘django<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>UpdateCacheMiddleware’<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#第一</span>    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span>    ‘django<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>FetchFromCacheMiddleware’<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#最后</span><span class="token punctuation">)</span>“update” 必须配置在第一个“fetch” 必须配置在最后一个<span class="token comment" spellcheck="true"># 视图和模版都不需要配置</span></code></pre><h4 id="2-3-局部视图缓存"><a href="#2-3-局部视图缓存" class="headerlink" title="2.3 局部视图缓存"></a>2.3 局部视图缓存</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># views</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache_page<span class="token keyword">import</span> time<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>     t<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#获取当前时间</span>     bookList<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"index.html"</span><span class="token punctuation">,</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># index.html</span><span class="token punctuation">{</span><span class="token operator">%</span> load cache <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> cache <span class="token number">2</span> <span class="token string">'name'</span> <span class="token operator">%</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>h3<span class="token operator">></span>缓存<span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span> t <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endcache <span class="token operator">%</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;django-知识点扩展&quot;&gt;&lt;a href=&quot;#django-知识点扩展&quot; class=&quot;headerlink&quot; title=&quot;django 知识点扩展&quot;&gt;&lt;/a&gt;django 知识点扩展&lt;/h1&gt;&lt;h2 id=&quot;一、模型部分&quot;&gt;&lt;a href=&quot;#一、模型部分&quot;</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>linux学习</title>
    <link href="http://huang_zhao.gitee.io/task/2021/03/15/%E5%85%B6%E4%BB%96/linux%E5%AD%A6%E4%B9%A0/"/>
    <id>http://huang_zhao.gitee.io/task/2021/03/15/%E5%85%B6%E4%BB%96/linux%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-15T05:33:43.000Z</published>
    <updated>2021-06-27T09:25:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux学习"><a href="#linux学习" class="headerlink" title="linux学习"></a>linux学习</h1><p>[TOC]</p><h2 id="一、虚拟软件安装"><a href="#一、虚拟软件安装" class="headerlink" title="一、虚拟软件安装"></a>一、虚拟软件安装</h2><h3 id="1-虚拟化技术"><a href="#1-虚拟化技术" class="headerlink" title="1 虚拟化技术"></a>1 虚拟化技术</h3><p>kvm，vmware，这两个的功能是可以在硬件上开辟一个虚拟空间，在这个空间上可以安装不同的操作系统</p><ul><li>iaas 基础设置及服务</li><li>paas 平台及服务 </li><li>saas 软件及服务</li></ul><p>openstack管理在硬件上安装的所有的操作系统，实现iaas</p><p>docker：实现paas</p><p>k8s：容器编排，管理不同机器上的容器（docker容器）</p><h3 id="2-centos-安装"><a href="#2-centos-安装" class="headerlink" title="2 centos 安装"></a>2 centos 安装</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># DHCP :</span>DHCP（动态主机配置协议）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。默认情况下，DHCP作为Windows Server的一个服务组件不会被系统自动安装，还需要管理员手动安装并进行必要的配置<span class="token comment" spellcheck="true"># dns:可以把域名地址转换成ip地址</span><span class="token comment" spellcheck="true"># 主机名：生产环境，要有意义  地址+楼层+房间号+业务</span><span class="token comment" spellcheck="true"># swap分区：交换分区</span><span class="token comment" spellcheck="true"># 关于分区</span>linux 分区结构为树结构， windows 为森林结构，所以有C盘D盘之类的， 而linux <span class="token operator">/</span>分区就是根分区， swap可以理解为虚拟内存， <span class="token operator">/</span>boot 这是个目录， 可以分成一个分区，然后挂载到<span class="token operator">/</span>boot目录， 也可以只用一个<span class="token operator">/</span>分区， 里面会有boot目录的，保存的是引导文件，内核等等的东东</code></pre><h2 id="二、-bash-shell-介绍和使用"><a href="#二、-bash-shell-介绍和使用" class="headerlink" title="二、 bash shell 介绍和使用"></a>二、 bash shell 介绍和使用</h2><h3 id="1-什么是Bash-shell-壳"><a href="#1-什么是Bash-shell-壳" class="headerlink" title="1 什么是Bash shell(壳)"></a>1 什么是Bash shell(壳)</h3><pre class=" language-python"><code class="language-python">是一个命令解释器，就是一个软件  执行就是bash，可以在里面输入命令，做交互，exit退出</code></pre><h3 id="2-能干什么"><a href="#2-能干什么" class="headerlink" title="2 能干什么"></a>2 能干什么</h3><pre class=" language-python"><code class="language-python">原来在windows上点点点完成的是，它都能做到使用Shell实现对Linux系统的大部分管理，例如<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>文件管理<span class="token punctuation">(</span>文件创建，移动，复制，删除，编辑…<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>权限管理<span class="token punctuation">(</span>不同用户不通权限<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>用户管理（创建，删除…<span class="token punctuation">.</span>）<span class="token number">4</span><span class="token punctuation">.</span>磁盘管理（挂载）<span class="token number">5</span><span class="token punctuation">.</span>网络管理<span class="token number">6</span><span class="token punctuation">.</span>软件管理等等</code></pre><h3 id="3-平时我们如何使用Shell呢？"><a href="#3-平时我们如何使用Shell呢？" class="headerlink" title="3 平时我们如何使用Shell呢？"></a>3 平时我们如何使用Shell呢？</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 输入命令，低效<span class="token number">2</span> shell script：shell脚本  ，批量执行命令</code></pre><h3 id="4-shell提示符"><a href="#4-shell提示符" class="headerlink" title="4  shell提示符"></a>4  shell提示符</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># root：当前用户</span><span class="token comment" spellcheck="true"># @ ：没有意义</span><span class="token comment" spellcheck="true">#lqz：主机名</span><span class="token comment" spellcheck="true"># ~：家目录</span><span class="token comment" spellcheck="true"># #:表示超级用户</span><span class="token punctuation">[</span>lqz@lqz <span class="token operator">~</span><span class="token punctuation">]</span>$ </code></pre><h3 id="5-Shell基础语法"><a href="#5-Shell基础语法" class="headerlink" title="5 Shell基础语法"></a>5 Shell基础语法</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  命令  选项  参数   三部分组成</span>ls <span class="token operator">-</span>a  <span class="token operator">/</span>temp      ls <span class="token operator">-</span><span class="token operator">-</span>all<span class="token comment" spellcheck="true"># 以下三个一样</span>ls <span class="token operator">-</span>l <span class="token operator">-</span>als <span class="token operator">-</span>lals <span class="token operator">-</span>al</code></pre><h3 id="6-命令补全"><a href="#6-命令补全" class="headerlink" title="6 命令补全"></a>6 命令补全</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 一下或者两下tab建</span><span class="token comment" spellcheck="true"># 一下的话会直接找到你要用的命令</span><span class="token comment" spellcheck="true"># 两下，可能会用到的全列出来</span><span class="token comment" spellcheck="true"># ifconfig 在7的版本没有，需要装软件</span>yum insatll net<span class="token operator">-</span>tools <span class="token operator">-</span>yyum insatll net<span class="token operator">-</span>tools<span class="token comment" spellcheck="true"># yum install bash-completion -y   补齐选项</span>ls <span class="token operator">-</span> 两下tab建，所有的选项都会提示出来</code></pre><h3 id="7-命令快捷键"><a href="#7-命令快捷键" class="headerlink" title="7 命令快捷键"></a>7 命令快捷键</h3><pre class=" language-python"><code class="language-python">Ctrl <span class="token operator">+</span> a    <span class="token comment" spellcheck="true">#光标跳转至正在输入的命令行的首部</span>Ctrl <span class="token operator">+</span> e    <span class="token comment" spellcheck="true">#光标跳转至正在输入的命令行的尾部</span>Ctrl <span class="token operator">+</span> c    <span class="token comment" spellcheck="true">#终止前台运行的程序   ##################</span>Ctrl <span class="token operator">+</span> d    <span class="token comment" spellcheck="true">#在shell中，ctrl-d表示推出当前shell。</span>Ctrl <span class="token operator">+</span> z    <span class="token comment" spellcheck="true">#将任务暂停，挂至后台</span>Ctrl <span class="token operator">+</span> l    <span class="token comment" spellcheck="true">#清屏，和clear命令等效。  ##############</span>Ctrl <span class="token operator">+</span> k    <span class="token comment" spellcheck="true">#删除从光标到行末的所有字符</span>Ctrl <span class="token operator">+</span> u    <span class="token comment" spellcheck="true">#删除从光标到行首的所有字符</span>Ctrl <span class="token operator">+</span> r    <span class="token comment" spellcheck="true">#搜索历史命令, 利用关键字，Tab建选中,只能找到最近的一条</span>Ctrl <span class="token operator">+</span> w    <span class="token comment" spellcheck="true">#按单词或空格进行向前删除</span>Ctrl <span class="token operator">+</span> 左右建 <span class="token comment" spellcheck="true">#按单词或空格进行向前向后跳</span><span class="token comment" spellcheck="true">#在命令行前加面加 "#" 则该命令不会被执行</span></code></pre><h3 id="8-history"><a href="#8-history" class="headerlink" title="8 history"></a>8 history</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># history查看历史命令</span><span class="token comment" spellcheck="true"># !数字   快速执行数字那一行</span><span class="token comment" spellcheck="true"># !yum    快速执行最近一条yum命令</span><span class="token comment" spellcheck="true"># history -d 70  把历史记录的第70行删除</span><span class="token comment" spellcheck="true"># history -c   清空所有记录（连到人家服务器，操作完了，执行一下）</span><span class="token comment" spellcheck="true"># history -w   可以把 历史记录写到用户家路径的.bash_history文件中</span></code></pre><h3 id="9-网络问题"><a href="#9-网络问题" class="headerlink" title="9 网络问题"></a>9 网络问题</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 如果出现pingip可以但是ping百度不行，重启一下网络即可</span>service network restart</code></pre><h2 id="三、linux基本命令"><a href="#三、linux基本命令" class="headerlink" title="三、linux基本命令"></a>三、linux基本命令</h2><h3 id="1-命令别名"><a href="#1-命令别名" class="headerlink" title="1 命令别名"></a>1 命令别名</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 定义一个临时别名,ck查看目录下的所有文件</span>alias ck <span class="token operator">=</span> <span class="token string">'ls -a'</span><span class="token comment" spellcheck="true"># 2 删除临时别名</span>unalias ck<span class="token comment" spellcheck="true"># 3 永久生效别名（需要将别名的配置写到配置文件中）</span>echo <span class="token string">'alias ck="ls -a"'</span> <span class="token operator">>></span> <span class="token operator">/</span>etc<span class="token operator">/</span>bashrc</code></pre><h3 id="2-–help帮助"><a href="#2-–help帮助" class="headerlink" title="2 –help帮助"></a>2 –help帮助</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls --help</span>用法<span class="token punctuation">:</span> ls <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#ls 常见选项</span><span class="token operator">-</span>a  <span class="token comment" spellcheck="true">#查看目录下的所有文件，包括隐藏文件</span><span class="token operator">-</span>l  <span class="token comment" spellcheck="true">#以长格式的方式显示文件的详细内容</span><span class="token operator">-</span>h  <span class="token comment" spellcheck="true">#以人性化的方式显示内容，配合-l使用</span><span class="token operator">-</span>d  <span class="token comment" spellcheck="true">#只列出目录名，不列出目录以下的内容</span><span class="token operator">-</span>t  <span class="token comment" spellcheck="true">#按修改时间进行排序</span><span class="token operator">-</span>i  <span class="token comment" spellcheck="true">#显示文件的inode(该文件在该分区的一个编号)</span><span class="token comment" spellcheck="true"># man ls    #查看ls命令的手册</span></code></pre><h3 id="3-目录介绍"><a href="#3-目录介绍" class="headerlink" title="3 目录介绍"></a>3 目录介绍</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> linux 是单根 <span class="token operator">/</span> 根路径，windows是多根<span class="token number">2</span> bin和sbin：bin普通用户命令，超级用户命令  都是usr下的文件夹软链接到根路径<span class="token number">3</span> home 、root：home普通用户的家路径，home下的用户名的文件夹    <span class="token operator">-</span>用户一登录系统，是在自己的家路径 jack<span class="token operator">-</span><span class="token operator">-</span>》<span class="token operator">/</span>home<span class="token operator">/</span>jack</code></pre><h4 id="1-目录之usr"><a href="#1-目录之usr" class="headerlink" title="1 目录之usr"></a>1 目录之usr</h4><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>usr，相当于C<span class="token punctuation">:</span>Windows<span class="token operator">/</span>usr<span class="token operator">/</span>local，软件安装的目录，相当于C<span class="token punctuation">:</span>Program<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>，普通用户使用的应用程序<span class="token punctuation">(</span>重要<span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>sbin，管理员使用的应用程序<span class="token punctuation">(</span>重要<span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib，库文件Glibc 32bit<span class="token operator">/</span>usr<span class="token operator">/</span>lib64，库文件Glibc 64bit<span class="token number">1</span> df <span class="token operator">-</span>h  <span class="token comment" spellcheck="true"># 查看系统中文件的使用情况</span><span class="token number">2</span> du <span class="token operator">-</span>sh <span class="token operator">/</span>usr<span class="token operator">/</span>  <span class="token comment" spellcheck="true">#查看当前目录下各个文件及目录占用空间大小</span><span class="token comment" spellcheck="true"># 补充：远程执行ssh命令：</span><span class="token comment" spellcheck="true"># ansiable：python写的，批量执行命令（速度比较慢，大量的主机，会卡顿）</span><span class="token comment" spellcheck="true"># salstack：在客户端装agent，</span><span class="token comment" spellcheck="true"># zabbix：监控，php写的，监控mysql运行情况</span><span class="token comment" spellcheck="true"># /boot</span>存放的系统启动相关的文件，例如<span class="token punctuation">:</span>kernel，grub<span class="token punctuation">(</span>引导装载程序<span class="token punctuation">)</span></code></pre><h4 id="2-目录之etc"><a href="#2-目录之etc" class="headerlink" title="2 目录之etc"></a>2 目录之etc</h4><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>etc，极其重要，后续所有服务的配置都在这个目录中<span class="token operator">/</span>etc<span class="token operator">/</span>sysconfig<span class="token operator">/</span>network<span class="token operator">-</span>script<span class="token operator">/</span>ifcfg<span class="token operator">-</span>，网络配置文件<span class="token operator">/</span>etc<span class="token operator">/</span>hostname，系统主机名配置文件<span class="token punctuation">,</span>主机名很重要，有些特殊服务要依赖主机名，没有主机名会报错起不来；修改了要重启：reboot<span class="token operator">/</span>etc<span class="token operator">/</span>resolv<span class="token punctuation">.</span>conf，dns客户端配置文件<span class="token punctuation">,</span>域名解析服务器，一般我们不配置，因为网卡的配置好了，会覆盖掉它，网卡的优先级高<span class="token operator">/</span>etc<span class="token operator">/</span>hosts，本地域名解析配置文件，域名解析，先找自己的hosts，再去域名解析</code></pre><h4 id="3-目录之var-dev"><a href="#3-目录之var-dev" class="headerlink" title="3 目录之var dev"></a>3 目录之var dev</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> cat <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>secure <span class="token comment" spellcheck="true">#查看用户登陆时间</span><span class="token operator">/</span>dev，存放设备文件，比如硬盘，硬盘分区，光驱，等等<span class="token operator">/</span>dev<span class="token operator">/</span>sd 硬盘设备<span class="token operator">/</span>dev<span class="token operator">/</span>null，黑洞设备，只进不出。类似于垃圾回收站<span class="token operator">/</span>dev<span class="token operator">/</span>random，生成随机数的设备<span class="token operator">/</span>dev<span class="token operator">/</span>zero，能远远不断的产生数据，类似于取款机，随时随地取钱</code></pre><h4 id="4-目录之proc"><a href="#4-目录之proc" class="headerlink" title="4 目录之proc"></a>4 目录之proc</h4><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>proc，反映系统当前进程的实时状态 <span class="token punctuation">:</span>process加上跑着一个uwsgi<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>》id号，重启，id号会变，<span class="token number">1</span>这个永远不变<span class="token comment" spellcheck="true">#1 media:提供设备的挂载点，媒体文件</span><span class="token comment" spellcheck="true"># linux 新增了盘符，需要手动挂载</span><span class="token comment" spellcheck="true"># 把光盘里的数据，挂载到media目录</span>mount  <span class="token operator">/</span>dev<span class="token operator">/</span>cdrom <span class="token operator">/</span>media<span class="token operator">/</span><span class="token comment" spellcheck="true"># 2 mnt：提供设备的挂载点（同上）</span><span class="token comment" spellcheck="true"># 3 opt：第三方工具，第三方软件默认安装的(mysql...)</span><span class="token comment" spellcheck="true"># run :下有pid，log结尾的文件</span>ls <span class="token operator">/</span>runcat sshd<span class="token punctuation">.</span>pid  <span class="token comment" spellcheck="true"># 进程运行的pid号,放在文件中</span>ps aux <span class="token operator">|</span>grep sshd<span class="token comment" spellcheck="true"># .lock文件的作用,锁机制</span><span class="token comment" spellcheck="true"># 假设现在执行</span>yum install tree<span class="token comment" spellcheck="true"># 再开一个窗口执行相同命令</span>yum install tree<span class="token triple-quoted-string string">'''Another app is currently holding the yum lock; waiting for it to exit...  The other application is: yum    Memory :  71 M RSS (470 MB VSZ)    Started: Tue Aug 18 00:26:31 2020 - 00:24 ago    State  : Sleeping, pid: 6191'''</span>cat <span class="token operator">/</span>run<span class="token operator">/</span>yum<span class="token punctuation">.</span>pid</code></pre><h3 id="4-文件管理"><a href="#4-文件管理" class="headerlink" title="4 文件管理"></a>4 文件管理</h3><h4 id="1-创建"><a href="#1-创建" class="headerlink" title="1 创建"></a>1 创建</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># touch 文件创建</span><span class="token comment" spellcheck="true"># 无则创建，有则修改更新时间</span>touch filetouch <span class="token operator">/</span>home<span class="token operator">/</span>od<span class="token operator">/</span>file1 file2  <span class="token comment" spellcheck="true"># home和od都必须存在</span>touch file｛a，b，c｝<span class="token comment" spellcheck="true"># mkdir 目录创建</span><span class="token comment" spellcheck="true"># 选项：-v 显示详细信息  -p 递归创建目录</span><span class="token comment" spellcheck="true"># mkdir dir1</span><span class="token comment" spellcheck="true"># mkdir /home/od/dir1 /home/od/dir2</span><span class="token comment" spellcheck="true"># mkdir -v /home/od/{dir3,dir4} </span><span class="token comment" spellcheck="true"># mkdir -pv /home/od/dir5/dir6</span><span class="token comment" spellcheck="true"># mkdir -pv /home/{od/{diu,but},boy}</span></code></pre><h4 id="2-查看"><a href="#2-查看" class="headerlink" title="2 查看"></a>2 查看</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> ls<span class="token number">2</span> <span class="token comment" spellcheck="true"># 选项: -L: 显示目录树的层级</span><span class="token comment" spellcheck="true"># tree /home/od/    #显示当前目录下的结构</span><span class="token operator">/</span>home<span class="token operator">/</span>od<span class="token operator">/</span>├── but├── dir1├── dir2├── dir3├── dir4├── dir5│   └── dir6└── diu</code></pre><h4 id="3-复制"><a href="#3-复制" class="headerlink" title="3 复制"></a>3 复制</h4><pre class=" language-python"><code class="language-python">cp<span class="token comment" spellcheck="true">#选项： -v:详细显示命令执行的操作 -r: 递归处理目录与子目录 -p: 保留源文件或目录的属性</span><span class="token comment" spellcheck="true"># cp file /tmp/file_copy</span><span class="token comment" spellcheck="true"># cp name /tmp/name         #不修改名称</span><span class="token comment" spellcheck="true"># cp file /tmp/             #不修改名称</span><span class="token comment" spellcheck="true"># cp -p file /tmp/file_p    #-p保持原文件或目录的属性</span><span class="token comment" spellcheck="true"># cp -r  /etc/ /tmp/        #复制目录需要使用-r参数, 递归复制</span><span class="token comment" spellcheck="true"># cp -rv /etc/hosts /etc/hostname /tmp  #拷贝多个文件至一个目录</span><span class="token comment" spellcheck="true"># cp -rv /etc/{hosts,hosts.bak}</span><span class="token comment" spellcheck="true"># cp -rv /etc/hosts{,-org}</span></code></pre><h4 id="4-移动"><a href="#4-移动" class="headerlink" title="4 移动"></a>4 移动</h4><pre><code>mv# mv file file1             #原地移动算改名# mv file1 /tmp/            #移动文件至tmp目录# mv /tmp/file1 ./          #移动tmp目录的文件至当前目录# mv dir/ /tmp/             #移动目录至/tmp目录下# touch file&#123;1..3&#125;# mv file1 file2 file3 /opt/    #移动多个文件或至同一个目录# mkdir dir&#123;1..3&#125;# mv dir1/ dir2/ dir3/ /opt     #移动多个目录至同一个目录</code></pre><h4 id="5-删除"><a href="#5-删除" class="headerlink" title="5 删除"></a>5 删除</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#选项：-r: 递归 -f: 强制删除 -v: 详细过程</span><span class="token comment" spellcheck="true"># rm  file.txt      #删除文件, 默认rm存在alias别名，rm -i所以会提醒是否删除文件</span><span class="token comment" spellcheck="true"># rm -f file.txt    #删除文件, 不提醒</span><span class="token comment" spellcheck="true"># rm -r dir/        #递归删除目录，会提示</span><span class="token comment" spellcheck="true"># rm -rf dir/       #强制删除目录,不提醒(慎用)</span><span class="token comment" spellcheck="true">#1.rm删除示例</span><span class="token comment" spellcheck="true"># mkdir /home/dir10</span><span class="token comment" spellcheck="true"># touch /home/dir10/{file2,file3,.file4}</span><span class="token comment" spellcheck="true"># rm -f /home/dir10/  //不包括隐藏文件 </span><span class="token comment" spellcheck="true"># ls /home/dir10/ -a</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>file4<span class="token comment" spellcheck="true">#2.rm删除示例2</span><span class="token comment" spellcheck="true"># touch file{1..10}</span><span class="token comment" spellcheck="true"># touch {1..10}.pdf</span><span class="token comment" spellcheck="true"># rm -rf file </span><span class="token comment" spellcheck="true"># rm -rf .pdf</span></code></pre><h4 id="6-查看文件内容cat"><a href="#6-查看文件内容cat" class="headerlink" title="6 查看文件内容cat"></a>6 查看文件内容cat</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------cat</span><span class="token comment" spellcheck="true"># cp /etc/passwd ./pass</span><span class="token comment" spellcheck="true"># cat pass      #正常查看文件方式</span><span class="token comment" spellcheck="true"># cat -n pass   #-n显示文件有多少行</span><span class="token comment" spellcheck="true"># cat -A pass   #查看文件的特殊符号,比如文件中存在tab键</span><span class="token comment" spellcheck="true"># tac pass      #倒序查看文件</span>cat <span class="token operator">>></span> test2<span class="token punctuation">.</span>txt <span class="token operator">&lt;&lt;</span>EOFadsadfEOF</code></pre><h4 id="7-查看文件内容less，more"><a href="#7-查看文件内容less，more" class="headerlink" title="7 查看文件内容less，more"></a>7 查看文件内容less，more</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------less、more</span><span class="token comment" spellcheck="true"># less /etc/services    #使用光标上下翻动，空格进行翻页，q退出</span><span class="token comment" spellcheck="true"># more /etc/services    #使用回车上下翻动，空格进行翻页，q退出(有百分比)</span></code></pre><h4 id="8-查看文件头head，尾tail"><a href="#8-查看文件头head，尾tail" class="headerlink" title="8 查看文件头head，尾tail"></a>8 查看文件头head，尾tail</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------head</span><span class="token comment" spellcheck="true"># head pass     #查看头部内容，默认前十行</span><span class="token comment" spellcheck="true"># head -n5 pass #查看头部5行，使用-n指定</span><span class="token comment" spellcheck="true"># ps aux | head -5 # 只看头部5个进程</span><span class="token comment" spellcheck="true">#------tail</span><span class="token comment" spellcheck="true"># tail pass  # 查看文件尾部，默认10行</span><span class="token comment" spellcheck="true"># tail -20 /var/log/secure  # 查看文件尾部20行</span><span class="token comment" spellcheck="true"># tail -f /var/log/messages #-f动态查看文件尾部的变化</span><span class="token comment" spellcheck="true"># tailf /var/log/messages   #查看文件尾部的变化</span><span class="token comment" spellcheck="true"># ps aux | tail -2</span></code></pre><h4 id="9-过滤文件"><a href="#9-过滤文件" class="headerlink" title="9 过滤文件"></a>9 过滤文件</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------grep过滤文件内容</span><span class="token comment" spellcheck="true"># grep "^root" pass     #匹配以root开头的行</span><span class="token comment" spellcheck="true"># grep "bash$" pass     #匹配以bash结尾的行</span><span class="token comment" spellcheck="true"># grep -i "ftp" pass    #忽略大小写匹配</span><span class="token comment" spellcheck="true"># grep  -Ei "sync$|ftp" pass    #匹配文件中包含sync结尾或ftp字符串</span><span class="token comment" spellcheck="true"># grep -n -A 2 "Failed" /var/log/secure #匹配/var/log/secure文件中Failed字符串,并打印它的下2行</span><span class="token comment" spellcheck="true"># grep -n -B 2 "Failed" /var/log/secure #匹配/var/log/secure文件中Failed字符串,并打印它的上2行</span><span class="token comment" spellcheck="true"># grep -n -C 2 "Failed" /var/log/secure #匹配/var/log/secure文件中Failed字符串,并打印它的上下2行</span><span class="token comment" spellcheck="true"># 上翻，下翻</span>control<span class="token operator">+</span>b：下翻control<span class="token operator">+</span>f：上翻</code></pre><h4 id="10-联网下载文件"><a href="#10-联网下载文件" class="headerlink" title="10 联网下载文件"></a>10 联网下载文件</h4><pre class=" language-python"><code class="language-python">yum install wget <span class="token operator">-</span>y<span class="token comment" spellcheck="true">#选项: -O: 指定下载地址</span><span class="token comment" spellcheck="true"># wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><span class="token comment" spellcheck="true"># 比如下载图片</span><span class="token comment" spellcheck="true"># crul：浏览网络上资源，-o保存到本地</span><span class="token comment" spellcheck="true">#选项: -o: 指定下载地址</span><span class="token comment" spellcheck="true"># curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><span class="token comment" spellcheck="true"># 请求网址得到的是页面的html地址类似request模块</span></code></pre><h4 id="11-本地上传下载"><a href="#11-本地上传下载" class="headerlink" title="11 本地上传下载"></a>11 本地上传下载</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># yum install lrzsz -y  #不安装软件则无法执行该命令</span><span class="token comment" spellcheck="true"># rz            #只能上传文件文件上传(不能大于4g)</span><span class="token comment" spellcheck="true"># sz /path/file #只能下载文件</span></code></pre><h4 id="12-文件查找"><a href="#12-文件查找" class="headerlink" title="12 文件查找"></a>12 文件查找</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># locate /etc/sh       #搜索etc目录下所有以sh开头的文件</span><span class="token comment" spellcheck="true"># locate -i /etc/sh    #搜索etc目录下，所有以sh开头的文件，忽略大小写</span></code></pre><h4 id="13-命令查找"><a href="#13-命令查找" class="headerlink" title="13 命令查找"></a>13 命令查找</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># which ls  #查找ls命令的绝对路径</span><span class="token comment" spellcheck="true"># whereis ls       //查找命令的路径、帮助手册、等</span><span class="token comment" spellcheck="true"># whereis -b ls    //仅显示命令所在的路径，仅看二进制</span><span class="token comment" spellcheck="true"># 对于内核相关的一些命令，用which whereis 是无法查询到的，需要使用type采查询</span><span class="token comment" spellcheck="true"># type -a ls        #查看命令的绝对路径(包括别名)</span><span class="token comment" spellcheck="true"># type -a for</span></code></pre><h4 id="14-文件字符处理"><a href="#14-文件字符处理" class="headerlink" title="14 文件字符处理"></a>14 文件字符处理</h4><pre class=" language-python"><code class="language-python">sort 排序uniq 去重cut 截断wc 统计行号http<span class="token punctuation">:</span><span class="token operator">//</span>liuqingzheng<span class="token punctuation">.</span>top<span class="token operator">/</span>linux<span class="token operator">/</span><span class="token operator">%</span>E5<span class="token operator">%</span><span class="token number">85</span><span class="token operator">%</span>A5<span class="token operator">%</span>E9<span class="token operator">%</span><span class="token number">97</span><span class="token operator">%</span>A8<span class="token operator">%</span>E5<span class="token operator">%</span><span class="token number">88</span><span class="token operator">%</span>B0<span class="token operator">%</span>E7<span class="token operator">%</span>B2<span class="token operator">%</span>BE<span class="token operator">%</span>E9<span class="token operator">%</span><span class="token number">80</span><span class="token operator">%</span><span class="token number">9A</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">-</span>Linux<span class="token operator">%</span>E6<span class="token operator">%</span><span class="token number">96</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>E4<span class="token operator">%</span>BB<span class="token operator">%</span>B6<span class="token operator">%</span>E7<span class="token operator">%</span>AE<span class="token operator">%</span>A1<span class="token operator">%</span>E7<span class="token operator">%</span><span class="token number">90</span><span class="token operator">%</span><span class="token number">86</span><span class="token operator">/</span></code></pre><h4 id="15-系统文件属性"><a href="#15-系统文件属性" class="headerlink" title="15 系统文件属性"></a>15 系统文件属性</h4><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l ks.cfg</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll -h ks.cfg</span><span class="token operator">-</span>rw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span> <span class="token number">1</span> root root <span class="token number">4434</span> May <span class="token number">30</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">58</span> ks<span class="token punctuation">.</span>cfg<span class="token comment" spellcheck="true">#</span><span class="token operator">-</span>rw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span> ①<span class="token punctuation">:</span>第一个字符是文件类型，其他则是权限<span class="token number">1</span>           ②<span class="token punctuation">:</span>硬链接次数root        ③<span class="token punctuation">:</span>文件属于哪个用户root        ④<span class="token punctuation">:</span>文件属于哪个组（用户的分组）<span class="token number">4434</span>        ⑤<span class="token punctuation">:</span>文件大小May30 <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">58</span> ⑥⑦⑧<span class="token punctuation">:</span>最新修改的时间与日期ks<span class="token punctuation">.</span>cfg      ⑨<span class="token punctuation">:</span>文件或目录名称<span class="token comment" spellcheck="true"># 文件类型解析</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll -d /etc/hosts /tmp /bin/ls  /dev/sda /dev/tty1 /etc/grub2.cfg /dev/log /run/dmeventd-client</span><span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token punctuation">.</span>  <span class="token number">1</span> root root <span class="token number">117656</span> Jun <span class="token number">30</span>  <span class="token number">2016</span> <span class="token operator">/</span>bin<span class="token operator">/</span>lssrw<span class="token operator">-</span>rw<span class="token operator">-</span>rw<span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root      <span class="token number">0</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">35</span> <span class="token operator">/</span>dev<span class="token operator">/</span>logbrw<span class="token operator">-</span>rw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root disk   <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">/</span>dev<span class="token operator">/</span>sdacrw<span class="token operator">-</span><span class="token operator">-</span>w<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root tty    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">/</span>dev<span class="token operator">/</span>tty1lrwxrwxrwx<span class="token punctuation">.</span>  <span class="token number">1</span> root root     <span class="token number">22</span> Jan <span class="token number">13</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">31</span> <span class="token operator">/</span>etc<span class="token operator">/</span>grub2<span class="token punctuation">.</span>cfg <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>boot<span class="token operator">/</span>grub2<span class="token operator">/</span>grub<span class="token punctuation">.</span>cfg<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root    <span class="token number">199</span> Jan <span class="token number">20</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">03</span> <span class="token operator">/</span>etc<span class="token operator">/</span>hostsprw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root      <span class="token number">0</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">/</span>run<span class="token operator">/</span>dmeventd<span class="token operator">-</span>clientdrwxrwxrwt<span class="token punctuation">.</span> <span class="token number">61</span> root root   <span class="token number">8192</span> Jan <span class="token number">21</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">01</span> <span class="token operator">/</span>tmp<span class="token comment" spellcheck="true">#说明</span><span class="token operator">-</span>   <span class="token comment" spellcheck="true">#普通文件(文本, 二进制, 压缩, 图片, 日志等) </span>d   <span class="token comment" spellcheck="true">#目录文件</span>b   <span class="token comment" spellcheck="true">#设备文件(块设备)存储设备硬盘 /dev/sda1, /dev/sda2</span>c   <span class="token comment" spellcheck="true">#设备文件(字符设备)，终端 /dev/tty1, /dev/zero</span>s   <span class="token comment" spellcheck="true">#套接字文件, 进程间通信(socket)</span>p   <span class="token comment" spellcheck="true">#管道文件</span>l   <span class="token comment" spellcheck="true">#链接文件</span><span class="token comment" spellcheck="true"># 但是有时候这样给的文件类型不太精确，我们可以file来判断这个文件的类型</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /etc/hosts</span><span class="token operator">/</span>etc<span class="token operator">/</span>hosts<span class="token punctuation">:</span> ASCII text<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /bin/ls</span><span class="token operator">/</span>bin<span class="token operator">/</span>ls<span class="token punctuation">:</span> ELF <span class="token number">64</span><span class="token operator">-</span>bit LSB executable<span class="token punctuation">,</span> x86<span class="token number">-64</span><span class="token punctuation">,</span> version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span><span class="token punctuation">,</span> dynamically linked <span class="token punctuation">(</span>uses shared libs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">for</span> GNU<span class="token operator">/</span>Linux <span class="token number">2.6</span><span class="token punctuation">.</span><span class="token number">32</span><span class="token punctuation">,</span> BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>aa7ff68f13de25936a098016243ce57c3c982e06<span class="token punctuation">,</span> stripped<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /dev/sda</span><span class="token operator">/</span>dev<span class="token operator">/</span>sda<span class="token punctuation">:</span> block special<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /dev/tty1</span><span class="token operator">/</span>dev<span class="token operator">/</span>tty1<span class="token punctuation">:</span> character special<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /etc/grub2.cfg</span><span class="token operator">/</span>etc<span class="token operator">/</span>grub2<span class="token punctuation">.</span>cfg<span class="token punctuation">:</span> broken symbolic link to `<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>boot<span class="token operator">/</span>grub2<span class="token operator">/</span>grub<span class="token punctuation">.</span>cfg'<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /home</span><span class="token operator">/</span>home<span class="token punctuation">:</span> directory<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /run/dmeventd-client</span><span class="token operator">/</span>run<span class="token operator">/</span>dmeventd<span class="token operator">-</span>client<span class="token punctuation">:</span> fifo <span class="token punctuation">(</span>named pipe<span class="token punctuation">)</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll but</span><span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> root root <span class="token number">42125</span> Apr  <span class="token number">1</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">26</span> but<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file but</span>but<span class="token punctuation">:</span> Zip archive data<span class="token punctuation">,</span> at least v1<span class="token number">.0</span> to extract</code></pre><h4 id="16-系统链接文件"><a href="#16-系统链接文件" class="headerlink" title="16 系统链接文件"></a>16 系统链接文件</h4><p>文件有文件名与数据，在Linux上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。<br>用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方，我们将其称为Block<br>元数据，即文件的附加属性，如文件大小、创建时间、所有者等信息。我们称其为Inode<br>在Linux中，inode是文件元数据的一部分但其并不包含文件名，inode号即索引节点号）<br>文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图1.展示了程序通过文件名获取文件内容的过程。</p><p>Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）</p><p>ll -i 查看inode</p><h5 id="16-1软连接"><a href="#16-1软连接" class="headerlink" title="16.1软连接"></a>16.1软连接</h5><p>软链接相当于Windows的快捷方式，软链接文件会将inode指向源文件的block，当我们访问这个软链接文件时，其实访问的是源文件本身。那么当我们对一个文件创建多个软链接，其实就是多个inode指向同一个block。当我们删除软链接文件时，其实只是删除了一个inode指向，并不会对源文件源文件造成影响，但如果删除的是源文件则会造成所有软链接文件失效。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#文件软链接示例</span>touch <span class="token operator">/</span>root<span class="token operator">/</span>fileln <span class="token operator">-</span>s <span class="token operator">/</span>root<span class="token operator">/</span>file <span class="token operator">/</span>tmp<span class="token operator">/</span>file_bakll <span class="token operator">/</span>tmp<span class="token operator">/</span>file_bak  <span class="token operator">//</span>root下file链接到<span class="token operator">/</span>tmp下并重命名为file_bak<span class="token comment" spellcheck="true">#目录软链接示例</span>mkdir <span class="token operator">/</span>soft<span class="token operator">/</span>nginx1<span class="token number">.1</span> <span class="token operator">-</span>pln <span class="token operator">-</span>s <span class="token operator">/</span>soft<span class="token operator">/</span>nginx1<span class="token number">.1</span><span class="token operator">/</span> <span class="token operator">/</span>soft<span class="token operator">/</span>nginxll <span class="token operator">/</span>soft<span class="token operator">/</span>nginx   <span class="token operator">//</span>查看链接指向<span class="token comment" spellcheck="true">#软链接使用场景</span><span class="token number">1</span><span class="token punctuation">.</span>软件升级<span class="token number">2</span><span class="token punctuation">.</span>企业代码发布 <span class="token number">3</span><span class="token punctuation">.</span>不方便目录移动</code></pre><h5 id="16-2-硬链接"><a href="#16-2-硬链接" class="headerlink" title="16.2 硬链接"></a>16.2 硬链接</h5><p>若一个inode号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名，如下图hard link 就是 file 的一个别名，他们有共同的 inode。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#文件硬链接示例</span>ln  <span class="token operator">/</span>root<span class="token operator">/</span>file <span class="token operator">/</span>tmp<span class="token operator">/</span>file_hardll <span class="token operator">/</span>tmp<span class="token operator">/</span>file_hard<span class="token comment" spellcheck="true">#PS：目录不能创建硬链接，硬链接文件可以用rm命令删除</span></code></pre><p>5.硬链接与软链接区别<br>1)ln命令创建硬链接，ln -s命令创建软链接。<br>2)目录不能创建硬链接，并且硬链接不可以跨越分区系统。<br>3)目录软链接特别常用,并且软链接支持跨越分区系统。<br>4)硬链接文件与源文件的inode相同，软链接文件与源文件inode不同。<br>5)删除软链接文件，对源文件及硬链接文件无任何影响。<br>6)删除文件的硬链接文件，对源文件及链接文件无任何影响。<br>7)删除链接文件的源文件，对硬链接无影响，会导致软链接失效。<br>8)删除源文件及其硬链接文件，整个文件会被真正的删除。</p><h3 id="5-读写文件"><a href="#5-读写文件" class="headerlink" title="5 读写文件"></a>5 读写文件</h3><p><strong>vim</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># yum install vim -y</span><span class="token comment" spellcheck="true"># 普通模式、编辑模式、命令模式</span><span class="token comment" spellcheck="true"># 普通模式：</span>    <span class="token operator">-</span>上下翻    <span class="token operator">-</span>yy 复制一行    <span class="token operator">-</span>p   粘贴    <span class="token operator">-</span>dd  剪切    <span class="token operator">-</span>p   把上面剪切的粘贴上<span class="token comment" spellcheck="true"># 编辑模式</span>    <span class="token operator">-</span>i：insert插入    <span class="token operator">-</span>a：append追加    <span class="token operator">-</span>o：换行    <span class="token operator">-</span>正常写就可以了    <span class="token operator">-</span>esc回到普通模式<span class="token comment" spellcheck="true"># 命令模式：</span>    <span class="token operator">-</span>不能从编辑模式直接进，只能先到普通模式按 <span class="token punctuation">:</span>  进入命令，退出命令模式esc     <span class="token operator">-</span>w  表示保存     <span class="token operator">-</span>q   退出     <span class="token operator">-</span>！  强制退出     <span class="token operator">-</span>修改了文件后保存：  wq    wq！     <span class="token operator">-</span>修改了不想保存退出： q     q！     <span class="token operator">-</span><span class="token punctuation">:</span>set nu 显示行号     <span class="token operator">-</span><span class="token punctuation">:</span>set nonu 不显示行号     <span class="token operator">-</span><span class="token operator">/</span>字符串    搜索这个字符串     <span class="token operator">-</span><span class="token punctuation">:</span><span class="token operator">%</span>s<span class="token comment" spellcheck="true">#sbin#test#g #替换整个文本文件中包含sbin的替换为test</span></code></pre><h3 id="6-用户相关"><a href="#6-用户相关" class="headerlink" title="6 用户相关"></a>6 用户相关</h3><h4 id="1-用户与权限"><a href="#1-用户与权限" class="headerlink" title="1 用户与权限"></a>1 用户与权限</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  id  查看当前用户信息</span>uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> groups<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2  用户信息保存在 cat /etc/passwd</span>root<span class="token punctuation">:</span>x<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span>root<span class="token punctuation">:</span><span class="token operator">/</span>root<span class="token punctuation">:</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash<span class="token comment" spellcheck="true">#3  密码存放路径 cat /etc/shadow</span><span class="token comment" spellcheck="true">#4 约定不同用户的uid属于某个范围（了解）</span><span class="token comment" spellcheck="true"># 5 用户的增，删，改</span>    <span class="token operator">-</span>useradd（一个用户只能属于一个主组，属于多个附加组）        <span class="token operator">-</span>groupadd sa  新增一个组        <span class="token operator">-</span>groupadd sa1  新增一个组        <span class="token operator">-</span>groupadd students 新增一个组        <span class="token operator">-</span>useradd <span class="token operator">-</span>u <span class="token number">5001</span> <span class="token operator">-</span>g students <span class="token operator">-</span>G sa<span class="token punctuation">,</span>sa1 <span class="token operator">-</span>c <span class="token string">"2020 new student"</span> <span class="token operator">-</span>s <span class="token operator">/</span>bin<span class="token operator">/</span>bash lqz1    <span class="token operator">-</span>创建mysql系统用户，<span class="token operator">-</span>M不建立用户家目录 <span class="token operator">-</span>s指定nologin使其用户无法登陆系统        useradd mysql <span class="token operator">-</span>M <span class="token operator">-</span>s <span class="token operator">/</span>sbin<span class="token operator">/</span>nologin    <span class="token operator">-</span>usermod        <span class="token operator">-</span>usermod <span class="token operator">-</span>c <span class="token string">"2019 new student"</span> <span class="token operator">-</span>md <span class="token operator">/</span>bgx <span class="token operator">-</span>s <span class="token operator">/</span>bin<span class="token operator">/</span>sh <span class="token operator">-</span>l change_bgx bgx        <span class="token operator">-</span>usermod <span class="token operator">-</span>L change_bgx  <span class="token comment" spellcheck="true">#锁定后会无法登陆系统</span>        <span class="token operator">-</span>usermod <span class="token operator">-</span>U change_bgx    <span class="token operator">-</span>userdel        <span class="token operator">-</span>userdel egon  <span class="token comment" spellcheck="true"># 删除用户，不删家目录</span>        <span class="token operator">-</span>userdel <span class="token operator">-</span>r egon1 <span class="token comment" spellcheck="true"># 删除用户，删家目录</span><span class="token comment" spellcheck="true">#6  改密码</span>    <span class="token operator">-</span>passwd root<span class="token comment" spellcheck="true">#7 组增删改</span>    <span class="token operator">-</span>groupadd no_gid   新增组    <span class="token operator">-</span>groupmod <span class="token operator">-</span>g <span class="token number">1111</span> student  改组id号    <span class="token operator">-</span>groupmod student <span class="token operator">-</span>n new_student  改组名字    <span class="token operator">-</span>groupdel new_student   删除组（组下没有人，把人删除，再删）<span class="token comment" spellcheck="true"># 8 su 和sudo</span>    <span class="token operator">-</span>su 切换用户        <span class="token operator">-</span>su <span class="token operator">-</span> jack：打开新的shell，会加载自己的环境变量        <span class="token operator">-</span>su jack：不打开新的shell，不会加载它的环境变量    <span class="token operator">-</span>sudo 普通用户可以有一些超级用户的权限，不需要输入密码        usermod jack <span class="token operator">-</span>G wheel  <span class="token comment" spellcheck="true"># 把jack用户加入到了wheel组</span>        <span class="token operator">-</span>你这个用户没有权限，你尝试 sudo mkdir ll试一下，不行，超级管理员没有给你配这个权限</code></pre><h4 id="2-文件权限（特殊权限）"><a href="#2-文件权限（特殊权限）" class="headerlink" title="2 文件权限（特殊权限）"></a>2 文件权限（特殊权限）</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#选项: + 增加权限 -减少权限 =等于某个权限</span><span class="token comment" spellcheck="true"># a：让文件或目录仅可追加内容</span><span class="token comment" spellcheck="true"># i：不得任意更动文件或目录</span><span class="token comment" spellcheck="true"># 给某个文件或者文件夹加特殊权限</span>    <span class="token operator">-</span>chattr <span class="token operator">+</span>i lqz<span class="token punctuation">.</span>text        <span class="token operator">-</span>chattr <span class="token operator">-</span>i lqz<span class="token punctuation">.</span>text</code></pre><h3 id="7-压缩解压"><a href="#7-压缩解压" class="headerlink" title="7 压缩解压"></a>7 压缩解压</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  Windows的压缩包与Linux的压缩包能否互通</span>    windwods：rar，zip      linux：tar<span class="token punctuation">.</span>gz<span class="token punctuation">,</span>zip互通，不支持rar<span class="token comment" spellcheck="true"># 2 gzip (只能压一个文件，不能压文件夹，会把原来的删除)</span>    <span class="token operator">-</span>gzip file    <span class="token operator">-</span>gzip <span class="token operator">-</span>d file    <span class="token operator">-</span>有什么用？       <span class="token operator">-</span>cd <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>       <span class="token comment" spellcheck="true"># 可以把文件做个备份</span><span class="token comment" spellcheck="true">#3 zip的压缩和解压</span>    <span class="token operator">-</span>yum install zip unzip <span class="token operator">-</span>y    <span class="token operator">-</span>zip  filename<span class="token punctuation">.</span>zip  filename  <span class="token comment" spellcheck="true"># 压单个文件</span>    <span class="token operator">-</span>zip <span class="token operator">-</span>r home<span class="token punctuation">.</span>zip <span class="token operator">/</span>home<span class="token operator">/</span>   <span class="token comment" spellcheck="true">#把home文件夹压缩</span>    <span class="token operator">-</span>unzip  home<span class="token punctuation">.</span>zip   <span class="token comment" spellcheck="true">#解压</span>    <span class="token operator">-</span>unzip <span class="token operator">-</span>l  home<span class="token punctuation">.</span>zip <span class="token comment" spellcheck="true"># 不解压，看内容</span>    <span class="token operator">-</span>unzip home<span class="token punctuation">.</span>zip  <span class="token operator">-</span>d <span class="token operator">/</span>opt<span class="token operator">/</span>   <span class="token comment" spellcheck="true"># 把当前路径下的home.zip 解压到opt</span><span class="token comment" spellcheck="true"># 4 tar打包与压缩</span>    <span class="token operator">-</span>tar <span class="token operator">-</span>czf 压缩后的文件名 压缩前的文件名        <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>》tar<span class="token punctuation">.</span>gz    <span class="token operator">-</span>tar <span class="token operator">-</span>xf  xx<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>解压xx<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz    tar <span class="token operator">-</span>xzvf  xx<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz ：解压tar<span class="token punctuation">.</span>gz，详细过程列出来    <span class="token comment" spellcheck="true"># 可以把不同目录的文件都压缩到一个文件内</span>    <span class="token operator">-</span>tar <span class="token operator">-</span>czf home<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz dd<span class="token operator">/</span> lqz1 lqz2 <span class="token operator">/</span>home<span class="token operator">/</span>    <span class="token operator">-</span>tar czf etc<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">-</span><span class="token operator">-</span>exclude<span class="token operator">=</span>etc<span class="token operator">/</span>services etc<span class="token operator">/</span>  <span class="token comment" spellcheck="true"># 排除文件</span>    <span class="token operator">-</span>tar xf <span class="token operator">/</span>etc<span class="token operator">/</span>local<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz  <span class="token operator">-</span>C <span class="token operator">/</span>tmp  <span class="token comment" spellcheck="true"># -C指定解压到哪个路径</span></code></pre><h3 id="8-软件管理：rpm"><a href="#8-软件管理：rpm" class="headerlink" title="8 软件管理：rpm"></a>8 软件管理：rpm</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  红帽的软件安装包（windows的：exe，mis）</span><span class="token comment" spellcheck="true">#2  mount /dev/cdrom /mnt 把光盘挂在到 /mnt文件夹</span><span class="token comment" spellcheck="true">#3  Linux中除了rpm安装软件，是否还有安装软件方式</span>    <span class="token operator">-</span>源码安装<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>官网下源码<span class="token operator">-</span><span class="token operator">-</span>》编译安装<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>》最新    <span class="token operator">-</span>rpm包，预先编译打包<span class="token punctuation">,</span>安装简单，yum安装，本质就是rmp安装<span class="token operator">-</span><span class="token operator">-</span>》稍微老一些    <span class="token operator">-</span>二进制包：绿色包    <span class="token operator">-</span>安装rpm的软件：rpm <span class="token operator">-</span>ivh tree<span class="token number">-1.6</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">10.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm    <span class="token operator">-</span>强制安装：rpm <span class="token operator">-</span>ivh <span class="token operator">-</span><span class="token operator">-</span>force <span class="token operator">/</span>mnt<span class="token operator">/</span>Packages<span class="token operator">/</span>tree<span class="token number">-1.5</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">3.</span>el6<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm    <span class="token operator">-</span>rpm <span class="token operator">-</span>q ：查看这个软件是否安装<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>    <span class="token operator">-</span>rpm <span class="token operator">-</span>qa <span class="token operator">|</span>grep tr  ：列出所有安装的软件    <span class="token operator">-</span>rpm <span class="token operator">-</span>ql <span class="token punctuation">:</span>查询指定软件包所安装的目录、文件列表rpm <span class="token operator">-</span>ql unzip <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>    <span class="token operator">-</span>rpm <span class="token operator">-</span>qc unzip<span class="token punctuation">:</span>查看这个软件的配置文件位置    <span class="token operator">-</span>rpm <span class="token operator">-</span>qf <span class="token operator">/</span>etc<span class="token operator">/</span>pam<span class="token punctuation">.</span>d<span class="token operator">/</span>vsftpd  ：查看配置文件属于哪个软件    <span class="token operator">-</span>rpm <span class="token operator">-</span>qlp trace<span class="token operator">-</span>cmd<span class="token number">-2.6</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">10.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm ：查看该软件包安装后会释放哪些文件    <span class="token operator">-</span>使用远程地址安装：rpm <span class="token operator">-</span>ivh https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>zabbix<span class="token operator">/</span>zabbix<span class="token operator">/</span><span class="token number">3.0</span><span class="token operator">/</span>rhel<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>x86_64<span class="token operator">/</span>zabbix<span class="token operator">-</span>agent<span class="token number">-3.0</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">2.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm    <span class="token operator">-</span>rpm <span class="token operator">-</span>Uivh  升级软件需要用  U    <span class="token operator">-</span>rpm <span class="token operator">-</span>e zabbix<span class="token operator">-</span>agent</code></pre><h3 id="9-yum仓库，源"><a href="#9-yum仓库，源" class="headerlink" title="9 yum仓库，源"></a>9 yum仓库，源</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 Yum是RedHat以及CentOS中的软件包管理器。能够通过互联网下载 .rpm 包并且安装，并可以自动处理依赖性关系，无须繁琐地一次次下载、安装</span><span class="token comment" spellcheck="true"># 2 cd /etc/yum.repos.d/  路径下有xx.repo 文件---》yum源</span><span class="token comment" spellcheck="true"># 3 换阿里云的源</span>    wget <span class="token operator">-</span>O <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>CentOS<span class="token operator">-</span>Base<span class="token punctuation">.</span>repo https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>repo<span class="token operator">/</span>Centos<span class="token number">-7.</span>repo<span class="token comment" spellcheck="true"># 4 配置其他源</span>    <span class="token operator">-</span>wget <span class="token operator">-</span>O <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>epel<span class="token punctuation">.</span>repo http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>repo<span class="token operator">/</span>epel<span class="token number">-7.</span>repo    <span class="token operator">-</span>yum install nginx     <span class="token operator">-</span>yum provides ipconfig  <span class="token comment" spellcheck="true"># 通过命令查软件，这个命令属于哪个软件</span>       <span class="token operator">-</span>rpm <span class="token operator">-</span>qf `which ifconfig` <span class="token comment" spellcheck="true"># 查命令属于哪个软件，前提是该软件安装了z</span></code></pre><h3 id="10-文件权限chmod"><a href="#10-文件权限chmod" class="headerlink" title="10 文件权限chmod"></a>10 文件权限chmod</h3><pre><code>1 rwx                 r-x       r-x  属主(文件所有者)      属组权限    其他人权限2 权限详解    r：read写权限    w: write写权限    x:可执行3 修改权限    7=4(r)+2(w)+1(x)    chmod 777 文件夹/文件</code></pre><h3 id="11-源码安装软件"><a href="#11-源码安装软件" class="headerlink" title="11 源码安装软件"></a>11 源码安装软件</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 会了yum安装，为什么还要会二进制安装（编译安装）    <span class="token operator">-</span>官方不提供yum安装    <span class="token operator">-</span>二进制安装是最新的<span class="token number">2</span> 向服务器传递文件的几种方式     <span class="token operator">-</span>scp nginx<span class="token number">-1.18</span><span class="token punctuation">.</span><span class="token number">0.</span>tar<span class="token punctuation">.</span>gz root@<span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>jack     <span class="token operator">-</span>sz，rz    <span class="token operator">-</span>xftp软件来传    <span class="token comment" spellcheck="true">#1.基础环境准备</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y gcc make wget </span><span class="token comment" spellcheck="true">#2.下载源码包</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://nginx.org/download/nginx-1.15.12.tar.gz</span><span class="token comment" spellcheck="true">#3.解压源码包, 并进入相应目录</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar xf nginx-1.15.12.tar.gz</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd nginx-1.15.12</span><span class="token comment" spellcheck="true">#4.配置相关的选项，并生成Makefile</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --help</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --prefix=/usr/local/nginx</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo $? # 检查上一个命令是否执行成功</span><span class="token comment" spellcheck="true">#5.将Makefile文件编译可执行二进制程序，此时,/usr/local/nginx可执行文件还不在，需要执行make install 才能copy过去</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make</span><span class="token comment" spellcheck="true">#6.将二进制文件拷贝至对应的目录中</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make install</span><span class="token comment" spellcheck="true">#7 建立软连接（以后方便升级）</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s nginx-1.18.0 nginx</span><span class="token comment" spellcheck="true">#8 目录介绍</span>conf<span class="token punctuation">:</span>配置文件html：网站文件存放logs：日志sbin<span class="token punctuation">:</span>可执行文件<span class="token comment" spellcheck="true"># 9 命令</span>nginx  <span class="token comment" spellcheck="true"># 启动</span>nginx <span class="token operator">-</span>s reload <span class="token comment" spellcheck="true"># 重新加载</span>nginx <span class="token operator">-</span>s stop  <span class="token comment" spellcheck="true"># 重启</span>nginx <span class="token operator">-</span>s stop <span class="token comment" spellcheck="true"># 停止</span></code></pre><h3 id="12-进程管理"><a href="#12-进程管理" class="headerlink" title="12 进程管理"></a>12 进程管理</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  ps -aux 用它，[系统进程]</span><span class="token comment" spellcheck="true">#2  ps -ef</span><span class="token comment" spellcheck="true">#3  ps -aux|grep id,进程名字，</span><span class="token comment" spellcheck="true"># 4 top实时看状态</span><span class="token comment" spellcheck="true"># 5 kill -l</span><span class="token comment" spellcheck="true"># 6 kill -9 进程id号 强行关闭</span><span class="token comment" spellcheck="true"># 7 pkill -9 nginx  关闭nginx所有进程</span><span class="token comment" spellcheck="true"># 8 killall nginx   关闭nginx所有进程</span><span class="token comment" spellcheck="true"># 通过来管理进程screen</span>yum install screen <span class="token operator">-</span>y创建一个窗口screen <span class="token operator">-</span>S myjobs执行耗时任务，进程ctrl<span class="token operator">+</span>a<span class="token operator">+</span>d  退出当前bashshell但是耗时任务还在后台运行screen <span class="token operator">-</span>r myjobs 调到前台执行screen <span class="token operator">-</span>list  查看所有任务</code></pre><h3 id="13-系统服务"><a href="#13-系统服务" class="headerlink" title="13 系统服务"></a>13 系统服务</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  centos6 上启动服务service start network</span><span class="token comment" spellcheck="true">#2  centos7 启动服务：systemctl start network</span><span class="token comment" spellcheck="true"># 制作系统服务其实就是编写一堆配置，在配置文件中最起码要有这个程序的启动和关闭命令</span><span class="token comment" spellcheck="true"># 如果有必要也可以做成系统服务</span><span class="token comment" spellcheck="true">#3  cd /usr/lib/systemd/system/</span><span class="token comment" spellcheck="true">###制作系统服务</span><span class="token comment" spellcheck="true">#4 vim mynginx.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>my nginxAfter<span class="token operator">=</span>network<span class="token punctuation">.</span>target  <span class="token comment" spellcheck="true">#在哪个服务启动后启动</span><span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type<span class="token operator">=</span>forkingExecStart<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginxExecStop<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s stopExecRestart<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s restartExecReload<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s reload<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi<span class="token operator">-</span>user<span class="token punctuation">.</span>target<span class="token comment" spellcheck="true"># 以后就支持使用 systemctl start mynginx.service</span><span class="token comment" spellcheck="true"># 查看服务状态：</span>    systemctl status mynginx<span class="token punctuation">.</span>service    <span class="token comment" spellcheck="true"># disabled表示没有开机自启动</span>    Loaded<span class="token punctuation">:</span> loaded <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>systemd<span class="token operator">/</span>system<span class="token operator">/</span>mynginx<span class="token punctuation">.</span>service<span class="token punctuation">;</span> disabled<span class="token punctuation">;</span> vendor preset<span class="token punctuation">:</span> disabled<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开机自启动</span>    systemctl enable mynginx<span class="token comment" spellcheck="true"># 取消开机自启动</span>systemctl disable mynginx<span class="token punctuation">.</span>service</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux学习&quot;&gt;&lt;a href=&quot;#linux学习&quot; class=&quot;headerlink&quot; title=&quot;linux学习&quot;&gt;&lt;/a&gt;linux学习&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、虚拟软件安装&quot;&gt;&lt;a href=&quot;#一、虚拟软件安装&quot; cl</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="操作系统" scheme="http://huang_zhao.gitee.io/task/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 接口</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%8E%A5%E5%8F%A3/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-09-19T15:59:11.000Z</published>
    <updated>2020-09-18T11:01:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-接口"><a href="#1-接口" class="headerlink" title="1 接口"></a>1 接口</h3><p>接口的本质就是定义一个标准，起到限制和规范的作用，和抽象类有点相似，但是抽象类只规范类，接口规范的范围更大，对属性，函数，类都可以有限制作用</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口</span><span class="token comment" spellcheck="true">// 属性接口，对传入参数进行约束</span><span class="token comment" spellcheck="true">// 一般函数在传参的时候定义参数类型string，其实也是一种约束</span><span class="token comment" spellcheck="true">// 但这种约束是简单约束，我们需要自定制或者更复杂的约束就需要用到接口</span><span class="token keyword">interface</span> <span class="token class-name">FullName</span><span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token keyword">string</span>    secondName<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token comment" spellcheck="true">// 可选参数，可传可不传</span>    age<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">printName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>FullName<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>name<span class="token punctuation">.</span>secondName<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里函数传参必须要传一个满足接口规范的对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token string">"黄"</span><span class="token punctuation">,</span>    secondName<span class="token punctuation">:</span><span class="token string">"钊"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 也可以传其他无关参数,但是函数中的name无法使用</span>    xxx<span class="token punctuation">:</span><span class="token number">18</span>    <span class="token comment" spellcheck="true">// 可选参数可穿可不传</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果直接在传参括号内定义对象就只能有接口中的属性，不能添加额外的</span><span class="token function">printName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h3 id="2-封装ajax（接口小🌰）"><a href="#2-封装ajax（接口小🌰）" class="headerlink" title="2 封装ajax（接口小🌰）"></a>2 封装ajax（接口小🌰）</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口例子，实现ajax</span><span class="token keyword">interface</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span><span class="token keyword">string</span>    url<span class="token punctuation">:</span><span class="token keyword">string</span>    data<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span>    dataType<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span>Config<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>type<span class="token punctuation">,</span>config<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dataType<span class="token operator">==</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 真实请求api地址</span>    dataType<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-函数类型接口"><a href="#3-函数类型接口" class="headerlink" title="3 函数类型接口"></a>3 函数类型接口</h3><p>对传入的参数和返回值批量约束</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 函数类型接口</span><span class="token keyword">interface</span> <span class="token class-name">base</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用这个函数类型就必须遵循它的参数和返回值格式</span>    <span class="token punctuation">(</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> printMsg<span class="token punctuation">:</span>base <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> key<span class="token operator">+</span>num<span class="token punctuation">}</span><span class="token function">printMsg</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span></code></pre><h3 id="4-可索引接口：数组，对象的约束（不常用）"><a href="#4-可索引接口：数组，对象的约束（不常用）" class="headerlink" title="4 可索引接口：数组，对象的约束（不常用）"></a>4 可索引接口：数组，对象的约束（不常用）</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可索引接口 对数组的约束</span><span class="token keyword">interface</span> <span class="token class-name">userNum</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr<span class="token punctuation">:</span>userNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token string">"yyy"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 对对象的约束</span><span class="token keyword">interface</span> <span class="token class-name">userObj</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr<span class="token punctuation">:</span>userObj <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">:</span><span class="token string">"hz"</span><span class="token punctuation">]</span></code></pre><h3 id="5-类类型接口"><a href="#5-类类型接口" class="headerlink" title="5 类类型接口"></a>5 类类型接口</h3><p>和抽象类很相似</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token function">run</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里只是约束了得有这个方法，具体的传参和返回值没法约束</span>    <span class="token function">run</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="6-接口的继承"><a href="#6-接口的继承" class="headerlink" title="6 接口的继承"></a>6 接口的继承</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口的继承+类继承综合使用</span><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">People</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token function">work</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    age<span class="token punctuation">:</span><span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"is play"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Peo</span> <span class="token keyword">implements</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在工作"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在吃"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-接口&quot;&gt;&lt;a href=&quot;#1-接口&quot; class=&quot;headerlink&quot; title=&quot;1 接口&quot;&gt;&lt;/a&gt;1 接口&lt;/h3&gt;&lt;p&gt;接口的本质就是定义一个标准，起到限制和规范的作用，和抽象类有点相似，但是抽象类只规范类，接口规范的范围更大，对属性，函数，类</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts面向对象" scheme="http://huang_zhao.gitee.io/task/tags/ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 模块</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-09-19T15:59:11.000Z</published>
    <updated>2020-09-18T11:02:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-模块的定义"><a href="#1-模块的定义" class="headerlink" title="1 模块的定义"></a>1 模块的定义</h3><p>ts中<strong>内部模块</strong>现在称为“命名空间”，<strong>外部模块</strong>简称模块</p><p>ts中模块想要使用首先要在模块内部通过export把内的数据暴露出去，再在需要使用的地方import引入模块</p><h3 id="2-模块的简单使用"><a href="#2-模块的简单使用" class="headerlink" title="2 模块的简单使用"></a>2 模块的简单使用</h3><p><strong>被导入页面</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">printMsg</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>salary<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hz"</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token comment" spellcheck="true">// 默认导入，只能使用一次</span><span class="token keyword">export</span> <span class="token keyword">default</span> salary<span class="token keyword">export</span><span class="token punctuation">{</span>name <span class="token punctuation">,</span> age<span class="token punctuation">}</span></code></pre><p><strong>导入页面</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认导入的方式就不需要加花括号，但是只能导入一个</span><span class="token keyword">import</span> salary <span class="token keyword">from</span> <span class="token string">"./modules/func"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> printMsg as print<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./modules/func"</span><span class="token comment" spellcheck="true">// 可以多个一起导入，也可以起别名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-命名空间的简单使用"><a href="#3-命名空间的简单使用" class="headerlink" title="3 命名空间的简单使用"></a>3 命名空间的简单使用</h3><p>命名空间就是在一个ts文件中，使用名称空间包裹一个范围，这个范围内的数据只属于这个名称空间，在外部可以重复</p><p><strong>index.ts</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 如果其他页面要使用这个命名空间的数据就必须先导出namespace，再导出内部数据</span><span class="token keyword">export</span> namespace A<span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">printMsg</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>salary<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">}</span> <span class="token keyword">export</span> namespace B<span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">printMsg</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>salary<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">}</span> </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-模块的定义&quot;&gt;&lt;a href=&quot;#1-模块的定义&quot; class=&quot;headerlink&quot; title=&quot;1 模块的定义&quot;&gt;&lt;/a&gt;1 模块的定义&lt;/h3&gt;&lt;p&gt;ts中&lt;strong&gt;内部模块&lt;/strong&gt;现在称为“命名空间”，&lt;strong&gt;外部模块&lt;/s</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts基础" scheme="http://huang_zhao.gitee.io/task/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 泛型</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%B3%9B%E5%9E%8B/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%B3%9B%E5%9E%8B/</id>
    <published>2020-09-19T15:59:11.000Z</published>
    <updated>2020-09-18T11:01:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-泛型的定义"><a href="#1-泛型的定义" class="headerlink" title="1 泛型的定义"></a>1 泛型的定义</h3><p>泛型：要考虑到组件的可重用性和扩展性，要求组件不仅支持当前的数据类型，也要支持未来的数据类型，在创建大型系统时提供了十分灵活的功能</p><p>ts中的泛型类似于c#和java，用户可以自定义数据类型来使用组件</p><p>通俗理解：泛型就是解决 类 接口 方法的复用性，以及对不确定类型进行数据校验</p><h3 id="2-泛型函数"><a href="#2-泛型函数" class="headerlink" title="2 泛型函数"></a>2 泛型函数</h3><p>当我们需要一个方法传入什么类型就返回什么类型的时候就可以用到，和any不一样，any忽略了类型检查，可以返回一样的也可以返回不一样的</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 在函数名后加 &lt;T>,表示使用了泛型</span><span class="token comment" spellcheck="true">// 泛型的规则是</span><span class="token comment" spellcheck="true">// 1 你必须有一个/多个参数属于泛型类型</span><span class="token comment" spellcheck="true">// 2 返回值类型必须是泛型类型</span><span class="token comment" spellcheck="true">// 3 函数调用必须指定泛型的类型</span><span class="token keyword">function</span> getData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>msg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span>getData<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token string">"hz"</span><span class="token punctuation">)</span></code></pre><h3 id="3-泛型类"><a href="#3-泛型类" class="headerlink" title="3 泛型类"></a>3 泛型类</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 泛型</span><span class="token comment" spellcheck="true">// 在函数名后加 &lt;T>,表示使用了泛型</span><span class="token comment" spellcheck="true">// 泛型的规则是</span><span class="token comment" spellcheck="true">// 1 你必须有一个/多个参数属于泛型类型</span><span class="token comment" spellcheck="true">// 2 返回值类型必须是泛型类型</span><span class="token comment" spellcheck="true">// 3 函数调用必须指定泛型的类型</span><span class="token keyword">function</span> getData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>msg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// getData&lt;number>(123,456,"hz")</span><span class="token comment" spellcheck="true">// 定义一个类，有添加数据到数组的功能，也有求数组中最小元素的功能</span><span class="token keyword">class</span> <span class="token class-name">MinClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    list<span class="token punctuation">:</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>        <span class="token keyword">var</span> minMsg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>minMsg<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                minMsg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minMsg    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实例化类，并指定了泛型的类型</span><span class="token keyword">var</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinClass</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4-泛型接口"><a href="#4-泛型接口" class="headerlink" title="4 泛型接口"></a>4 泛型接口</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 泛型接口</span><span class="token keyword">interface</span> <span class="token class-name">ConfigFn</span><span class="token punctuation">{</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>value2<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">}</span><span class="token keyword">var</span> printMsg<span class="token punctuation">:</span>ConfigFn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>value2<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span>printMsg<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">)</span>printMsg<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"444"</span><span class="token punctuation">)</span></code></pre><h3 id="5-泛型类，以类为参数传递（小🌰）"><a href="#5-泛型类，以类为参数传递（小🌰）" class="headerlink" title="5 泛型类，以类为参数传递（小🌰）"></a>5 泛型类，以类为参数传递（小🌰）</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 定义几个类映射数据库的表</span><span class="token comment" spellcheck="true">// 定义一个MysqlDB操作数据添加到数据库</span><span class="token keyword">class</span> <span class="token class-name">MysqlDB</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    password <span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined        desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>desc    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个db对象，只能操作添加User类的数据</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlDB</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>admin<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"admin"</span>admin<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token number">123</span> db<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义一个db对象，只能操作添加Articld类的数据</span><span class="token keyword">var</span> dbA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlDB</span><span class="token operator">&lt;</span>Article<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token string">"金品梅"</span><span class="token punctuation">,</span>    desc<span class="token punctuation">:</span><span class="token string">"好看"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>dbA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-泛型的定义&quot;&gt;&lt;a href=&quot;#1-泛型的定义&quot; class=&quot;headerlink&quot; title=&quot;1 泛型的定义&quot;&gt;&lt;/a&gt;1 泛型的定义&lt;/h3&gt;&lt;p&gt;泛型：要考虑到组件的可重用性和扩展性，要求组件不仅支持当前的数据类型，也要支持未来的数据类型，在创建</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts高级" scheme="http://huang_zhao.gitee.io/task/tags/ts%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 装饰器</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2020-09-19T15:59:11.000Z</published>
    <updated>2020-09-18T11:02:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>模仿python的，没啥好说</p><p>用法基本一模一样</p><p>ts中的装饰器可以注入到类，属性，方法，参数上</p><h3 id="2-类装饰器"><a href="#2-类装饰器" class="headerlink" title="2 类装饰器"></a>2 类装饰器</h3><h4 id="2-1-无参装饰器"><a href="#2-1-无参装饰器" class="headerlink" title="2.1 无参装饰器"></a>2.1 无参装饰器</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    params<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apiUrl <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">}</span>@logClass<span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可能会报错，检测不到这个属性，是ide报的错不用管</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span></code></pre><h4 id="2-2-有参装饰器（装饰器工厂）"><a href="#2-2-有参装饰器（装饰器工厂）" class="headerlink" title="2.2 有参装饰器（装饰器工厂）"></a>2.2 有参装饰器（装饰器工厂）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 有参装饰器</span><span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apiUrl <span class="token operator">=</span> msg    <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token function">logClass</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span></code></pre><h3 id="3-属性装饰器"><a href="#3-属性装饰器" class="headerlink" title="3 属性装饰器"></a>3 属性装饰器</h3><p>注意点：</p><p>只能有参，传入的俩参数</p><ul><li>参数1：对于静态成员来说就是类的构造函数，对于实例成员来说就是类的原形对象</li><li>参数2：成员名字</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logPrototype</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>targat<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attr<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targat<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 注意这里在修改的时候需要用[]而不能直接点，当然也可以用原形链</span>        targat<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> params    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    @<span class="token function">logPrototype</span><span class="token punctuation">(</span><span class="token string">"baidu"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>url<span class="token punctuation">)</span></code></pre><h3 id="4-方法装饰器"><a href="#4-方法装饰器" class="headerlink" title="4 方法装饰器"></a>4 方法装饰器</h3><p>接受三个参数</p><ul><li>参数1：对于静态成员来说是类的构造函数，对于实例成员是类的原形</li><li>成员名字</li><li>成员的属性描述符</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>funcName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>funcName<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 这跟类装饰器没啥区别，直接拿到类了就能随便改了</span>        <span class="token comment" spellcheck="true">// 但是这里没有修改成功，看下面</span>        target<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logFunc</span><span class="token punctuation">(</span><span class="token string">"run func"</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     </code></pre><p><strong>替换方法</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>funcName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// desc.value 就是原来的方法</span>        <span class="token comment" spellcheck="true">// 直接替换了个新的</span>        <span class="token comment" spellcheck="true">// 但是我只想扩展不是想直接换了，看下面</span>        desc<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logFunc</span><span class="token punctuation">(</span><span class="token string">"run func"</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre><p><strong>修改方法</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 有参装饰器</span><span class="token keyword">function</span> <span class="token function">logFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    <span class="token comment" spellcheck="true">// console.log(params)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>funcName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// desc.value 就是原来的方法</span>        <span class="token keyword">var</span> oMethod <span class="token operator">=</span> desc<span class="token punctuation">.</span>value        desc<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            args <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 调用原来的方法</span>            <span class="token comment" spellcheck="true">// oMethod()</span>            <span class="token comment" spellcheck="true">// 为原来的方法传参</span>            oMethod<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logFunc</span><span class="token punctuation">(</span><span class="token string">"run func"</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"zaaa"</span><span class="token punctuation">)</span>     </code></pre><p>方法参数装饰器用的不多就不记了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1 定义&quot;&gt;&lt;/a&gt;1 定义&lt;/h3&gt;&lt;p&gt;模仿python的，没啥好说&lt;/p&gt;
&lt;p&gt;用法基本一模一样&lt;/p&gt;
&lt;p&gt;ts中的装饰器可以注入到类，属性，方法，参数上&lt;</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts高级" scheme="http://huang_zhao.gitee.io/task/tags/ts%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 类，继承，修饰符，静态，多态，抽象类</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/15/%E5%89%8D%E7%AB%AF/Typescript%20%E7%B1%BB%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/15/%E5%89%8D%E7%AB%AF/Typescript%20%E7%B1%BB%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6/</id>
    <published>2020-09-15T15:59:11.000Z</published>
    <updated>2020-09-18T11:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-类的定义"><a href="#1-类的定义" class="headerlink" title="1 类的定义"></a>1 类的定义</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token comment" spellcheck="true">// constructor 是类实例化触发的构造函数</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 可以通过类中的方法去对属性改值，取值</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name    <span class="token punctuation">}</span>    <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> peo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span>peo<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2 继承"></a>2 继承</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：通过extend super</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 继承要点1：必须继承父类的构造方法，可以在上面新增，但是不能缺</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 继承要点2：属性和方法的查找顺序优先从自己开始到父类</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> w <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-修饰符"><a href="#3-修饰符" class="headerlink" title="3 修饰符"></a>3 修饰符</h3><p>修饰符修饰的是类中的属性和方法</p><ul><li>public：公有<ul><li>在类中，子类中，类外部都可以访问</li></ul></li><li>protected：保护类型（封装）<ul><li>在类中，子类中可以访问，类外部不能访问</li></ul></li><li>private：私有<ul><li>只有在类中能访问，在子类和类外部都不能访问</li></ul></li></ul><p>注意：属性如果不加修饰符默认是public</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">protected</span> sex<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span>    <span class="token keyword">private</span> xxx<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 继承要点1：必须继承父类的构造方法，可以在上面新增，但是不能缺</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 继承要点2：属性和方法的查找顺序优先从自己开始到父类</span>    <span class="token comment" spellcheck="true">// 继承要点3：如果父类中有私有属性，子类中不能重复定义这个属性</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 类中的修饰符运用</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-静态属性-方法"><a href="#4-静态属性-方法" class="headerlink" title="4 静态属性/方法"></a>4 静态属性/方法</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">protected</span> sex<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span>    <span class="token keyword">private</span> xxx<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">static</span> wifi<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"lxt"</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实例方法,只能使用实例属性</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态方法，静态方法不能直接调用属性，只能调用静态属性</span>    <span class="token keyword">static</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>wifi<span class="token operator">+</span><span class="token string">"在play"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span>People<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="5-多态"><a href="#5-多态" class="headerlink" title="5 多态"></a>5 多态</h3><p>ts中的多态属于继承的一种形式，父类定义方法但不去实现，子类去实现父类的方法，实现多态</p><p>ts中的多态属于鸭子类型，和python和go中的多态相似，都属于非侵入式，就算不写也不会报错</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃肉"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃🐭"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"xd"</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"xm"</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="6-抽象类，抽象方法"><a href="#6-抽象类，抽象方法" class="headerlink" title="6 抽象类，抽象方法"></a>6 抽象类，抽象方法</h3><p>注意点：</p><ul><li>抽象方法无法单独存在必须定义在抽象类中</li><li>继承抽象类的子类，必须实现抽象类中的抽象方法</li><li>抽象类无法实例化</li><li>抽象类的继承也属于多态，属于侵入式，没有重写就会报错</li></ul><pre class=" language-ts"><code class="language-ts">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义在抽象类内部的抽象方法</span>    <span class="token comment" spellcheck="true">// 不能在这里实现</span>    <span class="token comment" spellcheck="true">// 必须定义返回值类型：void为无返回值</span>    abstract <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃肉"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃🐭"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"xd"</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"xm"</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-类的定义&quot;&gt;&lt;a href=&quot;#1-类的定义&quot; class=&quot;headerlink&quot; title=&quot;1 类的定义&quot;&gt;&lt;/a&gt;1 类的定义&lt;/h3&gt;&lt;pre class=&quot; language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts面向对象" scheme="http://huang_zhao.gitee.io/task/tags/ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>go 结构体、方法、接口</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/14/go/%E5%9F%BA%E7%A1%80/go%20%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%8E%A5%E5%8F%A3/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/14/go/%E5%9F%BA%E7%A1%80/go%20%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-09-14T14:47:11.000Z</published>
    <updated>2020-09-14T13:58:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1 结构体"></a>1 结构体</h3><p>定义：结构体是多个字段的集合</p><p>面向对象中类的定义是属性和方法的集合，结构体可以看做是属性的集合</p><h4 id="1-1-结构体定义（创建命名结构体）"><a href="#1-1-结构体定义（创建命名结构体）" class="headerlink" title="1.1 结构体定义（创建命名结构体）"></a>1.1 结构体定义（创建命名结构体）</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// type关键字 结构体名 struct关键字{}</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 如果是大写开头表示可以在作为包导入中引用</span>    Age <span class="token builtin">int</span>    sex <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 两种定义方式，按位置必须全传，按关键字可以不按顺序少传</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">}</span>    peo2 <span class="token operator">:=</span> People<span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"lxt"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>补充：如果只定义不初始化内部只存在对应字段的零值</p><h4 id="1-2-创建匿名结构体"><a href="#1-2-创建匿名结构体" class="headerlink" title="1.2 创建匿名结构体"></a>1.2 创建匿名结构体</h4><p>匿名结构体通常在创建的时候就定义，一般只用一次，在整合多个数据类型的时候可以用，通常定义在方法内部或者结构体内部</p><pre class=" language-go"><code class="language-go">dog <span class="token operator">:=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">189</span><span class="token punctuation">,</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span></code></pre><h4 id="1-3-访问-修改结构体字段"><a href="#1-3-访问-修改结构体字段" class="headerlink" title="1.3 访问/修改结构体字段"></a>1.3 访问/修改结构体字段</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 直接.访问修改赋值</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-结构体指针"><a href="#1-4-结构体指针" class="headerlink" title="1.4 结构体指针"></a>1.4 结构体指针</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 指向结构体的指针，用法和结构体没差</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 原本必须要写(*peo).age go内部支持简写</span>    peo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-5-匿名字段"><a href="#1-5-匿名字段" class="headerlink" title="1.5 匿名字段"></a>1.5 匿名字段</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 匿名字段本质就是把字段类型当名字一起使用</span><span class="token comment" spellcheck="true">// 但是同时只能存在一种类型，就是不能写俩string</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span>    <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"xxx"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-6-嵌套结构体"><a href="#1-6-嵌套结构体" class="headerlink" title="1.6 嵌套结构体"></a>1.6 嵌套结构体</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span>    Hobby Hobby<span class="token punctuation">}</span><span class="token keyword">type</span> Hobby <span class="token keyword">struct</span> <span class="token punctuation">{</span>    hobbyId <span class="token builtin">int</span>    hobbyName <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义方式1</span>    <span class="token comment" spellcheck="true">//peo.Hobby.hobbyId = 1</span>    <span class="token comment" spellcheck="true">//peo.Hobby.hobbyName= "xxx"</span>    <span class="token comment" spellcheck="true">// 定义方式2</span>    peo<span class="token punctuation">.</span>Hobby <span class="token operator">=</span> Hobby<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"xxx"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>Hobby<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-7-字段提升"><a href="#1-7-字段提升" class="headerlink" title="1.7 字段提升"></a>1.7 字段提升</h4><p>在<strong>不重名</strong>的情况下可以把嵌套在内部的结构体字段提升到外层结构体来使用，如果重名就会优先使用外层结构体的字段名</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 必须使用匿名嵌套结构体才能提升</span>    Hobby<span class="token punctuation">}</span><span class="token keyword">type</span> Hobby <span class="token keyword">struct</span> <span class="token punctuation">{</span>    hobbyId <span class="token builtin">int</span>    hobbyName <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span>Hobby <span class="token operator">=</span> Hobby<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"xxx"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>hobbyName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>hobbyId<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-8-结构体相等性"><a href="#1-8-结构体相等性" class="headerlink" title="1.8 结构体相等性"></a>1.8 结构体相等性</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo1 <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    peo2 <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 两个字段稍微一点不同就是false</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo1 <span class="token operator">==</span> peo2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意：结构体中只有全是值类型才能比较，如果存在引用类型比如切片，map这种引用类型就不能比较</span></code></pre><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2 方法"></a>2 方法</h3><p>方法就是在定义函数之前加一个特殊的接收器类型，接收器可以是结构体或者非结构体，接收器内部可以访问这个方法</p><h4 id="1-1-定义一个方法"><a href="#1-1-定义一个方法" class="headerlink" title="1.1 定义一个方法"></a>1.1 定义一个方法</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为People结构体绑定了printName方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化一个结构体对象</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-2-函数能实现同样的功能，为什么要方法？"><a href="#1-2-函数能实现同样的功能，为什么要方法？" class="headerlink" title="1.2 函数能实现同样的功能，为什么要方法？"></a>1.2 函数能实现同样的功能，为什么要方法？</h4><ul><li>go不是纯粹的面向对象的语言，go不支持类，方法是对应面向对象中对象的方法</li><li>一个方法可以绑定给多个不同的结构体，但是一个函数不能接受不同的结构体作为参数</li></ul><h4 id="1-3-指针接收器与值接收器"><a href="#1-3-指针接收器与值接收器" class="headerlink" title="1.3 指针接收器与值接收器"></a>1.3 指针接收器与值接收器</h4><p>如果是在方法中</p><p>有值接收器，那它可以接收值接收器和指针接收器</p><p>有指针接收器，那它可以接收值接收器和指针接收器</p><p>总结：不管方法的接收器是什么，都可以用值或者指针去接受，两种接收器的区别就是：值接收器是值传递，指针接收器是引用传递</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果只是简单的值传递，那在内部改的值其实是一个copy的新值</span><span class="token comment" spellcheck="true">// 值接收器</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lxt"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果需要改动真的生效，就需要用到指针接收器</span><span class="token comment" spellcheck="true">// 指针接收器（全都用这个就行了）</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>People<span class="token punctuation">)</span><span class="token function">changeName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lxt"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//peo.changeName()  // 没有改原值</span>    peo<span class="token punctuation">.</span><span class="token function">changeName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    peo<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-非结构体方法"><a href="#1-4-非结构体方法" class="headerlink" title="1.4 非结构体方法"></a>1.4 非结构体方法</h4><p>如果要对非结构体绑定方法，那这个非结构体必须是我们自己定义的类型或者重命名的类型</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> MyInt <span class="token builtin">int</span><span class="token comment" spellcheck="true">// 注意在运算中类型必须一致才能运算</span><span class="token comment" spellcheck="true">// int不能传入结构体，必须重命名</span><span class="token keyword">func</span> <span class="token punctuation">(</span>i MyInt<span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span>x MyInt<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i MyInt <span class="token operator">=</span> <span class="token number">5</span>    i<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="3-接口"><a href="#3-接口" class="headerlink" title="3 接口"></a>3 接口</h3><p>接口就是一系列方法的集合，类似于面向对象中的多态，go语言的接口也支持鸭子类型</p><p>面向对象领域中，接口是指定义和规范一个子类的行为</p><h4 id="3-1-接口简单实现（鸭子类型）（非侵入式）"><a href="#3-1-接口简单实现（鸭子类型）（非侵入式）" class="headerlink" title="3.1 接口简单实现（鸭子类型）（非侵入式）"></a>3.1 接口简单实现（鸭子类型）（非侵入式）</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> TDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> DDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    salary <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TDUCK"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DDUCK"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"T EAT"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D EAT"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 让Tduck和Dduck都实现Duck接口</span>    <span class="token comment" spellcheck="true">// 方式一：通过鸭子类型，写同样的方法</span>    t <span class="token operator">:=</span>TDuck<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token operator">:=</span>DDuck<span class="token punctuation">{</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">}</span>    d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-侵入式接口"><a href="#3-2-侵入式接口" class="headerlink" title="3.2 侵入式接口"></a>3.2 侵入式接口</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TDUCK"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DDUCK"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"T EAT"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D EAT"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> TDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> DDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    salary <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 让Tduck和Dduck都实现Duck接口</span>    <span class="token comment" spellcheck="true">// 方式二：侵入式接口，接口方法没有，报错</span>    <span class="token keyword">var</span> duck Duck    t<span class="token operator">:=</span>TDuck<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    duck<span class="token operator">=</span>t    duck<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token operator">:=</span>DDuck<span class="token punctuation">{</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">}</span>    duck <span class="token operator">=</span> d    duck<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-接口的内部表示"><a href="#3-3-接口的内部表示" class="headerlink" title="3.3 接口的内部表示"></a>3.3 接口的内部表示</h4><p>我们可以把接口看作内部的一个元组 (type, value)。<br>type 是接口底层的具体类型（Concrete Type），而 value 是具体类型的值。</p><h4 id="3-4-类型断言"><a href="#3-4-类型断言" class="headerlink" title="3.4 类型断言"></a>3.4 类型断言</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TDUCK"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DDUCK"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"T EAT"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D EAT"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> TDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> DDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    salary <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 断言类型</span>    <span class="token comment" spellcheck="true">// 把接口类型转换成结构体类型</span>    <span class="token comment" spellcheck="true">// 定义了一个接口类型</span>    <span class="token keyword">var</span> tduck Duck <span class="token operator">=</span> TDuck<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 断言这个值的类型，v为值，ok为判断的bool</span>    <span class="token comment" spellcheck="true">// 如果断言失败，ok为false v为空值</span>    v<span class="token punctuation">,</span>ok <span class="token operator">:=</span> tduck<span class="token punctuation">.</span><span class="token punctuation">(</span>TDuck<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>类型断言扩展</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//5 类型选择(通过switch)</span><span class="token comment" spellcheck="true">//var duck Duck =TDuck{"egon","男",1,"刘亦菲"}</span><span class="token comment" spellcheck="true">////var duck Duck =PDuck{"egon","男",1}</span><span class="token comment" spellcheck="true">//test4(duck)</span><span class="token comment" spellcheck="true">//使用switch，选择成功，拿到结构体对象</span><span class="token comment" spellcheck="true">//func test4(duck Duck)  {</span><span class="token comment" spellcheck="true">//    switch v:=duck.(type) {</span><span class="token comment" spellcheck="true">//    case PDuck:</span><span class="token comment" spellcheck="true">//        fmt.Println(v.name)</span><span class="token comment" spellcheck="true">//        fmt.Println("我是普通鸭子")</span><span class="token comment" spellcheck="true">//    case TDuck:</span><span class="token comment" spellcheck="true">//        fmt.Println(v.wife)</span><span class="token comment" spellcheck="true">//        fmt.Println("我是唐老鸭")</span><span class="token comment" spellcheck="true">//    default:</span><span class="token comment" spellcheck="true">//        fmt.Println(v)</span><span class="token comment" spellcheck="true">//        fmt.Println("我是鸭子这个类")</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span></code></pre><h4 id="3-5-空接口"><a href="#3-5-空接口" class="headerlink" title="3.5 空接口"></a>3.5 空接口</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Empty <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个空接口</span>    <span class="token comment" spellcheck="true">// 所有数据类型都实现了空接口，所以空接口可以接受任意类型的值</span>    <span class="token keyword">var</span> e Empty    a <span class="token operator">:=</span> <span class="token number">123</span>    e <span class="token operator">=</span> a    <span class="token comment" spellcheck="true">// 虽然可以接受任意类型，但是有一个缺点就是本身没有任何方法</span>    <span class="token comment" spellcheck="true">// 所以要使用原来值类型的方法就必须类型断言回去，再使用</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>同理，集合中也可以放入空接口来接收任意值</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//var a[3]Duck</span><span class="token comment" spellcheck="true">//a[1]=PDuck{}</span><span class="token comment" spellcheck="true">//a[2]=TDuck{}</span><span class="token comment" spellcheck="true">//var a map[string]interface{}= make(map[string]interface{})</span><span class="token comment" spellcheck="true">//a["name"]="lqz"</span><span class="token comment" spellcheck="true">//a["age"]=19</span><span class="token comment" spellcheck="true">//a["duck"]=PDuck{}</span></code></pre><h4 id="3-7-实现多个接口"><a href="#3-7-实现多个接口" class="headerlink" title="3.7 实现多个接口"></a>3.7 实现多个接口</h4><p>方式一：直接写方法就行</p><p>方式二：通过接口嵌套</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    Animal    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//type Cat interface {</span><span class="token comment" spellcheck="true">//    Animal</span><span class="token comment" spellcheck="true">//    speak()</span><span class="token comment" spellcheck="true">//    run()</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//如果一个结构体实现duck接口</span><span class="token keyword">type</span> PDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    sex <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 实现多个接口</span>    <span class="token comment" spellcheck="true">//var t TDuck=TDuck{}</span>    <span class="token comment" spellcheck="true">//var a Animal</span>    <span class="token comment" spellcheck="true">//var d Duck</span>    <span class="token comment" spellcheck="true">////一旦转到某个接口上，只能使用接口的方法，自身属性和自身方法需要类型断言后才能使用</span>    <span class="token comment" spellcheck="true">//a=t</span>    <span class="token comment" spellcheck="true">//d=ta</span>    <span class="token comment" spellcheck="true">//2 接口嵌套</span>    <span class="token comment" spellcheck="true">//var a Animal</span>    <span class="token comment" spellcheck="true">//var d Duck</span>    <span class="token comment" spellcheck="true">//var c PDuck=PDuck{}</span>    <span class="token comment" spellcheck="true">//a=c</span>    <span class="token comment" spellcheck="true">//d=c</span>    <span class="token comment" spellcheck="true">//3 接口的零值</span>    <span class="token comment" spellcheck="true">//var a Animal   //nil 是引用类型</span>    <span class="token comment" spellcheck="true">//fmt.Println(a)</span><span class="token punctuation">}</span></code></pre><h3 id="4-自定义集合类型"><a href="#4-自定义集合类型" class="headerlink" title="4 自定义集合类型"></a>4 自定义集合类型</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">//定义MySet类型</span><span class="token keyword">type</span> MySet <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token comment" spellcheck="true">//判断元素是否存在</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">isExist</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回set长度</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">set</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">delete</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试代码</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个set</span>    <span class="token keyword">var</span> a MySet <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span>MySet<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//相当于</span>    <span class="token comment" spellcheck="true">//var a MySet = make(map[interface{}]bool)</span>    <span class="token comment" spellcheck="true">//打印set的长度</span>    <span class="token comment" spellcheck="true">//fmt.Println(a.len())</span>    <span class="token comment" spellcheck="true">//放入一个值</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//放入一个相同值</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//打印长度，还是1</span>    <span class="token comment" spellcheck="true">//fmt.Println(a.len())</span>    <span class="token comment" spellcheck="true">//判断1是否存在</span>    <span class="token comment" spellcheck="true">//fmt.Println(a.isExist(2))</span>    <span class="token comment" spellcheck="true">////删除1</span>    a<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">////判断1是否存在</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">isExist</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span><span class="token keyword">range</span> a<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-make和new的区别"><a href="#5-make和new的区别" class="headerlink" title="5 make和new的区别"></a>5 make和new的区别</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment" spellcheck="true">//make和new的区别</span><span class="token keyword">type</span> PDuck1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    sex <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//make是引用类型初始化的时候用的</span>    <span class="token comment" spellcheck="true">//var per *PDuck1 =new(PDuck1)    //new 是返回指向这个类型的指针</span>    <span class="token comment" spellcheck="true">//fmt.Println(per)</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//var per1 =&amp;PDuck1{}</span>    <span class="token comment" spellcheck="true">//fmt.Println(per1)</span>    <span class="token comment" spellcheck="true">//var per2 = make([]int,3,4)  //make是具体的造引用类型  //new是造指向这个类型的指针</span>    <span class="token comment" spellcheck="true">//var per2 *[]int= new([]int)</span>    <span class="token comment" spellcheck="true">//fmt.Println(per2)</span>    <span class="token comment" spellcheck="true">//(*per2)=append((*per2),99)</span>    <span class="token comment" spellcheck="true">//fmt.Println(per2)</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-结构体&quot;&gt;&lt;a href=&quot;#1-结构体&quot; class=&quot;headerlink&quot; title=&quot;1 结构体&quot;&gt;&lt;/a&gt;1 结构体&lt;/h3&gt;&lt;p&gt;定义：结构体是多个字段的集合&lt;/p&gt;
&lt;p&gt;面向对象中类的定义是属性和方法的集合，结构体可以看做是属性的集合&lt;/p&gt;</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="go" scheme="http://huang_zhao.gitee.io/task/tags/go/"/>
    
    <category term="go面向接口" scheme="http://huang_zhao.gitee.io/task/tags/go%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Typescript函数</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/14/%E5%89%8D%E7%AB%AF/Typescript%E5%87%BD%E6%95%B0/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/14/%E5%89%8D%E7%AB%AF/Typescript%E5%87%BD%E6%95%B0/</id>
    <published>2020-09-14T13:59:11.000Z</published>
    <updated>2020-09-14T14:00:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-函数基本定义"><a href="#1-函数基本定义" class="headerlink" title="1 函数基本定义"></a>1 函数基本定义</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5中函数写法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hz"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es5 中的匿名函数</span><span class="token keyword">var</span> run1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es6中有名函数，推荐返回值指定类型</span><span class="token keyword">function</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hz"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es6中匿名函数</span><span class="token keyword">var</span> run3 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span></code></pre><h3 id="2-参数和返回值"><a href="#2-参数和返回值" class="headerlink" title="2 参数和返回值"></a>2 参数和返回值</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 定义函数传参</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义没有返回值的函数</span><span class="token keyword">function</span> <span class="token function">run4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里return就会报错，因为已经指定了void没有返回值</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es5 的写法可以传也可以不传，对返回值没有要求</span><span class="token keyword">function</span> <span class="token function">run5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span></code></pre><h3 id="3-可选参数"><a href="#3-可选参数" class="headerlink" title="3 可选参数"></a>3 可选参数</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可选参数</span><span class="token comment" spellcheck="true">// ts中默认必须按照形参传实参，如果设置某个参数可以不传就需要配置</span><span class="token keyword">function</span> <span class="token function">prinyMsg</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">   </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> age保密`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">prinyMsg</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token keyword">var</span> res1 <span class="token operator">=</span> <span class="token function">prinyMsg</span><span class="token punctuation">(</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span></code></pre><p>注意：可选参数必须放在形参的最后面，不然会报错</p><h3 id="4-默认参数"><a href="#4-默认参数" class="headerlink" title="4 默认参数"></a>4 默认参数</h3><p>es5中不能设置默认参数，es6和ts中都可以设置默认参数</p><p>注意：默认参数也必须写在最后，否则没有效果</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认参数</span><span class="token keyword">function</span> <span class="token function">prinyMsg2</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">   </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> age保密`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">prinyMsg2</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">prinyMsg2</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><h3 id="5-剩余参数（三点运算符）"><a href="#5-剩余参数（三点运算符）" class="headerlink" title="5 剩余参数（三点运算符）"></a>5 剩余参数（三点运算符）</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 也可以先传一个，后面的再接受起来</span><span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token operator">...</span>result<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> a<span class="token operator">+</span>b    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="6-函数重载"><a href="#6-函数重载" class="headerlink" title="6 函数重载"></a>6 函数重载</h3><p>es5中出现同名函数，下面的会替换上面的</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 方法重载</span><span class="token comment" spellcheck="true">// 如果我只写两个getInfo就会报错，必须要有重载函数</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是"</span><span class="token operator">+</span> str    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我的年龄是"</span> <span class="token operator">+</span> str    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 且这里传参必须传能找到的，否则报错</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="7-箭头函数"><a href="#7-箭头函数" class="headerlink" title="7 箭头函数"></a>7 箭头函数</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es6 ts</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 箭头函数中的this指代上下文</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-函数基本定义&quot;&gt;&lt;a href=&quot;#1-函数基本定义&quot; class=&quot;headerlink&quot; title=&quot;1 函数基本定义&quot;&gt;&lt;/a&gt;1 函数基本定义&lt;/h3&gt;&lt;pre class=&quot; language-ts&quot;&gt;&lt;code class=&quot;language-t</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts基础" scheme="http://huang_zhao.gitee.io/task/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>es5面向对象（ts面向对象前提扩展）</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/14/%E5%89%8D%E7%AB%AF/es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%89%8D%E6%8F%90%E6%89%A9%E5%B1%95%EF%BC%89/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/14/%E5%89%8D%E7%AB%AF/es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%89%8D%E6%8F%90%E6%89%A9%E5%B1%95%EF%BC%89/</id>
    <published>2020-09-14T13:58:11.000Z</published>
    <updated>2020-09-14T13:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="es5面向对象（ts面向对象前提扩展）"><a href="#es5面向对象（ts面向对象前提扩展）" class="headerlink" title="es5面向对象（ts面向对象前提扩展）"></a>es5面向对象（ts面向对象前提扩展）</h2><h3 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1 创建对象"></a>1 创建对象</h3><p>定义，创建，原形链，静态方法</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 配置静态方法</span>Peopel<span class="token punctuation">.</span>getInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是类的静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>sex<span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>Peopel<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2 继承"></a>2 继承</h3><h4 id="2-1-对象冒充实现继承"><a href="#2-1-对象冒充实现继承" class="headerlink" title="2.1 对象冒充实现继承"></a>2.1 对象冒充实现继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：原形链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Peopel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对象冒充实现继承</span>    <span class="token comment" spellcheck="true">// 可以调用父类中的属性和方法，除原形链的方法和属性外</span><span class="token punctuation">}</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-2-原形链实现继承"><a href="#2-2-原形链实现继承" class="headerlink" title="2.2 原形链实现继承"></a>2.2 原形链实现继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：原形链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链即可以是用父类原型链扩展的，也可以使用父类中的属性和方法</span>Web<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peopel</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 存在问题：在实例化子类的时候无法给父类传参</span></code></pre><h4 id="3-3-原形链-构造函数组合继承"><a href="#3-3-原形链-构造函数组合继承" class="headerlink" title="3.3 原形链+构造函数组合继承"></a>3.3 原形链+构造函数组合继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：原形链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    Peopel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第一种写法</span>Web<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第二种写法</span>Web<span class="token punctuation">.</span>protorype <span class="token operator">=</span> Peopel<span class="token punctuation">.</span>protorype<span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;es5面向对象（ts面向对象前提扩展）&quot;&gt;&lt;a href=&quot;#es5面向对象（ts面向对象前提扩展）&quot; class=&quot;headerlink&quot; title=&quot;es5面向对象（ts面向对象前提扩展）&quot;&gt;&lt;/a&gt;es5面向对象（ts面向对象前提扩展）&lt;/h2&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts基础" scheme="http://huang_zhao.gitee.io/task/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Typescript入门，基本数据类型</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/13/%E5%89%8D%E7%AB%AF/Typescript%E5%85%A5%E9%97%A8%EF%BC%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/13/%E5%89%8D%E7%AB%AF/Typescript%E5%85%A5%E9%97%A8%EF%BC%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-09-13T14:47:11.000Z</published>
    <updated>2020-09-14T13:59:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1 基本介绍"></a>1 基本介绍</h3><p>ts是js的超集，是目前前端必备的基础，包含了es5，es6的语法</p><p>也可以集成到vue中</p><p>安装：cnpm install -g typescript</p><p>查看版本：tsc -v</p><p>语言类型：静态弱类型</p><p>无法直接在浏览器运行，需要编译成js代码</p><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h3><h4 id="2-1-如何配置自动编译"><a href="#2-1-如何配置自动编译" class="headerlink" title="2.1 如何配置自动编译"></a>2.1 如何配置自动编译</h4><p>使用idev：vscode</p><p>在vscode中在项目下cmd窗口输入<code>tsc --init</code>就会自动生成一个.json的配置文件</p><p>修改配置文件中</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认是注释的解开注释即可</span><span class="token string">"outDir"</span><span class="token punctuation">:</span> <span class="token string">"./js"</span><span class="token comment" spellcheck="true">// 会把编译完成的ts代码放到js目录下的文件中</span></code></pre><p>然后点击终端–typescript–监视配置文件</p><p>如果报错9成是因为tsc权限不足</p><p>解决方式：以管理员方式打开cmd</p><p>输入<code>set-ExecutionPolicy RemoteSigned</code></p><p>再输入A或者Y即可</p><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3 数据类型"></a>3 数据类型</h3><h4 id="3-1-数据类型定义"><a href="#3-1-数据类型定义" class="headerlink" title="3.1 数据类型定义"></a>3.1 数据类型定义</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 布尔类型 boolean</span><span class="token keyword">let</span> boo<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// let关键字 变量名:变量类型 = 值</span></code></pre><h4 id="3-2-数字类型-number"><a href="#3-2-数字类型-number" class="headerlink" title="3.2 数字类型(number)"></a>3.2 数字类型(number)</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123.3</span><span class="token comment" spellcheck="true">// 数值类型包括整形和浮点型</span></code></pre><h4 id="3-3-字符类型（string）"><a href="#3-3-字符类型（string）" class="headerlink" title="3.3 字符类型（string）"></a>3.3 字符类型（string）</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> str<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"hz"</span></code></pre><h4 id="3-4-数组类型（array）"><a href="#3-4-数组类型（array）" class="headerlink" title="3.4 数组类型（array）"></a>3.4 数组类型（array）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 数组在定义的时候必须指定内部的类型</span><span class="token comment" spellcheck="true">// 第一种定义方式</span><span class="token keyword">let</span> test_arry1<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span><span class="token keyword">let</span> test_arry2<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"lxt"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 推荐用双引号</span><span class="token comment" spellcheck="true">// 第二种定义方式</span><span class="token keyword">let</span> test_arry3<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 第三种定义方式</span><span class="token comment" spellcheck="true">// 通过any类型就可以放任意类型</span><span class="token keyword">let</span> arr<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">]</span></code></pre><h4 id="3-5-元组类型（tuple）"><a href="#3-5-元组类型（tuple）" class="headerlink" title="3.5 元组类型（tuple）"></a>3.5 元组类型（tuple）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可以定义内部类型的数组，必须一一对应</span><span class="token comment" spellcheck="true">// 元组类型（数组的一种）</span><span class="token keyword">let</span> test_arry4<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"nb"</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h4 id="3-6-枚举类型（enum）"><a href="#3-6-枚举类型（enum）" class="headerlink" title="3.6 枚举类型（enum）"></a>3.6 枚举类型（enum）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 枚举类型，相当于创建一种新的类型，通过标识符和数值的对应来表示值类</span><span class="token comment" spellcheck="true">// 用于标识一种状态</span><span class="token keyword">enum</span> Flag <span class="token punctuation">{</span>success<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">var</span> f<span class="token punctuation">:</span>Flag <span class="token operator">=</span> Flag<span class="token punctuation">.</span>success console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Flag<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2 </span><span class="token comment" spellcheck="true">// 如果枚举类型没有定义值，打印的就是索引值</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>red<span class="token punctuation">,</span>blue<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>green<span class="token punctuation">}</span><span class="token keyword">var</span> c<span class="token punctuation">:</span>Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>redconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6 如果上一个对应值不是索引，就会按照上一个值递增1</span></code></pre><h4 id="3-7-任意类型（any）"><a href="#3-7-任意类型（any）" class="headerlink" title="3.7 任意类型（any）"></a>3.7 任意类型（any）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 任意类型 any</span><span class="token keyword">let</span> data<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">123</span>data <span class="token operator">=</span> <span class="token string">'123'</span><span class="token comment" spellcheck="true">// 任意类型的用途</span><span class="token comment" spellcheck="true">// 当我们需要用变量接受一个对象时，js中是可以直接接受</span><span class="token comment" spellcheck="true">// 必须指定any</span><span class="token keyword">let</span> oBox<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>oBox<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span></code></pre><h4 id="3-8-其他类型（never类型）的子类型"><a href="#3-8-其他类型（never类型）的子类型" class="headerlink" title="3.8 其他类型（never类型）的子类型"></a>3.8 其他类型（never类型）的子类型</h4><p>代表从不会出现的值</p><p>以为这never类型的变量只能被类型所赋值</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 其他类型（never类型）的子类型</span><span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">// num此时只能被赋值undefined</span><span class="token keyword">var</span> num<span class="token punctuation">:</span>undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果被赋值就是number类型，没赋值就是undefined类型</span><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// null</span><span class="token comment" spellcheck="true">// undefined可以不赋值是因为他不仅可以作为类型，也可以作为值，而null不一样，如果要定义null类型就必须赋值null值</span><span class="token keyword">var</span> num1<span class="token punctuation">:</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 综合运用</span><span class="token comment" spellcheck="true">// 如果我们对一个值的类型不能确定，不仅可以用any，也可以用|分隔可能出现的类型</span><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>num <span class="token operator">=</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// null</span>num <span class="token operator">=</span> <span class="token number">123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span></code></pre><h4 id="3-9-void表示没有任何类型"><a href="#3-9-void表示没有任何类型" class="headerlink" title="3.9 void表示没有任何类型"></a>3.9 void表示没有任何类型</h4><p>一般用于定义方法的时候没有任何返回值</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 表示这个方法没有返回值</span><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'456'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果一个方法有返回值，就指定返回值类型</span><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1 基本介绍&quot;&gt;&lt;/a&gt;1 基本介绍&lt;/h3&gt;&lt;p&gt;ts是js的超集，是目前前端必备的基础，包含了es5，es6的语法&lt;/p&gt;
&lt;p&gt;也可以集成到vue中&lt;/p</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts基础" scheme="http://huang_zhao.gitee.io/task/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议查漏补缺</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/13/%E5%89%8D%E7%AB%AF/HTTP%E5%8D%8F%E8%AE%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/13/%E5%89%8D%E7%AB%AF/HTTP%E5%8D%8F%E8%AE%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</id>
    <published>2020-09-13T05:20:11.000Z</published>
    <updated>2020-09-13T14:49:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、HTTP协议版本区别"><a href="#一、HTTP协议版本区别" class="headerlink" title="一、HTTP协议版本区别"></a>一、HTTP协议版本区别</h3><ul><li>0.9 远古版本，只有一个GET命令，只支持纯文本</li><li>1.1 主流版本<ul><li>引入了持久链接，通过请求头中的<code> keep-alive</code>来设置</li><li>引入了管道机制，同一个tcp链接可以同时发送多个请求</li><li>支持断点续传，请求头中的<code> range</code>来实现</li><li>使用了虚拟网络，一个物理机上可以存在多个虚拟主机，共享一个ip地址</li></ul></li><li>2.0 先进版本<ul><li>二进制分帧：头信息和数据体都是二进制</li><li>头部压缩：在1.1版本头部信息会偏重，而body只有几十个字节，通过HPACK算法进行亚索</li><li>多路复用：一个TCP链接，哭护短和浏览器都可以同时发出多个请求，不用按顺序一一对应，解决了队头阻塞的问题</li><li>请求优先级：可以设置数据帧的优先级，让服务器先处理重要的请求</li></ul></li></ul><h3 id="二、状态码"><a href="#二、状态码" class="headerlink" title="二、状态码"></a>二、状态码</h3><ul><li>1xx：代表请求已经被接受，需要后续处理</li><li>2xx：表示成功</li><li>3xx：重定向状态</li><li>4xx：客户端有误</li><li>5xx：服务器错误</li></ul><h4 id="1xx-信息类"><a href="#1xx-信息类" class="headerlink" title="1xx 信息类"></a>1xx 信息类</h4><p>接受的请求正在处理，信息类状态码</p><h4 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx 成功"></a>2xx 成功</h4><ul><li><p>200 OK 表示从客户端发来的请求在服务器端被正确请求。</p></li><li><p>204 No content，表示请求成功，但没有资源可返回。</p></li><li><p>206 Partial Content，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求 响应报文中包含由 <strong>「Content-Range」</strong> 指定范围的实体内容。</p></li></ul><h4 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h4><ul><li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL，这时应该按 Location 首部字段提示的 URI 重新保存。</li><li>302 found，临时性重定向，表示资源临时被分配了新的 URL。</li><li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源。</li><li>304 not modified，当协商缓存命中时会返回这个状态码。</li><li>307 temporary redirect，临时重定向，和302含义相同,不会改变method</li></ul><p>注意区分：301（永久重定向），302（临时重定向）</p><h4 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx 客户端错误"></a>4xx 客户端错误</h4><ul><li>400 bad request，请求报文存在语法错误。</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息。</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝，可能遇到跨站请求伪造</li><li>404 not found，表示在服务器上没有找到请求的资源，可能是网址输错了</li><li>405 Method Not Allowed，服务器禁止使用该方法，客户端可以通过options方法来查看服务器允许的访问方法，可能遇到了cors，跨域问题</li></ul><h4 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx 服务器错误"></a>5xx 服务器错误</h4><ul><li>500 internal sever error，表示服务器端在执行请求时发生了错误。</li><li>502 Bad Gateway，服务器自身是正常的，访问的时候出了问题，具体啥错误我们不知道。</li><li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求。</li></ul><h3 id="三、HTTP的缓存策略"><a href="#三、HTTP的缓存策略" class="headerlink" title="三、HTTP的缓存策略"></a>三、HTTP的缓存策略</h3><h4 id="1-强缓存"><a href="#1-强缓存" class="headerlink" title="1 强缓存"></a>1 强缓存</h4><p>两个关键字段：Expires，Cache-Control</p><p>HTTP1.0版本，使用的是Expires，HTTP1.1使用的是Cache-Control</p><ul><li>Expires表示过期时间，时间是相对于服务器时间而言，所以可能因为服务器和客户端时间不一致而出错</li><li>Cache-Control 表示过期时长，从现在开始多少秒过期，这样就避免了两端时间不一致的问题</li></ul><p>注意点：</p><ul><li>当Expires和Cache-Control同时存在时，优先考虑Cache-Control。</li><li>当然了，当缓存资源失效了，也就是没有命中强缓存，接下来就进入协商缓存👇</li></ul><h4 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2 协商缓存"></a>2 协商缓存</h4><p>强缓存失效后，浏览器就会在请求头中携带响应的缓存Tag向服务器发送请求，服务器根据tag决定是否使用缓存</p><p>缓存分成两种：<strong>「Last-Modified」</strong> 和 <strong>「ETag」</strong></p><h5 id="2-1-Last-Modified"><a href="#2-1-Last-Modified" class="headerlink" title="2.1 Last-Modified"></a>2.1 Last-Modified</h5><p>表示最后修改时间，第一次请求的时候，服务器的响应头会带上这个参数，然后这个参数会在下一次缓存未命中的时候加入到请求头改为：<strong>If-Modified-Since</strong>，key不同，但是value相同，服务器拿到这个字段后，就会和请求资源的最后修改时间对比</p><ul><li>如果请求头的时间更久远，说明这个数据已经发生了改变就要跟新这个缓存了，返回新的资源</li><li>否则返回304告诉浏览器直接使用缓存</li></ul><h5 id="2-2-ETag"><a href="#2-2-ETag" class="headerlink" title="2.2 ETag"></a>2.2 ETag</h5><p>本质就是对请求的资源通过md5算法运算，生成的结果哪怕动了一个字节都算是修改，存储和请求方式和上面相似</p><p>浏览器接受到ETag值，会在下次请求的时候，将这个值作为<strong>「If-None-Match」</strong>这个字段的内容，发给服务器。</p><p>服务器接收到<strong>「If-None-Match」</strong>后，会跟服务器上该资源的<strong>「ETag」</strong>进行比对👇</p><ul><li>如果两者一样的话，直接返回304，告诉浏览器直接使用缓存</li><li>如果不一样的话，说明内容更新了，返回新的资源，跟常规的HTTP请求响应的流程一样</li></ul><h5 id="2-3-总结："><a href="#2-3-总结：" class="headerlink" title="2.3 总结："></a>2.3 总结：</h5><p>协商缓存的两种方式</p><ul><li>性能上：Last-Modified更好，因为etag需要运算</li><li>精度上：etag更好，比如说某个资源文件，只是touch了一下，并没有修改内容，在修改时间上是更新了，但是本质上内容没变。</li><li>如果两种方式都支持，优先考虑etag</li></ul><h4 id="3-缓存位置"><a href="#3-缓存位置" class="headerlink" title="3 缓存位置"></a>3 缓存位置</h4><p>总结来说：大的js，css缓存是放在磁盘中，一些小的资源类是放在内存中</p><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h4><ul><li><p>首先检查<code>Cache-Control</code>， 尝鲜，看强缓存是否可用</p></li><li><p>如果可用的话，直接使用</p></li><li><p>否则进入协商缓存，发送HTTP请求，服务器通过请求头中的<code>If-Modified-Since</code>或者<code>If-None-Match</code>字段检查资源是否更新</p></li><li><p>资源更新，返回资源和200状态码。</p></li><li><p>否则，返回304，直接告诉浏览器直接从缓存中去资源。</p></li></ul><h3 id="四、HTTP和HTTPS"><a href="#四、HTTP和HTTPS" class="headerlink" title="四、HTTP和HTTPS"></a>四、HTTP和HTTPS</h3><p>HTTPS不是一个行的应用层协议，本质是HTTP+TLS/SSL协议的组合，保证安全性是SSL/TLS的工作</p><ul><li>SSL：安全套接层2</li><li>TLS：传输层安全（非对称加密）</li></ul><p>HTTPS的关键：</p><ul><li>对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全;</li><li>对网站服务器进行真实身份认证。</li></ul><h3 id="五、短轮询，长轮询，WebSocket"><a href="#五、短轮询，长轮询，WebSocket" class="headerlink" title="五、短轮询，长轮询，WebSocket"></a>五、短轮询，长轮询，WebSocket</h3><h4 id="1-短轮询"><a href="#1-短轮询" class="headerlink" title="1 短轮询"></a>1 短轮询</h4><p>通过不断建立http请求，无论数据是否有更新都直接响应</p><p>优缺点：</p><ul><li>优点：简单</li><li>缺点：大量浪费资源</li></ul><h4 id="2-长轮询"><a href="#2-长轮询" class="headerlink" title="2 长轮询"></a>2 长轮询</h4><p>接受到请求不会直接响应，先把这个请求挂起，判断服务端数据是否有更新</p><p>如果有更新就响应，没有更新就等一会再返回</p><p>优缺点：</p><ul><li>优点：比短轮询节省了资源</li><li>缺点：挂起也会导致资源的浪费</li></ul><h4 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3 WebSocket"></a>3 WebSocket</h4><p>WebSocket 是 Html5 定义的一个新协议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。</p><p>使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息。</p><h3 id="六、正向代理和反向代理"><a href="#六、正向代理和反向代理" class="headerlink" title="六、正向代理和反向代理"></a>六、正向代理和反向代理</h3><p>正向代理：</p><p>我要去找马云借钱，但是直接找马云他不会给我，我可以通过花呗找马云借钱，隐藏的是我（客户端）</p><p>反向代理：</p><p>输入<a href="http://www.baidu.com,我们不知道是哪台服务器为我们工作,但是只要能访问到就行,隐藏的是服务器/">www.baidu.com，我们不知道是哪台服务器为我们工作，但是只要能访问到就行，隐藏的是服务器</a></p><p>一般反向代理用于实现服务器的负载均衡</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、HTTP协议版本区别&quot;&gt;&lt;a href=&quot;#一、HTTP协议版本区别&quot; class=&quot;headerlink&quot; title=&quot;一、HTTP协议版本区别&quot;&gt;&lt;/a&gt;一、HTTP协议版本区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;0.9 远古版本，只有一个GET命令，只支持纯文</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="协议，查漏补缺" scheme="http://huang_zhao.gitee.io/task/tags/%E5%8D%8F%E8%AE%AE%EF%BC%8C%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    
  </entry>
  
</feed>
