<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工藤旧二の博客</title>
  
  
  <link href="http://huang_zhao.gitee.io/task/atom.xml" rel="self"/>
  
  <link href="http://huang_zhao.gitee.io/task/"/>
  <updated>2021-07-14T09:46:04.241Z</updated>
  <id>http://huang_zhao.gitee.io/task/</id>
  
  <author>
    <name>爱肖彤真是太好了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis持久化rdb与aof</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E6%8C%81%E4%B9%85%E5%8C%96rdb%E4%B8%8Eaof/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E6%8C%81%E4%B9%85%E5%8C%96rdb%E4%B8%8Eaof/</id>
    <published>2021-07-14T09:13:11.000Z</published>
    <updated>2021-07-14T09:46:04.241Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis持久化rdb与aof"><a href="#redis持久化rdb与aof" class="headerlink" title="redis持久化rdb与aof"></a>redis持久化rdb与aof</h3><h4 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h4><p>rdb最简单的描述就是内存快照，执行命令的时候把redis的数据copy成一份二进制数据</p><p>命令</p><ul><li>save  阻塞redis 主线程</li><li>bgsave 执行过程不会阻塞redis主线程</li></ul><p>通常使用的都是bgsave进行rdb操作，但是不阻塞只是在生成rdb文件的时候不阻塞</p><p>bgsave的流程</p><ul><li>执行bgsave命令 。</li><li>redis 主线程会fork 出 bgsave 子进程。</li><li>bgsave子进程 会读取redis 的内存数据，生成RDB 文件。</li></ul><p>redis 主线程会把数据复制给bgsave子进程,这个过程中redis是阻塞的,完成数据复制后子进程和主线程指向的都是相同的内存空间的数据,子进程读取copy来的内存数据生成二进制文件,当阻塞的同时如果出现了写操作,并不会破坏这份内存快照</p><p>这里用到的是redis的写时复制技术（CopyOnWrite，缩写COW）,具体实现就是在key被操作的时候先在当前内存中开辟一个新的空间,修改完毕后,原来的key指向新的内存地址</p><p>缺点:rdb文件在生成的时候,数据修改是不会复制到rdb中的,也就是生成消耗了几秒就会丢失几秒的数据</p><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>aof开启后,在redis执行命令完后,会把当前执行的命令压缩到aof文件中</p><h5 id="aof三种策略"><a href="#aof三种策略" class="headerlink" title="aof三种策略"></a>aof三种策略</h5><table><thead><tr><th>策略</th><th>何时写盘</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Aways</td><td>同步写入</td><td>基本不丢失，增加延迟</td><td>io 忙的情况下，会增加线程返回结果的延迟时间，断电的时候会丢失还来的急写入的命令</td></tr><tr><td>EverySecond</td><td>每秒写入</td><td>性能好，不会增加太大延迟</td><td>断电会丢失一秒的数据</td></tr><tr><td>No</td><td>操作系统写入</td><td>性能好，不会增加太大延迟</td><td>丢失数据多少，由操作系统写磁盘频率决定</td></tr></tbody></table><h5 id="aof重写"><a href="#aof重写" class="headerlink" title="aof重写"></a>aof重写</h5><p>实际情况aof文件中会存在很多没用的数据,比如我修改了a字段10次,实际上前9次对我数据备份的恢复是没有意义的,因为实际产生效果的是第十次修改.</p><p>aof的重写全过程和rdb生成规则几乎一模一样,都是复制数据到内存然后进行写入</p><p>当然生成aof重写文件的时候执行的redis命令也会存储到原aof中,防止aof重写失败</p><h4 id="RDB-AOF混合"><a href="#RDB-AOF混合" class="headerlink" title="RDB AOF混合"></a>RDB AOF混合</h4><p>其实在reids 4 之后，redis 还提供了AOF 和RDB 混合使用的方式，就是在每次生成RDB之间增加AOF，这样AOF的文件也不会很大，同时也弥补了每次生成RDB之间会丢失数据的缺点。</p><p>混合持久化本质是通过 AOF 后台重写（bgrewriteaof 命令）完成的，不同的是当开启混合持久化时，fork 出的子进程先将当前全量数据以 RDB 方式写入新的 AOF 文件，然后再将 AOF 重写缓冲区（aof_rewrite_buf_blocks）的增量命令以 AOF 方式写入到文件，写入完成后通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的的 AOF 文件。</p><p>开启：混合持久化的配置参数为 aof-use-rdb-preamble，配置为 yes 时开启混合持久化，在 redis 4 刚引入时，默认是关闭混合持久化的，但是在 redis 5 中默认已经打开了。<br> 关闭：使用 aof-use-rdb-preamble no 配置即可关闭混合持久化。</p><p>优点：结合 RDB 和 AOF 的优点, 更快的重写和恢复。<br> 缺点：AOF 文件里面的 RDB 部分不再是 AOF 格式，可读性差。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;redis持久化rdb与aof&quot;&gt;&lt;a href=&quot;#redis持久化rdb与aof&quot; class=&quot;headerlink&quot; title=&quot;redis持久化rdb与aof&quot;&gt;&lt;/a&gt;redis持久化rdb与aof&lt;/h3&gt;&lt;h4 id=&quot;RDB（Redis-Dat</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis" scheme="http://huang_zhao.gitee.io/task/tags/Redis/"/>
    
    <category term="持久化" scheme="http://huang_zhao.gitee.io/task/tags/%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>redis为什么这么快-解决hash冲突的门道</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-%E8%A7%A3%E5%86%B3hash%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%A8%E9%81%93/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-%E8%A7%A3%E5%86%B3hash%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%A8%E9%81%93/</id>
    <published>2021-07-14T02:13:11.000Z</published>
    <updated>2021-07-14T03:09:56.543Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis为什么这么快-解决hash冲突的门道"><a href="#redis为什么这么快-解决hash冲突的门道" class="headerlink" title="redis为什么这么快-解决hash冲突的门道"></a>redis为什么这么快-解决hash冲突的门道</h3><p>redis中的全局哈希表和java中的hashmap一样都是使用链地址法解决hash冲突</p><p>链地址法:就是哈希桶算法,本身是一个数组,数组中的每一个元素是key和value的指针,value可以是任何类型,当出现hash冲突的时候,相同的kv在redis中指向同一个地址时,新插入的kv的next就会指向原来的kv,形成一个单向链表</p><blockquote><p>解决hash冲突的散列算法主要有<strong>链地址法</strong>，<strong>开放定址法</strong>，<strong>再哈希法</strong>，<strong>建立一个公共溢出区</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsg9p8bu4lj312a0hgabn.jpg" alt="image-20210714102609638" loading="lazy"></p><p>出现hash冲突后</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsgaiiw7q9j31kk0o0q6q.jpg" alt="image-20210714105441495" loading="lazy"></p><p>当这个链表越来越长，搜索指定的key的速度就会下降，当到达临界值时（redis规定的范围，类似于hashmap的加载因子）redis就会进行rehash（重新建表）</p><p>通俗的讲就是原来的a容器已经快要满了，就把新建一个b容器，容量是a容器的2倍</p><p>然后通过一些特殊的方法把a容器的数据全都放入b容器中，直到b容器完全覆盖a容器，则不再对a容器读写</p><p>redis采用的rehash是渐进式的，并不是一下子全部复制过去</p><ul><li>每次增删改查的时候都会把这些数据放在b中</li><li>会启动定时任务把a中的冷key复制到b中</li></ul><p>tips：redis中只要采用了hash表的结构的数据格式都会rehash</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;redis为什么这么快-解决hash冲突的门道&quot;&gt;&lt;a href=&quot;#redis为什么这么快-解决hash冲突的门道&quot; class=&quot;headerlink&quot; title=&quot;redis为什么这么快-解决hash冲突的门道&quot;&gt;&lt;/a&gt;redis为什么这么快-解决has</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="数据结构" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Redis" scheme="http://huang_zhao.gitee.io/task/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>redis底层数据结构解析</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/07/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2021-07-07-redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/07/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2021-07-07-redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</id>
    <published>2021-07-07T07:12:11.000Z</published>
    <updated>2021-07-08T11:07:09.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis底层数据结构解析"><a href="#redis底层数据结构解析" class="headerlink" title="redis底层数据结构解析"></a>redis底层数据结构解析</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs8e92nvhkj318w0gqn0z.jpg" alt="image-20210707145917303" loading="lazy"></p><h3 id="sds（简单动态字符串）"><a href="#sds（简单动态字符串）" class="headerlink" title="sds（简单动态字符串）"></a>sds（简单动态字符串）</h3><p>redis并没有使用c语言中的字符串而是使用的自定义的sds，以解决一些c语言字符串会出现的问题以及进行性能优化</p><p>结构如下：</p><p>len：当前字符串长度</p><p>free：分配的空间所剩余的长度</p><p>buf：字符串的实体（不包含结束符）</p><h5 id="问题1：c的字符串本身不记录字符串长度，如果要获取字符串长度，时间复杂度为O-n"><a href="#问题1：c的字符串本身不记录字符串长度，如果要获取字符串长度，时间复杂度为O-n" class="headerlink" title="问题1：c的字符串本身不记录字符串长度，如果要获取字符串长度，时间复杂度为O(n)"></a>问题1：c的字符串本身不记录字符串长度，如果要获取字符串长度，时间复杂度为O(n)</h5><p>sds：数据结构中带有字符串的长度，和预留空间的长度</p><h5 id="问题2：c中的字符串不记录自身长度容易造成缓冲区溢出"><a href="#问题2：c中的字符串不记录自身长度容易造成缓冲区溢出" class="headerlink" title="问题2：c中的字符串不记录自身长度容易造成缓冲区溢出"></a>问题2：c中的字符串不记录自身长度容易造成缓冲区溢出</h5><p>sds：当数据修改时，先判断内部的free是否满足容纳新字符串，如果不够就先进行扩容，扩容规则为：若数据长度小于1m就翻倍，大于1m就每次+1m</p><h5 id="问题3：经常修改字符串会频繁修改字符串的空间分配，影响性能"><a href="#问题3：经常修改字符串会频繁修改字符串的空间分配，影响性能" class="headerlink" title="问题3：经常修改字符串会频繁修改字符串的空间分配，影响性能"></a>问题3：经常修改字符串会频繁修改字符串的空间分配，影响性能</h5><p>sds：</p><ul><li>空间预分配<ul><li>就是指sds进行空间扩容时的规则，并不会只扩容所需的内存，通常情况会剩余一些额外的内存以便下次扩容使用</li></ul></li><li>惰性空间释放<ul><li>若修改sds减少时，并不会像想象中的减少对其所分配的内存，而是先将不用的内存放入free中，以便下次扩容，当然也有对应的主动释放空间的api</li></ul></li></ul><p>问题4：特殊字符保存</p><p>sds：sds是对二进制安全的，不会对数据做任何限制，也可以保存特殊字符，因为读取数据的判断是根据len，而不是结束符</p><h3 id="双向链表（listnode）"><a href="#双向链表（listnode）" class="headerlink" title="双向链表（listnode）"></a>双向链表（listnode）</h3><ul><li>双端：链表节点带有pre 和 next 指针，获取某个节点的前置节点和后置节点的复杂度为O(n)</li><li>无环：表头的节点 head 的prev指针和 表尾节点 next 都指向了Null，说明链表的访问结束了</li><li>获取链表长度：list 的len 属性，可以直接获取链表的长度，复杂度O(1)</li><li>多态：链表节点使用void* 指针来保存节点值，可以保存各种不同类型的值。</li><li>获取表头和表尾数据负责度O(1)</li></ul><h3 id="压缩列表（ziplist）"><a href="#压缩列表（ziplist）" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h3><p>是一种特殊的双向链表</p><p>压缩链表与经典双端链表最大的区别在于，双端链表的节点是分散在内存中并不是连续的，压缩链表中所有的数据都是存储在一段连续的内存之中的,时间换空间。</p><p>具体内部参数：<a href="https://juejin.cn/post/6974706255138914341#heading-6">https://juejin.cn/post/6974706255138914341#heading-6</a></p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>本质是一个列表，列表内部的元素是一个链表，链表的每一个结点存着键值对</p><p>这种方式叫做<strong>链地址法</strong>，用于解决hash冲突，在数组桶位相同的情况下将插入的结点插入到链表表头，所以hash在插入寻址的时间复杂度是o1</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dictht<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 哈希表数组</span>    dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 哈希表大小</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 哈希表大小掩码，用于计算索引值</span>    <span class="token comment" spellcheck="true">// 总是等于 size-1</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 该哈希表已有节点数量</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span><span class="token punctuation">}</span> dictht</code></pre><p>结点</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dictEntry <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 键</span>    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 值</span>    <span class="token keyword">union</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>        unit64_t u64<span class="token punctuation">;</span>        nit64_t s64<span class="token punctuation">;</span>    <span class="token punctuation">}</span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指向下一个哈希表节点，形成链表</span>    <span class="token keyword">struct</span> dictEntry <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> dictEntry<span class="token punctuation">;</span></code></pre><h3 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h3><p>是redis中set的底层实现之一，使用场景比较少</p><p>它的特点有：</p><p><strong>元素类型只能为数字。<br>元素有三种类型：int16_t、int32_t、int64_t。<br>元素有序，不可重复。<br>内存连续，来节省内存空间。</strong></p><h3 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h3><p>个人总结</p><p>跳表是一种特殊的数据结构，存在多层次链表，每上一层链表都是下一层链表的子集，每一层可以看做是索引层</p><p><a href="https://juejin.cn/post/6974706255138914341#heading-4">https://juejin.cn/post/6974706255138914341#heading-4</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redis底层数据结构解析&quot;&gt;&lt;a href=&quot;#redis底层数据结构解析&quot; class=&quot;headerlink&quot; title=&quot;redis底层数据结构解析&quot;&gt;&lt;/a&gt;redis底层数据结构解析&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sin</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="redis" scheme="http://huang_zhao.gitee.io/task/tags/redis/"/>
    
    <category term="数据结构" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>mybatis</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/03/java/%E6%A1%86%E6%9E%B6/mybatis/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/03/java/%E6%A1%86%E6%9E%B6/mybatis/</id>
    <published>2021-07-03T05:33:43.000Z</published>
    <updated>2021-07-01T06:17:46.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><h3 id="1-引子"><a href="#1-引子" class="headerlink" title="1 引子"></a>1 引子</h3><p><strong>mybatis功能架构：</strong></p><ol><li>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li><li>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</li></ol><p><strong>优点：</strong></p><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql基本上可以实现我们不使用数据访问框架可以实现的所有功能，或许更多。</li><li>解除sql与程序代码的耦合：通过提供DAL层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul><p><strong>缺点：</strong></p><ul><li>编写SQL语句时工作量很大，尤其是字段多、关联表多时，更是如此。</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能更换数据库。</li><li>框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。</li><li>二级缓存机制不佳</li></ul><h3 id="2-采坑记录"><a href="#2-采坑记录" class="headerlink" title="2 采坑记录"></a>2 采坑记录</h3><h4 id="采坑1-maven读取不到java路径下的xml文件，需要在pom内配置读取"><a href="#采坑1-maven读取不到java路径下的xml文件，需要在pom内配置读取" class="headerlink" title="采坑1 maven读取不到java路径下的xml文件，需要在pom内配置读取"></a>采坑1 maven读取不到java路径下的xml文件，需要在pom内配置读取</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h4 id="采坑2-jdbc连接在mac上需要屏蔽ssl证书验证，否则会报错（待研究）"><a href="#采坑2-jdbc连接在mac上需要屏蔽ssl证书验证，否则会报错（待研究）" class="headerlink" title="采坑2 jdbc连接在mac上需要屏蔽ssl证书验证，否则会报错（待研究）"></a>采坑2 jdbc连接在mac上需要屏蔽ssl证书验证，否则会报错（待研究）</h4><p>可能出现的报错信息，注意此处容易误解为找不到xml文件，实际上是数据库报错</p><pre class=" language-python"><code class="language-python">Caused by<span class="token punctuation">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>PersistenceException<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">### Error building SqlSession.</span><span class="token comment" spellcheck="true">### The error may exist in com/zhaohuang/mapper/StudentMapper.xml</span></code></pre><p>解决方案</p><pre class=" language-xml"><code class="language-xml">jdbc:mysql://127.0.0.1:3306/java?characterEncoding=utf8<span class="token entity" title="&amp;">&amp;amp;</span>zeroDateTimeBehavior=convertToNull<span class="token entity" title="&amp;">&amp;amp;</span>useSSL=false</code></pre><h4 id="采坑3-mybatis-需要在config-xml中配置mapper路径否则找不到mapper文件"><a href="#采坑3-mybatis-需要在config-xml中配置mapper路径否则找不到mapper文件" class="headerlink" title="采坑3 mybatis 需要在config.xml中配置mapper路径否则找不到mapper文件"></a>采坑3 mybatis 需要在config.xml中配置mapper路径否则找不到mapper文件</h4><p>注意路径为斜杠</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/zhaohuang/mapper/StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><h4 id="采坑4-typeAliases配置别名时必须在environments标签前"><a href="#采坑4-typeAliases配置别名时必须在environments标签前" class="headerlink" title="采坑4 typeAliases配置别名时必须在environments标签前"></a>采坑4 typeAliases配置别名时必须在environments标签前</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zhaohuang.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--                &lt;property name="url" value="jdbc:mysql://localhost:3306/java?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8"/>--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/java?characterEncoding<span class="token punctuation">=</span>utf8&amp;amp;zeroDateTimeBehavior<span class="token punctuation">=</span>convertToNull&amp;amp;useSSL<span class="token punctuation">=</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/zhaohuang/mapper/StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--        &lt;mapper resource="resources/StudentMapper.xml"/>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="3-实践"><a href="#3-实践" class="headerlink" title="3 实践"></a>3 实践</h3><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><p>建造者模式</p><p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p>工厂模式</p><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><p>单例模式</p><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// sqlSession 可以理解为数据库连接对象，他提供我们方法去操作数据库，使用完毕必须关闭和python中pymysql的链接类似</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 传递一个接口的StudentMapper.class 来调用下面对象的数据库操作</span>        StudentMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mybatis&quot;&gt;&lt;a href=&quot;#mybatis&quot; class=&quot;headerlink&quot; title=&quot;mybatis&quot;&gt;&lt;/a&gt;mybatis&lt;/h2&gt;&lt;h3 id=&quot;1-引子&quot;&gt;&lt;a href=&quot;#1-引子&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="java" scheme="http://huang_zhao.gitee.io/task/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java日常记录学习</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/03/java/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/java%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/03/java/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/java%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-03T05:33:43.000Z</published>
    <updated>2021-07-01T06:17:30.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java琐碎知识点学习"><a href="#java琐碎知识点学习" class="headerlink" title="java琐碎知识点学习"></a>java琐碎知识点学习</h2><p>开发规范:</p><ul><li>post请求写json格式请求示例包括header</li><li>修改操作暴露的字段只有允许修改的字段，其他字段不允许暴露</li><li>接口层面传输不应该暴露id，但是底层逻辑要存id，哪怕需要多查询一次</li><li>数据库在第一版上线后，所有的变化都需要记录sql语句，后面版本迭代后直接上线sql语句即可</li><li>post请求都需要用新的vo去接收，不能用实体类映射的vo去接收</li><li>接口文档只暴露在页面上需要的接口</li><li>所有业务逻辑必须考虑所有可能存在的特殊情况</li><li>所有数据库中的敏感字段在响应中必须修改一下，比如数据库存的status，就改成type：xxx</li><li>考虑所有接口参数都不规范的前提下去判断参数</li><li>不使用多表查询</li><li>分页接口pageNum，pageSize设定默认值</li><li>消息队列发送后，在消息消费过程中出现异常处理：第一次执行，报错，捕获，重试，第二次执行，报错，捕获记录错误日志到数据库，确认消费</li><li>增删改牵扯到多表关系或者关键表操作需要增加事务注解</li><li>直接操作数据库修改数据时，要么把关联的数据全清了，要么就在接口层面操作，否则脏数据问题很难排查</li><li>接口层面传输能不用id不用id</li><li>方法层面传输能用id就用id</li><li>非主要服务类方法可以加@Async变成异步<ul><li>在springboot中可能会出现循环依赖的问题，在出现问题的注入类上加上@Lazy即可</li></ul></li><li>django中的CBV或者springboot的service尽量遵循单一职责</li><li>代码可读性的体现在于注释，在于细节，减少没必要的查询，规范命名</li><li>数据库设计中，随机性很高的字段用</li></ul><h3 id="1-Controller和-RestController的区别？"><a href="#1-Controller和-RestController的区别？" class="headerlink" title="1 @Controller和@RestController的区别？"></a>1 @Controller和@RestController的区别？</h3><p>@RestController = @Controller + @ResponseBody</p><h4 id="1-1-Controller"><a href="#1-1-Controller" class="headerlink" title="1.1 @Controller"></a>1.1 @Controller</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Component<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在控制器类前添加这个注解后，返回的信息必须配合模板语言来使用</p><p>类似Django的rander</p><h4 id="1-2-RestController"><a href="#1-2-RestController" class="headerlink" title="1.2 @RestController"></a>1.2 @RestController</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用**@RestController<strong>注解后可以让一个类内的所有方法的返回的对象通过适当的转换器转为指定的格式之后放入</strong>response.body**中，他的效果等同于通过response对象输出指定格式的数据。</p><p>问题列表：</p><ul><li>什么是AOP和IOC</li><li>springboot框架的请求上下文全流程</li></ul><h3 id="2-控制器报错"><a href="#2-控制器报错" class="headerlink" title="2 控制器报错"></a>2 控制器报错</h3><p>在对应的impl类上加上注解@Service</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gov2gkbny9j30p80ko0wm.jpg" alt="image-20210312145103696" loading="lazy"></p><h3 id="3-java连接redis"><a href="#3-java连接redis" class="headerlink" title="3 java连接redis"></a>3 java连接redis</h3><p>在spring中包含了redisTemplate（对redis操作）</p><p>配置方式：</p><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- spring boot 配置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><pre class=" language-ini"><code class="language-ini"># Redis数据库索引（默认为0）<span class="token constant">spring.redis.database</span><span class="token attr-value"><span class="token punctuation">=</span>0  </span># Redis服务器地址<span class="token constant">spring.redis.host</span><span class="token attr-value"><span class="token punctuation">=</span>127.0.0.1</span># Redis服务器连接端口<span class="token constant">spring.redis.port</span><span class="token attr-value"><span class="token punctuation">=</span>6379  </span># Redis服务器连接密码（默认为空）<span class="token constant">spring.redis.password</span><span class="token attr-value"><span class="token punctuation">=</span></span># 连接池最大连接数（使用负值表示没有限制）<span class="token constant">spring.redis.pool.max-active</span><span class="token attr-value"><span class="token punctuation">=</span>8  </span># 连接池最大阻塞等待时间（使用负值表示没有限制）<span class="token constant">spring.redis.pool.max-wait</span><span class="token attr-value"><span class="token punctuation">=</span>-1  </span># 连接池中的最大空闲连接<span class="token constant">spring.redis.pool.max-idle</span><span class="token attr-value"><span class="token punctuation">=</span>8  </span># 连接池中的最小空闲连接<span class="token constant">spring.redis.pool.min-idle</span><span class="token attr-value"><span class="token punctuation">=</span>0  </span># 连接超时时间（毫秒）<span class="token constant">spring.redis.timeout</span><span class="token attr-value"><span class="token punctuation">=</span>0  </span></code></pre><p>创建一个redis配置</p><p>创建redis工具类</p><p><a href="https://www.cnblogs.com/superfj/p/9232482.html">https://www.cnblogs.com/superfj/p/9232482.html</a></p><h3 id="4-transient关键字"><a href="#4-transient关键字" class="headerlink" title="4 transient关键字"></a>4 transient关键字</h3><p>java的serialization提供了一个非常棒的存储对象状态的机制，说白了serialization就是把对象的状态存储到硬盘上 去，等需要的时候就可以再把它读出来使用。有些时候像银行卡号这些字段是不希望在网络上传输的，transient的作用就是把这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化，意思是transient修饰的age字段，他的生命周期仅仅在内存中，不会被写到磁盘中。</p><p>使用场景</p><p>（1）类中的字段值可以根据其它字段推导出来，如一个长方形类有三个属性长度、宽度、面积，面积不需要序列化。</p><p>（2）一些安全性的信息，一般情况下是不能离开JVM的。</p><p>（3）如果类中使用了Logger实例，那么Logger实例也是不需要序列化的</p><h3 id="5-lombok"><a href="#5-lombok" class="headerlink" title="5 lombok"></a>5 lombok</h3><p><a href="https://www.jianshu.com/p/422f151fccd3">https://www.jianshu.com/p/422f151fccd3</a></p><p>使用：idea中安装lombok插件，maven</p><p>常用注解</p><h4 id="Accessors-chain-true"><a href="#Accessors-chain-true" class="headerlink" title="@Accessors(chain = true)"></a>@Accessors(chain = true)</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通常加在javabean上，可以链式调用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User hz <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>源码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 作用场景：类，接口，枚举，字段</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Accessors</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">fluent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// chain = true 即可开启链式调用</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h4><p>可以自动释放资源，比如在redis连接报错后，需要捕获异常并关闭连接，就可以用到</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jedisExample</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Cleanup</span> Jedis jedis <span class="token operator">=</span>   redisService<span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>“Jedis异常<span class="token operator">:</span>”<span class="token punctuation">,</span>ex<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果相当于</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jedisExample</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Jedis jedis<span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        jedis <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>“Jedis异常<span class="token operator">:</span>”<span class="token punctuation">,</span>ex<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter/@Setter"></a>@Getter/@Setter</h4><p>注解可以针对类的属性字段自动生成Get/Set方法</p><h4 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h4><p>为该注解下的类自动创建toString方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>exclude<span class="token operator">=</span><span class="token string">"someExcludedField"</span><span class="token punctuation">)</span><span class="token keyword">public</span>   <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> someBoolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String someStringField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> someExcludedField<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//上面代码相当于如下：</span><span class="token keyword">public</span>   <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> someBoolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String someStringField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> someExcludedField<span class="token punctuation">;</span>    @ Override    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Foo(super="</span> <span class="token operator">+</span>   <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">", someBoolean="</span> <span class="token operator">+</span>   someBoolean <span class="token operator">+</span>            <span class="token string">", someStringField="</span> <span class="token operator">+</span>   someStringField <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h4><p>@Data最常用的注解之一。注解在类上，提供该类所有属性的getter/setter方法，还提供了equals、canEqual、hashCode、toString方法。</p><p>编译后效果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String remark<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remark<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemark</span><span class="token punctuation">(</span><span class="token keyword">final</span> String remark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>remark <span class="token operator">=</span> remark<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Demo</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Demo other <span class="token operator">=</span> <span class="token punctuation">(</span>Demo<span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>other<span class="token punctuation">.</span><span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> other<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Object <span class="token keyword">this</span>$remark <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object other$remark <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span>$remark <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>other$remark <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$remark<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$remark<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">Demo</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> PRIME <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object $remark <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$remark <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> $remark<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Demo(id="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", remark="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h4><p>为一个类体统包含全部属性为参数的构造器</p><h3 id="6-类型转换"><a href="#6-类型转换" class="headerlink" title="6 类型转换"></a>6 类型转换</h3><p>String与jsonobject</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Hashmap -> json</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> data <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String x <span class="token operator">=</span>JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>String与map</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">;</span>String str<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// String -> map</span><span class="token comment" spellcheck="true">// 方式1</span>HashMap hashMap <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> HashMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式2</span>Map maps <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// String -> 自定义对象</span>Product product <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// map -> Json String</span>String data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> data <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String x <span class="token operator">=</span>JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>string与list</p><pre class=" language-java"><code class="language-java">String str1 <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a,b,c</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[a, b, c]</span><span class="token comment" spellcheck="true">// json -> list</span>List<span class="token operator">&lt;</span>ExamListInVO<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ExamListInVO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>strResult<span class="token punctuation">,</span> ExamListInVO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>map与jsonobject</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object <span class="token function">parse</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把JSON文本parse为JSONObject或者JSONArray </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> JSONObject <span class="token function">parseObject</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span>； <span class="token comment" spellcheck="true">// 把JSON文本parse成JSONObject    </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  T <span class="token function">parseObject</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> Class <span class="token class-name">clazz</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把JSON文本parse为JavaBean </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> JSONArray <span class="token function">parseArray</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把JSON文本parse成JSONArray </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  List <span class="token function">parseArray</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> Class <span class="token class-name">clazz</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把JSON文本parse成JavaBean集合 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String <span class="token function">toJSONString</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将JavaBean序列化为JSON文本 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String <span class="token function">toJSONString</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prettyFormat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将JavaBean序列化为带格式的JSON文本 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object <span class="token function">toJSON</span><span class="token punctuation">(</span>Object javaObject<span class="token punctuation">)</span><span class="token punctuation">;</span> 将JavaBean转换为JSONObject或者JSONArray。</code></pre><h3 id="7-queryWrapper常用方法"><a href="#7-queryWrapper常用方法" class="headerlink" title="7 queryWrapper常用方法"></a>7 queryWrapper常用方法</h3><p><img src="https://img-blog.csdnimg.cn/20200813105229605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pjeGJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h3 id="8-订单支付超时自动取消订单解决方案（延时队列）"><a href="#8-订单支付超时自动取消订单解决方案（延时队列）" class="headerlink" title="8 订单支付超时自动取消订单解决方案（延时队列）"></a>8 订单支付超时自动取消订单解决方案（延时队列）</h3><p><a href="http://www.dockone.io/article/10139">http://www.dockone.io/article/10139</a></p><ul><li>jdk中的DelayQueue</li><li>Quartz定时任务</li><li>redis sorted set</li><li>redis过期回调</li><li>rabbitmq延时队列</li><li>kafka，netty的时间轮</li></ul><h3 id="9-时间模块"><a href="#9-时间模块" class="headerlink" title="9 时间模块"></a>9 时间模块</h3><p>获取当前时间戳</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方法 一</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法 二 效率最慢</span>Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法 三</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取今天时间</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取昨天时间</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取当前格式化时间</p><pre class=" language-java"><code class="language-java">SimpleDateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置日期格式</span>String date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// new Date()为获取当前系统时间，也可使用当前时间戳</span>Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1618456775789</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Thu Apr 15 11:19:35 CST 2021</span>SimpleDateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置日期格式</span>String date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2021-04-15 11:19:35</span></code></pre><h3 id="10-rabbitmq"><a href="#10-rabbitmq" class="headerlink" title="10 rabbitmq"></a>10 rabbitmq</h3><h4 id="AMQP和JMS"><a href="#AMQP和JMS" class="headerlink" title="AMQP和JMS"></a>AMQP和JMS</h4><p>MQ是消息通信的模型，并发具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li></ul><ul><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li></ul><ul><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><p>常见MQ产品</p><ul><li><p>ActiveMQ：基于JMS</p></li><li><p>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</p></li></ul><ul><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li></ul><ul><li>Kafka：分布式消息系统，高吞吐量</li></ul><p>基本使用</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p><img src="https://img-blog.csdnimg.cn/20190610225910220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2thdml0bw==,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><p>组成部分说明：</p><p>Broker：消息队列服务进程，此进程包括两个部分：Exchange和Queue<br>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过虑。<br>Queue：消息队列，存储消息的队列，消息到达队列并转发给指定的<br>Producer：消息生产者，即生产方客户端，生产方客户端将消息发送<br>Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。<br>生产者发送消息流程：</p><p>1、生产者和Broker建立TCP连接。</p><p>2、生产者和Broker建立通道。</p><p>3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。</p><p>4、Exchange将消息转发到指定的Queue（队列）</p><p>消费者接收消息流程：</p><p>1、消费者和Broker建立TCP连接</p><p>2、消费者和Broker建立通道</p><p>3、消费者监听指定的Queue（队列）</p><p>4、当有消息到达Queue时Broker默认将消息推送给消费者。</p><p>5、消费者接收到消息。</p><p>6、ack回复</p><p><strong>写demo的时候注意点</strong></p><ul><li>连接时所需的用户需提前创建</li><li>连接虚拟机时需给用户对这个虚拟机的权限</li><li>connection error; protocol method: #method&lt;connection.close&gt;(reply-code=530, reply-text=NOT_ALLOWED   当出现这个报错就是这个用户没有对这个虚拟机的权限</li></ul><pre class=" language-python"><code class="language-python"><span class="token number">1</span>、安装brew install rabbitmq<span class="token number">2</span>、启动及关闭RabbitMQ服务前台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server    或sudo su<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>Cellar<span class="token operator">/</span>rabbitmq<span class="token operator">/</span><span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">/</span>sbin<span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detacted后台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detached后台关闭 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmqctl stop<span class="token number">3</span> 、登录http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">15672</span>    guest\guest<span class="token number">4</span>、创建用户与虚拟机并授权rabbitmqctl add_user USER PASSWORD <span class="token comment" spellcheck="true">##创建用户</span>rabbitmqctl change_password USER PASSWORD <span class="token comment" spellcheck="true">##修改密码</span>rabbitmqctl set_user_tags USER administrator  <span class="token comment" spellcheck="true">##设置为管理员</span>rabbitmqctl add_vhost VHOST <span class="token comment" spellcheck="true">##添加虚拟机</span>rabbitmqctl set_permissions <span class="token operator">-</span>p VHOST USER <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>  <span class="token comment" spellcheck="true">##给用户分配虚拟主机权限</span></code></pre><p>创建连接</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">rabbitmqUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 建立与RabbitMQ的连接     *     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义连接工厂</span>        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//端口</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置账号信息，用户名、密码、vhost</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"mqv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置虚拟机，一个mq服务可以设置多个虚拟机，每个虚拟机就相当于一个独立的mq</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过工厂获取连接</span>        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生产者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、从连接中创建通道，使用通道才能完成消息相关的操作</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、声明（创建）队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、消息内容</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向指定的队列中发送消息</span>        <span class="token comment" spellcheck="true">//参数：String exchange, String routingKey, BasicProperties props, byte[] body</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、exchange，交换机，如果不指定将使用mq的默认交换机（设置为""）         * 2、routingKey，路由key，交换机根据路由key来将消息转发到指定的队列，如果使用默认交换机，routingKey设置为队列的名称         * 3、props，消息的属性         * 4、body，消息内容         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> QUEUE_NAME<span class="token punctuation">,</span> null<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] Sent '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭通道和连接(资源关闭最好用try-catch-finally语句处理)</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建会话通道,生产者和mq服务所有通信都在channel通道中完成</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声明队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实现消费方法</span>        DefaultConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>            <span class="token comment" spellcheck="true">/**             * 当接收到消息后此方法将被调用             * @param consumerTag  消费者标签，用来标识消费者的，在监听队列时设置channel.basicConsume             * @param envelope 信封，通过envelope             * @param properties 消息属性             * @param body 消息内容             * @throws IOException             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//交换机</span>                String exchange <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//消息id，mq在channel中用来标识消息的id，可用于确认消息已接收</span>                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// body 即消息体</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] received : "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听队列，第二个参数：是否自动进行消息确认。</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean autoAck, Consumer callback</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、queue 队列名称         * 2、autoAck 自动回复，当消费者接收到消息后要告诉mq消息已接收，如果将此参数设置为tru表示会自动回复mq，如果设置为false要通过编程实现回复         * 3、callback，消费方法，当消费者接收到消息要执行的方法         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ack确认机制"><a href="#ack确认机制" class="headerlink" title="ack确认机制"></a>ack确认机制</h4><p>自动ack会在处理消息过程中即使出现异常，也会消息确认</p><p>在消息重要的情况下切换手动ack，手动ack后要主动发送ack，否在消息状态为未确认（unacked），在关闭消费者后，状态会回退到ready</p><p>消息队列发送后，在消息消费过程中出现异常处理：第一次执行，报错，捕获，重试，第二次执行，报错，捕获记录错误日志到数据库，确认消费</p><p>配置direct交换机（直连交换机）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dq<span class="token punctuation">.</span>config<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CachingConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 定义队列名和交换机 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectMqConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 交换机名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DIRECT_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_exchange"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 绑定key，交换机绑定队列时需要指定     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST1 <span class="token operator">=</span> <span class="token string">"direct_key1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST2 <span class="token operator">=</span> <span class="token string">"direct_key2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST3 <span class="token operator">=</span> <span class="token string">"direct_key3"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队列名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST1 <span class="token operator">=</span> <span class="token string">"addProductUsderBid"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST2 <span class="token operator">=</span> <span class="token string">"updateProduct1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST3 <span class="token operator">=</span> <span class="token string">"updateStateProduct1"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构建DirectExchange交换机     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化，长期不用补删除</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DIRECT_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构建序列     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST1<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST2<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST3<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绑定交交换机和     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test1Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test2Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test3Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实例化操作模板     *     * @param connectionFactory     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">rabbitTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须为true,否则无法触发returnedMessage回调，消息丢失</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="消息分发与能者多劳"><a href="#消息分发与能者多劳" class="headerlink" title="消息分发与能者多劳"></a>消息分发与能者多劳</h4><p>当出现两个消费者时，消费者2处理消息的速度远小于消费者1的情况下，他们会受到同样数量的消息</p><p>此时消费者1有大量时间处于空闲状态，可以通过 BasicQos 方法设置prefetchCount = 1</p><p>这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理1个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。相反，它会将其分派给不是仍然忙碌的下一个Consumer。</p><p>值得注意的是：prefetchCount在手动ack的情况下才生效，自动ack不生效。</p><h4 id="订阅模式"><a href="#订阅模式" class="headerlink" title="订阅模式"></a>订阅模式</h4><p>。。。</p><h3 id="11-分布式id设计模式"><a href="#11-分布式id设计模式" class="headerlink" title="11 分布式id设计模式"></a>11 分布式id设计模式</h3><h4 id="基于数据库的号段模式"><a href="#基于数据库的号段模式" class="headerlink" title="基于数据库的号段模式"></a>基于数据库的号段模式</h4><h3 id="12-quartz定时任务时间"><a href="#12-quartz定时任务时间" class="headerlink" title="12 quartz定时任务时间"></a>12 quartz定时任务时间</h3><table><thead><tr><th align="left">表达式</th><th align="left">允许值</th></tr></thead><tbody><tr><td align="left">“0 0 12 * * ?”</td><td align="left">每天中午12点触发</td></tr><tr><td align="left">“0 15 10 ? * *”</td><td align="left">每天上午10:15触发</td></tr><tr><td align="left">“0 15 10 * * ?”</td><td align="left">每天上午10:15触发</td></tr><tr><td align="left">“0 15 10 * * ? *”</td><td align="left">每天上午10:15触发</td></tr><tr><td align="left">“0 15 10 * * ? 2005”</td><td align="left">2005年的每天上午10:15触发</td></tr><tr><td align="left">“0 * 14 * * ?”</td><td align="left">在每天下午2点到下午2:59期间的每1分钟触发</td></tr><tr><td align="left">“0 0/5 14 * * ?”</td><td align="left">在每天下午2点到下午2:55期间的每5分钟触发</td></tr><tr><td align="left">“0 0/5 14,18 * * ?”</td><td align="left">在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</td></tr><tr><td align="left">“0 0-5 14 * * ?”</td><td align="left">在每天下午2点到下午2:05期间的每1分钟触发</td></tr><tr><td align="left">“0 10,44 14 ? 3 WED”</td><td align="left">每年三月的星期三的下午2:10和2:44触发</td></tr><tr><td align="left">“0 15 10 ? * MON-FRI”</td><td align="left">周一至周五的上午10:15触发</td></tr><tr><td align="left">“0 15 10 15 * ?”</td><td align="left">每月15日上午10:15触发</td></tr><tr><td align="left">“0 15 10 L * ?”</td><td align="left">每月最后一日的上午10:15触发</td></tr><tr><td align="left">“0 15 10 ? * 6L”</td><td align="left">每月的最后一个星期五上午10:15触发</td></tr><tr><td align="left">“0 15 10 ? * 6L 2002-2005”</td><td align="left">2002年至2005年的每月的最后一个星期五上午10:15触发</td></tr><tr><td align="left">“0 15 10 ? * 6#3”</td><td align="left">每月的第三个星期五上午10:15触发</td></tr><tr><td align="left">0 6 * * *</td><td align="left">每天早上6点</td></tr><tr><td align="left">0 /2 * *</td><td align="left">每两个小时</td></tr><tr><td align="left">0 23-7/2，8 * * *</td><td align="left">晚上11点到早上8点之间每两个小时，早上八点</td></tr><tr><td align="left">0 11 4 * 1-3</td><td align="left">每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点</td></tr><tr><td align="left">0 4 1 1 *</td><td align="left">1月1日早上4点</td></tr></tbody></table><h3 id="13-mysql设置默认更新时间"><a href="#13-mysql设置默认更新时间" class="headerlink" title="13 mysql设置默认更新时间"></a>13 mysql设置默认更新时间</h3><p>可以用下面的ALTER语句来修改create_time默认为当前时间、update_time更新时间为当前修改更新的时间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> create_time <span class="token keyword">datetime</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;java琐碎知识点学习&quot;&gt;&lt;a href=&quot;#java琐碎知识点学习&quot; class=&quot;headerlink&quot; title=&quot;java琐碎知识点学习&quot;&gt;&lt;/a&gt;java琐碎知识点学习&lt;/h2&gt;&lt;p&gt;开发规范:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;post请求写json格式请求</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="java" scheme="http://huang_zhao.gitee.io/task/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>python实现分布式锁</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/02/python/%E5%AD%A6%E4%B9%A0/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/02/python/%E5%AD%A6%E4%B9%A0/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2021-07-02T05:33:43.000Z</published>
    <updated>2021-07-01T06:13:58.791Z</updated>
    
    <content type="html"><![CDATA[<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="加锁操作非原子性"><a href="#加锁操作非原子性" class="headerlink" title="加锁操作非原子性"></a>加锁操作非原子性</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token punctuation">,</span> redis<span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token comment" spellcheck="true"># 方式一：加锁操作非原子性</span><span class="token comment" spellcheck="true"># 失败案例</span><span class="token keyword">class</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> redis_conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>redis_conn <span class="token operator">=</span> redis_conn    <span class="token keyword">def</span> <span class="token function">get_lock_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> <span class="token string">'lock_%s'</span> <span class="token operator">%</span> key        <span class="token keyword">return</span> lock_key    <span class="token keyword">def</span> <span class="token function">get_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key: 分布式锁key        :return: True 表示获取到了锁        get_lock会循环获取锁，只有得到锁的人才能退出循环        获取锁的原理：所有需要进行a操作的线程都要先获取redis中一个规定的key，若一个线程获取key为空，则获取成功，并设置key=1，进行a操作，其他线程都会获取失败以至再次获取到key为空        获取到key的线程进行操作a结束后，需要释放锁，就要删除key=1，以便下一个线程获取锁        但是本方式存在漏洞：第一个线程获取到key之后，还没来得及放入key=1，就被第二个线程获取到了        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> value<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">del_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">increase_data</span><span class="token punctuation">(</span>redis_conn<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    lock_value <span class="token operator">=</span> lock<span class="token punctuation">.</span>get_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取锁</span>    value <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取数据</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> value<span class="token punctuation">:</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token number">0</span>    redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token keyword">print</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>del_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 释放锁</span><span class="token comment" spellcheck="true">##主程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>    lock <span class="token operator">=</span> RedisLock<span class="token punctuation">(</span>redis<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'test_key'</span>    thread_count <span class="token operator">=</span> <span class="token number">10</span>    redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>thread_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 启动10个线程调用increase_data</span>        <span class="token comment" spellcheck="true"># 传入的lock相当于是一个锁工具，所有人都可以通过锁工具去redis中获取锁，但是锁的数量唯一</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>increase_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>redis<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    实际输出结果    Thread-1 0    Thread-8 1    Thread-6 Thread-7 1    1    Thread-9 1    Thread-2Thread-4 2     2Thread-3 2    Thread-10 2    Thread-5 2    """</span></code></pre><h4 id="使用setnx原子性加锁"><a href="#使用setnx原子性加锁" class="headerlink" title="使用setnx原子性加锁"></a>使用setnx原子性加锁</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token punctuation">,</span> redis<span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token keyword">class</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> redis_conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>redis_conn <span class="token operator">=</span> redis_conn    <span class="token keyword">def</span> <span class="token function">get_lock_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> <span class="token string">'lock_%s'</span> <span class="token operator">%</span> key        <span class="token keyword">return</span> lock_key    <span class="token keyword">def</span> <span class="token function">get_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key:        :return:        鉴于上面版本是由于命令不是原子性操作造成两个或多个线程同时获得锁的问题，这个版本改成使用 redis 的 setnx 命令来进行锁的查询和设置操作            setnx 即 set if not exists，顾名思义就是当key不存在的时候才设置 value，并返回 1，如果 key 已经存在，则不进行任何操作，返回 0。        和之前get+set的区别就是  setnx只需要一步操作即可完成获取锁和设置锁的两步操作        这种原子性是成功的关键        操作是成功了，但是还是有问题，若某个线程在a操作时抛出异常，那么其他所有等待获取锁的线程将陷入死循环，造成死锁        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>setnx<span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">del_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">increase_data</span><span class="token punctuation">(</span>redis_conn<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    lock_value <span class="token operator">=</span> lock<span class="token punctuation">.</span>get_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取锁</span>    value <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取数据</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> value<span class="token punctuation">:</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token number">0</span>    redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token keyword">print</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 模拟死锁</span>    <span class="token comment" spellcheck="true"># if thread_name == "Thread-2":</span>    <span class="token comment" spellcheck="true">#     print("thread-2 crash ....")</span>    <span class="token comment" spellcheck="true">#     import sys</span>    <span class="token comment" spellcheck="true">#     sys.exit(1)</span>    lock<span class="token punctuation">.</span>del_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 释放锁</span><span class="token comment" spellcheck="true">##主程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>    lock <span class="token operator">=</span> RedisLock<span class="token punctuation">(</span>redis<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'test_key'</span>    thread_count <span class="token operator">=</span> <span class="token number">10</span>    redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>thread_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>increase_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>redis<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="解决死锁"><a href="#解决死锁" class="headerlink" title="解决死锁"></a>解决死锁</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token punctuation">,</span> redis<span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token keyword">class</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> redis_conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>redis_conn <span class="token operator">=</span> redis_conn    <span class="token keyword">def</span> <span class="token function">get_lock_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> <span class="token string">'lock_%s'</span> <span class="token operator">%</span> key        <span class="token keyword">return</span> lock_key    <span class="token keyword">def</span> <span class="token function">get_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key:        :param timeout:        :return:        根据redis的ttl机制            扩展资料：redis的是两种失效机制                1 被动失效：当客户端主动获取时，判断是否失效（超时）                2 主动失效：redis中有一个定时任务，每秒执行10次，随机从设定有失效机制的key中获取20个，删除过期的key，判断下是否超过1/4的key已经失效了，如果没有执行步骤第一步再次获取20个。        在锁之前先设定超时实现，避免死锁现象        解决了死锁现象但是锁机制还是存在问题：线程1退出死锁后，线程2立刻获取到了锁，但是线程1还有一步删除锁的操作，就会吧线程2刚放进去的锁删掉，以至于数据混乱        这里很容易想到flask源码中关于上下文request ctx对象唯一性的处理，通过线程id作为标识，也可以加上进程pid，机器ip，或者时间戳，就可以绝对确立唯一性了        然后在删除锁的操作中设置设置锁和删除锁必须在同一个线程中执行        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ex<span class="token operator">=</span>timeout<span class="token punctuation">)</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>                <span class="token keyword">break</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">del_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">increase_data</span><span class="token punctuation">(</span>redis_conn<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    lock_value <span class="token operator">=</span> lock<span class="token punctuation">.</span>get_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取锁</span>    value <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取数据</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 模拟实际情况下进行的某些耗时操作, 且执行时间大于锁过期的时间</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> value<span class="token punctuation">:</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token number">0</span>    redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token keyword">print</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 模拟死锁</span>    <span class="token keyword">if</span> thread_name <span class="token operator">==</span> <span class="token string">"Thread-2"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thread-2 crash ...."</span><span class="token punctuation">)</span>        <span class="token keyword">import</span> sys        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>del_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 释放锁</span><span class="token comment" spellcheck="true">##主程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>    lock <span class="token operator">=</span> RedisLock<span class="token punctuation">(</span>redis<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'test_key'</span>    thread_count <span class="token operator">=</span> <span class="token number">10</span>    redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>thread_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>increase_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>redis<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="通过线程唯一性解决误删锁"><a href="#通过线程唯一性解决误删锁" class="headerlink" title="通过线程唯一性解决误删锁"></a>通过线程唯一性解决误删锁</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token punctuation">,</span> redis<span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token keyword">class</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> redis_conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>redis_conn <span class="token operator">=</span> redis_conn        <span class="token comment" spellcheck="true"># 获取机器ip</span>        self<span class="token punctuation">.</span>ip <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取进程pid</span>        self<span class="token punctuation">.</span>pid <span class="token operator">=</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_lock_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> <span class="token string">'lock_%s'</span> <span class="token operator">%</span> key        <span class="token keyword">return</span> lock_key    <span class="token keyword">def</span> <span class="token function">gen_unique_value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name        time_now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 机器ip 线程pid 进程名 时间戳， 确立唯一性</span>        unique_value <span class="token operator">=</span> <span class="token string">"{0}-{1}-{2}-{3}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> thread_name<span class="token punctuation">,</span> time_now<span class="token punctuation">)</span>        <span class="token keyword">return</span> unique_value    <span class="token keyword">def</span> <span class="token function">get_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key:        :param timeout:        :return:        获取锁后会返回唯一标识（gen_unique_value），删除锁的时候通过判断唯一标识是否相等进行删除        这里执行并没有成功，甚至相比之前误差更大        原因是我们虽然解决了a线程只能删a线程放入的锁，但是当a线程判断通过后，正要进行删除key操作的时候，a线程的key过期了，此时b线程抢到了锁，并写入，然后a线程就删除了b线程写入的锁        简单来说就是 删除操作并非原子性，中途有缝可以插 虽然这种情况可以通过给锁设置合理的超时时间来避免，比如设置一个超时时间大于线程执行时间的锁        以上的方案中，我们是假设 redis 服务端是单集群且高可用的，忽视了以下的问题：            如果某一时刻 redis master 节点发生了故障，集群中的某个 slave 节点变成 master 节点，            这时候就可能出现原 master 节点上的锁没有及时同步到 slave 节点，导致其他线程同时获得锁。            对于这个问题，可以参考 redis 官方推出的 redlock 算法，但是比较遗憾的是，该算法也没有很好地解决锁过期的问题。        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        unique_value <span class="token operator">=</span> self<span class="token punctuation">.</span>gen_unique_value<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"unique value %s"</span> <span class="token operator">%</span> unique_value<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ex<span class="token operator">=</span>timeout<span class="token punctuation">)</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>                <span class="token keyword">return</span> unique_value            <span class="token keyword">else</span><span class="token punctuation">:</span>                thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">del_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key: 锁        :param value: 进程信息        :return:        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        old_lock_value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span>        <span class="token keyword">if</span> old_lock_value <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">increase_data</span><span class="token punctuation">(</span>redis_conn<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    lock_value <span class="token operator">=</span> lock<span class="token punctuation">.</span>get_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取锁</span>    value <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取数据</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#模拟实际情况下进行的某些耗时操作, 且执行时间大于锁过期的时间</span>    <span class="token keyword">if</span> value<span class="token punctuation">:</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token number">0</span>    redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token keyword">print</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">if</span> thread_name <span class="token operator">==</span> <span class="token string">"Thread-2"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thread-2 crash ...."</span><span class="token punctuation">)</span>        <span class="token keyword">import</span> sys        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>del_lock<span class="token punctuation">(</span>key<span class="token punctuation">,</span> lock_value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#释放锁</span><span class="token comment" spellcheck="true">##主程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>    lock <span class="token operator">=</span> RedisLock<span class="token punctuation">(</span>redis<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'test_key'</span>    thread_count <span class="token operator">=</span> <span class="token number">10</span>    redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>thread_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>increase_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>redis<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    unique value 10.0.0.13-52504-Thread-1-1621907713.510258    unique value 10.0.0.13-52504-Thread-2-1621907713.510459    unique value 10.0.0.13-52504-Thread-3-1621907713.510732    unique value 10.0.0.13-52504-Thread-4-1621907713.511075    unique value 10.0.0.13-52504-Thread-5-1621907713.511213    unique value 10.0.0.13-52504-Thread-6-1621907713.511355    unique value 10.0.0.13-52504-Thread-7-1621907713.511531    unique value 10.0.0.13-52504-Thread-8-1621907713.5118861    unique value 10.0.0.13-52504-Thread-9-1621907713.512355    unique value 10.0.0.13-52504-Thread-10-1621907713.512751    Thread-1 0    Thread-6 0    Thread-3 0    Thread-4 1    Thread-9 1    Thread-7 1    Thread-8 2    Thread-10 2    Thread-2 2    thread-2 crash ....    Thread-5 3    """</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;分布式锁&quot;&gt;&lt;a href=&quot;#分布式锁&quot; class=&quot;headerlink&quot; title=&quot;分布式锁&quot;&gt;&lt;/a&gt;分布式锁&lt;/h3&gt;&lt;h4 id=&quot;加锁操作非原子性&quot;&gt;&lt;a href=&quot;#加锁操作非原子性&quot; class=&quot;headerlink&quot; title=&quot;加</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>fastapi中间件</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E4%B8%AD%E9%97%B4%E4%BB%B6/</id>
    <published>2021-07-02T05:33:43.000Z</published>
    <updated>2021-07-01T06:12:50.333Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>middleware<span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">add_process_time_header</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> call_next<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 请求前</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token keyword">await</span> call_next<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 响应后</span>    process_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Process-Time"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>process_time<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>process_time<span class="token punctuation">)</span>    <span class="token keyword">return</span> response</code></pre><h3 id="fastapi内置中间件"><a href="#fastapi内置中间件" class="headerlink" title="fastapi内置中间件"></a>fastapi内置中间件</h3><p>除了自定义中间件，我们也可以直接使用其他的中间件。</p><p>FastAPI通过 <em><code>app.add_middleware()</code></em> 操作来引入已定义的中间件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> unicorn <span class="token keyword">import</span> UnicornMiddlewareapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_middleware<span class="token punctuation">(</span>UnicornMiddleware<span class="token punctuation">,</span> some_config<span class="token operator">=</span><span class="token string">"rainbow"</span><span class="token punctuation">)</span></code></pre><p>*<code>app.add_middleware()</code>*第一个参数是中间件类，同时还支持中间件的其他附加信息。</p><p>FastAPI提供了一些常用的中间件。</p><h3 id="一、HTTPSRedirectMiddleware"><a href="#一、HTTPSRedirectMiddleware" class="headerlink" title="一、HTTPSRedirectMiddleware"></a>一、<code>HTTPSRedirectMiddleware</code></h3><pre class=" language-python"><code class="language-python">HTTPSRedirectMiddleware强制发来的请求协议必须是https或者wss。<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>httpsredirect <span class="token keyword">import</span> HTTPSRedirectMiddlewareapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_middleware<span class="token punctuation">(</span>HTTPSRedirectMiddleware<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">}</span></code></pre><h3 id="二、TrustedHostMiddleware"><a href="#二、TrustedHostMiddleware" class="headerlink" title="二、TrustedHostMiddleware"></a>二、<code>TrustedHostMiddleware</code></h3><pre class=" language-python"><code class="language-python">TrustedHostMiddleware强制发来的请求必须在Header信息中设置了Host选项，为了避免HTTP Host Header攻击。<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>trustedhost <span class="token keyword">import</span> TrustedHostMiddlewareapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_middleware<span class="token punctuation">(</span>    TrustedHostMiddleware<span class="token punctuation">,</span> allowed_hosts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"example.com"</span><span class="token punctuation">,</span> <span class="token string">"*.example.com"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">}</span></code></pre><h3 id="三、GZipMiddleware"><a href="#三、GZipMiddleware" class="headerlink" title="三、GZipMiddleware"></a>三、<code>GZipMiddleware</code></h3><p>当请求的头信息 <em><code>Accept-Encoding</code></em> 字段带有”gzip”时，<code>GZipMiddleware负责</code>完成相应的返回结果处理。</p><pre class=" language-python"><code class="language-python">GZipMiddleware 支持 <span class="token operator">*</span>`minimum_size`<span class="token operator">*</span> 参数：当返回结果大小小于指定值时不启用压缩。<span class="token punctuation">(</span>单位为字节，默认值为<span class="token number">500</span><span class="token punctuation">)</span><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>gzip <span class="token keyword">import</span> GZipMiddlewareapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_middleware<span class="token punctuation">(</span>GZipMiddleware<span class="token punctuation">,</span> minimum_size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"somebigcontent"</span></code></pre><p>参考资料：<a href="https://www.starlette.io/middleware/">https://www.starlette.io/middleware/</a></p><p>cors中间件参考资料：<a href="https://www.cnblogs.com/mazhiyong/p/12987619.html">https://www.cnblogs.com/mazhiyong/p/12987619.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;自定义中间件&quot;&gt;&lt;a href=&quot;#自定义中间件&quot; class=&quot;headerlink&quot; title=&quot;自定义中间件&quot;&gt;&lt;/a&gt;自定义中间件&lt;/h3&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-pytho</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="框架" scheme="http://huang_zhao.gitee.io/task/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="fastapi" scheme="http://huang_zhao.gitee.io/task/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>fastapi依赖注入</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</id>
    <published>2021-07-02T05:33:43.000Z</published>
    <updated>2021-07-01T06:12:38.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>本质就是把一段需要复用的代码作为依赖项，注入到需要操作的函数中</p><p>看起来和装饰器没什么区别，在python中依赖项只要是能调用的即可，那么及时是类也能注入了</p><p>“依赖注入”非常适用于以下使用场景：</p><p>1、业务逻辑复用</p><p>2、共享数据库连接</p><p>3、安全机制、权限校验、角色管理等等</p><p>4、后台任务注入</p><p>所有上述使用场景，借助于”依赖注入”可以明确的提高代码复用，减少代码重复</p><h3 id="fastapi简单示例"><a href="#fastapi简单示例" class="headerlink" title="fastapi简单示例"></a>fastapi简单示例</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/item"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_common</span><span class="token punctuation">(</span>commons<span class="token punctuation">:</span>dict <span class="token operator">=</span> Depends<span class="token punctuation">(</span>common<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 依赖项common注入到read_common中，执行结果作为参数返回给commons</span>    <span class="token keyword">return</span> commons</code></pre><p>tips：Depends和body，path属于同一类，具有相似的属性操作</p><p><strong>执行流程</strong></p><ul><li>调用依赖函数</li><li>依赖函数的结果作为参数传入到被依赖函数中</li></ul><h3 id="利用依赖注入实现简易分页器"><a href="#利用依赖注入实现简易分页器" class="headerlink" title="利用依赖注入实现简易分页器"></a>利用依赖注入实现简易分页器</h3><pre class=" language-python"><code class="language-python">fake_items_db <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Baz"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CommonQueryParams</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">,</span> skip<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> q        self<span class="token punctuation">.</span>skip <span class="token operator">=</span> skip        self<span class="token punctuation">.</span>limit <span class="token operator">=</span> limit@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>commons<span class="token punctuation">:</span> CommonQueryParams <span class="token operator">=</span> Depends<span class="token punctuation">(</span>CommonQueryParams<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> commons<span class="token punctuation">.</span>q<span class="token punctuation">:</span>        response<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> commons<span class="token punctuation">.</span>q<span class="token punctuation">}</span><span class="token punctuation">)</span>    items <span class="token operator">=</span> fake_items_db<span class="token punctuation">[</span>commons<span class="token punctuation">.</span>skip <span class="token punctuation">:</span> commons<span class="token punctuation">.</span>skip <span class="token operator">+</span> commons<span class="token punctuation">.</span>limit<span class="token punctuation">]</span>    response<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> items<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response</code></pre><h3 id="依赖子项（依赖套娃）"><a href="#依赖子项（依赖套娃）" class="headerlink" title="依赖子项（依赖套娃）"></a>依赖子项（依赖套娃）</h3><p>依赖项也可以被注入，具体层级不做限制，若一个依赖项被多次注入到同一个请求中，fastapi默认只会执行一次来缓存这个函数的结果，再次调用从缓存中拿，若我们还是需要调用，可以用Depends的参数*<code>use_cache=False</code>*来禁止依赖项的缓存</p><p>示例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">query_extractor</span><span class="token punctuation">(</span>q11<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q12<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> q11 <span class="token operator">+</span> q12<span class="token keyword">def</span> <span class="token function">query_or_cookie_extractor</span><span class="token punctuation">(</span>q2<span class="token punctuation">:</span> str <span class="token operator">=</span> Depends<span class="token punctuation">(</span>query_extractor<span class="token punctuation">)</span><span class="token punctuation">,</span> last_query<span class="token punctuation">:</span> str <span class="token operator">=</span> Cookie<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> q2<span class="token punctuation">:</span>        <span class="token keyword">return</span> last_query    <span class="token keyword">return</span> q2@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_query</span><span class="token punctuation">(</span>query_or_default<span class="token punctuation">:</span> str <span class="token operator">=</span> Depends<span class="token punctuation">(</span>query_or_cookie_extractor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"q_or_cookie"</span><span class="token punctuation">:</span> query_or_default<span class="token punctuation">}</span></code></pre><h3 id="基于路径装饰器的依赖项"><a href="#基于路径装饰器的依赖项" class="headerlink" title="基于路径装饰器的依赖项"></a>基于路径装饰器的依赖项</h3><p>路径装饰器有一个dependencies参数，当我们需要依赖注入但是不需要返回结果的时候即可在这里使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">verify_token</span><span class="token punctuation">(</span>x_token<span class="token punctuation">:</span> str <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x_token <span class="token operator">!=</span> <span class="token string">"token"</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string">"X-Token header invalid"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">verify_key</span><span class="token punctuation">(</span>x_key<span class="token punctuation">:</span> str <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x_key <span class="token operator">!=</span> <span class="token string">"key"</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string">"X-Key header invalid"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x_key@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">,</span> dependencies<span class="token operator">=</span><span class="token punctuation">[</span>Depends<span class="token punctuation">(</span>verify_token<span class="token punctuation">)</span><span class="token punctuation">,</span> Depends<span class="token punctuation">(</span>verify_key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>依赖项的参数的顺序是固定的</p><h3 id="基于上下文管理器和依赖注入实现数据库资源管理"><a href="#基于上下文管理器和依赖注入实现数据库资源管理" class="headerlink" title="基于上下文管理器和依赖注入实现数据库资源管理"></a>基于上下文管理器和依赖注入实现数据库资源管理</h3><p>示例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DBSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">MySuperContextManager</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"创建数据库对象"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用数据库对象"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>db    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"关闭数据库对象"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> MySuperContextManager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> db<span class="token punctuation">:</span>        <span class="token keyword">yield</span> db@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>MySuperContextManager <span class="token operator">=</span> Depends<span class="token punctuation">(</span>get_db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="可参数化的依赖项"><a href="#可参数化的依赖项" class="headerlink" title="可参数化的依赖项"></a>可参数化的依赖项</h3><p>示例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FixedContentQueryChecker</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fixed_content<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fixed_content <span class="token operator">=</span> fixed_content    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 这里的q是通过查询参数调用进来的</span>        <span class="token keyword">if</span> q<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>fixed_content <span class="token keyword">in</span> q        <span class="token keyword">return</span> <span class="token boolean">False</span>checker <span class="token operator">=</span> FixedContentQueryChecker<span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/query-checker/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_query_check</span><span class="token punctuation">(</span>fixed_content_included<span class="token punctuation">:</span> bool <span class="token operator">=</span> Depends<span class="token punctuation">(</span>checker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"fixed_content_in_query"</span><span class="token punctuation">:</span> fixed_content_included<span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;依赖注入&quot;&gt;&lt;a href=&quot;#依赖注入&quot; class=&quot;headerlink&quot; title=&quot;依赖注入&quot;&gt;&lt;/a&gt;依赖注入&lt;/h2&gt;&lt;p&gt;本质就是把一段需要复用的代码作为依赖项，注入到需要操作的函数中&lt;/p&gt;
&lt;p&gt;看起来和装饰器没什么区别，在python中依赖</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="框架" scheme="http://huang_zhao.gitee.io/task/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="fastapi" scheme="http://huang_zhao.gitee.io/task/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>fastapi后台任务</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/</id>
    <published>2021-07-02T05:33:43.000Z</published>
    <updated>2021-07-01T06:12:18.275Z</updated>
    
    <content type="html"><![CDATA[<h3 id="backgroundTask"><a href="#backgroundTask" class="headerlink" title="backgroundTask"></a>backgroundTask</h3><p>fastapi内置的后台执行任务的方法</p><ul><li>需要一定等待时间，比如发送邮件</li><li>对响应的没有影响，比如处理文件</li></ul><p>使用案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">write_notification</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> str<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"log.txt"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> email_file<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token string">"notification for {email}: {message}"</span>        email_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/send-notification/{email}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">send_notification</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> str<span class="token punctuation">,</span> background_tasks<span class="token punctuation">:</span> BackgroundTasks<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 添加的任务，极其参数</span>    background_tasks<span class="token punctuation">.</span>add_task<span class="token punctuation">(</span>write_notification<span class="token punctuation">,</span> email<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"some notification"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"信息已经在后台任务中处理"</span><span class="token punctuation">}</span></code></pre><h3 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> BackgroundTasks<span class="token punctuation">,</span> Depends<span class="token punctuation">,</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write_log</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"log.txt"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> log<span class="token punctuation">:</span>        log<span class="token punctuation">.</span>write<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_query</span><span class="token punctuation">(</span>background_tasks<span class="token punctuation">:</span> BackgroundTasks<span class="token punctuation">,</span> q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> q<span class="token punctuation">:</span>　　message <span class="token operator">=</span> f<span class="token string">"found query: {q}\n"</span> background_tasks<span class="token punctuation">.</span>add_task<span class="token punctuation">(</span>write_log<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">return</span> q@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/send-notification/{email}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">send_notification</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> str<span class="token punctuation">,</span> background_tasks<span class="token punctuation">:</span> BackgroundTasks<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> Depends<span class="token punctuation">(</span>get_query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> f<span class="token string">"message to {email}\n"</span> background_tasks<span class="token punctuation">.</span>add_task<span class="token punctuation">(</span>write_log<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Message sent"</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;backgroundTask&quot;&gt;&lt;a href=&quot;#backgroundTask&quot; class=&quot;headerlink&quot; title=&quot;backgroundTask&quot;&gt;&lt;/a&gt;backgroundTask&lt;/h3&gt;&lt;p&gt;fastapi内置的后台执行任务的方法&lt;/p</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="框架" scheme="http://huang_zhao.gitee.io/task/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="fastapi" scheme="http://huang_zhao.gitee.io/task/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>fastapi基础</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%20%E5%9F%BA%E7%A1%80/</id>
    <published>2021-07-02T05:33:43.000Z</published>
    <updated>2021-07-01T06:11:51.131Z</updated>
    
    <content type="html"><![CDATA[<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h5 id="安装基础依赖"><a href="#安装基础依赖" class="headerlink" title="安装基础依赖"></a>安装基础依赖</h5><pre><code>pip install fastapi</code></pre><p>并且安装<code>uvicorn</code>来作为服务器：</p><pre><code>pip install uvicorn[standard]</code></pre><p>然后对你想使用的每个可选依赖项也执行相同的操作</p><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><pre><code>uvicorn main:app --reload</code></pre><p><code>uvicorn main:app</code> 命令含义如下:</p><ul><li><code>main</code>：<code>main.py</code> 文件（一个 Python「模块」）。</li><li><code>app</code>：在 <code>main.py</code> 文件中通过 <code>app = FastAPI()</code> 创建的对象。</li><li><code>--reload</code>：让服务器在更新代码后重新启动。仅在开发时使用该选项。</li></ul><h5 id="交互式api文档"><a href="#交互式api文档" class="headerlink" title="交互式api文档"></a>交互式api文档</h5><p><a href="http://127.0.0.1:8000/docs">http://127.0.0.1:8000/docs</a></p><p>备选api文档：<a href="http://127.0.0.1:8000/redoc">http://127.0.0.1:8000/redoc</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str      <span class="token comment" spellcheck="true"># field中的example会覆盖docs上的示例，也会被config覆盖</span>    description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span>        None<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"The description of the item"</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> example<span class="token operator">=</span><span class="token string">"描述"</span>    <span class="token punctuation">)</span>    price<span class="token punctuation">:</span> float <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"The price must be greater than zero"</span><span class="token punctuation">)</span>    tax<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> None    <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 会自动覆盖展示在docs上的示例</span>        schema_extra <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"example"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>                    <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"A very nice Item"</span><span class="token punctuation">,</span>                    <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">35.4</span><span class="token punctuation">,</span>                    <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span>    item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>        example<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>            <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"A very nice Item"</span><span class="token punctuation">,</span>            <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">35.4</span><span class="token punctuation">,</span>            <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><h3 id="fastapi的异步处理"><a href="#fastapi的异步处理" class="headerlink" title="fastapi的异步处理"></a>fastapi的异步处理</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> osapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/async_slowest"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_slowest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"async mode but use sync sleep"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/async_sleep_in_thread"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_sleep_in_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span>None<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"sleep run in thread pool"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/async_sleep"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"async mode sleep"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/sync"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sync_sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"sync, but run in thread pool"</span><span class="token punctuation">}</span></code></pre><p>我们用ab工具，总量100，并发100进行测试。</p><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>这4个函数，最慢的就是第一个async_slowest。<br>我们可以看到，它几乎是一个接一个的串联输出。<br>原因是：<br>fastapi框架会将async函数会放到event loop中运行。<br>如果函数没有运行或有await，则其他函数无法运行。<br>所以这里是一个串联的效果，总时间需要100s</p><h4 id="async-loop-run-in-executor"><a href="#async-loop-run-in-executor" class="headerlink" title="async+loop.run_in_executor"></a>async+loop.run_in_executor</h4><p>为了解决这个问题，第二个函数引入了loop.run_in_executor<br>loop = asyncio.get_event_loop()<br>可以获取当前的event loop<br>loop.run_in_executor(None, time.sleep, 1)<br>是将time.sleep(1)放到一个线程池中去运行，所以不会出现阻塞。<br>这个函数，1秒可以全部运行完。</p><h4 id="async-await"><a href="#async-await" class="headerlink" title="async+await"></a>async+await</h4><p>第三个函数是最正宗的实现。<br>它使用异步的sleep取代了原版同步的sleep。<br>这也是最快的实现。<br>1秒可以运行完</p><h4 id="def"><a href="#def" class="headerlink" title="def"></a>def</h4><p>第四个函数是唯一一个不是async的普通函数。<br>它的运行时间是多少呢？<br>我的电脑是3秒运行完！<br>为什么？<br>这就是fastapi精彩的地方。<br>前面提到，async函数会放到event loop中执行。<br>那么，普通的函数会放到哪里呢？<br>答案是，放到thread pool中。<br>那么为什么是3秒呢。<br>这是因为我的电脑是逻辑8核。线程池的默认配置是核数*5，所以是40线程。<br>我的测试是100个并发，所以一共是3秒完成。<br>40-&gt;40-&gt;20</p><p>总结：简单的说，就像官方所说，如果你不清楚你函数里的调用是否异步，那就定义为普通函数。因为它可以采用多线程的方式解决。<br>反之，定义了async函数，里面却是同步的调用（第一个函数），那么这将慢的是灾难！</p><h3 id="数据格式校验"><a href="#数据格式校验" class="headerlink" title="数据格式校验"></a>数据格式校验</h3><p> <a href="https://pydantic-docs.helpmanual.io/">Pydantic</a> </p><p>额外的数据类型 <a href="https://fastapi.tiangolo.com/zh/tutorial/extra-data-types/">https://fastapi.tiangolo.com/zh/tutorial/extra-data-types/</a>   日期，uuid，byte</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>注意若前缀相同，可选参数应在默认路径之下，如下顺序不能互换</p><p>否则，<code>/users/&#123;user_id&#125;</code> 的路径还将与 <code>/users/me</code> 相匹配，”认为”自己正在接收一个值为 <code>&quot;me&quot;</code> 的 <code>user_id</code> 参数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/me"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> <span class="token string">"the current user"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/{user_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user</span><span class="token punctuation">(</span>user_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span></code></pre><p>:path作为参数的类型表示可以接受任意参数，可用于404页面，用于文件路径</p><p>由于OpenApi不支持在路径参数中携带斜杠，因为这样会导致歧义，所以可以用Starlette 的一个内部工具在 <strong>FastAPI</strong> 中实现它</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/{path:path}"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">not_found</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">123</span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="可选参数及默认值"><a href="#可选参数及默认值" class="headerlink" title="可选参数及默认值"></a>可选参数及默认值</h4><p>Optional表示这个参数是某个类型的可选参数，后面可以携带默认值</p><pre class=" language-Python"><code class="language-Python">q: Optional[str] = None</code></pre><h4 id="布尔值参数"><a href="#布尔值参数" class="headerlink" title="布尔值参数"></a>布尔值参数</h4><p>0,false,False,no 都是false</p><p>1,true,True,yes都是true</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span>short<span class="token punctuation">:</span>bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">,</span><span class="token string">"short"</span><span class="token punctuation">:</span>short<span class="token punctuation">}</span></code></pre><h4 id="多路径和参数"><a href="#多路径和参数" class="headerlink" title="多路径和参数"></a>多路径和参数</h4><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/{user_id}/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>    user_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span> short<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"owner_id"</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> short<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"This is an amazing item that has a long description"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> item</code></pre><h4 id="请求体-路径参数-查询参数"><a href="#请求体-路径参数-查询参数" class="headerlink" title="请求体+路径参数+查询参数"></a>请求体+路径参数+查询参数</h4><p>路径参数在路径后</p><p>请求体为一个json</p><p>查询参数为一个query</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token operator">**</span>item<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h4 id="多请求体参数"><a href="#多请求体参数" class="headerlink" title="多请求体参数"></a>多请求体参数</h4><p>注意和单请求体区分，多请求体的中一个请求体的key会显示出来</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float <span class="token operator">=</span> None    is_offer<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>bool<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    full_name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> user<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token comment" spellcheck="true"># 请求体参数</span><span class="token punctuation">{</span>  <span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>  <span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>    <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"is_offer"</span><span class="token punctuation">:</span> true  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">,</span>    <span class="token string">"full_name"</span><span class="token punctuation">:</span> null  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="如果想要在多请求体参数后加单一参数"><a href="#如果想要在多请求体参数后加单一参数" class="headerlink" title="如果想要在多请求体参数后加单一参数"></a>如果想要在多请求体参数后加单一参数</h4><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> user<span class="token punctuation">:</span> User<span class="token punctuation">,</span> importance<span class="token punctuation">:</span> int <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span> <span class="token string">"importance"</span><span class="token punctuation">:</span> importance<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token comment" spellcheck="true"># 请求体参数</span><span class="token punctuation">{</span>    <span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>        <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>        <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"dave"</span><span class="token punctuation">,</span>        <span class="token string">"full_name"</span><span class="token punctuation">:</span> <span class="token string">"Dave Grohl"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"importance"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span></code></pre><h4 id="嵌入单个请求体参数"><a href="#嵌入单个请求体参数" class="headerlink" title="嵌入单个请求体参数"></a>嵌入单个请求体参数</h4><p>单个请求体参数是没有key的，如果我们非要给他加上key，Body提供一个可处理的参数</p><pre class=" language-python"><code class="language-python">item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> embed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>例子</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> embed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token comment" spellcheck="true">#请求体参数</span><span class="token punctuation">{</span>    <span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>        <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>        <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="嵌套参数"><a href="#嵌套参数" class="headerlink" title="嵌套参数"></a>嵌套参数</h4><p>可以嵌套任意深度的模型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Optional<span class="token punctuation">,</span> Set<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> HttpUrlapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token punctuation">:</span> HttpUrl    name<span class="token punctuation">:</span> str<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> Set<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    images<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Image<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token comment" spellcheck="true"># 请求体</span><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>    <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>    <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>    <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>    <span class="token string">"tags"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"rock"</span><span class="token punctuation">,</span>        <span class="token string">"metal"</span><span class="token punctuation">,</span>        <span class="token string">"bar"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"images"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://example.com/baz.jpg"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"The Foo live"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://example.com/dave.jpg"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"The Baz"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="任意-dict-构成的请求体"><a href="#任意-dict-构成的请求体" class="headerlink" title="任意 dict 构成的请求体"></a>任意 <code>dict</code> 构成的请求体</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/index-weights/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_index_weights</span><span class="token punctuation">(</span>weights<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>int<span class="token punctuation">,</span> float<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> weights</code></pre><p>tips</p><p>请记住 JSON 仅支持将 <code>str</code> 作为键。</p><p>但是 Pydantic 具有自动转换数据的功能。</p><p>这意味着，即使你的 API 客户端只能将字符串作为键发送，只要这些字符串内容仅包含整数，Pydantic 就会对其进行转换并校验。</p><p>然后你接收的名为 <code>weights</code> 的 <code>dict</code> 实际上将具有 <code>int</code> 类型的键和 <code>float</code> 类型的值。</p><h3 id="校验规则"><a href="#校验规则" class="headerlink" title="校验规则"></a>校验规则</h3><p>实际上，<code>Query</code>、<code>Path</code> 和其他你将在之后看到的类，创建的是由一个共同的 <code>Params</code> 类派生的子类的对象，该共同类本身又是 Pydantic 的 <code>FieldInfo</code> 类的子类。</p><p>Pydantic 的 <code>Field</code> 也会返回一个 <code>FieldInfo</code> 的实例。</p><p><code>Body</code> 也直接返回 <code>FieldInfo</code> 的一个子类的对象。还有其他一些你之后会看到的类是 <code>Body</code> 类的子类。</p><p>请记住当你从 <code>fastapi</code> 导入 <code>Query</code>、<code>Path</code> 等对象时，他们实际上是返回特殊类的函数。</p><h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p>校验在？后的参数</p><p>通用的校验和元数据：</p><ul><li><code>alias</code> 别名</li><li><code>title</code></li><li><code>description</code></li><li><code>deprecated</code>  是否显示弃用（默认false）</li></ul><p>特定于字符串的校验：</p><ul><li><code>min_length</code></li><li><code>max_length</code></li><li><code>regex </code>  正则匹配</li></ul><p>完整实例用法</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>        None<span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">"参数q"</span><span class="token punctuation">,</span>        description<span class="token operator">=</span><span class="token string">"参数q的描述"</span><span class="token punctuation">,</span>        min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>        max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>        alias<span class="token operator">=</span><span class="token string">"items-q"</span><span class="token punctuation">,</span>        regex<span class="token operator">=</span><span class="token string">"^f"</span><span class="token punctuation">,</span>        deprecated<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> q</code></pre><p>fastapi自带有参数格式校验规则，暂时只校验参数的格式，但是返回格式不是我们自定义的</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"loc"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"body"</span><span class="token punctuation">,</span>                <span class="token string">"price"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"value is not a valid float"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"type_error.float"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>如果想要校验例如参数的最大长度等可以使用fastapi自带的Query</p><p>Query的第一个参数可用于设定默认值，当使用query设定默认值后，这个参数也会变成可选参数，所以optional实际上就没有用了</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token string">"^fixedquery$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> q</code></pre><p>这个指定的正则表达式通过以下规则检查接收到的参数值：</p><ul><li><code>^</code>：以该符号之后的字符开头，符号之前没有字符。</li><li><code>fixedquery</code>: 值精确地等于 <code>fixedquery</code>。</li><li><code>$</code>: 到此结束，在 <code>fixedquery</code> 之后没有更多字符。</li></ul><p>如果我们又要使用query又要让这个参数为<strong>必填参数</strong>可以使用三个点作为query的第一个参数</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span>str <span class="token operator">=</span> Query<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token string">"^fixedquery$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> q</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"loc"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"query"</span><span class="token punctuation">,</span>                <span class="token string">"q"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"ensure this value has at most 10 characters"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"value_error.any_str.max_length"</span><span class="token punctuation">,</span>            <span class="token property">"ctx"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"limit_value"</span><span class="token operator">:</span> <span class="token number">10</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h4><p>校验路径参数</p><p>对元数据扩展，和参数校验比query更多</p><ul><li>ge大于等于   gt大于   le 小于等于   lt 小于（适用于int和float）</li></ul><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>和path的校验参数相同，校验的是body体中的数据</p><h4 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h4><p>字段校验，校验规则和Body，Path相同</p><p>field不仅可以校验对象中的类型，也可以用于参数校验</p><p>注意，<code>Field</code> 是直接从 <code>pydantic</code> 导入的，而不是像其他的（<code>Query</code>，<code>Path</code>，<code>Body</code> 等）都从 <code>fastapi</code> 导入。</p><p>例子</p><pre class=" language-Python"><code class="language-Python">class Item(BaseModel):    name: str    description: Optional[str] = Field(        None, title="The description of the item", max_length=300    )    price: float = Field(..., gt=0, description="The price must be greater than zero")    tax: Optional[float] = None@app.put("/items/{item_id}")async def update_item(item_id: int, item: Item = Body(..., embed=True)):    results = {"item_id": item_id, "item": item}    return results</code></pre><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>cookie的校验和上述校验规则都相同</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>ads_id<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Cookie<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"ads_id"</span><span class="token punctuation">:</span> ads_id<span class="token punctuation">}</span></code></pre><h4 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h4><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>user_agent<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> user_agent<span class="token punctuation">}</span></code></pre><p>请求头中会有一些参数是用减号-来连接的比如u-a，Python会自动转化这些参数</p><p>如果出于某些原因，你需要禁用下划线到连字符的自动转换，设置<code>Header</code>的参数 <code>convert_underscores</code> 为 <code>False</code>:</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    strange_header<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>None<span class="token punctuation">,</span> convert_underscores<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"strange_header"</span><span class="token punctuation">:</span> strange_header<span class="token punctuation">}</span></code></pre><p>重复的请求头key</p><p>若存在多个x-token的请求头，在Python中可以通过list来接受</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>x_token<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"X-Token values"</span><span class="token punctuation">:</span> x_token<span class="token punctuation">}</span></code></pre><h4 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h4><p>用于表单校验</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Formapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/login/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> str <span class="token operator">=</span> Form<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> str <span class="token operator">=</span> Form<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> username<span class="token punctuation">}</span></code></pre><h3 id="响应模型"><a href="#响应模型" class="headerlink" title="响应模型"></a>响应模型</h3><p>请求类型装饰器参数</p><p>tips  set不是必须，只是规范，使用其他类型也会被转成set，不影响</p><ul><li><h6 id="response-model-include-set-包含需要展示的字段"><a href="#response-model-include-set-包含需要展示的字段" class="headerlink" title="response_model_include   set 包含需要展示的字段"></a>response_model_include   set 包含需要展示的字段</h6></li><li><h6 id="response-model-exclude-set-包含需要去除展示的字段"><a href="#response-model-exclude-set-包含需要去除展示的字段" class="headerlink" title="response_model_exclude  set 包含需要去除展示的字段"></a>response_model_exclude  set 包含需要去除展示的字段</h6></li><li><p>response_model_exclude_unset=True  来仅返回显式设定的值</p></li></ul><p>这里非常类似java中关于po，vo，dto等类似概念，传输数据和响应数据及时是同样的数据结构，也应该有不同的数据校验规则，所以应该有多种数据库映射类</p><p>比如用户传入用户名，密码，都是明文，我们返回给用户必须是密文，而数据库保存的数据字段可能会更多，如上三种不同的数据类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> EmailStrapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserIn</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    password<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">UserOut</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>UserOut<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> user</code></pre><p>如果一张表中有很多字段，而我们只想返回有值的字段，可以使用参数response_model_exclude_unset=True</p><p>这样可以适用于某些场景，并不与上面这种响应模式冲突</p><pre class=" language-Python"><code class="language-Python">from typing import List, Optionalfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()class Item(BaseModel):    name: str    description: Optional[str] = None    price: float    tax: float = 10.5    tags: List[str] = []items = {    "foo": {"name": "Foo", "price": 50.2},    "bar": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},    "baz": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []},}@app.get("/items/{item_id}", response_model=Item, response_model_exclude_unset=True)async def read_item(item_id: str):    return items[item_id]</code></pre><h4 id="Union-或者-anyOf"><a href="#Union-或者-anyOf" class="headerlink" title="Union 或者 anyOf"></a>Union 或者 anyOf</h4><p>你可以将一个响应声明为两种类型的 <code>Union</code>，这意味着该响应将是两种类型中的任何一种。</p><p>定义一个 <a href="https://pydantic-docs.helpmanual.io/usage/types/#unions"><code>Union</code></a> 类型时，首先包括最详细的类型，然后是不太详细的类型。在下面的示例中，更详细的 <code>PlaneItem</code> 位于 <code>Union[PlaneItem，CarItem]</code> 中的 <code>CarItem</code> 之前。</p><pre class=" language-Python"><code class="language-Python">from typing import Unionfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()class BaseItem(BaseModel):    description: str    type: strclass CarItem(BaseItem):    type = "car"class PlaneItem(BaseItem):    type = "plane"    size: intitems = {    "item1": {"description": "All my friends drive a low rider", "type": "car"},    "item2": {        "description": "Music is my aeroplane, it's my aeroplane",        "type": "plane",        "size": 5,    },}@app.get("/items/{item_id}", response_model=Union[PlaneItem, CarItem])async def read_item(item_id: str):    return items[item_id]</code></pre><p>常见的response对象，一般也就用JSONResponse</p><p><a href="https://www.cnblogs.com/mazhiyong/p/13279543.html">https://www.cnblogs.com/mazhiyong/p/13279543.html</a></p><h4 id="合并预定response"><a href="#合并预定response" class="headerlink" title="合并预定response"></a>合并预定response</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>responses <span class="token keyword">import</span> FileResponse<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    id<span class="token punctuation">:</span> str    value<span class="token punctuation">:</span> strresponses <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">404</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"Item not found"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token number">302</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The item was moved"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token number">403</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"Not enough privileges"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">"/items/{item_id}"</span><span class="token punctuation">,</span>    response_model<span class="token operator">=</span>Item<span class="token punctuation">,</span>    responses<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">**</span>responses<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"image/png"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> img<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>bool<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> img<span class="token punctuation">:</span>        <span class="token keyword">return</span> FileResponse<span class="token punctuation">(</span><span class="token string">"image.png"</span><span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token string">"image/png"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token string">"there goes my hero"</span><span class="token punctuation">}</span></code></pre><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>在请求装饰器中带status_code参数表示该次请求的响应状态码</p><p><code>status_code</code> 也能够接收一个 <code>IntEnum</code> 类型，比如 Python 的 <a href="https://docs.python.org/3/library/http.html#http.HTTPStatus"><code>http.HTTPStatus</code></a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status">https://developer.mozilla.org/en-US/docs/Web/HTTP/Status</a></p><p>你可以使用来自 <code>fastapi.status</code> 的便捷变量。</p><h3 id="内置的Json解析"><a href="#内置的Json解析" class="headerlink" title="内置的Json解析"></a>内置的Json解析</h3><pre class=" language-Python"><code class="language-Python">from datetime import datetimefrom fastapi import FastAPIfrom fastapi.encoders import jsonable_encoderfrom pydantic import BaseModelclass Item(BaseModel):    title: str    timestamp: datetime    description: str = Noneapp = FastAPI()@app.put("/items/{id}")def update_item(id: str, item: Item):    json_compatible_item_data = jsonable_encoder(item)print(json_compatible_item_data)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h3&gt;&lt;h5 id=&quot;安装基础依赖&quot;&gt;&lt;a href=&quot;#安装基础依赖&quot; class=&quot;headerlink&quot; title=&quot;安装基础依赖&quot;&gt;&lt;/a&gt;安</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="框架" scheme="http://huang_zhao.gitee.io/task/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="fastapi" scheme="http://huang_zhao.gitee.io/task/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>fastapi子应用与事件</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E5%AD%90%E5%BA%94%E7%94%A8%E4%B8%8E%E4%BA%8B%E4%BB%B6/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E5%AD%90%E5%BA%94%E7%94%A8%E4%B8%8E%E4%BA%8B%E4%BB%B6/</id>
    <published>2021-07-02T05:33:43.000Z</published>
    <updated>2021-07-01T06:13:08.353Z</updated>
    
    <content type="html"><![CDATA[<h3 id="子应用"><a href="#子应用" class="headerlink" title="子应用"></a>子应用</h3><p>概念类似于django中的app，flask中的蓝图，主要功能现在看来是作为路由分发</p><p>示例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World from main app"</span><span class="token punctuation">}</span>subapi <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@subapi<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/sub"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World from sub API"</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">"/subapi"</span><span class="token punctuation">,</span> subapi<span class="token punctuation">)</span></code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>startup  app（主应用）启动时运行，运行结束后才能接受请求</li><li>shutdown   app（主应用）关闭时运行，执行结束后才杀死进程</li></ul><p>示例</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>on_event<span class="token punctuation">(</span><span class="token string">"startup"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">startup_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"app start"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>on_event<span class="token punctuation">(</span><span class="token string">"shutdown"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">startup_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"app end"</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;子应用&quot;&gt;&lt;a href=&quot;#子应用&quot; class=&quot;headerlink&quot; title=&quot;子应用&quot;&gt;&lt;/a&gt;子应用&lt;/h3&gt;&lt;p&gt;概念类似于django中的app，flask中的蓝图，主要功能现在看来是作为路由分发&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;pre clas</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="框架" scheme="http://huang_zhao.gitee.io/task/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="fastapi" scheme="http://huang_zhao.gitee.io/task/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>fastapi错误处理</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</id>
    <published>2021-07-02T05:33:43.000Z</published>
    <updated>2021-07-01T06:12:04.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="HTTPException"><a href="#HTTPException" class="headerlink" title="HTTPException"></a>HTTPException</h3><p>fastapi内置的异常模块，可以自定义响应头</p><pre class=" language-python"><code class="language-python">items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"foo"</span><span class="token punctuation">:</span> <span class="token string">"The Foo Wrestlers"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items-header/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item_header</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> item_id <span class="token operator">not</span> <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>            status_code<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">,</span>            detail<span class="token operator">=</span><span class="token string">"Item not found"</span><span class="token punctuation">,</span>            headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"X-Error"</span><span class="token punctuation">:</span> <span class="token string">"There goes my error"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> items<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><p>自己抛自己接</p><p>exception_handler可以接受全局我们抛出的指定异常类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Request<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>responses <span class="token keyword">import</span> JSONResponse<span class="token keyword">class</span> <span class="token class-name">UnicornException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> nameapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>exception_handler<span class="token punctuation">(</span>UnicornException<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">unicorn_exception_handler</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> exc<span class="token punctuation">:</span> UnicornException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> JSONResponse<span class="token punctuation">(</span>        status_code<span class="token operator">=</span><span class="token number">418</span><span class="token punctuation">,</span>        content<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> f<span class="token string">"Oops! {exc.name} did something. There goes a rainbow..."</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/unicorns/{name}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_unicorn</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"yolo"</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> UnicornException<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"unicorn_name"</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span></code></pre><h3 id="重写内置异常捕获"><a href="#重写内置异常捕获" class="headerlink" title="重写内置异常捕获"></a>重写内置异常捕获</h3><p>参数校验不通过的时候，fastapi会默认报422的错，且错误格式固定，如果想修改这种错误格式，就可以通过全局异常捕获参数校验类来重写</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>exception_handler<span class="token punctuation">(</span>RequestValidationError<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">validation_exception_handler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> exc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> JSONResponse<span class="token punctuation">(</span>        status_code<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_422_UNPROCESSABLE_ENTITY<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># body是放在响应体重，exc.body是源数据</span>        content<span class="token operator">=</span>jsonable_encoder<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"detail"</span><span class="token punctuation">:</span> exc<span class="token punctuation">.</span>errors<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"body"</span><span class="token punctuation">:</span> exc<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    id<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>gt<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">)</span>    username<span class="token punctuation">:</span> str <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    sex<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None    login_time<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> None    <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">:</span>        orm_mode <span class="token operator">=</span> <span class="token boolean">True</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/items}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span></code></pre><h3 id="FastAPI与Starlette的HTTPException"><a href="#FastAPI与Starlette的HTTPException" class="headerlink" title="FastAPI与Starlette的HTTPException"></a>FastAPI与Starlette的<code>HTTPException</code></h3><p>FastAPI <code>HTTPException</code> 继承自 Starlette’s <code>HTTPException</code>。</p><p>唯一的区别是，FastAPI <code>HTTPException</code>允许你在response添加头信息。主要在内部用于OAuth 2.0以及一些安全相关的功能。</p><p><strong>因此，通常我们在代码中抛出FastAPI <code>HTTPException</code>异常。</strong></p><p><strong>但是，当我们注册异常处理器的时候，我们应该注册为Starlette <code>HTTPException</code>。</strong></p><p>这样，当Starlette的内部代码或者Starlette扩展插件抛出Starlette <code>HTTPException</code>时，我们的处理器才能正常捕获和处理这个异常。</p><p>如果我们要在代码中同时使用这两个类，为了避免命名冲突，我们可以重命名其中一个类。</p><pre><code>from fastapi import HTTPExceptionfrom starlette.exceptions import HTTPException as StarletteHTTPException</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;HTTPException&quot;&gt;&lt;a href=&quot;#HTTPException&quot; class=&quot;headerlink&quot; title=&quot;HTTPException&quot;&gt;&lt;/a&gt;HTTPException&lt;/h3&gt;&lt;p&gt;fastapi内置的异常模块，可以自定义响应头&lt;/p</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="框架" scheme="http://huang_zhao.gitee.io/task/tags/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="fastapi" scheme="http://huang_zhao.gitee.io/task/tags/fastapi/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq使用</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/rabbitmq/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/rabbitmq/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-25T09:40:47.464Z</updated>
    
    <content type="html"><![CDATA[<h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><p>tips：mac安装rabbitmq报错解决</p><ul><li><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 替换brew.git</span><span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<span class="token comment" spellcheck="true"># 替换homebrew-core.git</span><span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<span class="token comment" spellcheck="true"># 刷新源</span>brew update</code></pre></li><li><p>如果还报错先检查网络问题，是否翻墙等</p></li><li><p>再检查依赖是否全部安装</p></li></ul><h4 id="AMQP和JMS"><a href="#AMQP和JMS" class="headerlink" title="AMQP和JMS"></a>AMQP和JMS</h4><p>MQ是消息通信的模型，并发具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li></ul><ul><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li></ul><ul><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><p>常见MQ产品</p><ul><li><p>ActiveMQ：基于JMS</p></li><li><p>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</p></li></ul><ul><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li></ul><ul><li>Kafka：分布式消息系统，高吞吐量</li></ul><p>基本使用</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p><img src="https://img-blog.csdnimg.cn/20190610225910220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2thdml0bw==,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><p>组成部分说明：</p><ul><li><p>Broker（Server）：消息队列服务进程（接受服务端的链接），实现AMQP实体服务</p></li><li><p>Connection：链接，应用程序与Broker的网络连接TCP/IP3次握手 4次挥手</p></li><li><p>Channel：网络信道，所有操作凑是基于信道操作的，信道是连接内的，客户端可以建立多个信道，每一个信道代表一个会话任务</p></li><li><p>Message：消息，服务于应用程序之间传送的数据，由Properties和Body组成，Properties是对消息的修饰，比如消息的优先级，延迟等高级特性，Body是消息体的内容</p></li><li><p>Virtual Host：虚拟地址，类似文件夹，数据库的概念，为了区分管理交换机和队列，同一个虚拟地址内不能出现同名队列和交换机</p></li><li><p>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列（根据路由key发送消息绑定的队列），对消息进行过虑（如果一个队列没有指定绑定的交换机的名字，就会绑定一个默认的交换机）。</p></li><li><p>Bindings：交换机和队列的虚拟连接</p></li><li><p>Routing key：是一个路由规则，虚拟机可以通过他确定由什么路由一个消息</p></li><li><p>Queue：消息队列，存储消息的队列，生产者把消息发送给交换机，交换机通过队列转发给消费者</p></li><li><p>Producer：消息生产者，即生产方客户端，生产方客户端将消息发送</p></li><li><p>Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。</p></li></ul><p>生产者发送消息流程：</p><p>1、生产者和Broker建立TCP连接。</p><p>2、生产者和Broker建立通道。</p><p>3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。</p><p>4、Exchange将消息转发到指定的Queue（队列）</p><p>消费者接收消息流程：</p><p>1、消费者和Broker建立TCP连接</p><p>2、消费者和Broker建立通道</p><p>3、消费者监听指定的Queue（队列）</p><p>4、当有消息到达Queue时Broker默认将消息推送给消费者。</p><p>5、消费者接收到消息。</p><p>6、ack回复</p><p><strong>写demo的时候注意点</strong></p><ul><li>连接时所需的用户需提前创建</li><li>连接虚拟机时需给用户对这个虚拟机的权限</li><li>connection error; protocol method: #method&lt;connection.close&gt;(reply-code=530, reply-text=NOT_ALLOWED   当出现这个报错就是这个用户没有对这个虚拟机的权限</li></ul><h4 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span>、安装brew install rabbitmq<span class="token number">2</span>、启动及关闭RabbitMQ服务前台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server    或sudo su<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>Cellar<span class="token operator">/</span>rabbitmq<span class="token operator">/</span><span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">/</span>sbin<span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detacted后台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detached后台关闭 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmqctl stop<span class="token number">3</span> 、登录http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">15672</span>    guest\guest<span class="token number">4</span>、创建用户与虚拟机并授权rabbitmqctl add_user USER PASSWORD <span class="token comment" spellcheck="true">##创建用户</span>rabbitmqctl change_password USER PASSWORD <span class="token comment" spellcheck="true">##修改密码</span>rabbitmqctl set_user_tags USER administrator  <span class="token comment" spellcheck="true">##设置为管理员</span>rabbitmqctl add_vhost VHOST <span class="token comment" spellcheck="true">##添加虚拟机</span>rabbitmqctl set_permissions <span class="token operator">-</span>p VHOST USER <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>  <span class="token comment" spellcheck="true">##给用户分配虚拟主机权限</span></code></pre><p>创建连接</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">rabbitmqUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 建立与RabbitMQ的连接     *     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义连接工厂</span>        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//端口</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置账号信息，用户名、密码、vhost</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"mqv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置虚拟机，一个mq服务可以设置多个虚拟机，每个虚拟机就相当于一个独立的mq</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过工厂获取连接</span>        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生产者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、从连接中创建通道，使用通道才能完成消息相关的操作</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、声明（创建）队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、消息内容</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向指定的队列中发送消息</span>        <span class="token comment" spellcheck="true">//参数：String exchange, String routingKey, BasicProperties props, byte[] body</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、exchange，交换机，如果不指定将使用mq的默认交换机（设置为""）         * 2、routingKey，路由key，交换机根据路由key来将消息转发到指定的队列，如果使用默认交换机，routingKey设置为队列的名称         * 3、props，消息的属性         * 4、body，消息内容         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> QUEUE_NAME<span class="token punctuation">,</span> null<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] Sent '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭通道和连接(资源关闭最好用try-catch-finally语句处理)</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建会话通道,生产者和mq服务所有通信都在channel通道中完成</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声明队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实现消费方法</span>        DefaultConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>            <span class="token comment" spellcheck="true">/**             * 当接收到消息后此方法将被调用             * @param consumerTag  消费者标签，用来标识消费者的，在监听队列时设置channel.basicConsume             * @param envelope 信封，通过envelope             * @param properties 消息属性             * @param body 消息内容             * @throws IOException             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//交换机</span>                String exchange <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//消息id，mq在channel中用来标识消息的id，可用于确认消息已接收</span>                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// body 即消息体</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] received : "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听队列，第二个参数：是否自动进行消息确认。</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean autoAck, Consumer callback</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、queue 队列名称         * 2、autoAck 自动回复，当消费者接收到消息后要告诉mq消息已接收，如果将此参数设置为tru表示会自动回复mq，如果设置为false要通过编程实现回复         * 3、callback，消费方法，当消费者接收到消息要执行的方法         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ack确认机制"><a href="#ack确认机制" class="headerlink" title="ack确认机制"></a>ack确认机制</h4><p>自动ack会在处理消息过程中即使出现异常，也会消息确认</p><p>在消息重要的情况下切换手动ack，手动ack后要主动发送ack，否在消息状态为未确认（unacked），在关闭消费者后，状态会回退到ready</p><p>消息队列发送后，在消息消费过程中出现异常处理：第一次执行，报错，捕获，重试，第二次执行，报错，捕获记录错误日志到数据库，确认消费</p><p>配置direct交换机（直连交换机）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dq<span class="token punctuation">.</span>config<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CachingConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 定义队列名和交换机 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectMqConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 交换机名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DIRECT_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_exchange"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 绑定key，交换机绑定队列时需要指定     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST1 <span class="token operator">=</span> <span class="token string">"direct_key1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST2 <span class="token operator">=</span> <span class="token string">"direct_key2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST3 <span class="token operator">=</span> <span class="token string">"direct_key3"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队列名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST1 <span class="token operator">=</span> <span class="token string">"addProductUsderBid"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST2 <span class="token operator">=</span> <span class="token string">"updateProduct1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST3 <span class="token operator">=</span> <span class="token string">"updateStateProduct1"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构建DirectExchange交换机     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化，长期不用补删除</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DIRECT_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构建序列     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST1<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST2<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST3<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绑定交交换机和     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test1Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test2Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test3Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实例化操作模板     *     * @param connectionFactory     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">rabbitTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须为true,否则无法触发returnedMessage回调，消息丢失</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="消息分发与能者多劳"><a href="#消息分发与能者多劳" class="headerlink" title="消息分发与能者多劳"></a>消息分发与能者多劳</h4><p>当出现两个消费者时，消费者2处理消息的速度远小于消费者1的情况下，他们会受到同样数量的消息</p><p>此时消费者1有大量时间处于空闲状态，可以通过 BasicQos 方法设置prefetchCount = 1</p><p>这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理1个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。相反，它会将其分派给不是仍然忙碌的下一个Consumer。</p><p>值得注意的是：prefetchCount在手动ack的情况下才生效，自动ack不生效。</p><h4 id="订阅（fanout）模式"><a href="#订阅（fanout）模式" class="headerlink" title="订阅（fanout）模式"></a>订阅（fanout）模式</h4><h4 id="路由匹配（DIrect）模式"><a href="#路由匹配（DIrect）模式" class="headerlink" title="路由匹配（DIrect）模式"></a>路由匹配（DIrect）模式</h4><h4 id="模糊模糊匹配（Topic）模式"><a href="#模糊模糊匹配（Topic）模式" class="headerlink" title="模糊模糊匹配（Topic）模式"></a>模糊模糊匹配（Topic）模式</h4><h4 id="携带信息匹配（Headers）模式"><a href="#携带信息匹配（Headers）模式" class="headerlink" title="携带信息匹配（Headers）模式"></a>携带信息匹配（Headers）模式</h4><h4 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h4><h4 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;rabbitmq&quot;&gt;&lt;a href=&quot;#rabbitmq&quot; class=&quot;headerlink&quot; title=&quot;rabbitmq&quot;&gt;&lt;/a&gt;rabbitmq&lt;/h3&gt;&lt;p&gt;tips：mac安装rabbitmq报错解决&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;pre class</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="消息队列" scheme="http://huang_zhao.gitee.io/task/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="中间件" scheme="http://huang_zhao.gitee.io/task/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="mq" scheme="http://huang_zhao.gitee.io/task/tags/mq/"/>
    
  </entry>
  
  <entry>
    <title>web服务器与协议</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%8D%8F%E8%AE%AE/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%8D%8F%E8%AE%AE/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T06:02:33.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web服务器与协议"><a href="#web服务器与协议" class="headerlink" title="web服务器与协议"></a>web服务器与协议</h2><p><a href="http://liuqingzheng.top/article/1/05-CGI,FastCGI,WSGI,uWSGI,uwsgi%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82/">http://liuqingzheng.top/article/1/05-CGI,FastCGI,WSGI,uWSGI,uwsgi%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82/</a></p><h4 id="1-WSGI-Web-Server-Gateway-Interface-服务器网关接口"><a href="#1-WSGI-Web-Server-Gateway-Interface-服务器网关接口" class="headerlink" title="1 WSGI(Web Server Gateway Interface)服务器网关接口"></a>1 WSGI(Web Server Gateway Interface)服务器网关接口</h4><p>是一种python程序或者框架和web服务器之间通信的一种接口</p><p>由于官方没有实现，WSGI更像是一种协议，一种标准，大部分框架和web服务器都遵循这种协议规范</p><h4 id="2-CGI-FastCGI"><a href="#2-CGI-FastCGI" class="headerlink" title="2 CGI FastCGI"></a>2 CGI FastCGI</h4><p>CGI是通用网关接口，和WSGI是一个东西，只不过支持的语言不同，CGI支持php，FastCGI是CGI的升级版，支持任意语言</p><h4 id="3-uWSGI-uwsgi"><a href="#3-uWSGI-uwsgi" class="headerlink" title="3 uWSGI uwsgi"></a>3 uWSGI uwsgi</h4><p>uWSGI是一个web服务器，用来处理和python的web框架之间通信，他们之间的通信规范是WSGI</p><p>uwsgi是uWSGI自有的协议，是用于uWSGI与前端服务器通行规范</p><p>总结：协议本身其实都是一个东西，只是他们支持的语言不通，使用场景不通</p><p>一个请求从前端来，到了nginx，nginx会吧静态文件直接返回，动态内容就会反向代理到web服务器上，这中间就会通过对应的web服务器的协议，如fastcgi，http，uwsgi，web服务器又要通过和对应web框架的协议，如wsgi通过socket发送给web框架</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web服务器与协议&quot;&gt;&lt;a href=&quot;#web服务器与协议&quot; class=&quot;headerlink&quot; title=&quot;web服务器与协议&quot;&gt;&lt;/a&gt;web服务器与协议&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://liuqingzheng.top/article/1</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="web服务器" scheme="http://huang_zhao.gitee.io/task/tags/web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    <category term="协议" scheme="http://huang_zhao.gitee.io/task/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T06:00:39.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h2><h3 id="工厂模式（Factory-Method）"><a href="#工厂模式（Factory-Method）" class="headerlink" title="工厂模式（Factory Method）"></a>工厂模式（Factory Method）</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqvnqhkwn4j31340b4wft.jpg" alt="image-20210526111500187" loading="lazy"></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""    通过方法控制对不同类的实例化"""</span><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{self.name}teacher age {self.age}"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{self.name}student age {self.age}"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Teacher<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Student<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>user <span class="token operator">=</span> create_people<span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="建造者模式（Bulider）"><a href="#建造者模式（Bulider）" class="headerlink" title="建造者模式（Bulider）"></a>建造者模式（Bulider）</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqwrdcue2fj317r0u0qcc.jpg" alt="image-20210527100607813" loading="lazy"></p><pre><code>建造者模式包含以下四种角色产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个零部件。抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()。具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。个人理解建造者模式主要用于构建复杂的对象，当对象创建过程非常复杂，且参数众多，使用者不需要知道其中构建过程即可使用这种模式一个复杂的实体类  就是ProductBuilder包含创建Product这个复杂实体的接口Concrete Builder 是Builder的实现类，完成复杂组件创建的各种方法Director调用Builder不同属性装配，完成实体类创建例子：Product人类    属性：各种可选可不选参数        -学校        -家庭        -工作Builder接口规定了创建各种属性的方法Concrete Builder 实现了这些方法Director创建对象时即可不需要知道这些调用方法的具体逻辑，只要传入对应的参数即可创建需要的对象和工厂模式的异同    都是为了创建对象    工厂模式一般用于创建简单的固定的对象    建造者模式用于创建复杂的丰富的对象</code></pre><p>python代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">orderDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    order_builder<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>order_builder<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>order_builder<span class="token operator">=</span>order_builder    <span class="token keyword">def</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>burger<span class="token punctuation">,</span>snack<span class="token punctuation">,</span>beverage<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>addBurger<span class="token punctuation">(</span>burger<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>addSnack<span class="token punctuation">(</span>snack<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>addBeverage<span class="token punctuation">(</span>beverage<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>java代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Builder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParlourDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Decorator d<span class="token punctuation">;</span>            d <span class="token operator">=</span> <span class="token punctuation">(</span>Decorator<span class="token punctuation">)</span> ReadXML<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ProjectManager m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProjectManager</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            Parlour p <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//产品：客厅</span><span class="token keyword">class</span> <span class="token class-name">Parlour</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String wall<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//墙</span>    <span class="token keyword">private</span> String TV<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电视</span>    <span class="token keyword">private</span> String sofa<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//沙发 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWall</span><span class="token punctuation">(</span>String wall<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wall <span class="token operator">=</span> wall<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTV</span><span class="token punctuation">(</span>String TV<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>TV <span class="token operator">=</span> TV<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSofa</span><span class="token punctuation">(</span>String sofa<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sofa <span class="token operator">=</span> sofa<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JFrame jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"建造者模式测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Container contentPane <span class="token operator">=</span> jf<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPanel p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JScrollPane sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        String parlour <span class="token operator">=</span> wall <span class="token operator">+</span> TV <span class="token operator">+</span> sofa<span class="token punctuation">;</span>        JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"src/"</span> <span class="token operator">+</span> parlour <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"客厅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象建造者：装修工人</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建产品对象</span>    <span class="token keyword">protected</span> Parlour product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回产品对象</span>    <span class="token keyword">public</span> Parlour <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体建造者：具体装修工人1</span><span class="token keyword">class</span> <span class="token class-name">ConcreteDecorator1</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setWall</span><span class="token punctuation">(</span><span class="token string">"w1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setTV</span><span class="token punctuation">(</span><span class="token string">"TV1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setSofa</span><span class="token punctuation">(</span><span class="token string">"sf1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体建造者：具体装修工人2</span><span class="token keyword">class</span> <span class="token class-name">ConcreteDecorator2</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setWall</span><span class="token punctuation">(</span><span class="token string">"w2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setTV</span><span class="token punctuation">(</span><span class="token string">"TV2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setSofa</span><span class="token punctuation">(</span><span class="token string">"sf2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指挥者：项目经理</span><span class="token keyword">class</span> <span class="token class-name">ProjectManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Decorator builder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProjectManager</span><span class="token punctuation">(</span>Decorator builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//产品构建与组装方法</span>    <span class="token keyword">public</span> Parlour <span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> Builder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Node<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ReadXML</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DocumentBuilderFactory dFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder builder <span class="token operator">=</span> dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document doc<span class="token punctuation">;</span>            doc <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/Builder/config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NodeList nl <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node classNode <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String cName <span class="token operator">=</span> <span class="token string">"Builder."</span> <span class="token operator">+</span> classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新类名："</span> <span class="token operator">+</span> cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqwt2yvnf5j316v0u0agu.jpg" alt="image-20210527110533091" loading="lazy"></p><p>个人理解</p><pre><code>实际上原型模式在python中不需要这么复杂的操作，当然这种操作的具有可扩展性    例如我已有原型是一个复杂的对象，但是我需要复制出来的是一个只带部分属性的简单对象，这里甚至可以通过原型模式和建造者模式结合，复制出具有特殊意义的新的对象，而不用重复去创建    但是实际的代码中，很少使用复制原型的操作，一是部分编程语言对复制原型的支持性，二是部分复制并来的那么高效    如果是数据库对象的原型复制，那就有意义了，因为复制可以少走数据库    python中可以直接通过deepcopy复制，是最简单的原型模式</code></pre><p>python代码</p><pre class=" language-Python"><code class="language-Python"># 示例import copyfrom collections import OrderedDictclass Book:    def __init__(self, name, authors, price, **rest):        '''rest的例子有：出版商、长度、标签、出版日期'''        self.name = name        self.authors = authors        self.price = price        self.__dict__.update(rest)      # 添加其他额外属性    def __str__(self):        mylist = []        ordered = OrderedDict(sorted(self.__dict__.items()))        for i in ordered.keys():            mylist.append('{}: {}'.format(i, ordered[i]))            if i == 'price':                mylist.append('$')            mylist.append('\n')        return ''.join(mylist)class Prototype:    def __init__(self):        self.objects = dict()    # 初始化一个原型列表    def register(self, identifier, obj):        # 在原型列表中注册原型对象        self.objects[identifier] = obj    def unregister(self, identifier):        # 从原型列表中删除原型对象        del self.objects[identifier]    def clone(self, identifier, **attr):        # 根据 identifier 在原型列表中查找原型对象并克隆        found = self.objects.get(identifier)        if not found:            raise ValueError('Incorrect object identifier: {}'.format(identifier))        obj = copy.deepcopy(found)        obj.__dict__.update(attr)   # 用新的属性值替换原型对象中的对应属性        return objdef main():    b1 = Book('The C Programming Language', ('Brian W. Kernighan', 'Dennis M.Ritchie'),    price=118, publisher='Prentice Hall', length=228, publication_date='1978-02-22',    tags=('C', 'programming', 'algorithms', 'data structures'))    prototype = Prototype()    cid = 'k&r-first'    prototype.register(cid, b1)    b2 = prototype.clone(cid, name='The C Programming Language(ANSI)', price=48.99, length=274, publication_date='1988-04-01', edition=2)    for i in (b1, b2):        print(i)    print("ID b1 : {} != ID b2 : {}".format(id(b1), id(b2)))if __name__ == '__main__':    main()</code></pre><h2 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqvno10gt9j30rw0940ti.jpg" alt="image-20210526111211393" loading="lazy"></p><h4 id="方式一：通过类的实例化控制"><a href="#方式一：通过类的实例化控制" class="headerlink" title="方式一：通过类的实例化控制"></a>方式一：通过类的实例化控制</h4><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">""" 单例模式实现1：通过类实例化调用元类的__call__方式实例化同一个对象        解析：实例化Singleton本质是调用了type.__call__方法，call中调用了new            __new__方法在内存中开辟了一块空间存放实例化的对象，返回值是一个空对象            然后会调用__init__来对对象初始化            此处第一次实例化获取的是正常实例化得到的Singleton对象，            此时在实例化结束后为类中的_instance赋值为type.__call__，            以至于第二次实例化还是走的同一个type.__call__，形成单例"""</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    _instance <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>_instance <span class="token keyword">is</span> None<span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance</code></pre><h4 id="方式二：导入对象"><a href="#方式二：导入对象" class="headerlink" title="方式二：导入对象"></a>方式二：导入对象</h4><h4 id="方式三：装饰器"><a href="#方式三：装饰器" class="headerlink" title="方式三：装饰器"></a>方式三：装饰器</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 实现3：装饰器储存第一次实例化的对象</span><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    _instance <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">_singleton</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> _instance<span class="token punctuation">:</span>            _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>    <span class="token keyword">return</span> _singleton@singleton<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;h2 id=&quot;创建型&quot;&gt;&lt;a href=&quot;#创建型&quot; class=&quot;headerlink&quot; title=&quot;创建型&quot;&gt;&lt;/a&gt;创建</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="设计模式" scheme="http://huang_zhao.gitee.io/task/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>chean code读书笔记</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/clean%20code/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/clean%20code/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T05:57:49.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="clean-code"><a href="#clean-code" class="headerlink" title="clean code"></a>clean code</h1><h2 id="1-命名的意义"><a href="#1-命名的意义" class="headerlink" title="1 命名的意义"></a>1 命名的意义</h2><h3 id="1-1-名副其实"><a href="#1-1-名副其实" class="headerlink" title="1.1 名副其实"></a>1.1 名副其实</h3><p>一段代码若中间出现太多不可预知的变量，常量，类型，我们就必须去其他地方找到他们的出处</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> d <span class="token comment" spellcheck="true">//今天</span><span class="token keyword">int</span> today</code></pre><p>d和today都代表今天，但是today在后续的程序中会更容易让人理解，而d就显得不那么名副其实，会浪费我们很多时间去翻看以前的代码。</p><p>不仅仅是变量命名</p><p>例如：</p><p>![image-20210202120312436](/Users/apple/Library/Application Support/typora-user-images/image-20210202120312436.png)</p><p>虽然上述代码逻辑很简单，但是我们弄不清楚其中的含义，list1是什么类型，i的0索引代表着什么，4又代表什么</p><p>大部分的人对于变量命名可能会有规范，但是没有习惯对值和常量做规范</p><p>![image-20210202120232380](/Users/apple/Library/Application Support/typora-user-images/image-20210202120232380.png)</p><h3 id="1-2-做有意义的区分"><a href="#1-2-做有意义的区分" class="headerlink" title="1.2 做有意义的区分"></a>1.2 做有意义的区分</h3><p>类似的名称就应该有具体的名称区别</p><p>例如 user与user_info两个对象，我们在获取用户手机的时候，这个变量可能会出现上述两个对象中的任意一个，也可能不出现，应该加以有意义的区分，不然很多类似的区别反而会造成误导，只是在定义的时候偷了懒，后续使用就需要花更多的时间去变量的源头</p><h3 id="1-3-类与方法"><a href="#1-3-类与方法" class="headerlink" title="1.3 类与方法"></a>1.3 类与方法</h3><p>类名应当是名词或者名词短语，方法名应当是动词或者动词短语</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;clean-code&quot;&gt;&lt;a href=&quot;#clean-code&quot; class=&quot;headerlink&quot; title=&quot;clean code&quot;&gt;&lt;/a&gt;clean code&lt;/h1&gt;&lt;h2 id=&quot;1-命名的意义&quot;&gt;&lt;a href=&quot;#1-命名的意义&quot; class</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="读书笔记" scheme="http://huang_zhao.gitee.io/task/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>mysql深入学习</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Mysql%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Mysql%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T05:58:54.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mysql深入学习"><a href="#Mysql深入学习" class="headerlink" title="Mysql深入学习"></a>Mysql深入学习</h1><p>MySQL简介</p><ul><li>关于MySQL发音的官方答案：<br>The official way to pronounce “MySQL” is “My Ess Que Ell” (not “my sequel”), but we do not mind if you pronounce it as “my sequel” or in some other localized way.</li></ul><p>​        MySQL 可以分为 Server 层和存储引擎层两部分</p><p>​        <strong>Server层包括连接器、查询缓存、分析器、优化器、执行器等</strong>，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>​        <strong>存储引擎层负责数据的存储和提取。</strong>其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了默认存储引擎。<strong>create table 语句中使用 engine=memory，来指定使用内存引擎创建表。</strong></p><p>​        现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了默认存储引擎。create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。</p><h2 id="查询语句执行过程"><a href="#查询语句执行过程" class="headerlink" title="查询语句执行过程"></a>查询语句执行过程</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugu76st2j313y0u0arb.jpg" alt="image-20210525103044520" loading="lazy"></p><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><p>​        第一步，连接器连接到数据库，连接器负责跟客户端建立连接、获取权限、维持和管理连接。</p><blockquote><p>连接命令一般是这么写的：mysql -h$ip -P$port -u$user -p$password</p><p>账号密码错误会报错：Access denied for user</p></blockquote><p>​        连接完成后，如果没有后续的动作，这个连接就处于空闲状态，可以在<strong>show processlist</strong>命令中看到它。文本中这个图是show processlist的结果，其中的Command列显示为”Sleep”的这一行，就表示现在系统里面有一个空闲连接。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugulh05cj31aw08ijwn.jpg" alt="image-20210525103108004" loading="lazy"></p><p>​        客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数<strong>wait timeout</strong>控制的，默认值是8小时。</p><blockquote><p>断开后再执行sql会报错：Lost connection to MySQL server during query</p></blockquote><p>​        建立连接的过程通常是比较复杂的，所以建议在使用中要尽量减少建立连接的动作，也就是<strong>尽量使用长连接。</strong></p><p>​        但是 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启。</p><p>​        怎么解决这个问题呢？可以考虑以下两种方案。</p><ol><li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li><li><strong>如果用的是MySQL 5.7或更新版本，可以在每次执行一个比较大的操作后，通过执行mysql reset connection来重新初始化连接资源。这个过程不需要重连和重新做权限验证但是会将连接恢复到刚刚创建完时的状态。</strong></li></ol><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p>​        第二步，查询语句会先查询缓存，之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。</p><p>​        但是<strong>查询缓存利大于弊</strong>，因为查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。</p><p>​        除非是静态配置表才适合用查询缓存。<strong>可以将参数 query_cache_type 设置成DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。SQL_CACHE 显式指定使用查询缓存。</strong></p><blockquote><p>select SQL_CACHE * from T where ID=10；</p></blockquote><p>​        但是，<strong>MySQL 8.0版本彻底删除了查询缓存功能。</strong></p><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><p>​        第三步，分析语句，先是词法分析，找出select，表名，列名等关键字；然后是语法分析，判断语法是否正确。<strong>表名列名不对的sql，会在语法分析时报错。</strong></p><blockquote><p>语法错误：ERROR 1064 (42000): You have an error in your SQL syntax;</p></blockquote><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>​        第四步，<strong>决定使用哪个索引，join的时候决定各个表的连接顺序。</strong></p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>​        第五步，<strong>先判断对当前表是否有权限（如果命中查询缓存，会在返回结果时验证权限）。</strong></p><blockquote><p>ERROR 1142 (42000): SELECT command denied to user ‘b’@’localhost’ for table ‘T’</p></blockquote><p>​        如：select * from T where ID=10; 执行过程</p><ol><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>​        慢查询日志中有一行 rows_examined 字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。但是引擎扫描行数跟 rows_examined 并不是完全相同的。</p><h4 id="查询的数据如何返回"><a href="#查询的数据如何返回" class="headerlink" title="查询的数据如何返回"></a>查询的数据如何返回</h4><ul><li>对一个200G的大表做全表扫描，而内存只有16G，会不会把数据库主机的内存用光了？<br>实际上，MySQL不是取到全部数据再返回客户端。取数据和发数据的流程是这样的：</li></ul><ol><li><ol><li>获取一行，写到 net_buffer 中。这块内存的大小是由参数 net_buffer_length 定义的，默认是 16k。</li><li>重复获取行，直到 net_buffer 写满，调用网络接口发出去。</li><li>如果发送成功，就清空 net_buffer，然后继续取下一行，并写入 net_buffer。</li><li>如果发送函数返回 EAGAIN 或 WSAEWOULDBLOCK，就表示本地网络栈（socket send buffer）写满了，进入等待。直到网络栈重新可写，再继续发送。</li></ol></li></ol><ul><li>MySQL 客户端发送请求后，接收服务端返回结果的方式有两种：</li></ul><ol><li><ol><li>一种是本地缓存，也就是在本地开一片内存，先把结果存起来。如果用 API 开发，对应的就是 mysql_store_result 方法。</li><li>另一种是不缓存，读一个处理一个。如果用 API 开发，对应的就是 mysql_use_result 方法。</li></ol></li></ol><blockquote><p><strong>MySQL 客户端默认采用第一种方式，而如果加上–quick 参数，就会使用第二种不缓存的方式。</strong></p><p>采用不缓存的方式时，如果本地处理得慢，就会导致服务端发送结果被阻塞，因此会让服务端变慢。</p></blockquote><p>​        <strong>MySQL 是“边读边发的”。这就意味着，如果客户端接收得慢，会导致 MySQL 服务端由于结果发不出去，这个事务的执行时间变长。</strong></p><p>​        <strong>对于正常的线上业务来说，如果一个查询的返回结果不会很多的话，都建议使用 mysql_store_result 这个接口，直接把查询结果保存到本地内存。</strong></p><h2 id="更新语句执行过程"><a href="#更新语句执行过程" class="headerlink" title="更新语句执行过程"></a>更新语句执行过程</h2><p>​        更新语句同样会走连接器，查询缓存（清空该表缓存），分析器，优化器这一套流程，与查询流程不一样的是，更新流程还涉及两个重要的日志模块，redo log（重做日志）和 binlog（归档日志）。</p><h4 id="重做日志：redo-log"><a href="#重做日志：redo-log" class="headerlink" title="重做日志：redo log"></a>重做日志：redo log</h4><p>​        如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。</p><p>​        MySQL采用了WAL技术，全称是 Write-Ahead Logging，的关键点就是<strong>先写日志，再写磁盘。</strong></p><p>​        具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</p><p>​        但是如果 InnoDB 的 redo log 写满了。这时候系统会停止所有更新操作，把 checkpoint 往前推进(对应的所有脏页都 flush 到磁盘上)，redo log 留出空间可以继续写。</p><p>​        一旦一个查询请求需要在执行过程中先 flush 掉一个脏页时，这个查询就可能要比平时慢了。由于刷脏页的逻辑会占用 IO 资源并可能影响到了更新语句，要尽量避免这种情况，就要合理地设置 innodb_io_capacity 的值，<strong>并且平时要多关注脏页比例，不要让它经常接近 75%。</strong>脏页比例是通过 Innodb_buffer_pool_pages_dirty/Innodb_buffer_pool_pages_total 得到的，具体的命令参考下面代码：</p><blockquote><p>mysql&gt; select VARIABLE_VALUE into @a from global_status where VARIABLE_NAME = ‘Innodb_buffer_pool_pages_dirty’;</p><p>select VARIABLE_VALUE into @b from global_status where VARIABLE_NAME = ‘Innodb_buffer_pool_pages_total’;</p><p>select @a/@b;</p><p>在 InnoDB 中，innodb_flush_neighbors 参数就是用来控制这个行为的，值为 1 的时候会有“连坐”机制，值为 0 时表示不找邻居，自己刷自己的。固态硬盘建议设置为0。</p></blockquote><p>​        InnoDB 的 redo log 是可以配置的固定大小，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。<strong>如果redo log 设置的太小，磁盘压力很小，但是数据库出现间歇性的性能下跌。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugv0kg57j313x0u0qac.jpg" alt="image-20210525103131637" loading="lazy"></p><p>​        write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>​        write pos 和 checkpoint 之间的是还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，这时候就得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><p>​        <strong>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。</strong></p><p>​        <strong>redo log buffer</strong> ：插入数据的过程中，生成的日志都得先保存起来，但又不能在还没 commit 的时候就直接写到 redo log 文件里。所以，redo log buffer 就是一块内存，用来先存 redo 日志的。也就是说，在执行第一个 insert 的时候，数据的内存被修改了，在执行 commit 的时候 redo log buffer 才写入了日志。</p><p>​        为了控制 redo log 的写入策略，innodb_flush_log_at_trx_commit 参数，它有三种可能取值：</p><ol><li>设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;</li><li>设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘；</li><li>设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache。</li></ol><p>​        InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。也就是说，<strong>一个没有提交的事务的 redo log，也是可能已经持久化到磁盘的。</strong></p><p>​        还有两种场景也会把没有提交的redo log 写到硬盘。</p><ol><li><strong>redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动写盘。</strong>注意，由于这个事务并没有提交，所以这个写盘动作只是 write，而没有调用 fsync，也就是只留在了文件系统的 page cache。</li><li><strong>并行的事务提交的时候，顺带将这个事务的 redo log buffer 持久化到磁盘。</strong>假设一个事务 A 执行到一半，另一个事务B提交，事务B要把 redo log buffer 里的日志全部持久化到磁盘。</li></ol><h4 id="归档日志：binlog"><a href="#归档日志：binlog" class="headerlink" title="归档日志：binlog"></a>归档日志：binlog</h4><p>​        redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p><p>​        binlog 的三种格式对比：</p><p>​                <strong>statement：记录到 binlog 里的是语句原文，最后会有 COMMIT；可能会导致主备不一致，因为limit 、等sql 执行时可能主备优化器选择的索引不一样，排序也不一样。now()执行的结果也不一样。</strong></p><p>​                <strong>row ：记录了操作的事件每一条数据的变化情况，最后会有一个 XID event。缺点是太占空间。</strong></p><p>​                <strong>mixed：同时使用两种格式，由数据库判断具体某条sql使用哪种格式。但是有选择错误的情况。</strong></p><p>这两种日志有以下三点不同。</p><ol><li><strong>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</strong></li><li><strong>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</strong></li><li><strong>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</strong></li></ol><p>redo log 和 binlog 是怎么关联起来的?</p><p>它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 redo log：</p><ul><li>如果碰到既有 prepare、又有 commit 的 redo log，就直接提交；</li><li>如果碰到只有 parepare、而没有 commit 的 redo log，就拿着 XID 去 binlog 找对应的事务。</li></ul><p>​        处于 prepare 阶段的 redo log 加上完整 binlog，重启也能恢复，因为 binlog 完整了，那么从库就同步过去了，为了保证主从一致，有完整的 binlog 就算成功。</p><p>​        <strong>事务执行过程中，先把日志写到 binlog cache，事务提交的时候，再把 binlog cache 写到 binlog 文件中。</strong></p><p>​        write 和 fsync 的时机，是由参数 sync_binlog 控制的：</p><ol><li>sync_binlog=0 的时候，表示每次提交事务都只 write，不 fsync；</li><li>sync_binlog=1 的时候，表示每次提交务都会执行 fsync；</li><li>sync_binlog=N(N&gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。</li></ol><blockquote><p>比较常见的是将其设置为 100~1000 中的某个数值。对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。</p></blockquote><h4 id="更新语句执行过程-1"><a href="#更新语句执行过程-1" class="headerlink" title="更新语句执行过程"></a>更新语句执行过程</h4><p>比如：update T set c=c+1 where ID=2;</p><ol><li>执行器先找引擎取 ID=2 这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li><strong>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</strong></li><li><strong>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</strong></li><li><strong>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</strong></li></ol><p>​        这里给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。<strong>其实就是把redo log 和binlog 做两阶段提交，为了让两份日志之间的逻辑一致。</strong></p><h4 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h4><p>​        <strong>保存一定时间的binlog，同时系统会定期做整库备份。</strong></p><p>​        当需要恢复到指定的某一秒时，</p><ol><li>首先，找到最近的一次全量备份，如果运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库</li><li>然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到指定的那个时刻。</li></ol><p>​        <strong>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。</strong>这个参数建议设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p><p>​        <strong>binlog用于备份恢复和从库同步。sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。</strong>这个参数也建议设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p><h4 id="主备同步"><a href="#主备同步" class="headerlink" title="主备同步"></a>主备同步</h4><ol><li>在备库 B 上通过 change master 命令，设置主库 A 的 IP、端口、用户名、密码，以及要从哪个位置开始请求 binlog，这个位置包含文件名和日志偏移量。</li><li>在备库 B 上执行 start slave 命令，这时候备库会启动两个线程，就是图中的 io_thread 和 sql_thread。其中 io_thread 负责与主库建立连接。</li><li>主库 A 校验完用户名、密码后，开始按照备库 B 传过来的位置，从本地读取 binlog，发给 B。</li><li>备库 B 拿到 binlog 后，写到本地文件，称为中转日志（relay log）。</li><li>sql_thread 读取中转日志，解析出日志里的命令，并执行。</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugvfag12j313v0u015g.jpg" alt="image-20210525103157119" loading="lazy"></p><p>​        一主一备结构，需要注意主备切换，备库设置只读，避免切换bug造成双写不一致问题（设置 readonly 对超级用户是无效的，同步更新的线程有超级权限，所以还能写入同步数据）。</p><p>​        双主结构，要避免循环更新问题，因为MySQL 在 binlog 中记录了这个命令第一次执行时所在实例的 server id。所以可以规定两个库的 server id 必须不同，每个库在收到从自己的主库发过来的日志后，先判断 server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志。</p><h4 id="主备延迟"><a href="#主备延迟" class="headerlink" title="主备延迟"></a>主备延迟</h4><p>​        <strong>可以在备库上执行 show slave status 命令，它的返回结果里面会显示 seconds_behind_master，用于表示当前备库延迟了多少秒。</strong>每个事务的 binlog 里面都有一个时间字段，用于记录主库上写入的时间； 备库取出当前正在执行的事务的时间字段的值，计算它与当前系统时间的差值，得到 seconds_behind_master。</p><p>​        主备延迟最直接的表现是，备库消费中转日志（relay log）的速度，比主库生产 binlog 的速度要慢。</p><p>​        主备延迟的来源</p><ol><li>有些部署条件下，备库所在机器的性能要比主库所在的机器性能差。</li><li>考虑到主备切换，主备机器一般都一样了，但是还可能备库读的压力太大，</li></ol><blockquote><p>一主多从，或者通过binlog输出到外部系统(比如Hadoop)，让外部系统提供部分统计查询能力。</p></blockquote><ol><li><strong>大事务，如果事务执行十分钟，那就会导致主从延迟十分钟。</strong></li></ol><h4 id="主备复制策略"><a href="#主备复制策略" class="headerlink" title="主备复制策略"></a>主备复制策略</h4><p>​        <strong>在官方的 5.6 版本之前，MySQL 只支持单线程复制</strong>，由此在主库并发高、TPS 高时就会出现严重的主备延迟问题。</p><p>​        并行复制策略有按表并行分发策略，按行并行分发策略，但是按行分发在决定线程分发的时候，需要消耗更多的计算资源。这两个方案其实都有一些约束条件：</p><ol><li>要能够从 binlog 里面解析出表名、主键值和唯一索引的值。也就是说，主库的 binlog 格式必须是 row；</li><li>表必须有主键；</li><li>不能有外键。表上如果有外键，级联更新的行不会记录在 binlog 中，这样冲突检测就不准确。</li></ol><p>​        <strong>官方 MySQL5.6 版本，支持了并行复制，只是支持的粒度是按库并行。</strong>相比于按表和按行分发，这个策略有两个优势：</p><ol><li>构造 hash 值的时候很快，只需要库名；而且一个实例上 DB 数也不会很多，不会出现需要构造 100 万个项这种情况。</li><li>不要求 binlog 的格式。因为 statement 格式的 binlog 也可以很容易拿到库名。</li></ol><p>​        <strong>MariaDB 的并行复制策略，伪模拟主库并发度</strong>，主库 redo log 组提交 (group commit) 优化，同一组提交会记录commit_id，备库把同一个commit_id分发到多个worker执行。</p><p>​        官方的 MySQL5.7 版本，由参数 slave-parallel-type 来控制并行复制策略：</p><ol><li>配置为 DATABASE，表示使用 MySQL 5.6 版本的按库并行策略；</li><li>配置为 LOGICAL_CLOCK，表示的就是类似 MariaDB 的策略。不过，MySQL 5.7 这个策略，针对并行度做了优化。</li></ol><p>​        <strong>MySQL 5.7.22 版本里，MySQL 增加了一个新的并行复制策略，基于 WRITESET 的并行复制。</strong>对于事务涉及更新的每一行，计算出这一行的 hash 值，组成集合 writeset。如果两个事务没有操作相同的行，也就是说它们的 writeset 没有交集，就可以并行。</p><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>​        读写分离有两种方案：</p><ol><li>客户端直连方案，因为少了一层 proxy 转发，所以查询性能稍微好一点儿，并且整体架构简单，排查问题更方便。但是这种方案，由于要了解后端部署细节，所以在出现主备切换、库迁移等作的时候，客户端都会感知到，并且需要调整数据库连接信息。 可能会觉得这样客户端也太麻烦了，信息大量冗余，架构很丑。其实也未必，一般采用这样的架构，一定会伴随一个负责管理后端的组件，比如 Zookeeper，尽量让业务端只专注于业务逻辑开发。</li><li>带 proxy 的架构，对客户端比较友好。客户端不需要关注后端细节，连接维护、后端信息维护等工作，都是由 proxy 完成的。但这样的话，对后端维护团队的要求会更高。而且，proxy 也需要有高可用架构。因此，带 proxy 架构的整体就相对比较复杂。</li></ol><p>​        <strong>主从延迟的情况下怎么办？</strong></p><ol><li><p>强制走主库方案；对于必须要拿到最新结果的请求，强制将其发到主库上。</p></li><li><p>sleep 方案；主库更新后，读从库之前先 sleep 一下。因为大多数情况下主备延迟在 1 秒之内。</p></li><li><p>判断主备无延迟方案； 每次从库执行查询请求前，先判断 seconds_behind_master 是否已经等于 0。如果还不等于 0 ，那就必须等到这个参数变为 0 才能执行查询请求。</p></li><li><p>配合 semi-sync 方案；半同步复制：</p></li><li><ol><li>事务提交的时候，主库把 binlog 发给从库；</li><li>从库收到 binlog 以后，发回给主库一个 ack，表示收到了；</li><li>主库收到这个 ack 以后，才能给客户端客户端返回“事务完成”的确认。</li></ol></li><li><p>等主库位点方案；</p></li><li><p>等 GTID 方案。</p></li></ol><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h4 id="数据库特性"><a href="#数据库特性" class="headerlink" title="数据库特性"></a>数据库特性</h4><p>​        <strong>ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、、隔离性、持久性）。</strong></p><p>​        当数据库上有多个事务同时执行的时候，就可能出现<strong>脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）</strong>的问题，为了解决这些问题，就有了“隔离级别”的概念。</p><ul><li>脏读：指的是一个事务的读操作读到了另一个未提交的事务修改的值。</li><li>不可重复读：指的是一个事务读了同一个值两次，但是两次的值不同，因为中间另一个事务修改了这个值。</li><li>幻读：仍然指的是一个事务中读了两次，结果不同，但是与不可重复读不同的是，这里不同是因为别的事物做了插入操作，而是读的条件是一个范围的条件，这样第二次会多读到一条数据。</li></ul><blockquote><p>不可重复读重点在于update和delete，而幻读的重点在于insert。</p></blockquote><h4 id="幻读问题——间隙锁"><a href="#幻读问题——间隙锁" class="headerlink" title="幻读问题——间隙锁"></a>幻读问题——间隙锁</h4><p>​        即使把所有的记录都加上锁，还是阻止不了新插入的记录，也就是说行锁解决不了幻读问题，行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”。因此，为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 (Gap Lock)。</p><p>​        当执行 select * from t where d=5 for update 的时候，就不止是给数据库中已有的 6 个记录加上了行锁，还同时加了 7 个间隙锁。这样就确保了无法再插入新的记录。</p><p>​        间隙锁和行锁合称 next-key lock，每个 next-key lock 是前开后闭区间。也就是说，表 t 初始化以后，如果用 select * from t for update 要把整个表所有记录锁起来，就形成了 7 个 next-key lock，分别是(-∞,0]、(0,5]、(5,10]、(10,15]、(15,20]、(20, 25]、(25, +supremum]。</p><p>​        <strong>间隙锁和 next-key lock 的引入，解决了幻读的问题，但同时也带来了一些“困扰”。间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。</strong></p><h4 id="隔离级别-1"><a href="#隔离级别-1" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>​        SQL 标准的事务隔离级别包括：读未提交read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。<strong>隔离级别越高，效率越低。</strong></p><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读” 会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p>​        <strong>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。</strong></p><ol><li>“可重复读”隔离级别下：这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。</li><li>“读提交”隔离级别下：这个视图是在每个 SQL 语句开始执行的时候创建的。</li><li>“读未提交”隔离级别下：直接返回记录上的最新值，没有视图概念</li><li>“串行化”隔离级别下：直接用加锁的方式来避免并行访问。<pre><code>在 MySQL 里，有两个“视图”的概念：</code></pre></li></ol><ul><li>一个是 view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view … ，而它的查询方法与表一样。</li><li>另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。</li></ul><p>​        <strong>MySQL 默认隔离级别是可重复读，Oracle 默认隔离级别是“读提交”。</strong></p><p>​        将启动参数 <strong>transaction-isolation</strong> 的值设置成 READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ 、SERIALIZABLE。</p><p>​        可以用 show variables 来查看当前的值。</p><h4 id="事务隔离的实现——undo-log"><a href="#事务隔离的实现——undo-log" class="headerlink" title="事务隔离的实现——undo log"></a>事务隔离的实现——undo log</h4><p>​        每条记录在更新的时候都会同时记录一条回滚操作。同一条记录在系统中可以存在多个版本，这就是数据库的（MVCC）。</p><p>​        <strong>MVCC的全称是“多版本并发控制”。</strong>为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，不用等待另一个事务释放锁。</p><p>​        <strong>InnoDB会给数据库中的每一行增加三个字段，它们分别是DB_TRX_ID（事务版本号）、DB_ROLL_PTR（创建时间）、DB_ROW_ID（唯一id）。</strong></p><p>​        <strong>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。</strong></p><p>​        <strong>InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。</strong></p><p>​        B+Tree叶结点上，始终存储的是最新的数据（可能是还未提交的数据）。而旧版本数据，通过UNDO记录存储在回滚段（Rollback Segment）里。每一条记录都会维护一个ROW HEADER元信息，存储有创建这条记录的事务ID，一个指向UNDO记录的指针。<strong>通过最新记录和UNDO信息，可以还原出旧版本的记录。</strong></p><p>​        假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugvsu9u9j31af0u07bx.jpg" alt="image-20210525103218808" loading="lazy"></p><p>​        当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。这些回滚信息记录在undo log 里。</p><p>​        当系统里没有比这个回滚日志更早的 read-view 的时候会删除老的undo log。</p><h4 id="避免长事务"><a href="#避免长事务" class="headerlink" title="避免长事务"></a>避免长事务</h4><p>​        <strong>尽量不要使用长事务，长事务意味着系统里面会存在很老的事务视图。会有很大的undo log日志占用空间。而且长事务还会占据锁资源，也可能拖垮整个库。</strong></p><p>​        可以在 <strong>information_schema 库的innodb_trx</strong> 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。可以监控这个表，设置长事务阈值报警或者直接kill。</p><blockquote><p>select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</p></blockquote><p>​        可以通过 SET MAX_EXECUTION_TIME 命令来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。</p><p>​        确认是否有不必要的只读事务。</p><p>​        如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2或更大的值）。如果真的出现大事务导致undo log过大，这样设置后清理起来更方便。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h4 id="常见索引模型"><a href="#常见索引模型" class="headerlink" title="常见索引模型"></a>常见索引模型</h4><p>​        Hash表 + 链表，查询新增都很快，但是只适用于只有等值查询的场景，不能区间查询， Memcached 及其他一些 NoSQL 引擎在用。</p><p>​        有序数组，等值查询和范围查询场景中的性能就都非常优秀，二分查找O(log(N))，但是更新的效率很低，所以只适用于静态存储引擎。</p><p>​        平衡二叉树，更新和查询都比较快。</p><p>​        还有跳跃表，LSM树等。</p><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+ 树"></a>B+ 树</h4><p>​        为了让一个查询尽量少地读磁盘，就需要使用多叉树。MySQL采用的是B+树，由于索引不止存在内存中，还要写到磁盘上。二叉树的树高太高，100万数据，就有20层，在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。就要花费200ms的寻址时间，就太慢了。MySQL  B+树 的一层节点数量在1200左右，只需要1-3次磁盘IO就可以了，因为InnoDB存储引擎的最小储存单元页（Page），一个页的大小是16K。一般来说主键id为bigint类型，长度8字节，指针6字节，那么16284/14 = 1170。所以一次IO最多读取1170个节点。</p><p>​        相对于B树，B+树把所有的数据都放在了叶子节点上，这样虽然每次都需要查询叶子节点，但也不过两三层，如果干节点也放数据，那干节点就变大了，一次就读取不了1200节点了，层高会变大很多。</p><p>​        并且MySQL把B+树的所有叶子节点的数据用指针连起来了，这样做区间查询是非常快的。</p><h4 id="主键索引和非主键索引"><a href="#主键索引和非主键索引" class="headerlink" title="主键索引和非主键索引"></a>主键索引和非主键索引</h4><p>​        <strong>主键索引的叶子节点存的是整行数据。</strong>在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</p><p>​        <strong>非主键索引的叶子节点内容是主键的值。</strong>在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</p><p>​        <strong>查询语句，如果走主键索引，会直接得到数据，如果走非主键索引，查到主键后，还需要回主键索引再查一次数据。这个过程称为回表。（覆盖索引不需要回表）</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugw4o0iej313v0u0thn.jpg" alt="image-20210525103238211" loading="lazy"></p><p>​        分为聚簇索引和非聚簇索引的原因：更新数据的时候，由于数据的地址变了，需要更改索引，但是由于数据只跟主键索引绑定，索引只需要更新聚簇索引，当然还有被更新列涉及到的索引也要更新。如果所有所有都跟数据绑定，虽然省掉了回表的过程，但是每次更新，需要更新所有的索引，得不偿失。</p><h4 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h4><p>​        B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。</p><p>​        比如按顺序插入1-499,501-1000，索引都在一页，再插入一个500，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据(501到1000的数据)过去。这个过程称为<strong>页分裂</strong>。在这种情况下，性能自然会受影响。</p><p>​        <strong>除了影响性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。</strong></p><p>​        当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p><p>​        所以一般建表规范都要求用自增主键，避免页分裂，当然也有特殊情况，使用别的字段当做主键。</p><p>​        并且索引可能因为删除，或者页分裂等原因，导致数据页有空洞，<strong>重建索引</strong>的过程会创建一个新的索引，把数据按顺序插入，这样页面的利用率最高，也就是索引更紧凑、更省空间。</p><blockquote><p>alter table T drop index k;</p><p>alter table T add index(k);</p></blockquote><p>​        但是<strong>不能重建主键索引</strong>，不论是删除主键还是创建主键，都会将整个表重建。可以使用 alter table T engine=InnoDB 重建表。</p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>​        如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”查询需求，称为覆盖索引。</p><p>​        由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p><p>​        如果有根据身份证号查询市民信息的需求，只要在身份证号字段上建立索引就够了。如果现在有一个高频请求，要根据市民的身份证号查询他的姓名，再建立一个（身份证号、姓名）的联合索引就是覆盖索引，省去了回表环节。</p><h4 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h4><p>​        如果为每一种查询都设计一个索引，索引是不是太多了。</p><p>​        B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。</p><p>​        为了直观地说明这个概念，用（name，age）这个联合索引来分析。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugwgmmmtj315x0u016n.jpg" alt="image-20210525103258069" loading="lazy"></p><p>​        可以看到，索引项是按照索引定义里面出现的字段顺序排序的。</p><p>​        当逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。</p><p>​        如果要查的是所有名字第一个字是“张”的人，SQL 语句的条件是”where name like ‘张 %’”。这时，也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。</p><p>​        可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个<strong>最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</strong></p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>​        <strong>使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</strong></p><p>​        在建立索引时关注的是区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。因此，可以通过统计索引上有多少个不同的值来判断要使用多长的前缀。</p><p>​        可以使用下面这个语句，算出这个列上有多少个不同的值：</p><blockquote><p>select count(distinct email) as L from SUser;</p></blockquote><p>​        使用前缀索引就用不上覆盖索引对查询性能的优化了，这是在选择是否使用前缀索引时需要考虑的一个因素。</p><p>​        那么对于身份证号，一共 18 位，其中前 6 位是地址码，所以同一个县的人的身份证号前 6 位一般会是相同的。该怎么存储，怎么设计索引呢？</p><ol><li>第一种方式是使用倒序存储。身份证号的最后 6 位没有地址码这样的重复逻辑。</li></ol><blockquote><p>select field_list from t where id_card = reverse(‘input_id_card_string’);</p><p>select field_list from t where id_card = reverse(‘input_id_card_string’);</p></blockquote><ol><li>第二种方式是使用 hash 字段。在表上再创建一个整数字段，来保存身份证的校验码，同时在这个字段上创建索引。</li></ol><blockquote><p>alter table t add id_card_crc int unsigned, add index(id_card_crc);</p><p>然后每次插入新记录的时候，都同时用 crc32() 这个函数得到校验码填到这个新字段。由于校验码可能存在冲突，所以查询语句 where 部分要判断 id_card 的值是否精确相同。</p><p>select field_list from t where id_card_crc=crc32(‘input_id_card_string’) and id_card=’input_id_card_string’</p></blockquote><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><p>​        最左前缀的时候，那些不符合最左前缀的部分，会怎么样呢？</p><p>​        如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：</p><blockquote><p>mysql&gt; select * from tuser where name like ‘张 %’ and age=10 and ismale=1;</p></blockquote><p>​        这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。</p><p>​        然后需要判断其他条件是否满足。</p><p>​        在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p><p>​        <strong>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)，可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugwq4mrgj313y0u07im.jpg" alt="image-20210525103313205" loading="lazy"></p><h4 id="change-buffer"><a href="#change-buffer" class="headerlink" title="change buffer"></a>change buffer</h4><p>​        当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。<strong>虽然是只更新内存，但是在事务提交的时候，把 change buffer 的操作也记录到 redo log 里了，所以崩溃恢复的时候，change buffer 也能找回来。</strong></p><p>​        需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p><p>​        将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 merge。除了访问这个数据页会触发 merge 外，系统有后台线程会定期 merge。在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。</p><p>​        显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式能够避免占用内存，提高内存利用率。</p><p>​        <strong>唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。</strong></p><p>​        change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。</p><p>​        如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。</p><p>​        第一种情况是，这个记录要更新的目标页在内存中。这时，InnoDB 的处理流程如下：</p><ul><li>对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</li></ul><blockquote><p>这个判断只会耗费微小的 CPU 时间。不是重点</p></blockquote><ul><li>第二种情况是，这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下：</li><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</li><li><strong>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</strong></li></ul><p>​    将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><p>​        <strong>change buffer 适用于写多读少的业务，比如账单类、日志类的系统。因为会记录很多change buffer（写的时候） 才会merge（读的时候）</strong></p><p>​        反过来，读多写少的业务，几乎每次把更新记录在change buffer 后，就会立即出发merge，这样随机访问 IO 的次数不会减少，反而增加了change buffer 的维护代价。</p><p>​        所以，对于身份证号这类字段，如果业务已经保证不会写入重复数据，不需要数据库做约束，加普通索引比加主键索引要好，如果所有的更新后面，都马上伴随着对这个记录的查询，那么应该关闭 change buffer。而在其他情况下，change buffer 都能提升更新性能。</p><p>​        在实际使用中，可以发现，<strong>普通索引和 change buffer 的配合使用，对于数据量大的表的更新优化还是很明显的，特别是在使用机械硬盘时。</strong></p><p><strong>change buffer 和 redo log 对比</strong></p><blockquote><p>insert into t(id,k) values(id1,k1),(id2,k2);</p></blockquote><p>这条更新语句做了如下操作：</p><ol><li>Page 在内存中，直接更新内存；</li><li>Page 没有在内存中，就在内存的 change buffer 区域，记录下“要往 Page 插入一行”这个信。</li><li>将上述两个动作记入 redo log 中。</li></ol><p>后续的更新操作</p><ol><li>Page 在内存中，会直接从内存返回。</li><li>Page 不在内容中，需要把 Page 从磁盘读入内存中，然后应用 change buffer 里面的操作日志，生成一个正确的版本并返回结果。</li></ol><p>所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，<strong>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</strong></p><h4 id="优化器如何选择索引"><a href="#优化器如何选择索引" class="headerlink" title="优化器如何选择索引"></a>优化器如何选择索引</h4><p>​        优化器结合是否扫描行数、是否使用临时表、是否排序等因素进行综合判断。</p><p>​        MySQL 在真正开始执行语句之前，并不能精确地知道满足条件的记录有多少条，而只能根据统计信息来估算记录数。</p><p>​        这个统计信息就是索引的“区分度”。显然，一个索引上不同的值越多，这个索引的区分度就越好。而一个索引上不同的值的个数，称之为“基数”（cardinality）。也就是说，这个基数越大，索引的区分度越好。</p><p>​        <strong>可以使用 show index 方法，看到一个索引的基数。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugx8xlsuj31b405aado.jpg" alt="image-20210525103329731" loading="lazy"></p><p>​        MySQL 采样统计的方法获得基数，InnoDB 默认会选择 N 个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。当变更的数据行数超过 1/M 的时候，会自动触发重新做一次索引统计。<strong>analyze table t 命令，可以用来重新统计索引信息。</strong></p><p>​        在 MySQL 中，有两种存储索引统计的方式，可以通过设置参数 innodb_stats_persistent 的值来选择：</p><ul><li>设置为 on 的时候，表示统计信息会持久化存储。这时，默认的 N 是 20，M 是 10。</li><li>设置为 off 的时候，表示统计信息只存储在内存中。这时，默认的 N 是 8，M 是 16。<br>其实索引统计只是一个输入，对于一个具体的语句来说，优化器还要判断，执行这个语句本身要扫描多少行。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugx9egufj31b60bedr0.jpg" alt="image-20210525103343554" loading="lazy"></p><p>​        rows 这个字段表示的是预计扫描行数。</p><p>​        少数情况下优化器会选错索引，<strong>第一种方法可以采用 force index 强行选择一个索引。</strong></p><p>​        但其实使用 force index 最主要的问题还是变更的及时性。因为选错索引的情况还是比较少出现的，所以开发的时候通常不会先写上 force index。而是等到线上出现问题的时候，才会再去修改 SQL 语句、加上 force index。但是修改之后还要测试和发布，对于生产系统来说，这个过程不够敏捷。</p><p>​        所以，数据库的问题最好还是在数据库内部来解决。既然优化器放弃了使用索引 a，说明 a 还不够合适，所以<strong>第二种方法就是，可以考虑修改语句，引导 MySQL 使用期望的索引</strong>。比如，在这个例子里，显然把“order by b limit 1” 改成 “order by b,a limit 1” ，语义的逻辑是相同的。</p><p>​        之前优化器选择使用索引 b，是因为它认为使用索引 b 可以避免排序（b 本身是索引，已经是有序的了，如果选择索引 b 的话，不需要再做排序，只需要遍历），所以即使扫描行数多，也判定为代价更小。</p><p>​        现在 order by b,a 这种写法，要求按照 b,a 排序，就意味着使用这两个索引都需要排序。因此，扫描行数成了影响决策的主要条件，于是此时优化器选了只需要扫描 1000 行的索引 a。</p><p>​        当然，这种修改并不是通用的优化手段，可能修改语义这件事儿不太好，可以用 limit 100 让优化器意识到，使用 b 索引代价是很高的。其实是根据数据特征诱导了一下优化器，也不具备通用性。</p><blockquote><p>select  <em>from  (select</em>  from t where (a between 1 and 1000)  and (b between 50000 and 100000) order by b limit 100)alias limit 1;</p></blockquote><p>​        <strong>第三种方法是：在有些场景下，可以新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引。</strong></p><p>​        <strong>对索引字段做函数操作，可能会破坏索引值的有序性，因此优化器就决定放弃走树搜索功能。</strong></p><ol><li>条件字段函数操作</li></ol><blockquote><p>select count(*) from tradelog where month(t_modified)=7;</p><p>同理 where id+1=1000  也不会用索引，改成 where id =1000 - 1 会用索引。</p></blockquote><ol><li>隐式类型转换</li></ol><blockquote><p>select * from tradelog where tradeid=110717;  （tradeid 是varchar）</p><p>等同于 select * from tradelog where  CAST(tradid AS signed int) = 110717;</p></blockquote><ol><li>隐式字符编码转换</li></ol><blockquote><p>select * from trade_detail where tradeid=$L2.tradeid.value;</p><p>$L2.tradeid.value 的字符集是 utf8mb4。字符集 utf8mb4 是 utf8 的超集，所以当这两个类型的字符串在做比较的时候，MySQL 内部的操作是，先把 utf8 字符串转成 utf8mb4 字符集，再做比较。</p><p>相当于 select * from trade_detail  where CONVERT(traideid USING utf8mb4)=$L2.tradeid.value;</p></blockquote><h2 id="全局锁和表锁"><a href="#全局锁和表锁" class="headerlink" title="全局锁和表锁"></a>全局锁和表锁</h2><h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><p>​        <strong>顾名思义，全局锁就是对整个数据库实例加锁。</strong>MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当需要<strong>让整个库处于只读状态的时候</strong>，可以使用可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。</p><p>​        <strong>全局锁的典型使用场景是，做全库逻辑备份。</strong>也就是把整库每个表都 select 出来存成文本。</p><p>​        通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。在备份过程中整个库完全处于只读状，这是很危险的。但是不加锁，备份的数据会有不一致的问题。</p><p>​        <strong>可以拿到一个一致性视图来备份，官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。</strong>而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p><p>​        那为什么还需要FTWRL呢，因为一致性读是好，<strong>但前提是引擎要支持这个隔离级别</strong>。对于 MyISAM 这种不支持事务的引擎，就需要使用 FTWRL 命令了。</p><p>​        既然要全库只读，为什么不使用 set global readonly=true 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但还是建议用 FTWRL 方式，主要有两个原因：</p><ul><li>在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，不建议使用。</li><li><strong>在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</strong></li></ul><h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><p>​        MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p><p>​        <strong>表锁的语法是 lock tables … read/write。</strong>与 FTWRL 类似，<strong>可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。</strong>需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。</p><p>​        对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。</p><p>​        <strong>另一类表级的锁是 MDL（metadata lock)。</strong>MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>​        因此，在 MySQL 5.5 版本中引入了 MDL，<strong>当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</strong></p><ul><li>读锁之间不互斥，因此可以有多个线程同时对一张表增删改查。</li><li>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。</li></ul><h4 id="安全的给表增加字段"><a href="#安全的给表增加字段" class="headerlink" title="安全的给表增加字段"></a>安全的给表增加字段</h4><p>​        有几个请求在读写表，会加上MDL读锁，然后修改表字段的请求会被blocked，请求MDL写锁，这个时候，后面的全部读写请求都会被MDL写锁 blocked，如果查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。</p><p>​        那么如何安全的给表加字段呢？</p><p>​        首先要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，可以查到当前执行中的事务。如果要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。</p><p>​        其次，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。</p><blockquote><p>ALTER TABLE tbl_name NOWAIT add column …</p><p>ALTER TABLE tbl_name WAIT N add column …</p></blockquote><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p>​        <strong>MyISAM 引擎就不支持行锁。</strong>不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。</p><p>​        <strong>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</strong></p><p>​        <strong>如果事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</strong></p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>​        当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。这里用数据库中的行锁举个例子。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugxnetw4j31430u0k6s.jpg" alt="image-20210525103402197" loading="lazy"></p><p>​        这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略：</p><ul><li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</li></ul><blockquote><p>设置时间长，等待时间太长；设置时间短，有的长事务，不是死锁的也会结束。</p></blockquote><ul><li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</li></ul><blockquote><p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。会耗费大量的CPU资源。</p></blockquote><h4 id="慢SQL问题排查"><a href="#慢SQL问题排查" class="headerlink" title="慢SQL问题排查"></a>慢SQL问题排查</h4><p>​        使用 show processlist 命令查看 Waiting for table metadata lock 的示意图。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugxuzztlj31b007m42t.jpg" alt="image-20210525103418827" loading="lazy"></p><p>这个状态表示的是，现在有一个线程正在表 t 上请求或者持有 MDL 写锁，把 select 语句堵住了。</p><p>​        通过查询 sys.schema_table_lock_waits 这张表，就可以直接找出造成阻塞的 process id，把这个连接用 kill 命令断开即可。</p><p>​        通过 sys.innodb_lock_waits 查行锁</p><blockquote><p>select * from t sys.innodb_lock_waits where locked_table=<code>&#39;test&#39;.&#39;t&#39;</code>\G</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugy6bwf9j312t0u01df.jpg" alt="image-20210525103436523" loading="lazy"></p><p>这个信息很全，4 号线程是造成堵塞的罪魁祸首。而干掉这个罪魁祸首的方式，就是 KILL QUERY 4 或 KILL 4。实际上，这里 KILL 4 才有效。</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="count-语句分析"><a href="#count-语句分析" class="headerlink" title="count(*) 语句分析"></a>count(*) 语句分析</h4><p>​        MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高；</p><p>​        InnoDB 引擎就麻烦了，执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。因为多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。</p><p>​        count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加。最后返回累计值。</p><p>​        所以，count(*)、count(主键 id) 和 count(1) 都表示返回满足条件的结果集的总行数；而 count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p><p>​        <strong>按照效率排序的话，count(字段) &lt; count(主键id) &lt; count(1) &lt; count(*)，所以建议，尽量使用count(*)。</strong></p><h4 id="order-by-语句分析"><a href="#order-by-语句分析" class="headerlink" title="order by 语句分析"></a>order by 语句分析</h4><p>​        MySQL 会给每个线程分配一块内存用于<strong>快速排序</strong>，称为 <strong>sort_buffer</strong>。</p><p>​        explain 结果里的 Extra 这个字段中的“Using filesort”表示的就是需要排序。</p><p>​        sort_buffer_size，就是 MySQL 为排序开辟的内存（sort_buffer）的大小。如果要排序的数据量小于 sort_buffer_size，排序就在内存中完成。但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。</p><p>​        <strong>建立联合索引，甚至覆盖索引，可以避免排序过程。</strong></p><h4 id="join-语句分析"><a href="#join-语句分析" class="headerlink" title="join 语句分析"></a>join 语句分析</h4><p>​        直接使用 join 语句，MySQL 优化器可能会选择表 t1 或 t2 作为驱动表，改用 straight_join 让 MySQL 使用固定的连接方式执行查询，这样优化器只会按照指定的方式去 join。</p><blockquote><p>select * from t1 straight_join t2 on (t1.a=t2.a);</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugyez02rj31b005adjj.jpg" alt="image-20210525103450579" loading="lazy"></p><p>​        在这条语句里，<strong>被驱动表 t2 的字段 a 上有索引，join 过程用上了这个索引，因此效率是很高的。称之为“Index Nested-Loop Join”，简称 NLJ。</strong></p><p>​        <strong>如果被驱动表 t2 的字段 a 上没有索引，那每次到 t2 去匹配的时候，就要做一次全表扫描。这个效率很低。这个算法叫做“Simple Nested-Loop Join”的算法，简称 BNL。</strong></p><p>​        所以在判断要不要使用 join 语句时，就是看 explain 结果里面，Extra 字段里面有没有出现“Block Nested Loop”字样。</p><p>​        在决定哪个表做驱动表的时候，应该是两个表按照各自的条件过滤，过滤完成之后，计算参与 join 的各个字段的总数据量，数据量小的那个表，就是“小表”，应该作为驱动表。</p><p>​        <strong>Multi-Range Read 优化，这个优化的主要目的是尽量使用顺序读盘。因为大多数的数据都是按照主键递增顺序插入得到的，所以可以认为，如果按照主键的递增顺序查询的话，对磁盘的读比较接近顺序读，能够提升读性能。</strong></p><blockquote><p>select * from t1 where a&gt;=1 and a&lt;=100;</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugyp2ntij31as04c0wa.jpg" alt="image-20210525103506464" loading="lazy"></p><p>​        <strong>Batched Key Access(BKA) 算法。这个 BKA 算法，其实就是对 NLJ 算法的优化。</strong></p><p>​        NLJ 算法执行的逻辑是：从驱动表 t1，一行行地取出 a 的值，再到被驱动表 t2 去做 join。也就是说，对于表 t2 来说，每次都是匹配一个值。这时，MRR 的优势就用不上了。</p><p>​        既然如此，就把表 t1 的数据取出来一部分，先放到一个临时内存。这个临时内存就是 join_buffer。</p><h4 id="自增主键"><a href="#自增主键" class="headerlink" title="自增主键"></a>自增主键</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugyxvutej31aw0hs4ix.jpg" alt="image-20210525103520405" loading="lazy"></p><p>​        表定义里面出现了一个 AUTO_INCREMENT=2，表示下一次插入数据时，如果需要自动生成自增值，会生成 id=2。</p><p>​        实际上，表的结构定义存放在后缀名为.frm 的文件中，但是并不会保存自增值。</p><ul><li><p>MyISAM 引擎的自增值保存在数据文件中。</p></li><li><p>InnoDB 引擎的自增值，其实是保存在了内存里，MySQL 8.0 版本后，才有了“自增值持久化”的能力。</p></li><li><p>MySQL 5.7 及之前的版本，自增值保存在内存里，并没有持久化。每次重启后，第一次打开表的时候，都会去找自增值的最大值 max(id)，然后将 max(id)+1  作为这个表当前的自增值。</p></li><li><ul><li>MySQL 8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。</li></ul></li></ul><p>​        <strong>自增值修改机制</strong></p><ul><li><p>如果插入数据时 id 字段指定为 0、null 或未指定值，那么就把这个表当前的 AUTO_INCREMENT 值填到自增字段；</p></li><li><p>如果插入数据时 id 字段指定了具体的值 X ，就直接使用语句里指定的值 Y。</p></li><li><ul><li>如果 X &lt; Y，那么这个表的自增值不变；</li><li>如果 X≥Y，就需要把当前自增值修改为新的自增值。</li></ul></li></ul><p>​        <strong>新的自增值生成算法是：从 auto_increment_offset 开始，以 auto_increment_increment 为步长，持续叠加，直到找到第一个大于 X 的值，作为新的自增值。</strong></p><p>​        <strong>自增值的修改时机</strong></p><ol><li>执行器调用 InnoDB 引擎接口写入一行，传入的这一行的值(0,1,1);</li><li>InnoDB 发现用户没有指定自增 id 的值，获取表 t 当前的自增值 2；</li><li>将传入的行的值改成 (2,1,1);</li><li>将表的自增值改成 3；</li><li>继续执行插入数据操作，由于已经存在 c=1 的记录，所以报 Duplicate key error，语句返回。</li></ol><p>所以，sql执行报错了，自增值已经改变了，<strong>唯一键冲突是导致自增主键 id 不连续的第一种原因。同样地，事务回滚也会产生类似的现象，这就是第二种原因。</strong></p><p>​        <strong>批量插入的时候，由于系统预先不知道要申请多少个自增 id，所以就先申请一个，然后两个，然后四个，直到够用。这是主键 id 出现自增 id 不连续的第三种原因。</strong></p><h4 id="自增id用完怎么办"><a href="#自增id用完怎么办" class="headerlink" title="自增id用完怎么办"></a>自增id用完怎么办</h4><ol><li><strong>主键id</strong><pre><code>    **再申请下一个 id 时，得到的值保持不变。**所以到最大值之后，再申请id，由于id不变，所以插入会报主键冲突，如果数据量比较大，主键id应该用 bigint unsigned。默认是无符号整型 (unsigned int) ，4 个字节232-1（4294967295）。</code></pre></li><li><strong>系统row_id</strong><pre><code>    **如果创建的 InnoDB 表没有指定主键，那么 InnoDB 会创建一个不可见的，长度为 6 个字节的 row_id。**InnoDB 维护了一个全局的 dict_sys.row_id 值，所有无主键的 InnoDB 表，每插入一行数据，都把当前的 dict_sys.row_id 值作为要插入数据的 row_id，然后把 dict_sys.row_id 的值加 1。    实际上，在代码实现时 row_id 是一个长度为 8 字节的无符号长整型 (bigint unsigned)。但是，InnoDB 在设计时，给 row_id 留的只是 6 个节的长度，这样写到数据表中时只放了最后 6 个字节，所以 row_id 能写到数据表中的值，就有两个特征：    **248-1到 264 之间，row_id 会是0，264 之后会从0开始。**    **在 InnoDB 逻辑里，申请到 row_id=N 后，就将这行数据写入表中；如果表中已经存在 row_id=N 的行，新写入的行就会覆盖原有的行。**    **覆盖数据，就意味着数据丢失，影响的是数据可靠性；报主键冲突，是插入失败，影响的是可用性。而一般情况下，可靠性优先于可用性。**</code></pre></li><li><strong>Xid</strong><pre><code>    redo log 和 binlog 相配合的时候，提到了有一个共同的字段叫作 Xid。它在 MySQL 中是用来对应事务的。    MySQL 内部维护了一个全局变量 global_query_id，每次执行语句的时候将它赋值给 Query_id，然后给这个变量加 1。如果当前语句是这个事务执行的第一条语句，那么 MySQL 还会同时把 Query_id 赋值给这个事务的 Xid。    **而 global_query_id 是一个纯内存变量，重启之后就清零了。所以就知道了，在同一个数据库实例中，不同事务的 Xid 也是有可能相同的。**    **但是 MySQL 重启之后会重新生成新的 binlog 文件，这就保证了，同一个 binlog 文件里，Xid 一定是惟一的。**    **但是 global_query_id 定义的长度是 8 个字节，这个自增值的上限是 264-1。理论上也是可能重复的。**</code></pre></li><li><strong>trx_id</strong><pre><code>    **Xid 是由 server 层维护的。InnoDB 内部使用 Xid，就是为了能够在 InnoDB 事务和 server 之间做关联。但是，InnoDB 自己的 trx_id，是另外维护的。**    InnoDB 内部维护了一个 max_trx_id 全局变量，每次需要申请一个新的 trx_id 时，就获得 max_trx_id 的当前值，然后并将 max_trx_id 加 1。    **InnoDB 数据可见性的核心思想是：每一行数据都记录了更新它的 trx_id，当一个事务读到一行数据的时候，判断这个数据是否可见的方法，就是通过事务的一致性视图与这行数据的 trx_id 做对比。**    **对于正在执行的事务，可以从 information_schema.innodb_trx 表中看到事务的 trx_id。**</code></pre></li></ol><blockquote><p>​        update 和 delete 语句除了事务本身，还涉及到标记删除旧数据，也就是要把数据放到 purge 队列里等待后续物理删除，这个操作也会把 max_trx_id+1， 因此在一个事务中至少加 2；</p><p>​        InnoDB 的后台操作，比如表的索引信息统计这类操作，也是会启动内部事务的，因此你可能看到，trx_id 值并不是按照加 1 递增的。</p></blockquote><ol><li><pre><code>    **只读事务会分配一个特殊的，比较大的id，**把当前事务的 trx 变量的指针地址转成整数，再加上 248，使用这个算法，就可以保证以下两点：</code></pre></li><li><ol><li>因为同一个只读事务在执行期间，它的指针地址是不会变的，所以不论是在 innodb_trx 还是在 innodb_locks 表里，同一个只读事务查出来的 trx_id 就会是一样的。</li><li>如果有并行的多个只读事务，每个事务的 trx 变量的指针地址肯定不同。这样，不同的并发只读事务，查出来的 trx_id 就是不同的。</li></ol></li></ol><p>​        加上248是为了保证只读事务显示的 trx_id 值比较大，正常情况下就会区别于读写事务的 id。理论情况下也可能只读事务与读写事务相等，但是没有影响。</p><p>​        max_trx_id 会持久化存储，重启也不会重置为 0，那么从理论上讲，只要一个 MySQL 服务跑得足够久，就<strong>可能出现 max_trx_id 达到 248-1 的上限，然后从 0 开始的情况。当达到这个状态后，MySQL 就会持续出现一个脏读的 bug。因为后续的trx_id肯定比末尾那些trx_id大，能看到这些数据。</strong></p><ol><li><strong>thread_id</strong><pre><code>    系统保存了一个全局变量 thread_id_counter，每新建一个连接，就将 thread_id_counter 赋值给这个新连接的线程变量。定义的大小是 4 个字节，因此达到 232-1 后，它就会重置为 0，然后继续增加。但是，在 show processlist 里不会看到两个相同的 thread_id。因为 MySQL 设计了一个唯一数组的逻辑，给新线程分配 thread_id 的时候，逻辑代码是这样的：</code></pre></li></ol><blockquote><p>do {</p><p>new_id= thread_id_counter++;</p><p>} while (!thread_ids.insert_unique(new_id).second);</p></blockquote><h4 id="误删数据怎么办"><a href="#误删数据怎么办" class="headerlink" title="误删数据怎么办"></a>误删数据怎么办</h4><ol><li>delete 语句误删数据行：Flashback工具过闪回把数据恢复回来。 原理是修改 binlog 的内容，拿回原库重放。而能够使用这个方案的前提是，需要确保 binlog_format=row 和 binlog_row_image=FULL。</li></ol><blockquote><p>如何预防：把 sql_safe_updates 参数设置为 on。，delete 或者 update 语句必须有where条件，否则执行会报错。</p></blockquote><ol><li><p>误删库 / 表：全量备份，加增量日志，在应用日志的时候，需要跳过 12 点误操作的那个语句的 binlog：</p></li><li><ol><li>如果原实例没有使用 GTID 模式，只能在应用到包含 12 点的 binlog 文件的时候，先用–stop-position 参数执行到误操作之前的日志，然后再用–start-position 从误操作之后的日志继续执行；</li><li>如果实例使用了 GTID 模式，就方便多了。假设误操作命令的 GTID 是 gtid1，那么只需要执行 set gtid_next=gtid1;begin;commit; 先把这个 GTID 加到临时实例的 GTID 集合，之后按顺序执行 binlog 的时候，就会自动跳过误操作的语句。</li></ol></li></ol><blockquote><p>如何加速恢复：使用 mysqlbinlog 命令时，加上一个–database 参数，用来指定误删表所在的库。</p><p>在 start slave 之前，先通过执行﻿ ﻿change replication filter replicate_do_table = (tbl_name) 命令，就可以让临时库只同步误操作的表；</p></blockquote><p>​        <strong>延迟复制备库</strong>，一般的主备复制结构存在的问题是，如果主库上有个表被误删了，这个命令很快也会被发给所有从库，进而导致所有从库的数据表也都一起被误删了。延迟复制的备库是一种特殊的备库，通过 CHANGE MASTER TO MASTER_DELAY = N 命令，可以指定这个备库持续保持跟主库有 N 秒的延迟。</p><p>​        比如把 N 设置为 3600，这就代表了如果主库上有数据被误删了，并且在 1 小时内发现了这个误操作命令，这个命令就还没有在这个延迟复制的备库执行。这时候到这个备库上执行 stop slave，再通过之前介绍的方法，跳过误操作命令，就可以恢复出需要的数据。</p><p>​        预防误删库 / 表的方法，制定操作规范。这样做的目的，是避免写错要删除的表名。</p><ol><li>在删除数据表之前，必须先对表做改名操作。然后，观察一段时间，确保对业务无影响以后再删除这张表。</li><li>改表名的时候，要求给表名加固定的后缀（比如加_to_be_deleted)，然后删除表的动作必须通过管理系统执行。并且，管理系删除表的时候，只能删除固定后缀的表。</li></ol><h4 id="删除数据，表文件大小不变"><a href="#删除数据，表文件大小不变" class="headerlink" title="删除数据，表文件大小不变"></a>删除数据，表文件大小不变</h4><p>​        <strong>delete 命令其实只是把记录的位置，或者数据页标记为了“可复用”，但磁盘文件的大小是不会变的。</strong>也就是说，通过 delete 命令是不能回收表空间的。这些可以复用，而没有被使用的空间，看起来就像是“空洞”。</p><p>​        实际上，不止是删除数据会造成空洞，插入数据也会。如果数据是随机插入的，就可能造成索引的数据页分裂。更新索引上的值，可以理解为删除一个旧的值，再插入一个新值。不难理解，这也是会造成空洞的。</p><p>​        也就是说，<strong>经过大量增删改的表，都是可能是存在空洞的。所以，如果能够把这些空洞去掉，就能达到收缩表空间的目的。而重建表，就可以达到这样的目的。</strong></p><p>​        <strong>使用 alter table A engine=InnoDB 命令来重建表。MySQL 会自动完成转存数据、交换表名、删除旧表的操作。</strong></p><p>​        重建表的时候，InnoDB 不会把整张表占满，每个页留了 1/16 给后续的更新用。也就是说，其实重建表之后不是“最”紧凑的。</p><h4 id="怎么复制一张表"><a href="#怎么复制一张表" class="headerlink" title="怎么复制一张表"></a>怎么复制一张表</h4><ol><li>mysqldump 方法</li></ol><p>​        使用 mysqldump 命令将数据导出成一组 INSERT 语句。你可以使用下面的命令：</p><blockquote><p>mysqldump -h$host -P$port -u$user –add-locks=0 –no-create-info –single-transaction  –set-gtid-purged=OFF db1 t –where=”a&gt;900” –result-file=/client_tmp/t.sql</p></blockquote><p>​        然后可以通过下面这条命令，将这些 INSERT 语句放到 db2 库里去执行。</p><blockquote><p>mysql -h127.0.0.1 -P13000  -uroot db2 -e “source /client_tmp/t.sql”</p></blockquote><ol><li>导出 CSV 文件</li></ol><p>​        直接将结果导出成.csv 文件。MySQL 提供了下面的语法，用来将查询结果导出到服务端本地目录：</p><blockquote><p>select * from db1.t where a&gt;900 into outfile ‘/server_tmp/t.csv’;</p></blockquote><p>​        然后用下面的 load data 命令将数据导入到目标表 db2.t 中。</p><blockquote><p>load data infile ‘/server_tmp/t.csv’ into table db2.t;</p></blockquote><ol><li>物理拷贝方法</li></ol><p>​        直接拷贝文件是不行的，需要在数据字典中注册。</p><p>​        MySQL 5.6 版本引入了可传输表空间(transportable tablespace) 的方法，，可以通过导出 + 导入表空间的方式，实现物理拷贝表的功能。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Mysql深入学习&quot;&gt;&lt;a href=&quot;#Mysql深入学习&quot; class=&quot;headerlink&quot; title=&quot;Mysql深入学习&quot;&gt;&lt;/a&gt;Mysql深入学习&lt;/h1&gt;&lt;p&gt;MySQL简介&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关于MySQL发音的官方答案：&lt;br&gt;Th</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="http://huang_zhao.gitee.io/task/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql事务的四种隔离级别</title>
    <link href="http://huang_zhao.gitee.io/task/2021/07/01/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
    <id>http://huang_zhao.gitee.io/task/2021/07/01/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</id>
    <published>2021-07-01T05:33:43.000Z</published>
    <updated>2021-07-01T06:01:44.267Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-事务的基本要素"><a href="#1-事务的基本要素" class="headerlink" title="1 事务的基本要素"></a>1 事务的基本要素</h3><ul><li><p>原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</p><p>原子性强调的是事务不可分隔的状态，只要存在间隙，就不是原子性，各种锁的机制也是基于原子性产生，锁的目的就是为了保证在sql执行的过程中阻止其他线程的sql影响形成脏数据</p></li><li><p>一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</p><p>一致性强调的是事务前后的状态，任务只有成功和失败，不存在第三种情况。</p></li><li><p>隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p><p>隔离性强调的是多个事务互不影响，开启一个事务相当于开启了一片独立的空间，多个独立的空间互不影响，但是最后会把结束的结果汇总到数据库上</p></li><li><p>持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p><p>持久性强调的是事务执行完毕后，事务本身就不存在了，留下的只有事务执行的结果，不可回滚</p></li></ul><h3 id="2-事务的并发问题"><a href="#2-事务的并发问题" class="headerlink" title="2 事务的并发问题"></a>2 事务的并发问题</h3><ul><li>脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li></ul><ul><li>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</li><li>幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li></ul><p>　　小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p><p>![image-20210616164055048](/Users/apple/Library/Application Support/typora-user-images/image-20210616164055048.png)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-事务的基本要素&quot;&gt;&lt;a href=&quot;#1-事务的基本要素&quot; class=&quot;headerlink&quot; title=&quot;1 事务的基本要素&quot;&gt;&lt;/a&gt;1 事务的基本要素&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;原子性（Atomicity）：事务开始后所有操作，要么全部做完，要</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="http://huang_zhao.gitee.io/task/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>流畅的python学习记录</title>
    <link href="http://huang_zhao.gitee.io/task/2021/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://huang_zhao.gitee.io/task/2021/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-06-27T06:10:11.000Z</published>
    <updated>2021-08-08T01:31:40.353Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f490eafc869853318af09391d8180ceca0d1aec510a4c024236d0409c06e31f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/task/lib/hbe.js"></script><link href="/task/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="读书笔记" scheme="http://huang_zhao.gitee.io/task/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://huang_zhao.gitee.io/task/2021/06/27/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis/"/>
    <id>http://huang_zhao.gitee.io/task/2021/06/27/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis/</id>
    <published>2021-06-27T06:10:11.000Z</published>
    <updated>2021-06-27T09:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>[TOC]</p><h2 id="一、redis简介"><a href="#一、redis简介" class="headerlink" title="一、redis简介"></a>一、redis简介</h2><p>介绍：</p><p>redis是一个<strong>key-value</strong>存储系统。和Memcached类似，它支持存储的value类型相对更多，包括<strong>string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）</strong>。这些数据类型都支持<strong>push/pop、add/remove</strong>及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)<strong>同步</strong></p><p>Q：为什么redis这么快</p><p>A：用了io多路复用减少了io操作对资源的消耗，在内存中使用，单线程单进程，避免了线程之前数据交互的资源消耗</p><h3 id="1-使用redis的好处"><a href="#1-使用redis的好处" class="headerlink" title="1 使用redis的好处"></a>1 使用redis的好处</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比mysql这种关系型数据库速度更快，原因是查找方式和存储方式</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 支持丰富数据类型，支持string，list，set，sorted set，hash<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行<span class="token comment" spellcheck="true"># 事务性支持也没那么好，如果需要事务严格遵守的流程，比如转账功能，必定用的还是mysql等</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</code></pre><h3 id="2-redis相比于memcached的优势"><a href="#2-redis相比于memcached的优势" class="headerlink" title="2 redis相比于memcached的优势"></a>2 redis相比于memcached的优势</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> redis的速度比memcached快很多（其实差不多，分具体场景）<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> redis可以持久化其数据</code></pre><h3 id="3-redis常见的性能问题和解决方案"><a href="#3-redis常见的性能问题和解决方案" class="headerlink" title="3 redis常见的性能问题和解决方案"></a>3 redis常见的性能问题和解决方案</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 尽量避免在压力很大的主库上增加从库<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <span class="token operator">&lt;</span><span class="token operator">-</span> Slave1 <span class="token operator">&lt;</span><span class="token operator">-</span> Slave2 <span class="token operator">&lt;</span><span class="token operator">-</span> Slave3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</code></pre><h3 id="4-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"><a href="#4-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据" class="headerlink" title="4 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"></a>4 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h3><pre class=" language-python"><code class="language-python"> 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 <span class="token number">6</span>种数据淘汰策略：voltile<span class="token operator">-</span>lru：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中挑选最近最少使用的数据淘汰volatile<span class="token operator">-</span>ttl：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中挑选将要过期的数据淘汰volatile<span class="token operator">-</span>random：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中任意选择数据淘汰allkeys<span class="token operator">-</span>lru：从数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dict）中挑选最近最少使用的数据淘汰allkeys<span class="token operator">-</span>random：从数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dict）中任意选择数据淘汰no<span class="token operator">-</span>enviction（驱逐）：禁止驱逐数据</code></pre><h3 id="5-redis-最适合的场景"><a href="#5-redis-最适合的场景" class="headerlink" title="5 redis 最适合的场景"></a>5 redis 最适合的场景</h3><pre class=" language-python"><code class="language-python">Redis最适合所有数据<span class="token keyword">in</span><span class="token operator">-</span>momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk<span class="token operator">-</span>backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached<span class="token punctuation">,</span>何时使用Redis呢?       如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：     <span class="token number">1</span> 、Redis不仅仅支持简单的k<span class="token operator">/</span>v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。     <span class="token number">2</span> 、Redis支持数据的备份，即master<span class="token operator">-</span>slave模式的数据备份。     <span class="token number">3</span> 、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。（<span class="token number">1</span>）、会话缓存（Session Cache）最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。（<span class="token number">2</span>）、全页缓存（FPC）除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp<span class="token operator">-</span>redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。（<span class="token number">3</span>）、队列Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push<span class="token operator">/</span>pop 操作。如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。（<span class="token number">4</span>），排行榜<span class="token operator">/</span>计数器Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的<span class="token number">10</span>个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：ZRANGE user_scores <span class="token number">0</span> <span class="token number">10</span> WITHSCORESAgora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。（<span class="token number">5</span>）、发布<span class="token operator">/</span>订阅最后（但肯定不是最不重要的）是Redis的发布<span class="token operator">/</span>订阅功能。发布<span class="token operator">/</span>订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布<span class="token operator">/</span>订阅的脚本触发器，甚至用Redis的发布<span class="token operator">/</span>订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。</code></pre><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>安装好redis后，顺便可以安装一个Another Redis Desktop Manager，这是redis版的navicat</p><ul><li><code>redis-server</code>启动服务端（通常会自动设成自启服务，不需要手动开）</li><li><code>redis-cli</code>启动客户端</li><li>python中安装操作redis的模块  <code>pip install redis</code></li></ul><h3 id="1-python操作redis之普通链接"><a href="#1-python操作redis之普通链接" class="headerlink" title="1 python操作redis之普通链接"></a>1 python操作redis之普通链接</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token comment" spellcheck="true"># Redis实例化有很多可以设定的参数，其中decode_responses=True是把拿到的二进制数据转换成字符串</span>conn <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'hz'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="2-python操作redis之连接池"><a href="#2-python操作redis之连接池" class="headerlink" title="2 python操作redis之连接池"></a>2 python操作redis之连接池</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用连接池来管理链接对象，如果每一次请求都要建立链接，当请求量很大时会造成内存堵塞</span><span class="token comment" spellcheck="true"># 连接池的连接数量是固定的，超过这个最大链接数的其他链接只能在外面等着</span><span class="token comment" spellcheck="true"># 这里注意连接池要做成单例模式，不然每次链接进来都要实例化一个连接池，那限定的意义就没了</span><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>r<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'Bar'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="三、redis字符串操作"><a href="#三、redis字符串操作" class="headerlink" title="三、redis字符串操作"></a>三、redis字符串操作</h2><p><strong>set(name, value, ex=None, px=None, nx=False, xx=False)</strong></p><pre><code>在Redis中设置值，默认，不存在则创建，存在则修改参数：     ex，过期时间（秒）     px，过期时间（毫秒）     nx，如果设置为True，则只有name不存在时，当前set操作才执行,值存在，就修改不了，执行没效果     xx，如果设置为True，则只有name存在时，当前set操作才执行，值存在才能修改，值不存在，不会设置新值</code></pre><p><strong>setnx(name, value)</strong></p><pre><code>设置值，只有name不存在时，执行设置操作（添加）,如果存在，不会修改</code></pre><p><strong>setex(name, value, time)</strong></p><pre><code># 设置值# 参数：    # time，过期时间（数字秒 或 timedelta对象）</code></pre><p><strong>psetex(name, time_ms, value)</strong></p><pre><code># 设置值# 参数：    # time_ms，过期时间（数字毫秒 或 timedelta对象</code></pre><p><strong>mset(*args, \</strong>kwargs)**</p><pre><code>批量设置值如：    mset(k1=&#39;v1&#39;, k2=&#39;v2&#39;)    或    mget(&#123;&#39;k1&#39;: &#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;)</code></pre><p><strong>get(name)</strong></p><pre><code>获取值</code></pre><p><strong>mget(keys, *args)</strong></p><pre><code>批量获取如：    mget(&#39;k1&#39;, &#39;k2&#39;)    或    r.mget([&#39;k3&#39;, &#39;k4&#39;])</code></pre><p><strong>getset(name, value)</strong></p><pre><code>设置新值并获取原来的值</code></pre><p><strong>getrange(key, start, end)</strong></p><pre><code># 获取子序列（根据字节获取，非字符）# 参数：    # name，Redis 的 name    # start，起始位置（字节）    # end，结束位置（字节）# 如： &quot;刘清政&quot; ，0-3表示 &quot;刘&quot;</code></pre><p><strong>setrange(name, offset, value)</strong></p><pre><code># 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）# 参数：    # offset，字符串的索引，字节（一个汉字三个字节）    # value，要设置的值</code></pre><p><strong>setbit(name, offset, value)</strong></p><pre><code># 对name对应值的二进制表示的位进行操作# 参数：    # name，redis的name    # offset，位的索引（将值变换成二进制后再进行索引）    # value，值只能是 1 或 0# 注：如果在Redis中有一个对应： n1 = &quot;foo&quot;，        那么字符串foo的二进制表示为：01100110 01101111 01101111    所以，如果执行 setbit(&#39;n1&#39;, 7, 1)，则就会将第7位设置为1，        那么最终二进制则变成 01100111 01101111 01101111，即：&quot;goo&quot;</code></pre><p><strong>getbit(name, offset)</strong></p><pre><code># 获取name对应的值的二进制表示中的某位的值 （0或1）</code></pre><p><strong>bitcount(key, start=None, end=None)</strong></p><pre><code># 获取name对应的值的二进制表示中 1 的个数# 参数：    # key，Redis的name    # start，位起始位置    # end，位结束位置</code></pre><p><strong>bitop(operation, dest, *keys)</strong></p><pre><code># 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值# 参数：    # operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）    # dest, 新的Redis的name    # *keys,要查找的Redis的name# 如：    bitop(&quot;AND&quot;, &#39;new_name&#39;, &#39;n1&#39;, &#39;n2&#39;, &#39;n3&#39;)    # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中</code></pre><p><strong>strlen(name)</strong></p><pre><code># 返回name对应值的字节长度（一个汉字3个字节）</code></pre><p><strong>incr(self, name, amount=1)</strong></p><pre><code># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。# 参数：    # name,Redis的name    # amount,自增数（必须是整数）# 注：同incrby</code></pre><p><strong>incrbyfloat(self, name, amount=1.0)</strong></p><pre><code># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。# 参数：    # name,Redis的name    # amount,自增数（浮点型）</code></pre><p><strong>decr(self, name, amount=1)</strong></p><pre><code># 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。# 参数：    # name,Redis的name    # amount,自减数（整数）</code></pre><p><strong>append(key, value)</strong></p><pre><code># 在redis name对应的值后面追加内容# 参数：    key, redis的name    value, 要追加的字符串</code></pre><p><strong>总结</strong>：</p><p>需要注意的操作：</p><ul><li>set  存值，有很多可以修改的参数，主要是可以设置超时时间</li><li>get  获取值，没有返回None</li><li>mset 批量存值，可以传一个字典，也可直接传关键字参数</li><li>mget 批量取值</li><li>incr name存在就自增，没有就新增，并设置自增最小值</li><li>decr 自减，本质上和上面一样，甚至incr设置为负数也能完成一样的操作</li><li>append 对指定的key的value拼接字符串</li></ul><h2 id="四、redis哈希类型操作"><a href="#四、redis哈希类型操作" class="headerlink" title="四、redis哈希类型操作"></a>四、redis哈希类型操作</h2><p><strong>hset(name, key, value)</strong></p><pre><code># name对应的hash中设置一个键值对（不存在，则创建；否则，修改）# 参数：    # name，redis的name    # key，name对应的hash中的key    # value，name对应的hash中的value# 注：    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</code></pre><p><strong>hmset(name, mapping)</strong></p><pre><code># 在name对应的hash中批量设置键值对# 参数：    # name，redis的name    # mapping，字典，如：&#123;&#39;k1&#39;:&#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;# 如：    # r.hmset(&#39;xx&#39;, &#123;&#39;k1&#39;:&#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;)</code></pre><p><strong>hget(name,key)</strong></p><pre><code># 在name对应的hash中获取根据key获取value</code></pre><p><strong>hmget(name, keys, *args)</strong></p><pre><code># 在name对应的hash中获取多个key的值# 参数：    # name，reids对应的name    # keys，要获取key集合，如：[&#39;k1&#39;, &#39;k2&#39;, &#39;k3&#39;]    # *args，要获取的key，如：k1,k2,k3# 如：    # r.mget(&#39;xx&#39;, [&#39;k1&#39;, &#39;k2&#39;])    # 或    # print r.hmget(&#39;xx&#39;, &#39;k1&#39;, &#39;k2&#39;)</code></pre><p><strong>hgetall(name)</strong></p><pre><code># 获取name对应hash的所有键值print(re.hgetall(&#39;xxx&#39;).get(b&#39;name&#39;))</code></pre><p><strong>hlen(name)</strong></p><pre><code># 获取name对应的hash中键值对的个数</code></pre><p><strong>hkeys(name)</strong></p><pre><code># 获取name对应的hash中所有的key的值</code></pre><p><strong>hvals(name)</strong></p><pre><code># 获取name对应的hash中所有的value的值</code></pre><p><strong>hexists(name, key)</strong></p><pre><code># 检查name对应的hash是否存在当前传入的key</code></pre><p><strong>hdel(name,*keys)</strong></p><pre><code># 将name对应的hash中指定key的键值对删除print(re.hdel(&#39;xxx&#39;,&#39;sex&#39;,&#39;name&#39;))</code></pre><p><strong>hincrby(name, key, amount=1)</strong></p><pre><code># 自增name对应的hash中的指定key的值，不存在则创建key=amount# 参数：    # name，redis中的name    # key， hash对应的key    # amount，自增数（整数）</code></pre><p><strong>hincrbyfloat(name, key, amount=1.0)</strong></p><pre><code># 自增name对应的hash中的指定key的值，不存在则创建key=amount# 参数：    # name，redis中的name    # key， hash对应的key    # amount，自增数（浮点数）# 自增name对应的hash中的指定key的值，不存在则创建key=amount</code></pre><p><strong>hscan(name, cursor=0, match=None, count=None)</strong></p><pre><code># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆# 参数：    # name，redis的name    # cursor，游标（基于游标分批取获取数据）    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # 第一次：cursor1, data1 = r.hscan(&#39;xx&#39;, cursor=0, match=None, count=None)    # 第二次：cursor2, data1 = r.hscan(&#39;xx&#39;, cursor=cursor1, match=None, count=None)    # ...    # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</code></pre><p><strong>hscan_iter(name, match=None, count=None)</strong></p><pre><code># 利用yield封装hscan创建生成器，实现分批去redis中获取数据# 参数：    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # for item in r.hscan_iter(&#39;xx&#39;):    #     print item</code></pre><p><strong>总结：</strong></p><p>需要注意的操作：</p><ul><li>hset 给name的value设置{key,value}的值，存在就修改</li><li>hget 获取值</li><li>hmset 批量设置，mapping参数放一个字典</li><li>hmget 批量获取</li><li>hincrby 自增name对应的key值，不存在则创建key：amout（自增数），只能自增value是数字的类型</li><li>hgetall 获取name对于的hash的所有键值</li><li>hscan_iter  利用yield创建生成器，分批去redis中取值</li></ul><h2 id="五、redis链表类型操作"><a href="#五、redis链表类型操作" class="headerlink" title="五、redis链表类型操作"></a>五、redis链表类型操作</h2><p><strong>lpush(name,values)</strong></p><pre><code># 在name对应的list中添加元素，每个新的元素都添加到列表的最左边# 如：    # r.lpush(&#39;oo&#39;, 11,22,33)    # 保存顺序为: 33,22,11# 扩展：    # rpush(name, values) 表示从右向左操作</code></pre><p><strong>lpushx(name,value)</strong></p><pre><code># 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边# 更多：    # rpushx(name, value) 表示从右向左操作</code></pre><p><strong>llen(name)</strong></p><pre><code># name对应的list元素的个数</code></pre><p><strong>linsert(name, where, refvalue, value))</strong></p><pre><code># 在name对应的列表的某一个值前或后插入一个新值# 参数：    # name，redis的name    # where，BEFORE或AFTER(小写也可以)    # refvalue，标杆值，即：在它前后插入数据（如果存在多个标杆值，以找到的第一个为准）    # value，要插入的数据</code></pre><p><strong>r.lset(name, index, value)</strong></p><pre><code># 对name对应的list中的某一个索引位置重新赋值# 参数：    # name，redis的name    # index，list的索引位置    # value，要设置的值</code></pre><p><strong>r.lrem(name, value, num)</strong></p><pre><code># 在name对应的list中删除指定的值# 参数：    # name，redis的name    # value，要删除的值    # num，  num=0，删除列表中所有的指定值；           # num=2,从前到后，删除2个；           # num=-2,从后向前，删除2个</code></pre><p><strong>lpop(name)</strong></p><pre><code># 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素# 更多：    # rpop(name) 表示从右向左操作</code></pre><p><strong>lindex(name, index)</strong></p><pre><code>在name对应的列表中根据索引获取列表元素</code></pre><p><strong>lrange(name, start, end)</strong></p><pre><code># 在name对应的列表分片获取数据# 参数：    # name，redis的name    # start，索引的起始位置    # end，索引结束位置  print(re.lrange(&#39;aa&#39;,0,re.llen(&#39;aa&#39;)))</code></pre><p><strong>ltrim(name, start, end)</strong></p><pre><code># 在name对应的列表中移除没有在start-end索引之间的值# 参数：    # name，redis的name    # start，索引的起始位置    # end，索引结束位置（大于列表长度，则代表不移除任何）</code></pre><p><strong>rpoplpush(src, dst)</strong></p><pre><code># 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边# 参数：    # src，要取数据的列表的name    # dst，要添加数据的列表的name</code></pre><p><strong>blpop(keys, timeout)</strong></p><pre><code># 将多个列表排列，按照从左到右去pop对应列表的元素# 参数：    # keys，redis的name的集合    # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞# 更多：    # r.brpop(keys, timeout)，从右向左获取数据爬虫实现简单分布式：多个url放到列表里，往里不停放URL，程序循环取值，但是只能一台机器运行取值，可以把url放到redis中，多台机器从redis中取值，爬取数据，实现简单分布式</code></pre><p><strong>brpoplpush(src, dst, timeout=0)</strong></p><pre><code># 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧# 参数：    # src，取出并要移除元素的列表对应的name    # dst，要插入元素的列表对应的name    # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞</code></pre><p><strong>自定义增量迭代</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</span>    <span class="token comment" spellcheck="true"># 1、获取name对应的所有列表</span>    <span class="token comment" spellcheck="true"># 2、循环列表</span><span class="token comment" spellcheck="true"># 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</span><span class="token keyword">import</span> redisconn<span class="token operator">=</span>redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># conn.lpush('test',*[1,2,3,4,45,5,6,7,7,8,43,5,6,768,89,9,65,4,23,54,6757,8,68])</span><span class="token comment" spellcheck="true"># conn.flushall()</span><span class="token keyword">def</span> <span class="token function">scan_list</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    index<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data_list<span class="token operator">=</span>conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span>name<span class="token punctuation">,</span>index<span class="token punctuation">,</span>count<span class="token operator">+</span>index<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data_list<span class="token punctuation">:</span>            <span class="token keyword">return</span>        index<span class="token operator">+=</span>count        <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            <span class="token keyword">yield</span> item<span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> scan_list<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p><strong>总结</strong>：</p><p>需要注意的操作：</p><ul><li>lpush 每个新元素都添加到列表的最左边，最早来的在最后，rpush与之相反</li><li>lpop 删除name对应列表的左侧的第一个值，并返回，rpop与之相反</li><li>blpop 将多个列表排列从左到右pop对于列表的元素阻塞时间内如果还有新增数据，就会继续pop</li><li>lrange 切片start开始，end结束，闭区间</li><li>llen 统计元素个数</li></ul><h2 id="六、其他操作"><a href="#六、其他操作" class="headerlink" title="六、其他操作"></a>六、其他操作</h2><p><strong>delete(*names)</strong></p><pre><code># 根据删除redis中的任意数据类型</code></pre><p><strong>exists(name)</strong></p><pre><code># 检测redis的name是否存在</code></pre><p><strong>keys(pattern=’*‘)</strong></p><pre><code># 根据模型获取redis的name（其实就是通过正则匹配）# 更多：    # KEYS * 匹配数据库中所有 key 。    # KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。    # KEYS h*llo 匹配 hllo 和 heeeeello 等。    # KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo </code></pre><p><strong>expire(name ,time)</strong></p><pre><code># 为某个redis的某个name设置超时时间</code></pre><p><strong>rename(src, dst)</strong></p><pre><code># 对redis的name重命名为</code></pre><p><strong>move(name, db))</strong></p><pre><code># 将redis的某个值移动到指定的db下（换数据库）</code></pre><p><strong>randomkey()</strong></p><pre><code># 随机获取一个redis的name（不删除）（抽奖）</code></pre><p><strong>type(name)</strong></p><pre><code># 获取name对应值的类型</code></pre><p><strong>scan(cursor=0, match=None, count=None)</strong><br><strong>scan_iter(match=None, count=None)</strong></p><pre><code># 同字符串操作，用于增量迭代获取key</code></pre><h2 id="七、管道"><a href="#七、管道" class="headerlink" title="七、管道"></a>七、管道</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis支持事务</span><span class="token comment" spellcheck="true"># 管道实现事务</span><span class="token comment" spellcheck="true"># import redis</span><span class="token comment" spellcheck="true"># pool = redis.ConnectionPool(host='127.0.0.1', port=6379)</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># conn = redis.Redis(connection_pool=pool)</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># # pipe = r.pipeline(transaction=False)</span><span class="token comment" spellcheck="true"># pipe = conn.pipeline(transaction=True)</span><span class="token comment" spellcheck="true"># pipe.multi() # 开启管道，开启事务</span><span class="token comment" spellcheck="true"># pipe.set('name', 'alex')</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># pipe.set('role', 'sb')</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># pipe.execute()  # 这句话，才真正的去执行，结束管道</span></code></pre><h2 id="八、django中使用redis"><a href="#八、django中使用redis" class="headerlink" title="八、django中使用redis"></a>八、django中使用redis</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一（通用方式）</span><span class="token comment" spellcheck="true"># 方式二：django-redis</span>    <span class="token operator">-</span>pip install django<span class="token operator">-</span>redis    <span class="token operator">-</span>setting中配置        CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span>                    <span class="token string">"LOCATION"</span><span class="token punctuation">:</span> <span class="token string">"redis://127.0.0.1:6379"</span><span class="token punctuation">,</span>                    <span class="token string">"OPTIONS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"CLIENT_CLASS"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.client.DefaultClient"</span><span class="token punctuation">,</span>                        <span class="token string">"CONNECTION_POOL_KWARGS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"max_connections"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true"># "PASSWORD": "123",</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>       <span class="token operator">-</span>使用两种方式        <span class="token number">1</span> 使用cache        <span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache        cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>         <span class="token number">2</span> 直接使用conn对象        <span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connection        conn <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="九、接口缓存"><a href="#九、接口缓存" class="headerlink" title="九、接口缓存"></a>九、接口缓存</h2><p>接口缓存简单来说就是把需要经常从mysql数据查的数据放到redis等内存数据库（快速读取）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 首页轮播图数据缓存到redis中</span><span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># response=super().list(request, *args, **kwargs)</span>    <span class="token comment" spellcheck="true"># 把data的数据加缓存</span>    <span class="token comment" spellcheck="true"># 1 先去缓存拿数据</span>    banner_list<span class="token operator">=</span>cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> banner_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'走数据库了'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 缓存中没有，去数据库拿</span>        response <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>list<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 加到缓存</span>        cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token operator">=</span>banner_list<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、redis简介&quot;&gt;&lt;a href=&quot;#一、redis简介&quot; class=&quot;h</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="redis" scheme="http://huang_zhao.gitee.io/task/tags/redis/"/>
    
  </entry>
  
</feed>
