<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄钊君の博客</title>
  
  
  <link href="http://huang_zhao.gitee.io/task/atom.xml" rel="self"/>
  
  <link href="http://huang_zhao.gitee.io/task/"/>
  <updated>2020-08-25T03:37:10.940Z</updated>
  <id>http://huang_zhao.gitee.io/task/</id>
  
  <author>
    <name>爱肖彤真是太好了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>celery基础</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/celery/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/celery/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-25T03:37:10.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、celery介绍"><a href="#一、celery介绍" class="headerlink" title="一、celery介绍"></a>一、celery介绍</h2><p>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></p><p>Celery 官方文档英文版：<a href="http://docs.celeryproject.org/en/latest/index.html">http://docs.celeryproject.org/en/latest/index.html</a></p><p>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></p><ul><li>异步任务框架</li><li>执行异步任务</li><li>执行延迟任务</li><li>执行定时任务</li></ul><h2 id="二、celery架构"><a href="#二、celery架构" class="headerlink" title="二、celery架构"></a>二、celery架构</h2><p><img src="C:\Users\HZ\Desktop\007S8ZIlgy1ggqw0f7bltj30q80c174d.jpg" alt="007S8ZIlgy1ggqw0f7bltj30q80c174d" loading="lazy"></p><h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p><h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>异步执行：解决耗时任务,将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p><p>延迟执行：解决延迟任务</p><p>定时执行：解决周期(周期)任务,比如每天数据统计</p><h2 id="三、celery使用"><a href="#三、celery使用" class="headerlink" title="三、celery使用"></a>三、celery使用</h2><p>安装：<code>pip install celery</code></p><p>根据celery架构，我们可以看出，worker就像是一个工人，一直在工作，如果有工作的时候就会从broker（Redist）里去拿过来执行，并放到pakend（redist）中存放结果</p><h3 id="方式一：在一个文件夹内的三个页面"><a href="#方式一：在一个文件夹内的三个页面" class="headerlink" title="方式一：在一个文件夹内的三个页面"></a>方式一：在一个文件夹内的三个页面</h3><p><strong>worker执行页面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># broker存储的位置</span></span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class="line"><span class="comment"># backend存储的位置</span></span><br><span class="line">backend =<span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化的celery对象</span></span><br><span class="line">app=celery.Celery(__name__,broker=broker,backend=backend)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要添加的任务</span></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    print(x*y)</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><p><strong>broker提交任务的页面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery_test <span class="keyword">import</span> add</span><br><span class="line"><span class="comment"># 执行这个文件，就是把这个任务添加到数据库中，只要worker在工作</span></span><br><span class="line"><span class="comment"># 就会把这个任务从数据库1中拿出来执行，并把结果放到数据库2中</span></span><br><span class="line">ret = add.delay(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment"># ret 是这个任务的uuid，用于获取任务结果</span></span><br></pre></td></tr></table></figure><p><strong>backend获取任务结果的页面</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery_test <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"><span class="comment"># 任务对象的唯一标识：uuid</span></span><br><span class="line">id = <span class="string">&#x27;19dc2faa-39f9-47b6-af77-e9d3a4d05d2e&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    async1 = AsyncResult(id=id, app=app)</span><br><span class="line">    <span class="keyword">if</span> async1.successful():</span><br><span class="line">        result = async1.get()</span><br><span class="line">        print(result)</span><br><span class="line">    <span class="keyword">elif</span> async1.failed():</span><br><span class="line">        print(<span class="string">&#x27;任务失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> async1.status == <span class="string">&#x27;PENDING&#x27;</span>:</span><br><span class="line">        print(<span class="string">&#x27;任务等待中被执行&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> async1.status == <span class="string">&#x27;RETRY&#x27;</span>:</span><br><span class="line">        print(<span class="string">&#x27;任务异常后正在重试&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> async1.status == <span class="string">&#x27;STARTED&#x27;</span>:</span><br><span class="line">        print(<span class="string">&#x27;任务已经开始被执行&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"><a href="#方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）" class="headerlink" title="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"></a>方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）</h3><p>创建一个celery项目（包），内部必须含有名字为celery的py文件，在内部创建celery对象</p><p><strong>celery.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> celery</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class="line">backend =<span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span></span><br><span class="line"></span><br><span class="line">app=celery.Celery(__name__,broker=broker,backend=backend,include=[<span class="string">&#x27;celery_task.task1&#x27;</span>,<span class="string">&#x27;celery_task.task2&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写需要添加的任务也在这个包内，可创建不同的任务文件，可添加多个</p><p><strong>task1.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    print(x,y)</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br></pre></td></tr></table></figure><h3 id="执行延迟任务"><a href="#执行延迟任务" class="headerlink" title="执行延迟任务"></a>执行延迟任务</h3><p>添加任务页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行延迟任务就是多个一个时间参数</span></span><br><span class="line"><span class="comment"># 这里注意，时间参数是根据utc时间，并不是中国时间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="comment"># 时间对象必须和时间对象相加</span></span><br><span class="line">eta=datetime.utcnow() + timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">add.apply_async(args=(<span class="number">200</span>, <span class="number">50</span>), eta=eta)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>celery页面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 时区</span></span><br><span class="line">app.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment"># 是否使用UTC</span></span><br><span class="line">app.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务的定时配置</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;low-task&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;celery_task.tasks.low&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: timedelta(seconds=<span class="number">3</span>),</span><br><span class="line">        <span class="comment"># &#x27;schedule&#x27;: crontab(hour=8, day_of_week=1),  # 每周一早八点</span></span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">300</span>, <span class="number">150</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定时任务的添加必须要新启动一个beat命令去工作</span></span><br><span class="line"><span class="comment"># celery beat -A pc_celery -l info</span></span><br><span class="line"><span class="comment"># celery -A pc_celery worker -l info -P eventlet</span></span><br></pre></td></tr></table></figure><h2 id="四、django中配置celery"><a href="#四、django中配置celery" class="headerlink" title="四、django中配置celery"></a>四、django中配置celery</h2><p>celery包最好放在根路径下</p><p><strong>添加定时任务</strong></p><p>celery.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置django配置</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;luffyapi.settings.dev&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置celery的worker环境</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class="line">backend = <span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化worker对象app，用include添加定时任务</span></span><br><span class="line">app=Celery(__name__,broker=broker,backend=backend,include=[<span class="string">&#x27;celery_task.task2&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">app.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment"># 是否使用UTC</span></span><br><span class="line">app.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务的定时配置</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;low-task&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;celery_task.task2.update_banner&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: timedelta(seconds=<span class="number">10</span>),</span><br><span class="line">        <span class="comment"># &#x27;schedule&#x27;: crontab(hour=8, day_of_week=1),  # 每周一早八点</span></span><br><span class="line">        <span class="comment"># &#x27;args&#x27;: (),</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定时任务的添加必须要新启动一个beat命令去工作</span></span><br><span class="line"><span class="comment"># celery beat -A celery_task -l info</span></span><br></pre></td></tr></table></figure><p><strong>task定时任务</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">from</span> django.core.cache <span class="keyword">import</span> cache</span><br><span class="line"><span class="comment"># 每三秒跟新一次缓存</span></span><br><span class="line"><span class="comment"># 添加一个任务，celery内设定间隔时间3秒</span></span><br><span class="line"><span class="comment"># 任务内去cache跟新banner_list，从数据库中拿到banner放到cache中的banner_list中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> home.models <span class="keyword">import</span> Banner</span><br><span class="line"></span><br><span class="line"><span class="comment"># from luffyapi.settings import const</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [OrderedDict(</span></span><br><span class="line"><span class="comment">#     [(&#x27;image&#x27;, &#x27;http://127.0.0.1:8000/media/banner/banner1.png&#x27;), (&#x27;link&#x27;, &#x27;/free-courses&#x27;), (&#x27;name&#x27;, &#x27;banner1&#x27;)]),</span></span><br><span class="line"><span class="comment">#  OrderedDict(</span></span><br><span class="line"><span class="comment">#      [(&#x27;image&#x27;, &#x27;http://127.0.0.1:8000/media/banner/banner2.png&#x27;), (&#x27;link&#x27;, &#x27;/light-courses&#x27;), (&#x27;name&#x27;, &#x27;banner2&#x27;)]),</span></span><br><span class="line"><span class="comment">#  OrderedDict(</span></span><br><span class="line"><span class="comment">#      [(&#x27;image&#x27;, &#x27;http://127.0.0.1:8000/media/banner/banner3.png&#x27;), (&#x27;link&#x27;, &#x27;/actual-courses&#x27;), (&#x27;name&#x27;, &#x27;banner3&#x27;)])]</span></span><br><span class="line"><span class="keyword">from</span> home.sers <span class="keyword">import</span> BannerSer</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_banner</span>(<span class="params">*args, **kwargs</span>):</span></span><br><span class="line">    queryset = Banner.objects.filter(is_delete=<span class="literal">False</span>)</span><br><span class="line">    banner_ser = BannerSer(queryset,many=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> banner <span class="keyword">in</span> banner_ser.data:</span><br><span class="line">        banner[<span class="string">&#x27;image&#x27;</span>] = <span class="string">&#x27;http://127.0.0.1:8000&#x27;</span> + banner[<span class="string">&#x27;image&#x27;</span>]</span><br><span class="line">    cache.set(<span class="string">&#x27;banner_list&#x27;</span>, banner_ser.data)</span><br><span class="line">    print(banner_ser.data)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;更新banner成功&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、celery介绍&quot;&gt;&lt;a href=&quot;#一、celery介绍&quot; class=&quot;headerlink&quot; title=&quot;一、celery介绍&quot;&gt;&lt;/a&gt;一、celery介绍&lt;/h2&gt;&lt;p&gt;Celery 官网：&lt;a href=&quot;http://www.celerypr</summary>
      
    
    
    
    <category term="每日学习" scheme="http://huang_zhao.gitee.io/task/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="异步任务框架" scheme="http://huang_zhao.gitee.io/task/tags/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>消息队列</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2020-03-24T12:30:17.000Z</published>
    <updated>2020-08-25T03:35:11.893Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>消息队列：是一种数据结构</p><p>生产者：把数据放入到队列中的一方</p><p>消费者：把数据从队列中取出的一方</p><h3 id="2-存在的意义"><a href="#2-存在的意义" class="headerlink" title="2 存在的意义"></a>2 存在的意义</h3><h4 id="2-1-解耦"><a href="#2-1-解耦" class="headerlink" title="2.1 解耦"></a>2.1 解耦</h4><p>场景一：</p><p>存在三个系统</p><p>a系统要给b系统发送数据，调用系统b的接口</p><p>a系统要给c系统发送数据，调用系统c的接口</p><p>如果有一天b不需要a的数据了，就需要让a注释掉掉b接口的代码</p><p>如果新增系统d要接受数据，又要增加调用系统d的代码</p><p><strong>这些调用逻辑都是一些重复的不可避免的劳动</strong></p><p>此处的a系统与bcd系统高度耦合了，因为之间的数据交互如果需要修改，或者接受数据的系统出现了问题，那么a系统的调用逻辑还要思考需不需要继续发送数据</p><p>场景二：</p><p>在上述场景加入消息队列，消息队列是生产者（a系统）与消费者（bcd系统）之间的一个数据交互中转站</p><p>a系统发布消息，bcd订阅消息，如果不需要订阅就取消订阅即可，并不需要修改发布消息的代码</p><h4 id="2-2-异步"><a href="#2-2-异步" class="headerlink" title="2.2 异步"></a>2.2 异步</h4><p>消息队列是一个异步任务，如果a系统要完成<strong>产生数据（100ms）</strong>，<strong>发送数据至系统b（300ms）</strong>，<strong>发送数据至系统c（300ms）</strong></p><p>此时a系统完成消息发送是一个同步任务，完成时间是100+300+300=700ms</p><p>如果用了消息队列，a系统只要产生消息，并发送至消息队列，由消息队列异步回调订阅过的系统接口</p><p>此时a系统完成发送消息的时间是100ms</p><h4 id="2-3-削峰-限流"><a href="#2-3-削峰-限流" class="headerlink" title="2.3 削峰/限流"></a>2.3 削峰/限流</h4><p>如果有一个商场网站出了促销活动，此时每秒的请求数是5000，一般的mysql只能处理2000个左右的并发。</p><p>此时在用户与mysql之间加入mq，它可以接受者5000个请求，但是只给mysql发送2000个。</p><p>就像一个喷水的管子，如果突然流水量过大，管子就会裂开，我们通过开关把水流量放小一点就问题不大，但是我们要知道，在这个开关后水压还是这么大，mq做到的只是限制最大量。</p><h4 id="2-4-其他应用场景"><a href="#2-4-其他应用场景" class="headerlink" title="2.4 其他应用场景"></a>2.4 其他应用场景</h4><ul><li><strong>日志处理</strong>：将大量日志存储到消息队列中（一般采用分布式消息队列kafka），解决大量日志传输的问题。其中，消息队列负责日志数据的接收，存储和转发；</li><li><strong>消息通讯</strong>：点对点通讯或聊天室通讯。</li></ul><h3 id="3-使用消息队列会有什么优缺点"><a href="#3-使用消息队列会有什么优缺点" class="headerlink" title="3 使用消息队列会有什么优缺点"></a>3 使用消息队列会有什么优缺点</h3><p>优点其实就是上文中谈到的，在特殊场景下的应用好处，解耦、异步与削峰等。</p><p><strong>系统可用性</strong>：<br> 系统因为依赖与MQ消息队列这个服务，若这个服务崩溃了，那么我们的整个系统将不可用。为此往往我们都是通过集群/分布式部署来实现MQ高可用的。</p><p>高可用：通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性</p><p><strong>系统复杂度</strong>：<br> 我们将数据写到消息队列上，就有可能会存在数据丢失的情况。以及我们如何保证消息没有被重复消费等问题。</p><p><strong>一致性问题</strong>：<br> A系统将请求写入到消息队列后就返回请求成功了，假设在多机部署的时候，系统B、C写库成功，假设D写入失败了，这种情况下就会产生数据不一致的问题。</p><p><a href="https://www.jianshu.com/p/ec7c2503c3ef">https://www.jianshu.com/p/ec7c2503c3ef</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1 定义&quot;&gt;&lt;/a&gt;1 定义&lt;/h3&gt;&lt;p&gt;消息队列：是一种数据结构&lt;/p&gt;
&lt;p&gt;生产者：把数据放入到队列中的一方&lt;/p&gt;
&lt;p&gt;消费者：把数据从队列中取出的一方&lt;/</summary>
      
    
    
    
    <category term="每日学习" scheme="http://huang_zhao.gitee.io/task/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题及解决</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
    <published>2020-03-15T05:33:43.000Z</published>
    <updated>2020-08-25T03:44:06.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、同源策略"><a href="#一、同源策略" class="headerlink" title="一、同源策略"></a>一、同源策略</h2><p>同源策略：请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同</p><p>比如:我在本地上的域名是127.0.0.1:8000,请求另外一个域名：127.0.0.1:8001一段数据</p><p>浏览器上就会报错，这就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险</p><h2 id="二、CORS（跨域资源共享）简介"><a href="#二、CORS（跨域资源共享）简介" class="headerlink" title="二、CORS（跨域资源共享）简介"></a>二、CORS（跨域资源共享）简介</h2><p><strong>服务端对某个来源的请求开放请求资源的接口，就是cors</strong></p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p><strong>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><h2 id="三、CORS两种请求详解"><a href="#三、CORS两种请求详解" class="headerlink" title="三、CORS两种请求详解"></a>三、CORS两种请求详解</h2><p>只要同时满足以下两大条件，就属于简单请求，只要其中一个不满足就是非简单请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">（1) 请求方法是以下三种方法之一：</span></span><br><span class="line"><span class="string">    HEAD</span></span><br><span class="line"><span class="string">    GET</span></span><br><span class="line"><span class="string">    POST</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">（2）HTTP的头信息不超出以下几种字段：</span></span><br><span class="line"><span class="string">    Accept</span></span><br><span class="line"><span class="string">    Accept-Language</span></span><br><span class="line"><span class="string">    Content-Language</span></span><br><span class="line"><span class="string">    Last-Event-ID</span></span><br><span class="line"><span class="string">    Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><strong>两种请求的区别</strong></p><ul><li>简单请求：一次请求</li><li>非简单请求：两次请求，会在数据请求发送之前，先发送一次‘预检’请求，如果通过了则可以发送真正的请求</li></ul><p><strong>预检</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">=&gt; 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过</span><br><span class="line">       Access-Control-Request-Method</span><br><span class="line">=&gt; 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过</span><br><span class="line">       Access-Control-Request-Headers</span><br></pre></td></tr></table></figure><p><strong>支持跨域，简单请求</strong></p><p>服务器设置响应头：Access-Control-Allow-Origin = ‘域名’ 或 ‘*’</p><p><strong>支持跨域，复杂请求</strong></p><p>由于复杂请求时，首先会发送“预检”请求，如果“预检”成功，则发送真实数据。</p><ul><li>“预检”请求时，允许请求方式则需服务器设置响应头：Access-Control-Request-Method</li><li>“预检”请求时，允许请求头则需服务器设置响应头：Access-Control-Request-Headers</li></ul><h2 id="四、django中解决跨域的两种方式"><a href="#四、django中解决跨域的两种方式" class="headerlink" title="四、django中解决跨域的两种方式"></a>四、django中解决跨域的两种方式</h2><h3 id="1-自定义中间件"><a href="#1-自定义中间件" class="headerlink" title="1 自定义中间件"></a>1 自定义中间件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定制中间件</span></span><br><span class="line"><span class="keyword">from</span> django.utils.deprecation <span class="keyword">import</span> MiddlewareMixin</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CorsMiddleWare</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_response</span>(<span class="params">self,request,response</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.method==<span class="string">&quot;OPTIONS&quot;</span>:</span><br><span class="line">            <span class="comment">#可以加*</span></span><br><span class="line">            response[<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>]=<span class="string">&quot;Content-Type&quot;</span></span><br><span class="line">        response[<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>] = <span class="string">&quot;http://localhost:8080&quot;</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="2-使用django-cors-headers-解决跨域问题"><a href="#2-使用django-cors-headers-解决跨域问题" class="headerlink" title="2 使用django-cors-headers 解决跨域问题"></a>2 使用django-cors-headers 解决跨域问题</h3><ul><li><p>安装：pip install django-cors-headers</p></li><li><p>注册app：’corsheaders’</p></li><li><p>添加中间件：’corsheaders.middleware.CorsMiddleware’,</p></li><li><pre><code class="python"># 基本配置CORS_ALLOW_CREDENTIALS = TrueCORS_ORIGIN_ALLOW_ALL = TrueCORS_ORIGIN_WHITELIST = (    &#39;*&#39;)CORS_ALLOW_METHODS = (    &#39;DELETE&#39;,    &#39;GET&#39;,    &#39;OPTIONS&#39;,    &#39;PATCH&#39;,    &#39;POST&#39;,    &#39;PUT&#39;,    &#39;VIEW&#39;,)CORS_ALLOW_HEADERS = (    &#39;XMLHttpRequest&#39;,    &#39;X_FILENAME&#39;,    &#39;accept-encoding&#39;,    &#39;authorization&#39;,    &#39;content-type&#39;,    &#39;dnt&#39;,    &#39;origin&#39;,    &#39;user-agent&#39;,    &#39;x-csrftoken&#39;,    &#39;x-requested-with&#39;,    &#39;Pragma&#39;,)</code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、同源策略&quot;&gt;&lt;a href=&quot;#一、同源策略&quot; class=&quot;headerlink&quot; title=&quot;一、同源策略&quot;&gt;&lt;/a&gt;一、同源策略&lt;/h2&gt;&lt;p&gt;同源策略：请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="每日学习" scheme="http://huang_zhao.gitee.io/task/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="跨域问题" scheme="http://huang_zhao.gitee.io/task/tags/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>drf内置排序源码</title>
    <link href="http://huang_zhao.gitee.io/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/"/>
    <id>http://huang_zhao.gitee.io/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/</id>
    <published>2020-02-15T12:10:57.000Z</published>
    <updated>2020-08-25T03:43:31.944Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们要用排序，那么写的视图类就必须直接或间接继承ListModelMixin，因为其内部有帮我们排序的放方法</p><p>ListModelMixin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调用了视图类对象的filter_queryset方法</span></span><br><span class="line">queryset = self.filter_queryset(self.get_queryset())</span><br></pre></td></tr></table></figure><p>但是我们视图类本身没有，根据orm查找顺序，我们就要看第一位父类</p><p>最后找到GenericAPIView的filter_queryset方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span>(<span class="params">self, queryset</span>):</span></span><br><span class="line">    <span class="comment"># filter_backends就是我们在视图类中写的drf内置的排序类</span></span><br><span class="line">    <span class="keyword">for</span> backend <span class="keyword">in</span> list(self.filter_backends):</span><br><span class="line">        <span class="comment"># 实例化排序类对象，并调用它的filter_queryset方法</span></span><br><span class="line">        queryset = backend().filter_queryset(self.request, queryset, self)</span><br><span class="line">        <span class="keyword">return</span> queryset</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 视图类中我们是这样设置的</span></span><br><span class="line">    filter_backends = [OrderingFilter]</span><br></pre></td></tr></table></figure><p>OrderingFilter的filter_queryset方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span>(<span class="params">self, request, queryset, view</span>):</span></span><br><span class="line">    <span class="comment"># 调用了自己的get_ordering方法返回值应到是原本的queryset对象</span></span><br><span class="line">    ordering = self.get_ordering(request, queryset, view)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ordering:</span><br><span class="line">        <span class="comment"># 下面是得到ordering的方法，返回的结果是(&#x27;id&#x27;, &#x27;price&#x27;)，直接通过这个排序</span></span><br><span class="line">        <span class="keyword">return</span> queryset.order_by(*ordering)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> queryset</span><br></pre></td></tr></table></figure><p>OrderingFilter的get_ordering方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ordering</span>(<span class="params">self, request, queryset, view</span>):</span></span><br><span class="line"><span class="comment"># ordering_param是在drf的配置文件中的字符串：ordering</span></span><br><span class="line">    <span class="comment"># params就是从url后ordering跟的排序字符串</span></span><br><span class="line">    <span class="comment"># params：‘id，name，price’</span></span><br><span class="line">params = request.query_params.get(self.ordering_param)</span><br><span class="line">    <span class="keyword">if</span> params:</span><br><span class="line">        <span class="comment"># 通过一个列表生成式得到[&#x27;id&#x27;,&#x27;name&#x27;,&#x27;price&#x27;]</span></span><br><span class="line">    fields = [param.strip() <span class="keyword">for</span> param <span class="keyword">in</span> params.split(<span class="string">&#x27;,&#x27;</span>)]</span><br><span class="line">        <span class="comment"># 通过内部remove_invalid_fields去移除fields中和视图类中设置不匹配的</span></span><br><span class="line">        <span class="comment"># 视图类是这样设置的ordering_fields = (&#x27;id&#x27;, &#x27;price&#x27;)</span></span><br><span class="line">        <span class="comment"># 所以这里name是无效排序，就会通过这个方法移除</span></span><br><span class="line">   ordering = self.remove_invalid_fields(queryset, fields, view, request)</span><br><span class="line">        <span class="keyword">if</span> ordering:</span><br><span class="line">            <span class="keyword">return</span> ordering</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果我们要用排序，那么写的视图类就必须直接或间接继承ListModelMixin，因为其内部有帮我们排序的放方法&lt;/p&gt;
&lt;p&gt;ListModelMixin&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    <category term="python学习" scheme="http://huang_zhao.gitee.io/task/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python函数" scheme="http://huang_zhao.gitee.io/task/tags/python%E5%87%BD%E6%95%B0/"/>
    
    <category term="面试" scheme="http://huang_zhao.gitee.io/task/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="drf" scheme="http://huang_zhao.gitee.io/task/tags/drf/"/>
    
    <category term="源码" scheme="http://huang_zhao.gitee.io/task/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>drf☞jwt自动签发与手动签发</title>
    <link href="http://huang_zhao.gitee.io/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/"/>
    <id>http://huang_zhao.gitee.io/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/</id>
    <published>2020-02-15T07:33:45.000Z</published>
    <updated>2020-08-25T03:44:14.404Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、自动签发"><a href="#一、自动签发" class="headerlink" title="一、自动签发"></a>一、自动签发</h2><p><strong>urls</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.views <span class="keyword">import</span> obtain_jwt_token</span><br><span class="line"><span class="comment"># 使用jwt自带的登录视图</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;login/&#x27;</span>, obtain_jwt_token),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>settings</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">JWT_AUTH=&#123;</span><br><span class="line">    <span class="comment"># 配置响应格式，必须和自动签发使用</span></span><br><span class="line">  <span class="string">&#x27;JWT_RESPONSE_PAYLOAD_HANDLER&#x27;</span>:<span class="string">&#x27;app01.utils.my_jwt_response_payload_handler&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="number">7</span>), <span class="comment"># 过期时间，手动配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>utils</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重写jwt响应格式（需要到settings配置）</span></span><br><span class="line"><span class="comment"># 与之配合使用的必须是自动签发</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_jwt_response_payload_handler</span>(<span class="params">token, user=None, request=None</span>):</span> <span class="comment"># 返回什么，前端就能看到什么样子</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>:<span class="string">&#x27;登录成功&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;status&#x27;</span>:<span class="number">100</span>,</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>:user.username</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后直接在前端提交post请求发送账号和密码，会返回我们定义好的响应格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;token&quot;</span>: <span class="string">&quot;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6Imh6IiwiZXhwIjoxNTk1NDE1MTEyLCJlbWFpbCI6IiJ9.BxBdsm6oBz8iPAwSSpo_7IaU4pBp6RjK4c0GJ_FYN1E&quot;</span>,</span><br><span class="line">    <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;登录成功&quot;</span>,</span><br><span class="line">    <span class="string">&quot;status&quot;</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">&quot;username&quot;</span>: <span class="string">&quot;hz&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后拿出token对测试类发送测试请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestAPI</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        print(request.user)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line"><span class="comment"># 因为内置的他没有对匿名用户设置拦截，素以匿名用户也能看到ok</span></span><br><span class="line"><span class="comment"># 我们用request.user来区分</span></span><br><span class="line"><span class="comment"># 这里可能会出现我登录了很多次，用每次不同的token都能登录</span></span><br><span class="line"><span class="comment"># 这是因为token校验的是规则，是要加密规则符合且没有超时，那用哪次token都一样的</span></span><br></pre></td></tr></table></figure><h2 id="二、手动签发"><a href="#二、手动签发" class="headerlink" title="二、手动签发"></a>二、手动签发</h2><p><strong>utils</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework_jwt.authentication <span class="keyword">import</span> BaseJSONWebTokenAuthentication,jwt_decode_handler</span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> AuthenticationFailed</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAuthentication</span>(<span class="params">BaseJSONWebTokenAuthentication</span>):</span></span><br><span class="line">    <span class="comment"># 这里重写的逻辑和BaseJSONWebTokenAuthentication里的authenticate一模一样</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        jwt_token = request.META.get(<span class="string">&#x27;HTTP_AUTHORIZATION&#x27;</span>) <span class="comment"># 获取浏览器传来的token</span></span><br><span class="line">        <span class="keyword">if</span> jwt_token:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                payload = jwt_decode_handler(jwt_token) <span class="comment"># 传入token，拿出第二段用户信息,有内置的校验token功能</span></span><br><span class="line">            <span class="keyword">except</span> jwt.ExpiredSignature:</span><br><span class="line">                <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;签名过期&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> jwt.InvalidTokenError:</span><br><span class="line">                <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;用户非法&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="comment"># 所有异常都会走到这</span></span><br><span class="line">                <span class="keyword">raise</span> AuthenticationFailed(str(e))</span><br><span class="line">            <span class="comment"># 通过内置的方法把payload转换成用户对象</span></span><br><span class="line">            user = self.authenticate_credentials(payload)</span><br><span class="line">            <span class="keyword">return</span> user,<span class="literal">None</span> <span class="comment"># ===》request.user,request.auth</span></span><br><span class="line">        <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;您没有携带认证信息&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>sers</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多方序列化校验登录</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> rest_framework.exceptions <span class="keyword">import</span> ValidationError</span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> rest_framework_jwt.utils <span class="keyword">import</span> jwt_encode_handler,jwt_payload_handler</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginSer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="comment"># 我们要提交校验数据的时候，如果直接用下面Meta绑定给模型类的话</span></span><br><span class="line">    <span class="comment"># 关键点2：这里如果不写username的话，序列化器直接用的是模型类的username</span></span><br><span class="line">    <span class="comment"># 这两者的区别在于，如果覆盖写了username，他表示的可以是任何前端传来的数据，如果是模型类绑定，那只能是用户名了</span></span><br><span class="line">    <span class="comment"># 我们这里username用于多方登录的校验数据，必须要重写</span></span><br><span class="line">    <span class="comment"># 而password不用重写，因为password用的就是模型类本身的</span></span><br><span class="line">    username = serializers.CharField()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.User</span><br><span class="line">        fields =[<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, attrs</span>):</span></span><br><span class="line">        username = attrs.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        password = attrs.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> username:</span><br><span class="line">            <span class="keyword">if</span> re.match(<span class="string">&#x27;^1[3-9][0-9]&#123;9&#125;$&#x27;</span>, username):</span><br><span class="line">                user = models.User.objects.filter(mobile=username).first()</span><br><span class="line">            <span class="keyword">elif</span> re.match(<span class="string">&#x27;^.+@.+$&#x27;</span>, username):  <span class="comment"># 邮箱</span></span><br><span class="line">                user = models.User.objects.filter(email=username).first()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                user = models.User.objects.filter(username=username).first()</span><br><span class="line">            <span class="keyword">if</span> user:</span><br><span class="line">                <span class="keyword">if</span> user.check_password(password):</span><br><span class="line">                    <span class="comment"># 关键点3：jwt_payload_handler把用户数据对象转化成用户信息的字典</span></span><br><span class="line">                    <span class="comment"># jwt_encode_handler把用户信息的字典转化成token</span></span><br><span class="line">                    payload = jwt_payload_handler(user)</span><br><span class="line">                    <span class="comment"># print(&#x27;user:&#x27;,user,type(user))</span></span><br><span class="line">                    token = jwt_encode_handler(payload)</span><br><span class="line">                    <span class="comment"># print(&#x27;payload:&#x27;,payload,type(payload))</span></span><br><span class="line">                    <span class="comment"># print(&#x27;token:&#x27;,token)</span></span><br><span class="line">                    <span class="comment"># 关键点4：如果我们要给序列化器添加数据，让视图函数去使用</span></span><br><span class="line">                    <span class="comment"># 通常都是传给对象的context属性,当然直接赋值也可以，这只是他给我们提供的传值接口</span></span><br><span class="line">                    self.context[<span class="string">&#x27;token&#x27;</span>] = token</span><br><span class="line">                    self.context[<span class="string">&#x27;user&#x27;</span>] = user</span><br><span class="line">                    self.user = user</span><br><span class="line">                    <span class="keyword">return</span> attrs</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;密码错误&#x27;</span>)</span><br><span class="line">            <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;不存在用户&#x27;</span>)</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;请输入用户名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>views</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginApi</span>(<span class="params">ViewSet</span>):</span></span><br><span class="line">    authentication_classes = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 在调用序列化类给context传数据，可以直接在序列化类中调用</span></span><br><span class="line">        <span class="comment"># 关键点1：注意区分序列化传值与反序列化</span></span><br><span class="line">        <span class="comment"># 这里只要拿字典取校验数据，那就传给data</span></span><br><span class="line">        <span class="comment"># 如果是要把数据对象转化成字典就传给instance</span></span><br><span class="line">        user_ser = sers.LoginSer(data=request.data, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">        user_ser.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        token = user_ser.context.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        user = user_ser.context.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">        print(user_ser.user)</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&#x27;code&#x27;</span>: <span class="number">100</span>, <span class="string">&#x27;msg&#x27;</span>: <span class="string">&#x27;登录成功&#x27;</span>, <span class="string">&#x27;token&#x27;</span>: token, <span class="string">&#x27;username&#x27;</span>: user.username&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、自动签发&quot;&gt;&lt;a href=&quot;#一、自动签发&quot; class=&quot;headerlink&quot; title=&quot;一、自动签发&quot;&gt;&lt;/a&gt;一、自动签发&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;urls&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight pyt</summary>
      
    
    
    
    <category term="每日学习" scheme="http://huang_zhao.gitee.io/task/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="drf" scheme="http://huang_zhao.gitee.io/task/tags/drf/"/>
    
    <category term="jwt" scheme="http://huang_zhao.gitee.io/task/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>魔法方法</title>
    <link href="http://huang_zhao.gitee.io/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://huang_zhao.gitee.io/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-01-25T02:30:17.000Z</published>
    <updated>2020-08-25T03:35:29.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-str"><a href="#一、-str" class="headerlink" title="一、__str__"></a>一、<code>__str__</code></h2><p>改变对象的字符串显示，可以理解为print打印对象的显示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 定义对象的字符串表示</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line">s1 = Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">24</span>)</span><br><span class="line">print(s1)  <span class="comment"># 会调用s1的__str__方法</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>张三</span><br></pre></td></tr></table></figure><h2 id="二、-repr"><a href="#二、-repr" class="headerlink" title="二、__repr__"></a>二、<code>__repr__</code></h2><p>在python解释器环境下，会默认显示对象的repr表示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line"><span class="meta">... </span>        self.name = name</span><br><span class="line"><span class="meta">... </span>        self.age = age</span><br><span class="line"><span class="meta">... </span>    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="meta">... </span>        <span class="keyword">return</span> self.name</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = Student(<span class="string">&#x27;张三&#x27;</span>, <span class="number">24</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1</span><br><span class="line">张三</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>str函数或者print函数调用的是obj.<strong>str</strong>()<br>repr函数或者交互式解释器调用的是obj.<strong>repr</strong>()</p><p>注意：<br>如果__str__没有被定义，那么就会使用__repr__来代替输出。<br>__str__和__repr__方法的返回值都必须是字符串。</p><h2 id="三、-format"><a href="#三、-format" class="headerlink" title="三、__format__"></a>三、<code>__format__</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    __format_dict = &#123;</span><br><span class="line">        <span class="string">&#x27;n-a&#x27;</span>: <span class="string">&#x27;名字是：&#123;obj.name&#125;-年龄是：&#123;obj.age&#125;&#x27;</span>,  <span class="comment"># 名字是：lqz-年龄是：18</span></span><br><span class="line">        <span class="string">&#x27;n:a&#x27;</span>: <span class="string">&#x27;名字是：&#123;obj.name&#125;：年龄是：&#123;obj.age&#125;&#x27;</span>,  <span class="comment"># 名字是：lqz：年龄是：18</span></span><br><span class="line">        <span class="string">&#x27;n/a&#x27;</span>: <span class="string">&#x27;名字是：&#123;obj.name&#125;/年龄是：&#123;obj.age&#125;&#x27;</span>,  <span class="comment"># 名字是：/年龄是：18</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__format__</span>(<span class="params">self, format_spec</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> format_spec <span class="keyword">or</span> format_spec <span class="keyword">not</span> <span class="keyword">in</span> self.__format_dict:</span><br><span class="line">            format_spec = <span class="string">&#x27;n-a&#x27;</span></span><br><span class="line">        fmt = self.__format_dict[format_spec]</span><br><span class="line">        print(fmt) <span class="comment">#&#123;obj.name&#125;:&#123;obj.age&#125;</span></span><br><span class="line">        <span class="keyword">return</span> fmt.format(obj=self)</span><br><span class="line"></span><br><span class="line">s1 = Student(<span class="string">&#x27;lqz&#x27;</span>, <span class="number">24</span>)</span><br><span class="line">ret = format(s1, <span class="string">&#x27;n/a&#x27;</span>)</span><br><span class="line">print(ret)  <span class="comment"># lqz/24</span></span><br></pre></td></tr></table></figure><h2 id="四、-del"><a href="#四、-del" class="headerlink" title="四、__del__"></a>四、<code>__del__</code></h2><p>当对象的内存被施放的时候执行</p><p>注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;删除了...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(a)  <span class="comment"># &lt;__main__.A object at 0x10164fb00&gt;</span></span><br><span class="line"><span class="keyword">del</span> a  <span class="comment"># 删除了...</span></span><br><span class="line">print(a)  <span class="comment"># NameError: name &#x27;a&#x27; is not defined</span></span><br></pre></td></tr></table></figure><h2 id="五、-dict-和-slots"><a href="#五、-dict-和-slots" class="headerlink" title="五、__dict__和__slots__"></a>五、<code>__dict__和__slots__</code></h2><p>Python中的类，都会从object里继承一个__dict__属性，这个属性中存放着类的属性和方法对应的键值对。一个类实例化之后，这个类的实例也具有这么一个__dict__属性。但是二者并不相同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    some = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, num</span>):</span></span><br><span class="line">        self.num = num</span><br><span class="line"></span><br><span class="line">a = A(<span class="number">10</span>)</span><br><span class="line">print(a.__dict__)  <span class="comment"># &#123;&#x27;num&#x27;: 10&#125;</span></span><br><span class="line">a.age = <span class="number">10</span></span><br><span class="line">print(a.__dict__)  <span class="comment"># &#123;&#x27;num&#x27;: 10, &#x27;age&#x27;: 10&#125;</span></span><br></pre></td></tr></table></figure><p>从上面的例子可以看出来，实例只保存实例的属性和方法，类的属性和方法它是不保存的。正是由于类和实例有__dict__属性，所以类和实例可以在运行过程动态添加属性和方法。</p><p>但是由于每实例化一个类都要分配一个__dict__变量，容易浪费内存。因此在Python中有一个内置的__slots__属性。当一个类设置了__slots__属性后，这个类的__dict__属性就不存在了（同理，该类的实例也不存在__dict__属性），如此一来，设置了__slots__属性的类的属性，只能是预先设定好的。</p><p>当你定义__slots__后，__slots__就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的小型数组来构建的，而不是为每个实例都定义一个__dict__字典，在__slots__中列出的属性名在内部被映射到这个数组的特定索引上。使用__slots__带来的副作用是我们没有办法给实例添加任何新的属性了。</p><p>注意：尽管__slots__看起来是个非常有用的特性，但是除非你十分确切的知道要使用它，否则尽量不要使用它。比如定义了__slots__属性的类就不支持多继承。__slots__通常都是作为一种优化工具来使用。–摘自《Python Cookbook》8.4</p><p>注意事项：<br>__slots__的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了__slots__后的类不再 支持一些普通类特性了,比如多继承。大多数情况下,你应该只在那些经常被使用到的用作数据结构的类上定义__slots__，比如在程序中需要创建某个类的几百万个实例对象 。<br>关于__slots__的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用__slots__可以达到这样的目的,但是这个并不是它的初衷。它更多的是用来作为一个内存优化工具。</p><h2 id="六、-item-、-attr-系列"><a href="#六、-item-、-attr-系列" class="headerlink" title="六、__item__、__attr__系列"></a>六、<code>__item__、__attr__系列</code></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(self.__dict__[item])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;obj[key]=lqz赋值时，执行我&#x27;</span>)</span><br><span class="line">        self.__dict__[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;del obj[key]时，执行我&#x27;</span>)</span><br><span class="line">        self.__dict__.pop(key)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span>(<span class="params">self, item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;del obj.key时，执行我&#x27;</span>)</span><br><span class="line">        self.__dict__.pop(item)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self,key,value</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;obj.key = value的时候执行我&#x27;</span>)</span><br><span class="line">        self.__dict__[key] = value</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self,item</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;obj.get(key)的时候执行我&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self[item]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = Foo(<span class="string">&#x27;sb&#x27;</span>)</span><br><span class="line">print(f1.__dict__)</span><br><span class="line">f1[<span class="string">&#x27;age&#x27;</span>] = <span class="number">18</span></span><br><span class="line">f1.hobby = <span class="string">&#x27;泡妞&#x27;</span></span><br><span class="line"><span class="keyword">del</span> f1.hobby</span><br><span class="line"><span class="keyword">del</span> f1[<span class="string">&#x27;age&#x27;</span>]</span><br><span class="line">f1[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">print(f1.__dict__)</span><br></pre></td></tr></table></figure><h2 id="七、-init"><a href="#七、-init" class="headerlink" title="七、__init__"></a>七、<code>__init__</code></h2><p>使用Python写面向对象的代码的时候我们都会习惯性写一个 <strong>init</strong> 方法，<strong>init</strong> 方法通常用在初始化一个类实例的时候。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Person: &#123;&#125;(&#123;&#125;)&gt;&#x27;</span>.format(self.name, self.age)</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">24</span>)</span><br><span class="line">print(p1)</span><br></pre></td></tr></table></figure><p>上面是<strong>init__最普通的用法了。但是__init__其实不是实例化一个类的时候第一个被调用的方法。当使用 Persion(name, age) 来实例化一个类时，最先被调用的方法其实是 __new</strong> 方法。</p><h2 id="八、-new"><a href="#八、-new" class="headerlink" title="八、__new__"></a>八、<code>__new__</code></h2><p>其实__init__是在类实例被创建之后调用的，它完成的是类实例的初始化操作，而 __new__方法正是创建这个类实例的方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__new__，创建类实例&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> super().__new__(Person)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用__init__，初始化实例&#x27;</span>)</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Person: &#123;&#125;(&#123;&#125;)&gt;&#x27;</span>.format(self.name, self.age)</span><br><span class="line"></span><br><span class="line">p1 = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">24</span>)</span><br><span class="line">print(p1)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">调用__new__，创建类实例</span><br><span class="line">调用__init__，初始化实例</span><br><span class="line">&lt;Person: 张三(<span class="number">24</span>)&gt;</span><br></pre></td></tr></table></figure><p>__new__方法在类定义中不是必须写的，如果没定义的话默认会调用object.__new__去创建一个对象（因为创建类的时候默认继承的就是object）。</p><p>如果我们在类中定义了__new__方法，就是重写了默认的__new__方法，我们可以借此自定义创建对象的行为。</p><p>举个例子：</p><p>重写类的__new__方法来实现单例模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">    <span class="comment"># 重写__new__方法，实现每一次实例化的时候，返回同一个instance对象</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span>(<span class="params">cls, *args, **kw</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            cls._instance = super().__new__(Singleton)</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s1 = Singleton(<span class="string">&#x27;张三&#x27;</span>, <span class="number">24</span>)</span><br><span class="line">s2 = Singleton(<span class="string">&#x27;李四&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">print(s1, s2)  <span class="comment"># 这两实例都一样</span></span><br><span class="line">print(s1.name, s2.name)</span><br></pre></td></tr></table></figure><h2 id="九、-call"><a href="#九、-call" class="headerlink" title="九、__call__"></a>九、<code>__call__</code></h2><p><strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象()。拥有此方法的对象可以像函数一样被调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;调用对象的__call__方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">a = Person(<span class="string">&#x27;张三&#x27;</span>, <span class="number">24</span>)  <span class="comment"># 类Person可调用</span></span><br><span class="line">a()  <span class="comment"># 对象a可以调用</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong> </p><p>__new__、__init__、__call__等方法都不是必须写的。</p><h2 id="十、-doc"><a href="#十、-doc" class="headerlink" title="十、__doc__"></a>十、<code>__doc__</code></h2><p>定义类的描述信息（注释）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;我是A类的描述信息&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(A.__doc__)</span><br></pre></td></tr></table></figure><h2 id="十一、-iter-和-next"><a href="#十一、-iter-和-next" class="headerlink" title="十一、__iter__和__next__"></a>十一、<code>__iter__和__next__</code></h2><p>如果一个对象拥有了__iter__和__next__方法，那这个对象就是迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, start, stop=None</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> stop:</span><br><span class="line">            start, stop = <span class="number">0</span>, start</span><br><span class="line">        self.start = start</span><br><span class="line">        self.stop = stop</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.start &gt;= self.stop:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        n = self.start</span><br><span class="line">        self.start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line"></span><br><span class="line">a = A(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line">print(isinstance(a, Iterator))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> A(<span class="number">5</span>):</span><br><span class="line">    print(i)</span><br><span class="line">aaa=A(<span class="number">1</span>)</span><br><span class="line">print(next(aaa))</span><br><span class="line">print(next(aaa)) <span class="comment">#抛异常</span></span><br></pre></td></tr></table></figure><h2 id="十二、-enter-和-exit"><a href="#十二、-enter-和-exit" class="headerlink" title="十二、__enter__和__exit__"></a>十二、<code>__enter__和__exit__</code></h2><p>一个对象如果实现了__enter__和___exit__方法，那么这个对象就支持上下文管理协议，即with语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;进入with语句块时执行此方法，此方法如果有返回值会赋值给as声明的变量&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;oo&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;退出with代码块时执行此方法&#x27;</span>)</span><br><span class="line">        print(<span class="string">&#x27;1&#x27;</span>, exc_type)</span><br><span class="line">        print(<span class="string">&#x27;2&#x27;</span>, exc_val)</span><br><span class="line">        print(<span class="string">&#x27;3&#x27;</span>, exc_tb)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> f:</span><br><span class="line">    print(<span class="string">&#x27;进入with语句块&#x27;</span>)</span><br><span class="line">    <span class="comment"># with语句中代码块出现异常，则with后的代码都无法执行。</span></span><br><span class="line">    <span class="comment"># raise AttributeError(&#x27;sb&#x27;)</span></span><br><span class="line">    print(f) <span class="comment">#f打印出oo</span></span><br><span class="line">print(<span class="string">&#x27;嘿嘿嘿&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="十三、-len"><a href="#十三、-len" class="headerlink" title="十三、__len__"></a>十三、<code>__len__</code></h2><p>拥有__len__方法的对象支持len(obj)操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x = <span class="number">1</span></span><br><span class="line">        self.y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> len(self.__dict__)</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(len(a))</span><br></pre></td></tr></table></figure><h2 id="十四、-hash"><a href="#十四、-hash" class="headerlink" title="十四、__hash__"></a>十四、<code>__hash__</code></h2><p>拥有__hash__方法的对象支持hash(obj)操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.x = <span class="number">1</span></span><br><span class="line">        self.x = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__hash__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> hash(str(self.x) + str(self.x))</span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">print(hash(a))</span><br></pre></td></tr></table></figure><h2 id="十五、-eq"><a href="#十五、-eq" class="headerlink" title="十五、__eq__"></a>十五、<code>__eq__</code></h2><p>拥有__eq__方法的对象支持相等的比较操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,x,y</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self,obj</span>):</span></span><br><span class="line">        <span class="comment"># 打印出比较的第二个对象的x值</span></span><br><span class="line">        print(obj.x)</span><br><span class="line">        <span class="keyword">if</span> self.x +self.y == obj.x+obj.y:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">a = A(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">b = A(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">print(a == b)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、-str&quot;&gt;&lt;a href=&quot;#一、-str&quot; class=&quot;headerlink&quot; title=&quot;一、__str__&quot;&gt;&lt;/a&gt;一、&lt;code&gt;__str__&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;改变对象的字符串显示，可以理解为print打印对象的显示&lt;/p&gt;
&lt;f</summary>
      
    
    
    
    <category term="每日学习" scheme="http://huang_zhao.gitee.io/task/categories/%E6%AF%8F%E6%97%A5%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="python函数" scheme="http://huang_zhao.gitee.io/task/tags/python%E5%87%BD%E6%95%B0/"/>
    
    <category term="面试" scheme="http://huang_zhao.gitee.io/task/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
