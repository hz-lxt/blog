<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄钊君の博客</title>
  
  
  <link href="http://huang_zhao.gitee.io/task/atom.xml" rel="self"/>
  
  <link href="http://huang_zhao.gitee.io/task/"/>
  <updated>2020-08-26T01:02:17.121Z</updated>
  <id>http://huang_zhao.gitee.io/task/</id>
  
  <author>
    <name>爱肖彤真是太好了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>celery基础</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/celery/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/celery/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-26T01:02:17.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、celery介绍"><a href="#一、celery介绍" class="headerlink" title="一、celery介绍"></a>一、celery介绍</h2><p>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></p><p>Celery 官方文档英文版：<a href="http://docs.celeryproject.org/en/latest/index.html">http://docs.celeryproject.org/en/latest/index.html</a></p><p>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></p><ul><li>异步任务框架</li><li>执行异步任务</li><li>执行延迟任务</li><li>执行定时任务</li></ul><h2 id="二、celery架构"><a href="#二、celery架构" class="headerlink" title="二、celery架构"></a>二、celery架构</h2><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/007S8ZIlgy1ggqw0f7bltj30q80c174d.jpg" alt="007S8ZIlgy1ggqw0f7bltj30q80c174d" loading="lazy"></p><h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p><h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>异步执行：解决耗时任务,将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p><p>延迟执行：解决延迟任务</p><p>定时执行：解决周期(周期)任务,比如每天数据统计</p><h2 id="三、celery使用"><a href="#三、celery使用" class="headerlink" title="三、celery使用"></a>三、celery使用</h2><p>安装：<code>pip install celery</code></p><p>根据celery架构，我们可以看出，worker就像是一个工人，一直在工作，如果有工作的时候就会从broker（Redist）里去拿过来执行，并放到pakend（redist）中存放结果</p><h3 id="方式一：在一个文件夹内的三个页面"><a href="#方式一：在一个文件夹内的三个页面" class="headerlink" title="方式一：在一个文件夹内的三个页面"></a>方式一：在一个文件夹内的三个页面</h3><p><strong>worker执行页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celery<span class="token comment" spellcheck="true"># broker存储的位置</span>broker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span><span class="token comment" spellcheck="true"># backend存储的位置</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化的celery对象</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要添加的任务</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><p><strong>broker提交任务的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> add<span class="token comment" spellcheck="true"># 执行这个文件，就是把这个任务添加到数据库中，只要worker在工作</span><span class="token comment" spellcheck="true"># 就会把这个任务从数据库1中拿出来执行，并把结果放到数据库2中</span>ret <span class="token operator">=</span> add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ret 是这个任务的uuid，用于获取任务结果</span></code></pre><p><strong>backend获取任务结果的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> app<span class="token keyword">from</span> celery<span class="token punctuation">.</span>result <span class="token keyword">import</span> AsyncResult<span class="token comment" spellcheck="true"># 任务对象的唯一标识：uuid</span>id <span class="token operator">=</span> <span class="token string">'19dc2faa-39f9-47b6-af77-e9d3a4d05d2e'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    async1 <span class="token operator">=</span> AsyncResult<span class="token punctuation">(</span>id<span class="token operator">=</span>id<span class="token punctuation">,</span> app<span class="token operator">=</span>app<span class="token punctuation">)</span>    <span class="token keyword">if</span> async1<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> async1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>failed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务失败'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'PENDING'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务等待中被执行'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'RETRY'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务异常后正在重试'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'STARTED'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务已经开始被执行'</span><span class="token punctuation">)</span></code></pre><h3 id="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"><a href="#方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）" class="headerlink" title="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"></a>方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）</h3><p>创建一个celery项目（包），内部必须含有名字为celery的py文件，在内部创建celery对象</p><p><strong>celery.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task1'</span><span class="token punctuation">,</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>编写需要添加的任务也在这个包内，可创建不同的任务文件，可添加多个</p><p><strong>task1.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><h3 id="执行延迟任务"><a href="#执行延迟任务" class="headerlink" title="执行延迟任务"></a>执行延迟任务</h3><p>添加任务页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 执行延迟任务就是多个一个时间参数</span><span class="token comment" spellcheck="true"># 这里注意，时间参数是根据utc时间，并不是中国时间</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token comment" spellcheck="true"># 时间对象必须和时间对象相加</span>eta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>add<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eta<span class="token operator">=</span>eta<span class="token punctuation">)</span></code></pre><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>celery页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.tasks.low'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A pc_celery -l info</span><span class="token comment" spellcheck="true"># celery -A pc_celery worker -l info -P eventlet</span></code></pre><h2 id="四、django中配置celery"><a href="#四、django中配置celery" class="headerlink" title="四、django中配置celery"></a>四、django中配置celery</h2><p>celery包最好放在根路径下</p><p><strong>添加定时任务</strong></p><p>celery.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 配置django配置</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'luffyapi.settings.dev'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置celery的worker环境</span><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化worker对象app，用include添加定时任务</span>app<span class="token operator">=</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.task2.update_banner'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token comment" spellcheck="true"># 'args': (),</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A celery_task -l info</span></code></pre><p><strong>task定时任务</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token comment" spellcheck="true"># 每三秒跟新一次缓存</span><span class="token comment" spellcheck="true"># 添加一个任务，celery内设定间隔时间3秒</span><span class="token comment" spellcheck="true"># 任务内去cache跟新banner_list，从数据库中拿到banner放到cache中的banner_list中</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>models <span class="token keyword">import</span> Banner<span class="token comment" spellcheck="true"># from luffyapi.settings import const</span><span class="token comment" spellcheck="true"># [OrderedDict(</span><span class="token comment" spellcheck="true">#     [('image', 'http://127.0.0.1:8000/media/banner/banner1.png'), ('link', '/free-courses'), ('name', 'banner1')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner2.png'), ('link', '/light-courses'), ('name', 'banner2')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner3.png'), ('link', '/actual-courses'), ('name', 'banner3')])]</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>sers <span class="token keyword">import</span> BannerSer@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">update_banner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Banner<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>is_delete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    banner_ser <span class="token operator">=</span> BannerSer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> banner <span class="token keyword">in</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">:</span>        banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000'</span> <span class="token operator">+</span> banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>    cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'更新banner成功'</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、celery介绍&quot;&gt;&lt;a href=&quot;#一、celery介绍&quot; class=&quot;headerlink&quot; title=&quot;一、celery介绍&quot;&gt;&lt;/a&gt;一、celery介绍&lt;/h2&gt;&lt;p&gt;Celery 官网：&lt;a href=&quot;http://www.celerypr</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="异步任务框架" scheme="http://huang_zhao.gitee.io/task/tags/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>支付宝网页支付接口调用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-26T01:05:37.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、SDK-API接口的调用"><a href="#一、SDK-API接口的调用" class="headerlink" title="一、SDK/API接口的调用"></a>一、SDK/API接口的调用</h2><p>支付宝平台不提供python的sdk，只有api，我们可以去网上找别人封装好的sdk，复制过来，了解对应参数</p><p>可以通过支付宝提供的软件自动生成公钥和私钥</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment" spellcheck="true"># app_private_key_string = open("/path/to/your/private/key.pem").read()</span><span class="token comment" spellcheck="true"># alipay_public_key_string = open("/path/to/alipay/public/key.pem").read()</span>app_private_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN RSA PRIVATE KEY-----你的私钥-----END RSA PRIVATE KEY-----"""</span>alipay_public_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN PUBLIC KEY-----支付宝平台创建的应用的公钥-----END PUBLIC KEY-----"""</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 创建应用的appid</span>    appid<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token string">'http://127.0.0.1:8000/home/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># the default notify path</span>    <span class="token comment" spellcheck="true"># 配置你的私钥</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># alipay public key, do not use your own public key!</span>    <span class="token comment" spellcheck="true"># 配置应用的公钥</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 加密方式</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># RSA or RSA2</span>    <span class="token comment" spellcheck="true"># 调试模式，如果用真实环境就要改成True</span>    debug<span class="token operator">=</span><span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># False by default</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 支付宝的网关接口</span>alipay_url<span class="token operator">=</span><span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span><span class="token comment" spellcheck="true"># 生成支付页面</span>order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>    out_trade_no<span class="token operator">=</span><span class="token string">"20161112www4334"</span><span class="token punctuation">,</span>    total_amount<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">,</span>    subject<span class="token operator">=</span><span class="token string">'韩红版充气娃娃'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 商品名称</span>    <span class="token comment" spellcheck="true"># 提交get请求的url</span>    return_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 提交post请求的url</span>    notify_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成支付链接</span><span class="token keyword">print</span><span class="token punctuation">(</span>alipay_url<span class="token operator">+</span>order_string<span class="token punctuation">)</span></code></pre><p>这里内部有很多配置信息，可以把配置信息提取出来放到settings文件中，解耦合</p><h2 id="二、项目中调用支付接口"><a href="#二、项目中调用支付接口" class="headerlink" title="二、项目中调用支付接口"></a>二、项目中调用支付接口</h2><p>前端点击立即购买，把后端所需要的参数发送给后端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayView</span><span class="token punctuation">(</span>GenericViewSet<span class="token punctuation">,</span> CreateModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 登录jwt认证</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span>JSONWebTokenAuthentication<span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 防止游客登录</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAuthenticated<span class="token punctuation">,</span> <span class="token punctuation">]</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> sers<span class="token punctuation">.</span>OrderSerializer    <span class="token comment" spellcheck="true"># 重写create方法</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'request': request&amp;#125;)</span>        <span class="token comment" spellcheck="true"># 通过序列化类去校验数据，保存数据到数据库，生成支付宝链接</span>        <span class="token comment" spellcheck="true"># 主要逻辑都在序列化类中</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 等同于ser.save（）</span>        self<span class="token punctuation">.</span>perform_create<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回支付宝支付链接</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pay_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>序列化类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">OrderSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 前端传什么数据过来&amp;#123;course:[1,2,3],total_amount:100,subject:xx商品,pay_type:1,&amp;#125;</span>    <span class="token comment" spellcheck="true"># user字段需要，但是不是传的，使用了jwt</span>    <span class="token comment" spellcheck="true"># 需要把course:[1,2,3] 处理成 course:[obj1,obj2,obj3]</span>    <span class="token comment" spellcheck="true"># 课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    <span class="token comment" spellcheck="true"># course=serializers.CharField()</span>    <span class="token keyword">from</span> course<span class="token punctuation">.</span>models <span class="token keyword">import</span> Course    <span class="token comment" spellcheck="true"># 这个方法可以让课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    course<span class="token operator">=</span>serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Course<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Order        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'total_amount'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">,</span><span class="token string">'pay_type'</span><span class="token punctuation">,</span><span class="token string">'course'</span><span class="token punctuation">]</span>        extra_kwargs<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'total_amount'</span><span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'required':True&amp;#125;,</span>            <span class="token string">'pay_type'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'required': True&amp;#125;,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">def</span> <span class="token function">_check_price</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        total_amount<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'total_amount'</span><span class="token punctuation">)</span>        course_list<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        total_price<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            total_price<span class="token operator">+=</span>course<span class="token punctuation">.</span>price        <span class="token keyword">if</span> total_price<span class="token operator">!=</span>total_amount<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'价格不合法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> total_amount    <span class="token keyword">def</span> <span class="token function">_gen_out_trade_no</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> uuid        <span class="token keyword">return</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 需要request对象(需要视图通过context把reuqest对象传入。重写create方法)</span>        request<span class="token operator">=</span>self<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> request<span class="token punctuation">.</span>user    <span class="token keyword">def</span> <span class="token function">_gen_pay_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>subject<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># total_amout是Decimal类型，识别不了，需要转换成float类型</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay<span class="token punctuation">,</span>gateway        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>            out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">,</span>            total_amount<span class="token operator">=</span>float<span class="token punctuation">(</span>total_amout<span class="token punctuation">)</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span>subject<span class="token punctuation">,</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># get回调，前台地址（最后跳转的支付成功页面）</span>            notify_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>NOTIFY_URL   <span class="token comment" spellcheck="true"># post回调，后台地址（给后端去判断是否支付成功，支付成功返回success）</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span> gateway<span class="token operator">+</span>order_string    <span class="token keyword">def</span> <span class="token function">_before_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token operator">=</span>user        attrs<span class="token punctuation">[</span><span class="token string">'out_trade_no'</span><span class="token punctuation">]</span><span class="token operator">=</span>out_trade_no        self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'pay_url'</span><span class="token punctuation">]</span><span class="token operator">=</span>pay_url    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        # 1）订单总价校验        # 2）生成订单号        # 3）支付用户：request.user        # 4）支付链接生成        # 5）入库(两个表)的信息准备        '''</span>        <span class="token comment" spellcheck="true"># 1）订单总价校验</span>        total_amout <span class="token operator">=</span> self<span class="token punctuation">.</span>_check_price<span class="token punctuation">(</span>attrs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2）生成订单号</span>        out_trade_no<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_out_trade_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3）支付用户：request.user</span>        user<span class="token operator">=</span>self<span class="token punctuation">.</span>_get_user<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 4）支付链接生成</span>        pay_url<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_pay_url<span class="token punctuation">(</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'subject'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5）入库(两个表)的信息准备</span>        self<span class="token punctuation">.</span>_before_create<span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span>        <span class="token keyword">return</span> attrs    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        course_list<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            models<span class="token punctuation">.</span>OrderDetail<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>order<span class="token operator">=</span>order<span class="token punctuation">,</span>course<span class="token operator">=</span>course<span class="token punctuation">,</span>price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">,</span>real_price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        <span class="token keyword">return</span> order</code></pre><p>支付成功后，前端会直接跳转到支付成功的页面，支付宝会向后端发送post请求，让我们验证所有的信息是否正确</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        支付宝回调接口        '''</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>logger <span class="token keyword">import</span> log        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        out_trade_no<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        gmt_payment<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gmt_payment'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        signature <span class="token operator">=</span> data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 验证签名</span>        success <span class="token operator">=</span> alipay<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>data<span class="token punctuation">,</span> signature<span class="token punctuation">)</span>        <span class="token keyword">if</span> success <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"trade_status"</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"TRADE_SUCCESS"</span><span class="token punctuation">,</span> <span class="token string">"TRADE_FINISHED"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>order_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>pay_time<span class="token operator">=</span>gmt_payment<span class="token punctuation">)</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单支付成功'</span><span class="token operator">%</span>out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单有问题'</span> <span class="token operator">%</span> out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span></code></pre><p>前端到了支付成功的页面，其实也不完全是支付成功，因为还没有得到后端的确认，所以可以发送一个get请求去校验一下是否成功</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        out_trade_no<span class="token operator">=</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> order<span class="token punctuation">.</span>order_status<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、SDK-API接口的调用&quot;&gt;&lt;a href=&quot;#一、SDK-API接口的调用&quot; class=&quot;headerlink&quot; title=&quot;一、SDK/API接口的调用&quot;&gt;&lt;/a&gt;一、SDK/API接口的调用&lt;/h2&gt;&lt;p&gt;支付宝平台不提供python的sdk，只有a</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="第三方接口" scheme="http://huang_zhao.gitee.io/task/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Xpath基本用法</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-26T01:01:48.059Z</updated>
    
    <content type="html"><![CDATA[<p>XPath 是一门在 XML 文档中查找信息的语言，本质上和bs4差不多</p><p>主要选取节点的表达式是<code>/</code>和<code>//</code>组成</p><p>教程：<a href="https://www.runoob.com/xpath/xpath-syntax.html">https://www.runoob.com/xpath/xpath-syntax.html</a></p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">nodename</td><td align="left">选取此节点的所有子节点。</td></tr><tr><td align="left">/</td><td align="left">从根节点选取。</td></tr><tr><td align="left">//</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td align="left">.</td><td align="left">选取当前节点。</td></tr><tr><td align="left">..</td><td align="left">选取当前节点的父节点。</td></tr><tr><td align="left">@</td><td align="left">选取属性。</td></tr></tbody></table><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">bookstore</td><td align="left">选取 bookstore 元素的所有子节点。</td></tr><tr><td align="left">/bookstore</td><td align="left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">bookstore/book</td><td align="left">选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td align="left">//book</td><td align="left">选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="left">bookstore//book</td><td align="left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td align="left">//@lang</td><td align="left">选取名为 lang 的所有属性。</td></tr></tbody></table><pre class=" language-python"><code class="language-python">doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story li">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span></code></pre><p>测试案例：</p><pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 所有节点，列表包含一个个tag对象</span><span class="token comment" spellcheck="true"># a = html.xpath('//*')</span><span class="token comment" spellcheck="true"># 在body下的所有b标签（包含子子孙孙）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//b')</span><span class="token comment" spellcheck="true"># 在bdoy下的子标签中的b标签（只有子标签）</span><span class="token comment" spellcheck="true"># a = html.xpath('body/b')</span><span class="token comment" spellcheck="true"># 属性匹配,只能完全匹配，如果有多个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]')</span><span class="token comment" spellcheck="true"># 属性匹配模糊，只要有就能匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li")]')</span><span class="token comment" spellcheck="true"># 多属性匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li") or @id="my_p"]')</span><span class="token comment" spellcheck="true"># 获取当前标签的文本（不包含其子节点内部的）（列表）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/text()')</span><span class="token comment" spellcheck="true"># 获取标签的属性</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/@id')</span><span class="token comment" spellcheck="true"># 索引取出一个标签（注意第一个就是【1】不是0｝）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[1]/text()')</span><span class="token comment" spellcheck="true"># 取出最后一个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()]/text()')</span><span class="token comment" spellcheck="true"># 取出位置小于3的</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[position()&lt;3]')</span><span class="token comment" spellcheck="true"># 取出倒数第二个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()-2]')</span><span class="token comment" spellcheck="true"># 11 节点轴选择</span><span class="token comment" spellcheck="true"># ancestor：祖先节点</span><span class="token comment" spellcheck="true"># 使用了* 获取所有祖先节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::*')</span><span class="token comment" spellcheck="true"># # 获取祖先节点中的div</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::div')</span><span class="token comment" spellcheck="true"># attribute：属性值</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/attribute::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/@aa')</span><span class="token comment" spellcheck="true"># child：直接子节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::img/@src')</span><span class="token comment" spellcheck="true"># descendant：所有子孙节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::h5/text()')</span><span class="token comment" spellcheck="true"># following:当前节点之后所有节点(兄弟节点和兄弟内部的节点)</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*[1]/@href')</span><span class="token comment" spellcheck="true"># following-sibling:当前节点之后同级节点（只找兄弟）</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::a')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]/@href')</span></code></pre><h3 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文本</span>a <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'body//p[1]/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性值</span>a<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>'<span class="token operator">//</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>@href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 要注意，如果我们是找到一个标签再通过这个标签进行xpath筛选</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示还是从根往下找</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示从当前标签位置为根往下找</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;XPath 是一门在 XML 文档中查找信息的语言，本质上和bs4差不多&lt;/p&gt;
&lt;p&gt;主要选取节点的表达式是&lt;code&gt;/&lt;/code&gt;和&lt;code&gt;//&lt;/code&gt;组成&lt;/p&gt;
&lt;p&gt;教程：&lt;a href=&quot;https://www.runoob.com/xpath/x</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup模块的使用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/21/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/21/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-21T06:10:11.000Z</published>
    <updated>2020-08-26T01:00:57.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BeautifulSoup模块的使用"><a href="#BeautifulSoup模块的使用" class="headerlink" title="BeautifulSoup模块的使用"></a>BeautifulSoup模块的使用</h2><h4 id="1-参数介绍"><a href="#1-参数介绍" class="headerlink" title="1 参数介绍"></a>1 参数介绍</h4><pre class=" language-python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一个参数是要解析的html页面，通常是我们通过请求得到的页面数据</span><span class="token comment" spellcheck="true"># 第二个参数是解析的解析器选择</span><span class="token comment" spellcheck="true"># python内置的html.parser</span><span class="token comment" spellcheck="true"># 其他解释器：lxml（通常使用），xml，html5lib</span></code></pre><p>文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><h4 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 标签查找</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有多个只会找到第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>pres <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token comment" spellcheck="true"># 2 标签属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>attrs<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'id': 'bbb', 'class': ['boldest']&amp;#125;</span><span class="token comment" spellcheck="true"># 3 获取文本内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>string <span class="token comment" spellcheck="true"># 当p下只有文本取到，否则为None</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>strings <span class="token comment" spellcheck="true"># 获取全部文本得到一个生成器对象</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 取到标签下所有的文本内容拼接起来</span><span class="token comment" spellcheck="true"># 4 嵌套选择</span><span class="token comment" spellcheck="true"># 可以让选择更加准确</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>string<span class="token comment" spellcheck="true"># 5 子节点、子孙节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents <span class="token comment" spellcheck="true"># 获得p内所有子节点</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>b <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"boldest"</span> id<span class="token operator">=</span><span class="token string">"bbb"</span><span class="token operator">></span>The Dormouse<span class="token string">'s story&lt;/b>, '</span>\n'<span class="token punctuation">]</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children <span class="token comment" spellcheck="true"># 得到一个迭代器，包含p内所有子节点</span><span class="token triple-quoted-string string">'''子节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>'''</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>descendants <span class="token comment" spellcheck="true"># 得到一个生成器，包含p内所有子孙节点</span><span class="token triple-quoted-string string">'''子孙节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>The Dormouse's story'''</span><span class="token comment" spellcheck="true"># 6 父节点、祖节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parent <span class="token comment" spellcheck="true"># 获得p的父节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parents <span class="token comment" spellcheck="true"># 获得p的父节点，和父节点的父节点。。。的生成器</span><span class="token comment" spellcheck="true"># 7 兄弟节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_sibling <span class="token comment" spellcheck="true"># 下一个兄弟</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_previous_sibling <span class="token comment" spellcheck="true"># 上一个兄弟</span></code></pre><h4 id="3-搜索文档树"><a href="#3-搜索文档树" class="headerlink" title="3 搜索文档树"></a>3 搜索文档树</h4><h5 id="3-1-五种过滤器"><a href="#3-1-五种过滤器" class="headerlink" title="3.1 五种过滤器"></a>3.1 五种过滤器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 字符串</span><span class="token comment" spellcheck="true"># 如果有多个取第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取全部，只有一个也是放在列表中</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 正则表达式</span><span class="token comment" spellcheck="true"># 获得所有以b开头的标签：body，b</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3 列表</span><span class="token comment" spellcheck="true"># a标签，b标签都会取</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4 布尔</span><span class="token comment" spellcheck="true"># 会查找到所有标签，不包括文本节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5 自定义过滤器</span><span class="token comment" spellcheck="true"># 会把整个页面传给tag</span><span class="token keyword">def</span> <span class="token function">has_class_not_id</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>has_class_not_id<span class="token punctuation">)</span></code></pre><h5 id="3-2-find-all"><a href="#3-2-find-all" class="headerlink" title="3.2 find_all()"></a>3.2 find_all()</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># name：可以放任意类型的过滤器</span><span class="token comment" spellcheck="true"># keyword：放键值对</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>id <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^my'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有特殊参数不能通过k，v来表示</span><span class="token comment" spellcheck="true"># 比如data-foo = value</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"data-foo":"value"&amp;#125;)</span><span class="token comment" spellcheck="true"># 按类名的时候，关键字是class_</span><span class="token comment" spellcheck="true"># 查找由sister和sss类的a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'sister sss'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># limit参数</span><span class="token comment" spellcheck="true"># 找前连个a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># recursive = False 会查找tag下的直接的子节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>recursive <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h5 id="3-3-css选择器"><a href="#3-3-css选择器" class="headerlink" title="3.3 css选择器"></a>3.3 css选择器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 选择器</span><span class="token comment" spellcheck="true"># 类</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 含有sister类下的b标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># id</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token comment" spellcheck="true"># 获取内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BeautifulSoup模块的使用&quot;&gt;&lt;a href=&quot;#BeautifulSoup模块的使用&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup模块的使用&quot;&gt;&lt;/a&gt;BeautifulSoup模块的使用&lt;/h2&gt;&lt;h4 id=&quot;1</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="python模块" scheme="http://huang_zhao.gitee.io/task/tags/python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>消息队列</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2020-03-24T12:30:17.000Z</published>
    <updated>2020-08-26T01:02:09.610Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>消息队列：是一种数据结构</p><p>生产者：把数据放入到队列中的一方</p><p>消费者：把数据从队列中取出的一方</p><h3 id="2-存在的意义"><a href="#2-存在的意义" class="headerlink" title="2 存在的意义"></a>2 存在的意义</h3><h4 id="2-1-解耦"><a href="#2-1-解耦" class="headerlink" title="2.1 解耦"></a>2.1 解耦</h4><p>场景一：</p><p>存在三个系统</p><p>a系统要给b系统发送数据，调用系统b的接口</p><p>a系统要给c系统发送数据，调用系统c的接口</p><p>如果有一天b不需要a的数据了，就需要让a注释掉掉b接口的代码</p><p>如果新增系统d要接受数据，又要增加调用系统d的代码</p><p><strong>这些调用逻辑都是一些重复的不可避免的劳动</strong></p><p>此处的a系统与bcd系统高度耦合了，因为之间的数据交互如果需要修改，或者接受数据的系统出现了问题，那么a系统的调用逻辑还要思考需不需要继续发送数据</p><p>场景二：</p><p>在上述场景加入消息队列，消息队列是生产者（a系统）与消费者（bcd系统）之间的一个数据交互中转站</p><p>a系统发布消息，bcd订阅消息，如果不需要订阅就取消订阅即可，并不需要修改发布消息的代码</p><h4 id="2-2-异步"><a href="#2-2-异步" class="headerlink" title="2.2 异步"></a>2.2 异步</h4><p>消息队列是一个异步任务，如果a系统要完成<strong>产生数据（100ms）</strong>，<strong>发送数据至系统b（300ms）</strong>，<strong>发送数据至系统c（300ms）</strong></p><p>此时a系统完成消息发送是一个同步任务，完成时间是100+300+300=700ms</p><p>如果用了消息队列，a系统只要产生消息，并发送至消息队列，由消息队列异步回调订阅过的系统接口</p><p>此时a系统完成发送消息的时间是100ms</p><h4 id="2-3-削峰-限流"><a href="#2-3-削峰-限流" class="headerlink" title="2.3 削峰/限流"></a>2.3 削峰/限流</h4><p>如果有一个商场网站出了促销活动，此时每秒的请求数是5000，一般的mysql只能处理2000个左右的并发。</p><p>此时在用户与mysql之间加入mq，它可以接受者5000个请求，但是只给mysql发送2000个。</p><p>就像一个喷水的管子，如果突然流水量过大，管子就会裂开，我们通过开关把水流量放小一点就问题不大，但是我们要知道，在这个开关后水压还是这么大，mq做到的只是限制最大量。</p><h4 id="2-4-其他应用场景"><a href="#2-4-其他应用场景" class="headerlink" title="2.4 其他应用场景"></a>2.4 其他应用场景</h4><ul><li><strong>日志处理</strong>：将大量日志存储到消息队列中（一般采用分布式消息队列kafka），解决大量日志传输的问题。其中，消息队列负责日志数据的接收，存储和转发；</li><li><strong>消息通讯</strong>：点对点通讯或聊天室通讯。</li></ul><h3 id="3-使用消息队列会有什么优缺点"><a href="#3-使用消息队列会有什么优缺点" class="headerlink" title="3 使用消息队列会有什么优缺点"></a>3 使用消息队列会有什么优缺点</h3><p>优点其实就是上文中谈到的，在特殊场景下的应用好处，解耦、异步与削峰等。</p><p><strong>系统可用性</strong>：<br> 系统因为依赖与MQ消息队列这个服务，若这个服务崩溃了，那么我们的整个系统将不可用。为此往往我们都是通过集群/分布式部署来实现MQ高可用的。</p><p>高可用：通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性</p><p><strong>系统复杂度</strong>：<br> 我们将数据写到消息队列上，就有可能会存在数据丢失的情况。以及我们如何保证消息没有被重复消费等问题。</p><p><strong>一致性问题</strong>：<br> A系统将请求写入到消息队列后就返回请求成功了，假设在多机部署的时候，系统B、C写库成功，假设D写入失败了，这种情况下就会产生数据不一致的问题。</p><p><a href="https://www.jianshu.com/p/ec7c2503c3ef">https://www.jianshu.com/p/ec7c2503c3ef</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1 定义&quot;&gt;&lt;/a&gt;1 定义&lt;/h3&gt;&lt;p&gt;消息队列：是一种数据结构&lt;/p&gt;
&lt;p&gt;生产者：把数据放入到队列中的一方&lt;/p&gt;
&lt;p&gt;消费者：把数据从队列中取出的一方&lt;/</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>requests模块使用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/21/requests%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/21/requests%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-21T05:20:11.000Z</published>
    <updated>2020-08-26T01:00:39.257Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-发送请求"><a href="#1-发送请求" class="headerlink" title="1 发送请求"></a>1 发送请求</h4><pre class=" language-python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://images.cnblogs.com/cnblogs_com/xuexianqi/1749514/o_20042405405202.png'</span><span class="token punctuation">)</span></code></pre><h4 id="2-请求地址中携带数据"><a href="#2-请求地址中携带数据" class="headerlink" title="2 请求地址中携带数据"></a>2 请求地址中携带数据</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># url的编码和解码</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token punctuation">,</span>unquoteheader <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>     <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/s'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'wd':'美女'&amp;#125;)</span></code></pre><h4 id="3-请求中带cookie"><a href="#3-请求中带cookie" class="headerlink" title="3 请求中带cookie"></a>3 请求中带cookie</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一：在headers中携带</span>header <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'cookie'</span><span class="token punctuation">:</span><span class="token string">'name=hz'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方式二：添加cookies参数</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'hz'&amp;#125;)</span></code></pre><h4 id="4-post请求发送url和json格式数据"><a href="#4-post请求发送url和json格式数据" class="headerlink" title="4 post请求发送url和json格式数据"></a>4 post请求发送url和json格式数据</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># url格式</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'hz'&amp;#125;)</span><span class="token comment" spellcheck="true"># post请求发送json格式数据</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'hz'&amp;#125;)</span></code></pre><h4 id="5-session函数自动处理携带cookie"><a href="#5-session函数自动处理携带cookie" class="headerlink" title="5 session函数自动处理携带cookie"></a>5 session函数自动处理携带cookie</h4><pre class=" language-python"><code class="language-python">session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/login/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>r2 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/order/'</span><span class="token punctuation">)</span></code></pre><h4 id="6-response对象的方法"><a href="#6-response对象的方法" class="headerlink" title="6 response对象的方法"></a>6 response对象的方法</h4><pre class=" language-python"><code class="language-python">respone<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 响应的文本信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应体的二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 响应头</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># cookie</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  把cookie转成字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># key和value</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 请求的url</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>history<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#[]放重定向之前的地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应的编码方式</span>respone<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 图片，视频，大文件，一点一点循环取出来</span></code></pre><h4 id="7-编码问题"><a href="#7-编码问题" class="headerlink" title="7 编码问题"></a>7 编码问题</h4><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.autohome.com/news'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 一旦打印出来出现乱码问题</span><span class="token comment" spellcheck="true"># 方式一：手动设定编码格式</span>res<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'gb2312'</span><span class="token comment" spellcheck="true"># 方式二</span>res<span class="token punctuation">.</span>encoding<span class="token operator">=</span>res<span class="token punctuation">.</span>apparent_encoding<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h4 id="8-json解析"><a href="#8-json解析" class="headerlink" title="8 json解析"></a>8 json解析</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonrespone<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/index/'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'lqz'&amp;#125;)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>respone<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应的文本</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>respone<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 相当于上面那句话</span></code></pre><h4 id="9-使用代理"><a href="#9-使用代理" class="headerlink" title="9 使用代理"></a>9 使用代理</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># respone=requests.get('http://127.0.0.1:8000/index/',proxies=&amp;#123;'http':'代理的地址和端口号',&amp;#125;)</span><span class="token comment" spellcheck="true"># 代理，免费代理，收费代理花钱买</span><span class="token comment" spellcheck="true"># 代理池：列表放了一堆代理ip，每次随机取一个，再发请求就不会封ip了</span><span class="token comment" spellcheck="true"># 高匿和透明代理？如果使用高匿代理，后端无论如何拿不到你的ip，使用透明，后端能够拿到你的ip</span><span class="token comment" spellcheck="true"># 后端如何拿到透明代理的ip，  后端：X-Forwarded-For</span><span class="token comment" spellcheck="true"># respone=requests.get('https://www.baidu.com/',proxies=&amp;#123;'http':'27.46.20.226:8888',&amp;#125;)</span><span class="token comment" spellcheck="true"># print(respone.text)</span></code></pre><h4 id="10-其他操作"><a href="#10-其他操作" class="headerlink" title="10 其他操作"></a>10 其他操作</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 11 超时设置</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># respone=requests.get('https://www.baidu.com',</span><span class="token comment" spellcheck="true">#                      timeout=0.0001)</span><span class="token comment" spellcheck="true"># 12 认证设置（你见不到了）</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># r=requests.get('xxx',auth=('user','password'))</span><span class="token comment" spellcheck="true"># print(r.status_code)</span><span class="token comment" spellcheck="true"># 13 异常处理</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># from requests.exceptions import * #可以查看requests.exceptions获取异常类型</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># try:</span><span class="token comment" spellcheck="true">#     r=requests.get('http://www.baidu.com',timeout=0.00001)</span><span class="token comment" spellcheck="true"># # except ReadTimeout:</span><span class="token comment" spellcheck="true"># #     print('===:')</span><span class="token comment" spellcheck="true"># except Exception as e:</span><span class="token comment" spellcheck="true">#     print(e)</span><span class="token comment" spellcheck="true"># 14 上传文件</span><span class="token comment" spellcheck="true"># res=requests.post('http://127.0.0.1:8000/index/',files=&amp;#123;'myfile':open('a.jpg','rb')&amp;#125;)</span><span class="token comment" spellcheck="true"># print(res.text)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-发送请求&quot;&gt;&lt;a href=&quot;#1-发送请求&quot; class=&quot;headerlink&quot; title=&quot;1 发送请求&quot;&gt;&lt;/a&gt;1 发送请求&lt;/h4&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-pytho</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="python模块" scheme="http://huang_zhao.gitee.io/task/tags/python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题及解决</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
    <published>2020-03-15T05:33:43.000Z</published>
    <updated>2020-08-26T01:01:58.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、同源策略"><a href="#一、同源策略" class="headerlink" title="一、同源策略"></a>一、同源策略</h2><p>同源策略：请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同</p><p>比如:我在本地上的域名是127.0.0.1:8000,请求另外一个域名：127.0.0.1:8001一段数据</p><p>浏览器上就会报错，这就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险</p><h2 id="二、CORS（跨域资源共享）简介"><a href="#二、CORS（跨域资源共享）简介" class="headerlink" title="二、CORS（跨域资源共享）简介"></a>二、CORS（跨域资源共享）简介</h2><p><strong>服务端对某个来源的请求开放请求资源的接口，就是cors</strong></p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p><strong>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><h2 id="三、CORS两种请求详解"><a href="#三、CORS两种请求详解" class="headerlink" title="三、CORS两种请求详解"></a>三、CORS两种请求详解</h2><p>只要同时满足以下两大条件，就属于简单请求，只要其中一个不满足就是非简单请求</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""（1) 请求方法是以下三种方法之一：    HEAD    GET    POST"""</span><span class="token triple-quoted-string string">"""（2）HTTP的头信息不超出以下几种字段：    Accept    Accept-Language    Content-Language    Last-Event-ID    Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain"""</span></code></pre><p><strong>两种请求的区别</strong></p><ul><li>简单请求：一次请求</li><li>非简单请求：两次请求，会在数据请求发送之前，先发送一次‘预检’请求，如果通过了则可以发送真正的请求</li></ul><p><strong>预检</strong></p><pre class=" language-python"><code class="language-python"> <span class="token operator">=</span><span class="token operator">></span> 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过        Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Method <span class="token operator">=</span><span class="token operator">></span> 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过        Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Headers</code></pre><p><strong>支持跨域，简单请求</strong></p><p>服务器设置响应头：Access-Control-Allow-Origin = ‘域名’ 或 ‘*’</p><p><strong>支持跨域，复杂请求</strong></p><p>由于复杂请求时，首先会发送“预检”请求，如果“预检”成功，则发送真实数据。</p><ul><li>“预检”请求时，允许请求方式则需服务器设置响应头：Access-Control-Request-Method</li><li>“预检”请求时，允许请求头则需服务器设置响应头：Access-Control-Request-Headers</li></ul><h2 id="四、django中解决跨域的两种方式"><a href="#四、django中解决跨域的两种方式" class="headerlink" title="四、django中解决跨域的两种方式"></a>四、django中解决跨域的两种方式</h2><h3 id="1-自定义中间件"><a href="#1-自定义中间件" class="headerlink" title="1 自定义中间件"></a>1 自定义中间件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定制中间件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">class</span> <span class="token class-name">CorsMiddleWare</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">"OPTIONS"</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#可以加*</span>            response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Content-Type"</span>        response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://localhost:8080"</span>        <span class="token keyword">return</span> response</code></pre><h3 id="2-使用django-cors-headers-解决跨域问题"><a href="#2-使用django-cors-headers-解决跨域问题" class="headerlink" title="2 使用django-cors-headers 解决跨域问题"></a>2 使用django-cors-headers 解决跨域问题</h3><ul><li><p>安装：pip install django-cors-headers</p></li><li><p>注册app：’corsheaders’</p></li><li><p>添加中间件：’corsheaders.middleware.CorsMiddleware’,</p></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 基本配置</span>CORS_ALLOW_CREDENTIALS <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_ALLOW_ALL <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_WHITELIST <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'*'</span><span class="token punctuation">)</span>CORS_ALLOW_METHODS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'DELETE'</span><span class="token punctuation">,</span>    <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token string">'OPTIONS'</span><span class="token punctuation">,</span>    <span class="token string">'PATCH'</span><span class="token punctuation">,</span>    <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token string">'PUT'</span><span class="token punctuation">,</span>    <span class="token string">'VIEW'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>CORS_ALLOW_HEADERS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>    <span class="token string">'X_FILENAME'</span><span class="token punctuation">,</span>    <span class="token string">'accept-encoding'</span><span class="token punctuation">,</span>    <span class="token string">'authorization'</span><span class="token punctuation">,</span>    <span class="token string">'content-type'</span><span class="token punctuation">,</span>    <span class="token string">'dnt'</span><span class="token punctuation">,</span>    <span class="token string">'origin'</span><span class="token punctuation">,</span>    <span class="token string">'user-agent'</span><span class="token punctuation">,</span>    <span class="token string">'x-csrftoken'</span><span class="token punctuation">,</span>    <span class="token string">'x-requested-with'</span><span class="token punctuation">,</span>    <span class="token string">'Pragma'</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、同源策略&quot;&gt;&lt;a href=&quot;#一、同源策略&quot; class=&quot;headerlink&quot; title=&quot;一、同源策略&quot;&gt;&lt;/a&gt;一、同源策略&lt;/h2&gt;&lt;p&gt;同源策略：请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="跨域问题" scheme="http://huang_zhao.gitee.io/task/tags/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>sql搜索变慢的原因</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/15/sql%E6%90%9C%E7%B4%A2%E5%8F%98%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/15/sql%E6%90%9C%E7%B4%A2%E5%8F%98%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/</id>
    <published>2020-03-15T05:33:43.000Z</published>
    <updated>2020-08-26T01:13:13.169Z</updated>
    
    <content type="html"><![CDATA[<pre class=" language-mysql"><code class="language-mysql">mysql> CREATE TABLE `t_tweet` (  `id` int(11) NOT NULL,  `tweet_id` varchar(32) DEFAULT NULL,  `user_id` int(11) DEFAULT NULL,  `gmt_create` datetime DEFAULT NULL,  PRIMARY KEY (`id`),  KEY `tweet_id` (`tweet_id`),  KEY `gmt_create` (`gmt_create`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></pre><h5 id="1-用函数处理索引"><a href="#1-用函数处理索引" class="headerlink" title="1 用函数处理索引"></a>1 用函数处理索引</h5><p>Q：为什么条件是<code>where gmt_create=&#39;2018-7-1’</code>的时候可以用上索引，而改成<code>where month(gmt_create)=7</code>的时候就不行了？</p><p>A：sql搜索是根据B+树快速定位的，这种能力来源于同一层兄弟节点的有序性。</p><p>简单来说如果是<code>where gmt_create=&#39;2018-7-1’</code>那么根据节点的有序性，我们可以快速知道所要找的叶子节点的路径</p><p>如果是<code>where month(gmt_create)=7</code>，树在第一层就不知道如何判断子节点的走向，就会放弃树搜索功能，走全文遍历。</p><p>总结：对索引字段进行函数操作，会破坏索引的值的有序性</p><p>但并不是直接遍历主键了，优化器会对比两者之间的索引大小，最后还是会决定索引gmt_create</p><p><strong>优化器在某些问题上确实有“偷懒”行为，即使是对于不改变有序性的函数，也不会考虑使用索 引。</strong></p><p>比如，对于<code>select * from t_tweet where id + 1 = 10000</code>这个SQL语句，这个加1操作并不会改变有序性，但是MySQL优化器还是不能用id索引快速定位到9999这一行。所以，需要你在写 SQL语句的时候，手动改写成 <code>where id = 10000 -1</code>才可以。</p><h5 id="2-索引的数据类型需要类型转化"><a href="#2-索引的数据类型需要类型转化" class="headerlink" title="2 索引的数据类型需要类型转化"></a>2 索引的数据类型需要类型转化</h5><pre class=" language-python"><code class="language-python">select <span class="token operator">*</span> <span class="token keyword">from</span> t_tweet where tweet_id<span class="token operator">=</span><span class="token number">110717</span><span class="token punctuation">;</span></code></pre><p>通过上述索引我们会发现还是进行了全表扫描，可以看到我们传入的值是 110717是整形，但是表中字段需要的数据类型是varchar</p><p>这里有两个问题：</p><p>Q1：数据类型转化的规则是什么？</p><p>Q2：为什么有数据类型转换，就会走全表索引？</p><p>问题1的答案是当数字类型和字符类型比较时会把字符类型转化成整形做<strong>整形比较</strong></p><p>可以通过<code>select &#39;10&#39;&gt;9</code>如果返回1，则是转化成整形，如果返回0则是转化成字符串</p><p>所以问题2的答案也油然而生，这个语句写全了</p><pre class=" language-mysql"><code class="language-mysql">select * from t_tweet where CAST(tweet_id AS tweetId int) = 110717;</code></pre><p>本质上还是对字段做了函数操作，导致优化器放弃走树搜索功能</p><p>转自：<a href="https://juejin.im/post/6860513755000733709#heading-1">https://juejin.im/post/6860513755000733709#heading-1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot; language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;mysql&gt; CREATE TABLE `t_tweet` (  `id` int(11) NOT NULL,  `tweet_id` varchar(32) DE</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="http://huang_zhao.gitee.io/task/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>selenium基本使用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/15/selenium%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/15/selenium%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-15T05:33:43.000Z</published>
    <updated>2020-08-26T01:14:56.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ul><li>模块安装：<code>pip install selenium</code></li><li>驱动安装，安装和浏览器适配的驱动exe，放到解释器的script文件夹中（<a href="http://npm.taobao.org/mirrors/chromedriver/%EF%BC%89">http://npm.taobao.org/mirrors/chromedriver/）</a></li></ul><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 案例：打开百度输入搜索海贼王</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 得到一个谷歌浏览器驱动对象</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 隐式等待：页面中查找标签时等待，如果超出时间还没找到就报错</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>input_tag <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'海贼王'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># input_tag.send_keys(Keys.ENTER)</span>commit_tag <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span>commit_tag<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>所有方法</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ##############选择器（find系列）</span><span class="token comment" spellcheck="true"># ===============所有方法===================</span><span class="token comment" spellcheck="true"># 1、find_element_by_id   # 通过id查找控件</span><span class="token comment" spellcheck="true"># 2、find_element_by_link_text  # 通过a标签内容找</span><span class="token comment" spellcheck="true"># 3、find_element_by_partial_link_text  # 通过a标签内容找，模糊匹配</span><span class="token comment" spellcheck="true"># 4、find_element_by_tag_name   # 标签名</span><span class="token comment" spellcheck="true"># 5、find_element_by_class_name  # 类名</span><span class="token comment" spellcheck="true"># 6、find_element_by_name      # name属性</span><span class="token comment" spellcheck="true"># 7、find_element_by_css_selector  # 通过css选择器</span><span class="token comment" spellcheck="true"># 8、find_element_by_xpath       # 通过xpaht选择器</span>css选择中<span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取文本</span><span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::attr(href)'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取标签</span><span class="token comment" spellcheck="true"># 以上全都可以改成find_elements_xxx获取多个</span></code></pre><p><strong>获取属性</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重点</span><span class="token comment" spellcheck="true"># tag.get_attribute('href')  # 找当前控件 的href属性对的值</span><span class="token comment" spellcheck="true"># tag.text   # 获取文本内容</span><span class="token comment" spellcheck="true"># 了解</span><span class="token comment" spellcheck="true"># print(tag.id)   # 当前控件id号</span><span class="token comment" spellcheck="true"># print(tag.location)  # 当前控件在页面位置</span><span class="token comment" spellcheck="true"># print(tag.tag_name)  # 标签名</span><span class="token comment" spellcheck="true"># print(tag.size)      #标签的大小</span></code></pre><p><strong>其他</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">####无界面浏览器（phantomjs）</span><span class="token comment" spellcheck="true">#谷歌浏览器支持不打开页面</span><span class="token comment" spellcheck="true"># from selenium.webdriver.chrome.options import Options</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># chrome_options = Options()</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('window-size=1920x3000') #指定浏览器分辨率</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--disable-gpu') #谷歌文档提到需要加上这个属性来规避bug</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--hide-scrollbars') #隐藏滚动条, 应对一些特殊页面</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('blink-settings=imagesEnabled=false') #不加载图片, 提升速度</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--headless') #浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># bro=webdriver.Chrome(chrome_options=chrome_options,executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># bro.get('https://www.baidu.com/')</span><span class="token comment" spellcheck="true"># print(bro.page_source)</span><span class="token comment" spellcheck="true"># bro.close()</span><span class="token comment" spellcheck="true">######元素交互</span><span class="token comment" spellcheck="true"># tag.send_keys()  # 往里面写内容</span><span class="token comment" spellcheck="true"># tag.click()      # 点击控件</span><span class="token comment" spellcheck="true"># tag.clear()      # 清空控件内容</span><span class="token comment" spellcheck="true">#####执行js(有什么用?)</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># bro=webdriver.Chrome(executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># bro.implicitly_wait(5)  # 隐士等待：找一个控件，如果控件没有加载出来，等待5s中  等待所有，只需要写着一句，以后找所有控件都按这个操作来</span><span class="token comment" spellcheck="true"># bro.get('https://www.baidu.com/')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># bro.execute_script('window.open()')</span><span class="token comment" spellcheck="true"># bro.execute_script('window.open()')</span><span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token comment" spellcheck="true"># bro.close()</span><span class="token comment" spellcheck="true">####模拟浏览器前进后退</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># browser=webdriver.Chrome(executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># browser.get('https://www.baidu.com')</span><span class="token comment" spellcheck="true"># browser.get('https://www.taobao.com')</span><span class="token comment" spellcheck="true"># browser.get('http://www.sina.com.cn/')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># browser.back()</span><span class="token comment" spellcheck="true"># time.sleep(1)</span><span class="token comment" spellcheck="true"># browser.forward()</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># browser.close()</span><span class="token comment" spellcheck="true">#####获取cookie</span><span class="token comment" spellcheck="true"># bro.get_cookies()</span><span class="token comment" spellcheck="true">#### 选项卡管理(了解)</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># browser=webdriver.Chrome()</span><span class="token comment" spellcheck="true"># browser.get('https://www.baidu.com')</span><span class="token comment" spellcheck="true"># browser.execute_script('window.open()')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># print(browser.window_handles) #获取所有的选项卡</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[1])</span><span class="token comment" spellcheck="true"># browser.get('https://www.taobao.com')</span><span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[0])</span><span class="token comment" spellcheck="true"># browser.get('https://www.sina.com.cn')</span><span class="token comment" spellcheck="true"># browser.close()</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模块安装：&lt;code&gt;pip install selenium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;驱动安装，安装和</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>drf内置排序源码</title>
    <link href="http://huang_zhao.gitee.io/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/"/>
    <id>http://huang_zhao.gitee.io/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/</id>
    <published>2020-02-15T12:10:57.000Z</published>
    <updated>2020-08-26T00:58:50.274Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们要用排序，那么写的视图类就必须直接或间接继承ListModelMixin，因为其内部有帮我们排序的放方法</p><p>ListModelMixin</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用了视图类对象的filter_queryset方法</span>queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>但是我们视图类本身没有，根据orm查找顺序，我们就要看第一位父类</p><p>最后找到GenericAPIView的filter_queryset方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># filter_backends就是我们在视图类中写的drf内置的排序类</span>    <span class="token keyword">for</span> backend <span class="token keyword">in</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>filter_backends<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 实例化排序类对象，并调用它的filter_queryset方法</span>        queryset <span class="token operator">=</span> backend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token keyword">return</span> queryset<span class="token comment" spellcheck="true"># 视图类中我们是这样设置的</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>OrderingFilter<span class="token punctuation">]</span></code></pre><p>OrderingFilter的filter_queryset方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 调用了自己的get_ordering方法返回值应到是原本的queryset对象</span>    ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>get_ordering<span class="token punctuation">(</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span>    <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 下面是得到ordering的方法，返回的结果是('id', 'price')，直接通过这个排序</span>        <span class="token keyword">return</span> queryset<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token operator">*</span>ordering<span class="token punctuation">)</span>    <span class="token keyword">return</span> queryset</code></pre><p>OrderingFilter的get_ordering方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_ordering</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># ordering_param是在drf的配置文件中的字符串：ordering</span>    <span class="token comment" spellcheck="true"># params就是从url后ordering跟的排序字符串</span>    <span class="token comment" spellcheck="true"># params：‘id，name，price’</span>    params <span class="token operator">=</span> request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ordering_param<span class="token punctuation">)</span>    <span class="token keyword">if</span> params<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 通过一个列表生成式得到['id','name','price']</span>        fields <span class="token operator">=</span> <span class="token punctuation">[</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 通过内部remove_invalid_fields去移除fields中和视图类中设置不匹配的</span>        <span class="token comment" spellcheck="true"># 视图类是这样设置的ordering_fields = ('id', 'price')</span>        <span class="token comment" spellcheck="true"># 所以这里name是无效排序，就会通过这个方法移除</span>           ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>remove_invalid_fields<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> view<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>            <span class="token keyword">return</span> ordering</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果我们要用排序，那么写的视图类就必须直接或间接继承ListModelMixin，因为其内部有帮我们排序的放方法&lt;/p&gt;
&lt;p&gt;ListModelMixin&lt;/p&gt;
&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-py</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="drf" scheme="http://huang_zhao.gitee.io/task/tags/drf/"/>
    
    <category term="python函数" scheme="http://huang_zhao.gitee.io/task/tags/python%E5%87%BD%E6%95%B0/"/>
    
    <category term="面试" scheme="http://huang_zhao.gitee.io/task/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="源码" scheme="http://huang_zhao.gitee.io/task/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>drf☞jwt自动签发与手动签发</title>
    <link href="http://huang_zhao.gitee.io/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/"/>
    <id>http://huang_zhao.gitee.io/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/</id>
    <published>2020-02-15T07:33:45.000Z</published>
    <updated>2020-08-26T00:59:07.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、自动签发"><a href="#一、自动签发" class="headerlink" title="一、自动签发"></a>一、自动签发</h2><p><strong>urls</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token<span class="token comment" spellcheck="true"># 使用jwt自带的登录视图</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><strong>settings</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimeJWT_AUTH<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token comment" spellcheck="true"># 配置响应格式，必须和自动签发使用</span>  <span class="token string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span><span class="token punctuation">:</span><span class="token string">'app01.utils.my_jwt_response_payload_handler'</span><span class="token punctuation">,</span>    <span class="token string">'JWT_EXPIRATION_DELTA'</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 过期时间，手动配置</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><strong>utils</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重写jwt响应格式（需要到settings配置）</span><span class="token comment" spellcheck="true"># 与之配合使用的必须是自动签发</span><span class="token keyword">def</span> <span class="token function">my_jwt_response_payload_handler</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token operator">=</span>None<span class="token punctuation">,</span> request<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 返回什么，前端就能看到什么样子</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>        <span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'登录成功'</span><span class="token punctuation">,</span>        <span class="token string">'status'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>        <span class="token string">'username'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>username    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>然后直接在前端提交post请求发送账号和密码，会返回我们定义好的响应格式</p><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6Imh6IiwiZXhwIjoxNTk1NDE1MTEyLCJlbWFpbCI6IiJ9.BxBdsm6oBz8iPAwSSpo_7IaU4pBp6RjK4c0GJ_FYN1E"</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span>    <span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>然后拿出token对测试类发送测试请求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestAPI</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 因为内置的他没有对匿名用户设置拦截，素以匿名用户也能看到ok</span><span class="token comment" spellcheck="true"># 我们用request.user来区分</span><span class="token comment" spellcheck="true"># 这里可能会出现我登录了很多次，用每次不同的token都能登录</span><span class="token comment" spellcheck="true"># 这是因为token校验的是规则，是要加密规则符合且没有超时，那用哪次token都一样的</span></code></pre><h2 id="二、手动签发"><a href="#二、手动签发" class="headerlink" title="二、手动签发"></a>二、手动签发</h2><p><strong>utils</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> BaseJSONWebTokenAuthentication<span class="token punctuation">,</span>jwt_decode_handler<span class="token keyword">import</span> jwt<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> AuthenticationFailed<span class="token keyword">class</span> <span class="token class-name">MyAuthentication</span><span class="token punctuation">(</span>BaseJSONWebTokenAuthentication<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里重写的逻辑和BaseJSONWebTokenAuthentication里的authenticate一模一样</span>    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        jwt_token <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取浏览器传来的token</span>        <span class="token keyword">if</span> jwt_token<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                payload <span class="token operator">=</span> jwt_decode_handler<span class="token punctuation">(</span>jwt_token<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 传入token，拿出第二段用户信息,有内置的校验token功能</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>ExpiredSignature<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'签名过期'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>InvalidTokenError<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'用户非法'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 所有异常都会走到这</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 通过内置的方法把payload转换成用户对象</span>            user <span class="token operator">=</span> self<span class="token punctuation">.</span>authenticate_credentials<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">return</span> user<span class="token punctuation">,</span>None <span class="token comment" spellcheck="true"># ===》request.user,request.auth</span>        <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'您没有携带认证信息'</span><span class="token punctuation">)</span></code></pre><p><strong>sers</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true"># 多方序列化校验登录</span><span class="token keyword">import</span> re<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_encode_handler<span class="token punctuation">,</span>jwt_payload_handler<span class="token keyword">class</span> <span class="token class-name">LoginSer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 我们要提交校验数据的时候，如果直接用下面Meta绑定给模型类的话</span>    <span class="token comment" spellcheck="true"># 关键点2：这里如果不写username的话，序列化器直接用的是模型类的username</span>    <span class="token comment" spellcheck="true"># 这两者的区别在于，如果覆盖写了username，他表示的可以是任何前端传来的数据，如果是模型类绑定，那只能是用户名了</span>    <span class="token comment" spellcheck="true"># 我们这里username用于多方登录的校验数据，必须要重写</span>    <span class="token comment" spellcheck="true"># 而password不用重写，因为password用的就是模型类本身的</span>    username <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>User        fields <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> username<span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^1[3-9][0-9]&amp;#123;9&amp;#125;$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>mobile<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^.+@.+$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 邮箱</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>email<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> user<span class="token punctuation">:</span>                <span class="token keyword">if</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 关键点3：jwt_payload_handler把用户数据对象转化成用户信息的字典</span>                    <span class="token comment" spellcheck="true"># jwt_encode_handler把用户信息的字典转化成token</span>                    payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># print('user:',user,type(user))</span>                    token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># print('payload:',payload,type(payload))</span>                    <span class="token comment" spellcheck="true"># print('token:',token)</span>                    <span class="token comment" spellcheck="true"># 关键点4：如果我们要给序列化器添加数据，让视图函数去使用</span>                    <span class="token comment" spellcheck="true"># 通常都是传给对象的context属性,当然直接赋值也可以，这只是他给我们提供的传值接口</span>                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> token                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> user                    self<span class="token punctuation">.</span>user <span class="token operator">=</span> user                    <span class="token keyword">return</span> attrs                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'不存在用户'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span></code></pre><p><strong>views</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LoginApi</span><span class="token punctuation">(</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在调用序列化类给context传数据，可以直接在序列化类中调用</span>        <span class="token comment" spellcheck="true"># 关键点1：注意区分序列化传值与反序列化</span>        <span class="token comment" spellcheck="true"># 这里只要拿字典取校验数据，那就传给data</span>        <span class="token comment" spellcheck="true"># 如果是要把数据对象转化成字典就传给instance</span>        user_ser <span class="token operator">=</span> sers<span class="token punctuation">.</span>LoginSer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'request': request&amp;#125;)</span>        user_ser<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>user_ser<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 100, 'msg': '登录成功', 'token': token, 'username': user.username&amp;#125;)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、自动签发&quot;&gt;&lt;a href=&quot;#一、自动签发&quot; class=&quot;headerlink&quot; title=&quot;一、自动签发&quot;&gt;&lt;/a&gt;一、自动签发&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;urls&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot; language-python</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="drf" scheme="http://huang_zhao.gitee.io/task/tags/drf/"/>
    
    <category term="jwt" scheme="http://huang_zhao.gitee.io/task/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>魔法方法</title>
    <link href="http://huang_zhao.gitee.io/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://huang_zhao.gitee.io/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-01-25T02:30:17.000Z</published>
    <updated>2020-08-26T00:59:30.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-str"><a href="#一、-str" class="headerlink" title="一、__str__"></a>一、<code>__str__</code></h2><p>改变对象的字符串显示，可以理解为print打印对象的显示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token comment" spellcheck="true"># 定义对象的字符串表示</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>names1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 会调用s1的__str__方法</span><span class="token operator">>></span><span class="token operator">></span> 张三</code></pre><h2 id="二、-repr"><a href="#二、-repr" class="headerlink" title="二、__repr__"></a>二、<code>__repr__</code></h2><p>在python解释器环境下，会默认显示对象的repr表示。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s1张三</code></pre><p><strong>总结：</strong></p><p>str函数或者print函数调用的是obj.<strong>str</strong>()<br>repr函数或者交互式解释器调用的是obj.<strong>repr</strong>()</p><p>注意：<br>如果__str__没有被定义，那么就会使用__repr__来代替输出。<br>__str__和__repr__方法的返回值都必须是字符串。</p><h2 id="三、-format"><a href="#三、-format" class="headerlink" title="三、__format__"></a>三、<code>__format__</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    __format_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'n-a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&amp;#123;obj.name&amp;#125;-年龄是：&amp;#123;obj.age&amp;#125;'</span><span class="token punctuation">,</span>  # 名字是：lqz<span class="token operator">-</span>年龄是：<span class="token number">18</span>        <span class="token string">'n:a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&amp;#123;obj.name&amp;#125;：年龄是：&amp;#123;obj.age&amp;#125;'</span><span class="token punctuation">,</span>  # 名字是：lqz：年龄是：<span class="token number">18</span>        <span class="token string">'n/a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&amp;#123;obj.name&amp;#125;/年龄是：&amp;#123;obj.age&amp;#125;'</span><span class="token punctuation">,</span>  # 名字是：<span class="token operator">/</span>年龄是：<span class="token number">18</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">def</span> <span class="token function">__format__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_spec<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> format_spec <span class="token operator">or</span> format_spec <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">:</span>            format_spec <span class="token operator">=</span> <span class="token string">'n-a'</span>        fmt <span class="token operator">=</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">[</span>format_spec<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&amp;#123;obj.name&amp;#125;:&amp;#123;obj.age&amp;#125;</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span>format<span class="token punctuation">(</span>obj<span class="token operator">=</span>self<span class="token punctuation">)</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'lqz'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> format<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">'n/a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># lqz/24</span></code></pre><h2 id="四、-del"><a href="#四、-del" class="headerlink" title="四、__del__"></a>四、<code>__del__</code></h2><p>当对象的内存被施放的时候执行</p><p>注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除了...'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;__main__.A object at 0x10164fb00></span><span class="token keyword">del</span> a  <span class="token comment" spellcheck="true"># 删除了...</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># NameError: name 'a' is not defined</span></code></pre><h2 id="五、-dict-和-slots"><a href="#五、-dict-和-slots" class="headerlink" title="五、__dict__和__slots__"></a>五、<code>__dict__和__slots__</code></h2><p>Python中的类，都会从object里继承一个__dict__属性，这个属性中存放着类的属性和方法对应的键值对。一个类实例化之后，这个类的实例也具有这么一个__dict__属性。但是二者并不相同。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    some <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> numa <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'num': 10&amp;#125;</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'num': 10, 'age': 10&amp;#125;</span></code></pre><p>从上面的例子可以看出来，实例只保存实例的属性和方法，类的属性和方法它是不保存的。正是由于类和实例有__dict__属性，所以类和实例可以在运行过程动态添加属性和方法。</p><p>但是由于每实例化一个类都要分配一个__dict__变量，容易浪费内存。因此在Python中有一个内置的__slots__属性。当一个类设置了__slots__属性后，这个类的__dict__属性就不存在了（同理，该类的实例也不存在__dict__属性），如此一来，设置了__slots__属性的类的属性，只能是预先设定好的。</p><p>当你定义__slots__后，__slots__就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的小型数组来构建的，而不是为每个实例都定义一个__dict__字典，在__slots__中列出的属性名在内部被映射到这个数组的特定索引上。使用__slots__带来的副作用是我们没有办法给实例添加任何新的属性了。</p><p>注意：尽管__slots__看起来是个非常有用的特性，但是除非你十分确切的知道要使用它，否则尽量不要使用它。比如定义了__slots__属性的类就不支持多继承。__slots__通常都是作为一种优化工具来使用。–摘自《Python Cookbook》8.4</p><p>注意事项：<br>__slots__的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了__slots__后的类不再 支持一些普通类特性了,比如多继承。大多数情况下,你应该只在那些经常被使用到的用作数据结构的类上定义__slots__，比如在程序中需要创建某个类的几百万个实例对象 。<br>关于__slots__的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用__slots__可以达到这样的目的,但是这个并不是它的初衷。它更多的是用来作为一个内存优化工具。</p><h2 id="六、-item-、-attr-系列"><a href="#六、-item-、-attr-系列" class="headerlink" title="六、__item__、__attr__系列"></a>六、<code>__item__、__attr__系列</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj[key]=lqz赋值时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__delitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj[key]时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__delattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj.key时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.key = value的时候执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.get(key)的时候执行我'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">[</span>item<span class="token punctuation">]</span>f1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token string">'sb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>f1<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">'泡妞'</span><span class="token keyword">del</span> f1<span class="token punctuation">.</span>hobby<span class="token keyword">del</span> f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>f1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'lqz'</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></code></pre><h2 id="七、-init"><a href="#七、-init" class="headerlink" title="七、__init__"></a>七、<code>__init__</code></h2><p>使用Python写面向对象的代码的时候我们都会习惯性写一个 <strong>init</strong> 方法，<strong>init</strong> 方法通常用在初始化一个类实例的时候。例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: &amp;#123;&amp;#125;(&amp;#123;&amp;#125;)>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></code></pre><p>上面是<strong>init__最普通的用法了。但是__init__其实不是实例化一个类的时候第一个被调用的方法。当使用 Persion(name, age) 来实例化一个类时，最先被调用的方法其实是 __new</strong> 方法。</p><h2 id="八、-new"><a href="#八、-new" class="headerlink" title="八、__new__"></a>八、<code>__new__</code></h2><p>其实__init__是在类实例被创建之后调用的，它完成的是类实例的初始化操作，而 __new__方法正是创建这个类实例的方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__new__，创建类实例'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Person<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__init__，初始化实例'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: &amp;#123;&amp;#125;(&amp;#123;&amp;#125;)>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python">调用__new__，创建类实例调用__init__，初始化实例<span class="token operator">&lt;</span>Person<span class="token punctuation">:</span> 张三<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">></span></code></pre><p>__new__方法在类定义中不是必须写的，如果没定义的话默认会调用object.__new__去创建一个对象（因为创建类的时候默认继承的就是object）。</p><p>如果我们在类中定义了__new__方法，就是重写了默认的__new__方法，我们可以借此自定义创建对象的行为。</p><p>举个例子：</p><p>重写类的__new__方法来实现单例模式。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 重写__new__方法，实现每一次实例化的时候，返回同一个instance对象</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> ages1 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这两实例都一样</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h2 id="九、-call"><a href="#九、-call" class="headerlink" title="九、__call__"></a>九、<code>__call__</code></h2><p><strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象()。拥有此方法的对象可以像函数一样被调用。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用对象的__call__方法'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 类Person可调用</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对象a可以调用</span></code></pre><p><strong>注意：</strong> </p><p>__new__、__init__、__call__等方法都不是必须写的。</p><h2 id="十、-doc"><a href="#十、-doc" class="headerlink" title="十、__doc__"></a>十、<code>__doc__</code></h2><p>定义类的描述信息（注释）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""我是A类的描述信息"""</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span></code></pre><h2 id="十一、-iter-和-next"><a href="#十一、-iter-和-next" class="headerlink" title="十一、__iter__和__next__"></a>十一、<code>__iter__和__next__</code></h2><p>如果一个对象拥有了__iter__和__next__方法，那这个对象就是迭代器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> stop<span class="token punctuation">:</span>            start<span class="token punctuation">,</span> stop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start        self<span class="token punctuation">.</span>start <span class="token operator">=</span> start        self<span class="token punctuation">.</span>stop <span class="token operator">=</span> stop    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>start <span class="token operator">>=</span> self<span class="token punctuation">.</span>stop<span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration        n <span class="token operator">=</span> self<span class="token punctuation">.</span>start        self<span class="token punctuation">.</span>start <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> na <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterator<span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>a<span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>aaa<span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#抛异常</span></code></pre><h2 id="十二、-enter-和-exit"><a href="#十二、-enter-和-exit" class="headerlink" title="十二、__enter__和__exit__"></a>十二、<code>__enter__和__exit__</code></h2><p>一个对象如果实现了__enter__和___exit__方法，那么这个对象就支持上下文管理协议，即with语句</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块时执行此方法，此方法如果有返回值会赋值给as声明的变量'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'oo'</span>    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'退出with代码块时执行此方法'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> exc_type<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> exc_val<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token keyword">with</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># with语句中代码块出现异常，则with后的代码都无法执行。</span>    <span class="token comment" spellcheck="true"># raise AttributeError('sb')</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#f打印出oo</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'嘿嘿嘿'</span><span class="token punctuation">)</span></code></pre><h2 id="十三、-len"><a href="#十三、-len" class="headerlink" title="十三、__len__"></a>十三、<code>__len__</code></h2><p>拥有__len__方法的对象支持len(obj)操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十四、-hash"><a href="#十四、-hash" class="headerlink" title="十四、__hash__"></a>十四、<code>__hash__</code></h2><p>拥有__hash__方法的对象支持hash(obj)操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hash<span class="token punctuation">(</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十五、-eq"><a href="#十五、-eq" class="headerlink" title="十五、__eq__"></a>十五、<code>__eq__</code></h2><p>拥有__eq__方法的对象支持相等的比较操作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 打印出比较的第二个对象的x值</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span>self<span class="token punctuation">.</span>y <span class="token operator">==</span> obj<span class="token punctuation">.</span>x<span class="token operator">+</span>obj<span class="token punctuation">.</span>y<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>b <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、-str&quot;&gt;&lt;a href=&quot;#一、-str&quot; class=&quot;headerlink&quot; title=&quot;一、__str__&quot;&gt;&lt;/a&gt;一、&lt;code&gt;__str__&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;改变对象的字符串显示，可以理解为print打印对象的显示&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="面试" scheme="http://huang_zhao.gitee.io/task/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="python面向对象" scheme="http://huang_zhao.gitee.io/task/tags/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>python一些实用的小工具</title>
    <link href="http://huang_zhao.gitee.io/task/2019/07/25/python%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://huang_zhao.gitee.io/task/2019/07/25/python%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2019-07-25T05:00:11.000Z</published>
    <updated>2020-08-26T01:08:04.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、发送邮件"><a href="#一、发送邮件" class="headerlink" title="一、发送邮件"></a>一、发送邮件</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Headermsg_from <span class="token operator">=</span> <span class="token string">'572478035@qq.com'</span>  <span class="token comment" spellcheck="true"># 发送方邮箱</span>passwd <span class="token operator">=</span> <span class="token string">'ffaoofjltdfmbcic'</span>  <span class="token comment" spellcheck="true"># 填入发送方邮箱的授权码(填入自己的授权码，相当于邮箱密码)</span>msg_to <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'798818871@qq.com'</span><span class="token punctuation">,</span><span class="token string">'904925371@qq.com'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 收件人邮箱</span><span class="token comment" spellcheck="true"># msg_to = '616564099@qq.com'  # 收件人邮箱</span>subject <span class="token operator">=</span> <span class="token string">"邮件接口测试"</span>  <span class="token comment" spellcheck="true"># 主题</span>content <span class="token operator">=</span> <span class="token string">"邮件内容，我是邮件内容，哈哈哈"</span><span class="token comment" spellcheck="true"># 生成一个MIMEText对象（还有一些其它参数）</span>msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 放入邮件主题</span>msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject<span class="token comment" spellcheck="true"># 也可以这样传参</span><span class="token comment" spellcheck="true"># msg['Subject'] = Header(subject, 'utf-8')</span><span class="token comment" spellcheck="true"># 放入发件人</span>msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> msg_from<span class="token comment" spellcheck="true"># 放入收件人</span><span class="token comment" spellcheck="true"># msg['To'] = '616564099@qq.com'</span><span class="token comment" spellcheck="true"># msg['To'] = '发给你的邮件啊'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 通过ssl方式发送，服务器地址，端口</span>    s <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span><span class="token string">"smtp.qq.com"</span><span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 登录到邮箱</span>    s<span class="token punctuation">.</span>login<span class="token punctuation">(</span>msg_from<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送邮件：发送方，收件方，要发送的消息</span>    s<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>msg_from<span class="token punctuation">,</span> msg_to<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="二、生成二维码"><a href="#二、生成二维码" class="headerlink" title="二、生成二维码"></a>二、生成二维码</h2><h3 id="1-生成普通二维码"><a href="#1-生成普通二维码" class="headerlink" title="1 生成普通二维码"></a>1 生成普通二维码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> MyQR <span class="token keyword">import</span> myqr  <span class="token comment" spellcheck="true">#注意大小写</span>myqr<span class="token punctuation">.</span>run<span class="token punctuation">(</span>words<span class="token operator">=</span><span class="token string">"网址链接或者字符串，不支持中文"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 会在当前路径生成一个“qrcode.png”文件，扫描二维码就会跳转到指定路径</span></code></pre><h3 id="2-生成带图片的二维码"><a href="#2-生成带图片的二维码" class="headerlink" title="2 生成带图片的二维码"></a>2 生成带图片的二维码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> MyQR <span class="token keyword">import</span> myqrmyqr<span class="token punctuation">.</span>run<span class="token punctuation">(</span>    words<span class="token operator">=</span><span class="token string">'Why can Li Xiaotong be so beautiful'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 扫描二维码后，显示的内容，或是跳转的链接</span>    version<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 设置容错率</span>    level<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 控制纠错水平，范围是L、M、Q、H，从左到右依次升高</span>    picture<span class="token operator">=</span><span class="token string">'a.jpg'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 图片所在目录，可以是动图</span>    colorized<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 黑白(False)还是彩色(True)</span>    contrast<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 用以调节图片的对比度，1.0 表示原始图片。默认为1.0。</span>    brightness<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 用来调节图片的亮度，用法同上。</span>    save_name<span class="token operator">=</span><span class="token string">'二维码.png'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 控制输出文件名，格式可以是 .jpg， .png ，.bmp ，.gif</span><span class="token punctuation">)</span></code></pre><h3 id="3-支持汉字生成二维码"><a href="#3-支持汉字生成二维码" class="headerlink" title="3 支持汉字生成二维码"></a>3 支持汉字生成二维码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> qrcodeqr <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>QRCode<span class="token punctuation">(</span>version<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                          error_correction<span class="token operator">=</span>qrcode<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>ERROR_CORRECT_L<span class="token punctuation">,</span>                          box_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>                          border<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加数据</span>qr<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成二维码</span>qr<span class="token punctuation">.</span>make<span class="token punctuation">(</span>fit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>img <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># image.save(r"C:\Desktop\s.png")</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、发送邮件&quot;&gt;&lt;a href=&quot;#一、发送邮件&quot; class=&quot;headerlink&quot; title=&quot;一、发送邮件&quot;&gt;&lt;/a&gt;一、发送邮件&lt;/h2&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-pytho</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="模块" scheme="http://huang_zhao.gitee.io/task/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API规范</title>
    <link href="http://huang_zhao.gitee.io/task/2019/05/15/RESTful%20API%E8%A7%84%E8%8C%83/"/>
    <id>http://huang_zhao.gitee.io/task/2019/05/15/RESTful%20API%E8%A7%84%E8%8C%83/</id>
    <published>2019-05-15T07:11:23.000Z</published>
    <updated>2020-08-26T01:11:35.233Z</updated>
    
    <content type="html"><![CDATA[<p>这是一种web api接口的设计风格，比较适用于前后端分离的项目，它的特点就是一切数据都是资源。</p><p>与编程语言无关，任何一个框架都可以使用这种规范。</p><h2 id="一、数据的安全保障"><a href="#一、数据的安全保障" class="headerlink" title="一、数据的安全保障"></a>一、数据的安全保障</h2><p>url链接一般采用https进行传输，相比于http更加安全</p><h2 id="二、接口特征表现"><a href="#二、接口特征表现" class="headerlink" title="二、接口特征表现"></a>二、接口特征表现</h2><p>用api关键字表示接口url：</p><ul><li><a href="https://api.baidu.com/">https://api.baidu.com</a></li><li><a href="https://www.baidu.com/api">https://www.baidu.com/api</a></li></ul><h2 id="三、多数据版本共存"><a href="#三、多数据版本共存" class="headerlink" title="三、多数据版本共存"></a>三、多数据版本共存</h2><p>在url链接中标识数据版本</p><ul><li><a href="https://api.baidu.com/v1">https://api.baidu.com/v1</a></li><li><a href="https://api.baidu.com/v2">https://api.baidu.com/v2</a></li></ul><p>v1，v2就相当于我们不同版本对应同样请求的接口</p><h2 id="四、数据即资源，均使用名词（可复数）"><a href="#四、数据即资源，均使用名词（可复数）" class="headerlink" title="四、数据即资源，均使用名词（可复数）"></a>四、数据即资源，均使用名词（可复数）</h2><ul><li><p>接口一般都是完成前后台数据的交互，交互的数据我们称之为资源</p><ul><li><a href="https://api.baidu.com/users">https://api.baidu.com/users</a></li><li><a href="https://api.baidu.com/books">https://api.baidu.com/books</a></li><li><a href="https://api.baidu.com/book">https://api.baidu.com/book</a></li></ul><p>注：一般提倡用资源的复数形式，在url链接中奖励不要出现操作资源的动词，错误示范：<a href="https://api.baidu.com/delete-user">https://api.baidu.com/delete-user</a></p></li><li><p>特殊的接口可以出现动词，因为这些接口一般没有一个明确的资源，或是动词就是接口的核心含义</p><ul><li><a href="https://api.baidu.com/place/search">https://api.baidu.com/place/search</a></li><li><a href="https://api.baidu.com/login">https://api.baidu.com/login</a></li></ul></li></ul><h2 id="五、资源操作由请求方式决定"><a href="#五、资源操作由请求方式决定" class="headerlink" title="五、资源操作由请求方式决定"></a>五、资源操作由请求方式决定</h2><p>操作资源一般都会涉及到增删改查，我们提供请求方式来标识增删改查动作</p><ul><li><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - get请求：获取所有书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - get请求：获取主键为1的书</li><li><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - post请求：新增一本书书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - put请求：整体修改主键为1的书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - patch请求：局部修改主键为1的书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - delete请求：删除主键为1的书</li></ul><h2 id="六、可以通过url后的参数过滤"><a href="#六、可以通过url后的参数过滤" class="headerlink" title="六、可以通过url后的参数过滤"></a>六、可以通过url后的参数过滤</h2><ul><li><a href="https://api.example.com/v1/zoos?limit=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E6%95%B0%E9%87%8F">https://api.example.com/v1/zoos?limit=10：指定返回记录的数量</a></li><li><a href="https://api.example.com/v1/zoos?offset=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E5%BC%80%E5%A7%8B%E4%BD%8D%E7%BD%AE">https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置</a></li><li><a href="https://api.example.com/v1/zoos?page=2&amp;per_page=100%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E9%A1%B5%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%AF%8F%E9%A1%B5%E7%9A%84%E8%AE%B0%E5%BD%95%E6%95%B0">https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数</a></li><li><a href="https://api.example.com/v1/zoos?sortby=name&amp;order=asc%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%8C%89%E7%85%A7%E5%93%AA%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E9%A1%BA%E5%BA%8F">https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</a></li><li><a href="https://api.example.com/v1/zoos?animal_type_id=1%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6">https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件</a></li></ul><h2 id="七、响应状态码"><a href="#七、响应状态码" class="headerlink" title="七、响应状态码"></a>七、响应状态码</h2><h3 id="1-正常响应"><a href="#1-正常响应" class="headerlink" title="1 正常响应"></a>1 正常响应</h3><ul><li>响应状态码2xx<ul><li>200：常规请求</li><li>201：创建成功</li></ul></li></ul><h3 id="2-重定向响应"><a href="#2-重定向响应" class="headerlink" title="2 重定向响应"></a>2 重定向响应</h3><ul><li>响应状态码3xx<ul><li>301：永久重定向</li><li>302：暂时重定向</li></ul></li></ul><h3 id="3-客户端异常"><a href="#3-客户端异常" class="headerlink" title="3 客户端异常"></a>3 客户端异常</h3><ul><li>响应状态码4xx<ul><li>403：请求无权限</li><li>404：请求路径不存在</li><li>405：请求方法不存在</li></ul></li></ul><h3 id="4-服务器异常"><a href="#4-服务器异常" class="headerlink" title="4 服务器异常"></a>4 服务器异常</h3><ul><li>响应状态码5xx<ul><li>500：服务器异常</li></ul></li></ul><h2 id="八、-错误处理，应返回错误信息，error当做key"><a href="#八、-错误处理，应返回错误信息，error当做key" class="headerlink" title="八、 错误处理，应返回错误信息，error当做key"></a>八、 错误处理，应返回错误信息，error当做key</h2><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    error<span class="token punctuation">:</span> <span class="token string">"无权限操作"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="九、根据操作的不同，返回不同的数据格式"><a href="#九、根据操作的不同，返回不同的数据格式" class="headerlink" title="九、根据操作的不同，返回不同的数据格式"></a>九、根据操作的不同，返回不同的数据格式</h2><pre class=" language-python"><code class="language-python">GET <span class="token operator">/</span>collection：返回资源对象的列表（数组）GET <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回单个资源对象POST <span class="token operator">/</span>collection：返回新生成的资源对象PUT <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回完整的资源对象PATCH <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回完整的资源对象DELETE <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回一个空文档</code></pre><h2 id="十、可以在数据中携带需要请求资源的url地址"><a href="#十、可以在数据中携带需要请求资源的url地址" class="headerlink" title="十、可以在数据中携带需要请求资源的url地址"></a>十、可以在数据中携带需要请求资源的url地址</h2><pre class=" language-json"><code class="language-json"># Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么&amp;#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>      <span class="token property">"results"</span><span class="token operator">:</span><span class="token punctuation">[</span>        &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"肯德基(罗餐厅)"</span><span class="token punctuation">,</span>            <span class="token property">"img"</span><span class="token operator">:</span> <span class="token string">"https://image.baidu.com/kfc/001.png"</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>          ...        <span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>比较好的接口返回</p><pre class=" language-json"><code class="language-json"># 响应数据要有状态码、状态信息以及数据本身&amp;#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>      <span class="token property">"results"</span><span class="token operator">:</span><span class="token punctuation">[</span>        &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"肯德基(罗餐厅)"</span><span class="token punctuation">,</span>            <span class="token property">"location"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"lat"</span><span class="token operator">:</span><span class="token number">31.415354</span><span class="token punctuation">,</span>                <span class="token property">"lng"</span><span class="token operator">:</span><span class="token number">121.357339</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token property">"address"</span><span class="token operator">:</span><span class="token string">"月罗路2380号"</span><span class="token punctuation">,</span>            <span class="token property">"province"</span><span class="token operator">:</span><span class="token string">"上海市"</span><span class="token punctuation">,</span>            <span class="token property">"city"</span><span class="token operator">:</span><span class="token string">"上海市"</span><span class="token punctuation">,</span>            <span class="token property">"area"</span><span class="token operator">:</span><span class="token string">"宝山区"</span><span class="token punctuation">,</span>            <span class="token property">"street_id"</span><span class="token operator">:</span><span class="token string">"339ed41ae1d6dc320a5cb37c"</span><span class="token punctuation">,</span>            <span class="token property">"telephone"</span><span class="token operator">:</span><span class="token string">"(021)56761006"</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"uid"</span><span class="token operator">:</span><span class="token string">"339ed41ae1d6dc320a5cb37c"</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>          ...        <span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是一种web api接口的设计风格，比较适用于前后端分离的项目，它的特点就是一切数据都是资源。&lt;/p&gt;
&lt;p&gt;与编程语言无关，任何一个框架都可以使用这种规范。&lt;/p&gt;
&lt;h2 id=&quot;一、数据的安全保障&quot;&gt;&lt;a href=&quot;#一、数据的安全保障&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="resfulapi" scheme="http://huang_zhao.gitee.io/task/tags/resfulapi/"/>
    
  </entry>
  
  <entry>
    <title>python奇闻杂技</title>
    <link href="http://huang_zhao.gitee.io/task/2019/03/15/python%E5%A5%87%E9%97%BB%E6%9D%82%E6%8A%80/"/>
    <id>http://huang_zhao.gitee.io/task/2019/03/15/python%E5%A5%87%E9%97%BB%E6%9D%82%E6%8A%80/</id>
    <published>2019-03-15T06:33:43.000Z</published>
    <updated>2020-08-26T01:09:44.990Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、eval函数"><a href="#一、eval函数" class="headerlink" title="一、eval函数"></a>一、eval函数</h2><p>eval()可以传三个参数，第一个参数用于计算，后面两个参数用于表达第一个参数的名称空间</p><p>当后两个参数都为空时，很好理解，就是一个string类型的算术表达式，计算出结果即可。等价于eval(expression)。</p><p>当locals参数为空，globals参数不为空时，先查找globals参数中是否存在变量，并计算。</p><p>当两个参数都不为空时，先查找locals参数，再查找globals参数。</p><p>1、简单表达式</p><p>print(eval(‘1+2’))</p><p>输出结果：3</p><p>2、字符串转字典</p><p>print(eval(“{‘name’:’linux’,’age’:18}”)</p><p>输出结果：{‘name’:’linux’,’age’:18}</p><p>3、传递全局变量</p><p>print(eval(“{‘name’:’linux’,’age’:age}”,{“age”:1822}))</p><p>输出结果：{‘name’: ‘linux’, ‘age’: 1822}</p><p>4、传递本地变量</p><p>age=18</p><p>print(eval(“{‘name’:’linux’,’age’:age}”,{“age”:1822},locals()))</p><p>输出结果：{‘name’: ‘linux’, ‘age’: 18}</p><p><strong>总结</strong>：eval最简单的用法就是去掉参数最外层的引号并执行剩下的yu’ju，比如把a=’123’转化成整形，eval也可以传表达式，比如print，input，复杂的甚至可以执行系统命令，删除数据等，所以使用时需要进行限制</p><h2 id="二、保留字（关键字）"><a href="#二、保留字（关键字）" class="headerlink" title="二、保留字（关键字）"></a>二、保留字（关键字）</h2><p>被编程语言内部定义保留使用的标识符</p><p>if elif等。。。</p><h2 id="三、turtle画笔模块"><a href="#三、turtle画笔模块" class="headerlink" title="三、turtle画笔模块"></a>三、turtle画笔模块</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token comment" spellcheck="true"># 窗体生成的宽，高，位置</span>turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 落笔的位置</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画笔大小</span>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画笔颜色</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 线条的角度</span>turtle<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 一次画的角度，长度</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直线长度</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/1.png" alt="1" loading="lazy"></p><h2 id="四、json模块版本问题"><a href="#四、json模块版本问题" class="headerlink" title="四、json模块版本问题"></a>四、json模块版本问题</h2><p>json.loads转化bytes类型，3.6以上可以，3.5不可以</p><h2 id="五、jieba库"><a href="#五、jieba库" class="headerlink" title="五、jieba库"></a>五、jieba库</h2><p>jieba库能对中文分词，有三种分词模式</p><p>精确模式：把文本精确的分开，不存在冗余单词</p><p>全模式：把文本中所有可能的词语都扫描出来，有冗余</p><p>搜索引擎模式：在精确模式基础上，对长词再次切分</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">jieba.lcut(s)</td><td align="center">精确模式，返回一个列表类型的分词结果</td></tr><tr><td align="center">jieba.lcut(s,cut_all=True)</td><td align="center">全模式，返回一个列表模式的分词结果，存在冗余</td></tr><tr><td align="center">jieba.lcut_for_serch(s)</td><td align="center">搜索引擎模式，返回一个列表类型的分词结果，存在冗余</td></tr><tr><td align="center">jieba.add_word(w)</td><td align="center">向分词词典添加新词w</td></tr></tbody></table><pre class=" language-PYTHON"><code class="language-PYTHON">import jiebajieba.lcut("中国是一个伟大的国家")Building prefix dict from the default dictionary ...Loading model from cache /var/folders/mh/krrg51957cqgl0rhgnwyylvc0000gn/T/jieba.cacheLoading model cost 0.979 seconds.Prefix dict has been built succesfully.['中国', '是', '一个', '伟大', '的', '国家']jieba.lcut("中国是一个伟大的国家",cut_all=True)['中国', '国是', '一个', '伟大', '的', '国家']jieba.lcut("中华人民共和国是伟大的")['中华人民共和国', '是', '伟大', '的']jieba.lcut("中华人民共和国是伟大的",cut_all=True)['中华', '中华人民', '中华人民共和国', '华人', '人民', '人民共和国', '共和', '共和国', '国是', '伟大', '的']jieba.lcut_for_search("中华人民共和国是伟大的")['中华', '华人', '人民', '共和', '共和国', '中华人民共和国', '是', '伟大', '的']jieba.add_word("蟒蛇语言")</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、eval函数&quot;&gt;&lt;a href=&quot;#一、eval函数&quot; class=&quot;headerlink&quot; title=&quot;一、eval函数&quot;&gt;&lt;/a&gt;一、eval函数&lt;/h2&gt;&lt;p&gt;eval()可以传三个参数，第一个参数用于计算，后面两个参数用于表达第一个参数的名称空间&lt;/</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
</feed>
