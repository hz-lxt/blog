<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工藤旧二の博客</title>
  
  
  <link href="http://huang_zhao.gitee.io/task/atom.xml" rel="self"/>
  
  <link href="http://huang_zhao.gitee.io/task/"/>
  <updated>2020-09-13T14:47:27.295Z</updated>
  <id>http://huang_zhao.gitee.io/task/</id>
  
  <author>
    <name>爱肖彤真是太好了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Typescript入门，基本数据类型</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/13/Typescript%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/13/Typescript%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</id>
    <published>2020-09-13T14:47:11.000Z</published>
    <updated>2020-09-13T14:47:27.295Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1 基本介绍"></a>1 基本介绍</h3><p>ts是js的超集，是目前前端必备的基础，包含了es5，es6的语法</p><p>也可以集成到vue中</p><p>安装：cnpm install -g typescript</p><p>查看版本：tsc -v</p><p>语言类型：静态弱类型</p><p>无法直接在浏览器运行，需要编译成js代码</p><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h3><h4 id="2-1-如何配置自动编译"><a href="#2-1-如何配置自动编译" class="headerlink" title="2.1 如何配置自动编译"></a>2.1 如何配置自动编译</h4><p>使用idev：vscode</p><p>在vscode中在项目下cmd窗口输入<code>tsc --init</code>就会自动生成一个.json的配置文件</p><p>修改配置文件中</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认是注释的解开注释即可</span><span class="token string">"outDir"</span><span class="token punctuation">:</span> <span class="token string">"./js"</span><span class="token comment" spellcheck="true">// 会把编译完成的ts代码放到js目录下的文件中</span></code></pre><p>然后点击终端–typescript–监视配置文件</p><p>如果报错9成是因为tsc权限不足</p><p>解决方式：以管理员方式打开cmd</p><p>输入<code>set-ExecutionPolicy RemoteSigned</code></p><p>再输入A或者Y即可</p><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3 数据类型"></a>3 数据类型</h3><h4 id="3-1-数据类型定义"><a href="#3-1-数据类型定义" class="headerlink" title="3.1 数据类型定义"></a>3.1 数据类型定义</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 布尔类型 boolean</span><span class="token keyword">let</span> boo<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// let关键字 变量名:变量类型 = 值</span></code></pre><h4 id="3-2-数字类型-number"><a href="#3-2-数字类型-number" class="headerlink" title="3.2 数字类型(number)"></a>3.2 数字类型(number)</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123.3</span><span class="token comment" spellcheck="true">// 数值类型包括整形和浮点型</span></code></pre><h4 id="3-3-字符类型（string）"><a href="#3-3-字符类型（string）" class="headerlink" title="3.3 字符类型（string）"></a>3.3 字符类型（string）</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> str<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"hz"</span></code></pre><h4 id="3-4-数组类型（array）"><a href="#3-4-数组类型（array）" class="headerlink" title="3.4 数组类型（array）"></a>3.4 数组类型（array）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 数组在定义的时候必须指定内部的类型</span><span class="token comment" spellcheck="true">// 第一种定义方式</span><span class="token keyword">let</span> test_arry1<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span><span class="token keyword">let</span> test_arry2<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"lxt"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 推荐用双引号</span><span class="token comment" spellcheck="true">// 第二种定义方式</span><span class="token keyword">let</span> test_arry3<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 第三种定义方式</span><span class="token comment" spellcheck="true">// 通过any类型就可以放任意类型</span><span class="token keyword">let</span> arr<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">]</span></code></pre><h4 id="3-5-元组类型（tuple）"><a href="#3-5-元组类型（tuple）" class="headerlink" title="3.5 元组类型（tuple）"></a>3.5 元组类型（tuple）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可以定义内部类型的数组，必须一一对应</span><span class="token comment" spellcheck="true">// 元组类型（数组的一种）</span><span class="token keyword">let</span> test_arry4<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"nb"</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h4 id="3-6-枚举类型（enum）"><a href="#3-6-枚举类型（enum）" class="headerlink" title="3.6 枚举类型（enum）"></a>3.6 枚举类型（enum）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 枚举类型，相当于创建一种新的类型，通过标识符和数值的对应来表示值类</span><span class="token comment" spellcheck="true">// 用于标识一种状态</span><span class="token keyword">enum</span> Flag <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>success<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token number">2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> f<span class="token punctuation">:</span>Flag <span class="token operator">=</span> Flag<span class="token punctuation">.</span>success console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Flag<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2 </span><span class="token comment" spellcheck="true">// 如果枚举类型没有定义值，打印的就是索引值</span><span class="token keyword">enum</span> Color <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>red<span class="token punctuation">,</span>blue<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>green<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> c<span class="token punctuation">:</span>Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>redconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6 如果上一个对应值不是索引，就会按照上一个值递增1</span></code></pre><h4 id="3-7-任意类型（any）"><a href="#3-7-任意类型（any）" class="headerlink" title="3.7 任意类型（any）"></a>3.7 任意类型（any）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 任意类型 any</span><span class="token keyword">let</span> data<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">123</span>data <span class="token operator">=</span> <span class="token string">'123'</span><span class="token comment" spellcheck="true">// 任意类型的用途</span><span class="token comment" spellcheck="true">// 当我们需要用变量接受一个对象时，js中是可以直接接受</span><span class="token comment" spellcheck="true">// 必须指定any</span><span class="token keyword">let</span> oBox<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>oBox<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span></code></pre><h4 id="3-8-其他类型（never类型）的子类型"><a href="#3-8-其他类型（never类型）的子类型" class="headerlink" title="3.8 其他类型（never类型）的子类型"></a>3.8 其他类型（never类型）的子类型</h4><p>代表从不会出现的值</p><p>以为这never类型的变量只能被类型所赋值</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 其他类型（never类型）的子类型</span><span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">// num此时只能被赋值undefined</span><span class="token keyword">var</span> num<span class="token punctuation">:</span>undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果被赋值就是number类型，没赋值就是undefined类型</span><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// null</span><span class="token comment" spellcheck="true">// undefined可以不赋值是因为他不仅可以作为类型，也可以作为值，而null不一样，如果要定义null类型就必须赋值null值</span><span class="token keyword">var</span> num1<span class="token punctuation">:</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 综合运用</span><span class="token comment" spellcheck="true">// 如果我们对一个值的类型不能确定，不仅可以用any，也可以用|分隔可能出现的类型</span><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>num <span class="token operator">=</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// null</span>num <span class="token operator">=</span> <span class="token number">123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span></code></pre><h4 id="3-9-void表示没有任何类型"><a href="#3-9-void表示没有任何类型" class="headerlink" title="3.9 void表示没有任何类型"></a>3.9 void表示没有任何类型</h4><p>一般用于定义方法的时候没有任何返回值</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 表示这个方法没有返回值</span><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'456'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果一个方法有返回值，就指定返回值类型</span><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1 基本介绍&quot;&gt;&lt;/a&gt;1 基本介绍&lt;/h3&gt;&lt;p&gt;ts是js的超集，是目前前端必备的基础，包含了es5，es6的语法&lt;/p&gt;
&lt;p&gt;也可以集成到vue中&lt;/p</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts基础" scheme="http://huang_zhao.gitee.io/task/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议查漏补缺</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/13/HTTP%E5%8D%8F%E8%AE%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/13/HTTP%E5%8D%8F%E8%AE%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</id>
    <published>2020-09-13T05:20:11.000Z</published>
    <updated>2020-09-13T14:49:49.586Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、HTTP协议版本区别"><a href="#一、HTTP协议版本区别" class="headerlink" title="一、HTTP协议版本区别"></a>一、HTTP协议版本区别</h3><ul><li>0.9 远古版本，只有一个GET命令，只支持纯文本</li><li>1.1 主流版本<ul><li>引入了持久链接，通过请求头中的<code> keep-alive</code>来设置</li><li>引入了管道机制，同一个tcp链接可以同时发送多个请求</li><li>支持断点续传，请求头中的<code> range</code>来实现</li><li>使用了虚拟网络，一个物理机上可以存在多个虚拟主机，共享一个ip地址</li></ul></li><li>2.0 先进版本<ul><li>二进制分帧：头信息和数据体都是二进制</li><li>头部压缩：在1.1版本头部信息会偏重，而body只有几十个字节，通过HPACK算法进行亚索</li><li>多路复用：一个TCP链接，哭护短和浏览器都可以同时发出多个请求，不用按顺序一一对应，解决了队头阻塞的问题</li><li>请求优先级：可以设置数据帧的优先级，让服务器先处理重要的请求</li></ul></li></ul><h3 id="二、状态码"><a href="#二、状态码" class="headerlink" title="二、状态码"></a>二、状态码</h3><ul><li>1xx：代表请求已经被接受，需要后续处理</li><li>2xx：表示成功</li><li>3xx：重定向状态</li><li>4xx：客户端有误</li><li>5xx：服务器错误</li></ul><h4 id="1xx-信息类"><a href="#1xx-信息类" class="headerlink" title="1xx 信息类"></a>1xx 信息类</h4><p>接受的请求正在处理，信息类状态码</p><h4 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx 成功"></a>2xx 成功</h4><ul><li><p>200 OK 表示从客户端发来的请求在服务器端被正确请求。</p></li><li><p>204 No content，表示请求成功，但没有资源可返回。</p></li><li><p>206 Partial Content，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求 响应报文中包含由 <strong>「Content-Range」</strong> 指定范围的实体内容。</p></li></ul><h4 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h4><ul><li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL，这时应该按 Location 首部字段提示的 URI 重新保存。</li><li>302 found，临时性重定向，表示资源临时被分配了新的 URL。</li><li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源。</li><li>304 not modified，当协商缓存命中时会返回这个状态码。</li><li>307 temporary redirect，临时重定向，和302含义相同,不会改变method</li></ul><p>注意区分：301（永久重定向），302（临时重定向）</p><h4 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx 客户端错误"></a>4xx 客户端错误</h4><ul><li>400 bad request，请求报文存在语法错误。</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息。</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝，可能遇到跨站请求伪造</li><li>404 not found，表示在服务器上没有找到请求的资源，可能是网址输错了</li><li>405 Method Not Allowed，服务器禁止使用该方法，客户端可以通过options方法来查看服务器允许的访问方法，可能遇到了cors，跨域问题</li></ul><h4 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx 服务器错误"></a>5xx 服务器错误</h4><ul><li>500 internal sever error，表示服务器端在执行请求时发生了错误。</li><li>502 Bad Gateway，服务器自身是正常的，访问的时候出了问题，具体啥错误我们不知道。</li><li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求。</li></ul><h3 id="三、HTTP的缓存策略"><a href="#三、HTTP的缓存策略" class="headerlink" title="三、HTTP的缓存策略"></a>三、HTTP的缓存策略</h3><h4 id="1-强缓存"><a href="#1-强缓存" class="headerlink" title="1 强缓存"></a>1 强缓存</h4><p>两个关键字段：Expires，Cache-Control</p><p>HTTP1.0版本，使用的是Expires，HTTP1.1使用的是Cache-Control</p><ul><li>Expires表示过期时间，时间是相对于服务器时间而言，所以可能因为服务器和客户端时间不一致而出错</li><li>Cache-Control 表示过期时长，从现在开始多少秒过期，这样就避免了两端时间不一致的问题</li></ul><p>注意点：</p><ul><li>当Expires和Cache-Control同时存在时，优先考虑Cache-Control。</li><li>当然了，当缓存资源失效了，也就是没有命中强缓存，接下来就进入协商缓存👇</li></ul><h4 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2 协商缓存"></a>2 协商缓存</h4><p>强缓存失效后，浏览器就会在请求头中携带响应的缓存Tag向服务器发送请求，服务器根据tag决定是否使用缓存</p><p>缓存分成两种：<strong>「Last-Modified」</strong> 和 <strong>「ETag」</strong></p><h5 id="2-1-Last-Modified"><a href="#2-1-Last-Modified" class="headerlink" title="2.1 Last-Modified"></a>2.1 Last-Modified</h5><p>表示最后修改时间，第一次请求的时候，服务器的响应头会带上这个参数，然后这个参数会在下一次缓存未命中的时候加入到请求头改为：<strong>If-Modified-Since</strong>，key不同，但是value相同，服务器拿到这个字段后，就会和请求资源的最后修改时间对比</p><ul><li>如果请求头的时间更久远，说明这个数据已经发生了改变就要跟新这个缓存了，返回新的资源</li><li>否则返回304告诉浏览器直接使用缓存</li></ul><h5 id="2-2-ETag"><a href="#2-2-ETag" class="headerlink" title="2.2 ETag"></a>2.2 ETag</h5><p>本质就是对请求的资源通过md5算法运算，生成的结果哪怕动了一个字节都算是修改，存储和请求方式和上面相似</p><p>浏览器接受到ETag值，会在下次请求的时候，将这个值作为<strong>「If-None-Match」</strong>这个字段的内容，发给服务器。</p><p>服务器接收到<strong>「If-None-Match」</strong>后，会跟服务器上该资源的<strong>「ETag」</strong>进行比对👇</p><ul><li>如果两者一样的话，直接返回304，告诉浏览器直接使用缓存</li><li>如果不一样的话，说明内容更新了，返回新的资源，跟常规的HTTP请求响应的流程一样</li></ul><h5 id="2-3-总结："><a href="#2-3-总结：" class="headerlink" title="2.3 总结："></a>2.3 总结：</h5><p>协商缓存的两种方式</p><ul><li>性能上：Last-Modified更好，因为etag需要运算</li><li>精度上：etag更好，比如说某个资源文件，只是touch了一下，并没有修改内容，在修改时间上是更新了，但是本质上内容没变。</li><li>如果两种方式都支持，优先考虑etag</li></ul><h4 id="3-缓存位置"><a href="#3-缓存位置" class="headerlink" title="3 缓存位置"></a>3 缓存位置</h4><p>总结来说：大的js，css缓存是放在磁盘中，一些小的资源类是放在内存中</p><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h4><ul><li><p>首先检查<code>Cache-Control</code>， 尝鲜，看强缓存是否可用</p></li><li><p>如果可用的话，直接使用</p></li><li><p>否则进入协商缓存，发送HTTP请求，服务器通过请求头中的<code>If-Modified-Since</code>或者<code>If-None-Match</code>字段检查资源是否更新</p></li><li><p>资源更新，返回资源和200状态码。</p></li><li><p>否则，返回304，直接告诉浏览器直接从缓存中去资源。</p></li></ul><h3 id="四、HTTP和HTTPS"><a href="#四、HTTP和HTTPS" class="headerlink" title="四、HTTP和HTTPS"></a>四、HTTP和HTTPS</h3><p>HTTPS不是一个行的应用层协议，本质是HTTP+TLS/SSL协议的组合，保证安全性是SSL/TLS的工作</p><ul><li>SSL：安全套接层2</li><li>TLS：传输层安全（非对称加密）</li></ul><p>HTTPS的关键：</p><ul><li>对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全;</li><li>对网站服务器进行真实身份认证。</li></ul><h3 id="五、短轮询，长轮询，WebSocket"><a href="#五、短轮询，长轮询，WebSocket" class="headerlink" title="五、短轮询，长轮询，WebSocket"></a>五、短轮询，长轮询，WebSocket</h3><h4 id="1-短轮询"><a href="#1-短轮询" class="headerlink" title="1 短轮询"></a>1 短轮询</h4><p>通过不断建立http请求，无论数据是否有更新都直接响应</p><p>优缺点：</p><ul><li>优点：简单</li><li>缺点：大量浪费资源</li></ul><h4 id="2-长轮询"><a href="#2-长轮询" class="headerlink" title="2 长轮询"></a>2 长轮询</h4><p>接受到请求不会直接响应，先把这个请求挂起，判断服务端数据是否有更新</p><p>如果有更新就响应，没有更新就等一会再返回</p><p>优缺点：</p><ul><li>优点：比短轮询节省了资源</li><li>缺点：挂起也会导致资源的浪费</li></ul><h4 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3 WebSocket"></a>3 WebSocket</h4><p>WebSocket 是 Html5 定义的一个新协议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。</p><p>使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息。</p><h3 id="六、正向代理和反向代理"><a href="#六、正向代理和反向代理" class="headerlink" title="六、正向代理和反向代理"></a>六、正向代理和反向代理</h3><p>正向代理：</p><p>我要去找马云借钱，但是直接找马云他不会给我，我可以通过花呗找马云借钱，隐藏的是我（客户端）</p><p>反向代理：</p><p>输入<a href="http://www.baidu.com,我们不知道是哪台服务器为我们工作,但是只要能访问到就行,隐藏的是服务器/">www.baidu.com，我们不知道是哪台服务器为我们工作，但是只要能访问到就行，隐藏的是服务器</a></p><p>一般反向代理用于实现服务器的负载均衡</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、HTTP协议版本区别&quot;&gt;&lt;a href=&quot;#一、HTTP协议版本区别&quot; class=&quot;headerlink&quot; title=&quot;一、HTTP协议版本区别&quot;&gt;&lt;/a&gt;一、HTTP协议版本区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;0.9 远古版本，只有一个GET命令，只支持纯文</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="协议，查漏补缺" scheme="http://huang_zhao.gitee.io/task/tags/%E5%8D%8F%E8%AE%AE%EF%BC%8C%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    
  </entry>
  
  <entry>
    <title>支付宝网页支付接口调用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-26T01:05:37.429Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、SDK-API接口的调用"><a href="#一、SDK-API接口的调用" class="headerlink" title="一、SDK/API接口的调用"></a>一、SDK/API接口的调用</h2><p>支付宝平台不提供python的sdk，只有api，我们可以去网上找别人封装好的sdk，复制过来，了解对应参数</p><p>可以通过支付宝提供的软件自动生成公钥和私钥</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment" spellcheck="true"># app_private_key_string = open("/path/to/your/private/key.pem").read()</span><span class="token comment" spellcheck="true"># alipay_public_key_string = open("/path/to/alipay/public/key.pem").read()</span>app_private_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN RSA PRIVATE KEY-----你的私钥-----END RSA PRIVATE KEY-----"""</span>alipay_public_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN PUBLIC KEY-----支付宝平台创建的应用的公钥-----END PUBLIC KEY-----"""</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 创建应用的appid</span>    appid<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token string">'http://127.0.0.1:8000/home/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># the default notify path</span>    <span class="token comment" spellcheck="true"># 配置你的私钥</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># alipay public key, do not use your own public key!</span>    <span class="token comment" spellcheck="true"># 配置应用的公钥</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 加密方式</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># RSA or RSA2</span>    <span class="token comment" spellcheck="true"># 调试模式，如果用真实环境就要改成True</span>    debug<span class="token operator">=</span><span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># False by default</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 支付宝的网关接口</span>alipay_url<span class="token operator">=</span><span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span><span class="token comment" spellcheck="true"># 生成支付页面</span>order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>    out_trade_no<span class="token operator">=</span><span class="token string">"20161112www4334"</span><span class="token punctuation">,</span>    total_amount<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">,</span>    subject<span class="token operator">=</span><span class="token string">'韩红版充气娃娃'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 商品名称</span>    <span class="token comment" spellcheck="true"># 提交get请求的url</span>    return_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 提交post请求的url</span>    notify_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成支付链接</span><span class="token keyword">print</span><span class="token punctuation">(</span>alipay_url<span class="token operator">+</span>order_string<span class="token punctuation">)</span></code></pre><p>这里内部有很多配置信息，可以把配置信息提取出来放到settings文件中，解耦合</p><h2 id="二、项目中调用支付接口"><a href="#二、项目中调用支付接口" class="headerlink" title="二、项目中调用支付接口"></a>二、项目中调用支付接口</h2><p>前端点击立即购买，把后端所需要的参数发送给后端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayView</span><span class="token punctuation">(</span>GenericViewSet<span class="token punctuation">,</span> CreateModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 登录jwt认证</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span>JSONWebTokenAuthentication<span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 防止游客登录</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAuthenticated<span class="token punctuation">,</span> <span class="token punctuation">]</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> sers<span class="token punctuation">.</span>OrderSerializer    <span class="token comment" spellcheck="true"># 重写create方法</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'request': request&amp;#125;)</span>        <span class="token comment" spellcheck="true"># 通过序列化类去校验数据，保存数据到数据库，生成支付宝链接</span>        <span class="token comment" spellcheck="true"># 主要逻辑都在序列化类中</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 等同于ser.save（）</span>        self<span class="token punctuation">.</span>perform_create<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回支付宝支付链接</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pay_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>序列化类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">OrderSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 前端传什么数据过来&amp;#123;course:[1,2,3],total_amount:100,subject:xx商品,pay_type:1,&amp;#125;</span>    <span class="token comment" spellcheck="true"># user字段需要，但是不是传的，使用了jwt</span>    <span class="token comment" spellcheck="true"># 需要把course:[1,2,3] 处理成 course:[obj1,obj2,obj3]</span>    <span class="token comment" spellcheck="true"># 课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    <span class="token comment" spellcheck="true"># course=serializers.CharField()</span>    <span class="token keyword">from</span> course<span class="token punctuation">.</span>models <span class="token keyword">import</span> Course    <span class="token comment" spellcheck="true"># 这个方法可以让课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    course<span class="token operator">=</span>serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Course<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Order        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'total_amount'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">,</span><span class="token string">'pay_type'</span><span class="token punctuation">,</span><span class="token string">'course'</span><span class="token punctuation">]</span>        extra_kwargs<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'total_amount'</span><span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'required':True&amp;#125;,</span>            <span class="token string">'pay_type'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'required': True&amp;#125;,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">def</span> <span class="token function">_check_price</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        total_amount<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'total_amount'</span><span class="token punctuation">)</span>        course_list<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        total_price<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            total_price<span class="token operator">+=</span>course<span class="token punctuation">.</span>price        <span class="token keyword">if</span> total_price<span class="token operator">!=</span>total_amount<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'价格不合法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> total_amount    <span class="token keyword">def</span> <span class="token function">_gen_out_trade_no</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> uuid        <span class="token keyword">return</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 需要request对象(需要视图通过context把reuqest对象传入。重写create方法)</span>        request<span class="token operator">=</span>self<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> request<span class="token punctuation">.</span>user    <span class="token keyword">def</span> <span class="token function">_gen_pay_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>subject<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># total_amout是Decimal类型，识别不了，需要转换成float类型</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay<span class="token punctuation">,</span>gateway        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>            out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">,</span>            total_amount<span class="token operator">=</span>float<span class="token punctuation">(</span>total_amout<span class="token punctuation">)</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span>subject<span class="token punctuation">,</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># get回调，前台地址（最后跳转的支付成功页面）</span>            notify_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>NOTIFY_URL   <span class="token comment" spellcheck="true"># post回调，后台地址（给后端去判断是否支付成功，支付成功返回success）</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span> gateway<span class="token operator">+</span>order_string    <span class="token keyword">def</span> <span class="token function">_before_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token operator">=</span>user        attrs<span class="token punctuation">[</span><span class="token string">'out_trade_no'</span><span class="token punctuation">]</span><span class="token operator">=</span>out_trade_no        self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'pay_url'</span><span class="token punctuation">]</span><span class="token operator">=</span>pay_url    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        # 1）订单总价校验        # 2）生成订单号        # 3）支付用户：request.user        # 4）支付链接生成        # 5）入库(两个表)的信息准备        '''</span>        <span class="token comment" spellcheck="true"># 1）订单总价校验</span>        total_amout <span class="token operator">=</span> self<span class="token punctuation">.</span>_check_price<span class="token punctuation">(</span>attrs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2）生成订单号</span>        out_trade_no<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_out_trade_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3）支付用户：request.user</span>        user<span class="token operator">=</span>self<span class="token punctuation">.</span>_get_user<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 4）支付链接生成</span>        pay_url<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_pay_url<span class="token punctuation">(</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'subject'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5）入库(两个表)的信息准备</span>        self<span class="token punctuation">.</span>_before_create<span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span>        <span class="token keyword">return</span> attrs    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        course_list<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            models<span class="token punctuation">.</span>OrderDetail<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>order<span class="token operator">=</span>order<span class="token punctuation">,</span>course<span class="token operator">=</span>course<span class="token punctuation">,</span>price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">,</span>real_price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        <span class="token keyword">return</span> order</code></pre><p>支付成功后，前端会直接跳转到支付成功的页面，支付宝会向后端发送post请求，让我们验证所有的信息是否正确</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        支付宝回调接口        '''</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>logger <span class="token keyword">import</span> log        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        out_trade_no<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        gmt_payment<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gmt_payment'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        signature <span class="token operator">=</span> data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 验证签名</span>        success <span class="token operator">=</span> alipay<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>data<span class="token punctuation">,</span> signature<span class="token punctuation">)</span>        <span class="token keyword">if</span> success <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"trade_status"</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"TRADE_SUCCESS"</span><span class="token punctuation">,</span> <span class="token string">"TRADE_FINISHED"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>order_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>pay_time<span class="token operator">=</span>gmt_payment<span class="token punctuation">)</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单支付成功'</span><span class="token operator">%</span>out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单有问题'</span> <span class="token operator">%</span> out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span></code></pre><p>前端到了支付成功的页面，其实也不完全是支付成功，因为还没有得到后端的确认，所以可以发送一个get请求去校验一下是否成功</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        out_trade_no<span class="token operator">=</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> order<span class="token punctuation">.</span>order_status<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、SDK-API接口的调用&quot;&gt;&lt;a href=&quot;#一、SDK-API接口的调用&quot; class=&quot;headerlink&quot; title=&quot;一、SDK/API接口的调用&quot;&gt;&lt;/a&gt;一、SDK/API接口的调用&lt;/h2&gt;&lt;p&gt;支付宝平台不提供python的sdk，只有a</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="第三方接口" scheme="http://huang_zhao.gitee.io/task/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Xpath基本用法</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-26T01:01:48.059Z</updated>
    
    <content type="html"><![CDATA[<p>XPath 是一门在 XML 文档中查找信息的语言，本质上和bs4差不多</p><p>主要选取节点的表达式是<code>/</code>和<code>//</code>组成</p><p>教程：<a href="https://www.runoob.com/xpath/xpath-syntax.html">https://www.runoob.com/xpath/xpath-syntax.html</a></p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">nodename</td><td align="left">选取此节点的所有子节点。</td></tr><tr><td align="left">/</td><td align="left">从根节点选取。</td></tr><tr><td align="left">//</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td align="left">.</td><td align="left">选取当前节点。</td></tr><tr><td align="left">..</td><td align="left">选取当前节点的父节点。</td></tr><tr><td align="left">@</td><td align="left">选取属性。</td></tr></tbody></table><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">bookstore</td><td align="left">选取 bookstore 元素的所有子节点。</td></tr><tr><td align="left">/bookstore</td><td align="left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">bookstore/book</td><td align="left">选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td align="left">//book</td><td align="left">选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="left">bookstore//book</td><td align="left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td align="left">//@lang</td><td align="left">选取名为 lang 的所有属性。</td></tr></tbody></table><pre class=" language-python"><code class="language-python">doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story li">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span></code></pre><p>测试案例：</p><pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 所有节点，列表包含一个个tag对象</span><span class="token comment" spellcheck="true"># a = html.xpath('//*')</span><span class="token comment" spellcheck="true"># 在body下的所有b标签（包含子子孙孙）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//b')</span><span class="token comment" spellcheck="true"># 在bdoy下的子标签中的b标签（只有子标签）</span><span class="token comment" spellcheck="true"># a = html.xpath('body/b')</span><span class="token comment" spellcheck="true"># 属性匹配,只能完全匹配，如果有多个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]')</span><span class="token comment" spellcheck="true"># 属性匹配模糊，只要有就能匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li")]')</span><span class="token comment" spellcheck="true"># 多属性匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li") or @id="my_p"]')</span><span class="token comment" spellcheck="true"># 获取当前标签的文本（不包含其子节点内部的）（列表）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/text()')</span><span class="token comment" spellcheck="true"># 获取标签的属性</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/@id')</span><span class="token comment" spellcheck="true"># 索引取出一个标签（注意第一个就是【1】不是0｝）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[1]/text()')</span><span class="token comment" spellcheck="true"># 取出最后一个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()]/text()')</span><span class="token comment" spellcheck="true"># 取出位置小于3的</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[position()&lt;3]')</span><span class="token comment" spellcheck="true"># 取出倒数第二个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()-2]')</span><span class="token comment" spellcheck="true"># 11 节点轴选择</span><span class="token comment" spellcheck="true"># ancestor：祖先节点</span><span class="token comment" spellcheck="true"># 使用了* 获取所有祖先节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::*')</span><span class="token comment" spellcheck="true"># # 获取祖先节点中的div</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::div')</span><span class="token comment" spellcheck="true"># attribute：属性值</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/attribute::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/@aa')</span><span class="token comment" spellcheck="true"># child：直接子节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::img/@src')</span><span class="token comment" spellcheck="true"># descendant：所有子孙节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::h5/text()')</span><span class="token comment" spellcheck="true"># following:当前节点之后所有节点(兄弟节点和兄弟内部的节点)</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*[1]/@href')</span><span class="token comment" spellcheck="true"># following-sibling:当前节点之后同级节点（只找兄弟）</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::a')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]/@href')</span></code></pre><h3 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文本</span>a <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'body//p[1]/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性值</span>a<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>'<span class="token operator">//</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>@href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 要注意，如果我们是找到一个标签再通过这个标签进行xpath筛选</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示还是从根往下找</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示从当前标签位置为根往下找</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;XPath 是一门在 XML 文档中查找信息的语言，本质上和bs4差不多&lt;/p&gt;
&lt;p&gt;主要选取节点的表达式是&lt;code&gt;/&lt;/code&gt;和&lt;code&gt;//&lt;/code&gt;组成&lt;/p&gt;
&lt;p&gt;教程：&lt;a href=&quot;https://www.runoob.com/xpath/x</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>celery基础</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/celery/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/celery/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-26T01:02:17.121Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、celery介绍"><a href="#一、celery介绍" class="headerlink" title="一、celery介绍"></a>一、celery介绍</h2><p>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></p><p>Celery 官方文档英文版：<a href="http://docs.celeryproject.org/en/latest/index.html">http://docs.celeryproject.org/en/latest/index.html</a></p><p>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></p><ul><li>异步任务框架</li><li>执行异步任务</li><li>执行延迟任务</li><li>执行定时任务</li></ul><h2 id="二、celery架构"><a href="#二、celery架构" class="headerlink" title="二、celery架构"></a>二、celery架构</h2><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/007S8ZIlgy1ggqw0f7bltj30q80c174d.jpg" alt="007S8ZIlgy1ggqw0f7bltj30q80c174d" loading="lazy"></p><h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p><h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>异步执行：解决耗时任务,将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p><p>延迟执行：解决延迟任务</p><p>定时执行：解决周期(周期)任务,比如每天数据统计</p><h2 id="三、celery使用"><a href="#三、celery使用" class="headerlink" title="三、celery使用"></a>三、celery使用</h2><p>安装：<code>pip install celery</code></p><p>根据celery架构，我们可以看出，worker就像是一个工人，一直在工作，如果有工作的时候就会从broker（Redist）里去拿过来执行，并放到pakend（redist）中存放结果</p><h3 id="方式一：在一个文件夹内的三个页面"><a href="#方式一：在一个文件夹内的三个页面" class="headerlink" title="方式一：在一个文件夹内的三个页面"></a>方式一：在一个文件夹内的三个页面</h3><p><strong>worker执行页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celery<span class="token comment" spellcheck="true"># broker存储的位置</span>broker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span><span class="token comment" spellcheck="true"># backend存储的位置</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化的celery对象</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要添加的任务</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><p><strong>broker提交任务的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> add<span class="token comment" spellcheck="true"># 执行这个文件，就是把这个任务添加到数据库中，只要worker在工作</span><span class="token comment" spellcheck="true"># 就会把这个任务从数据库1中拿出来执行，并把结果放到数据库2中</span>ret <span class="token operator">=</span> add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ret 是这个任务的uuid，用于获取任务结果</span></code></pre><p><strong>backend获取任务结果的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> app<span class="token keyword">from</span> celery<span class="token punctuation">.</span>result <span class="token keyword">import</span> AsyncResult<span class="token comment" spellcheck="true"># 任务对象的唯一标识：uuid</span>id <span class="token operator">=</span> <span class="token string">'19dc2faa-39f9-47b6-af77-e9d3a4d05d2e'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    async1 <span class="token operator">=</span> AsyncResult<span class="token punctuation">(</span>id<span class="token operator">=</span>id<span class="token punctuation">,</span> app<span class="token operator">=</span>app<span class="token punctuation">)</span>    <span class="token keyword">if</span> async1<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> async1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>failed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务失败'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'PENDING'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务等待中被执行'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'RETRY'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务异常后正在重试'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'STARTED'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务已经开始被执行'</span><span class="token punctuation">)</span></code></pre><h3 id="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"><a href="#方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）" class="headerlink" title="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"></a>方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）</h3><p>创建一个celery项目（包），内部必须含有名字为celery的py文件，在内部创建celery对象</p><p><strong>celery.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task1'</span><span class="token punctuation">,</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>编写需要添加的任务也在这个包内，可创建不同的任务文件，可添加多个</p><p><strong>task1.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><h3 id="执行延迟任务"><a href="#执行延迟任务" class="headerlink" title="执行延迟任务"></a>执行延迟任务</h3><p>添加任务页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 执行延迟任务就是多个一个时间参数</span><span class="token comment" spellcheck="true"># 这里注意，时间参数是根据utc时间，并不是中国时间</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token comment" spellcheck="true"># 时间对象必须和时间对象相加</span>eta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>add<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eta<span class="token operator">=</span>eta<span class="token punctuation">)</span></code></pre><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>celery页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.tasks.low'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A pc_celery -l info</span><span class="token comment" spellcheck="true"># celery -A pc_celery worker -l info -P eventlet</span></code></pre><h2 id="四、django中配置celery"><a href="#四、django中配置celery" class="headerlink" title="四、django中配置celery"></a>四、django中配置celery</h2><p>celery包最好放在根路径下</p><p><strong>添加定时任务</strong></p><p>celery.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 配置django配置</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'luffyapi.settings.dev'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置celery的worker环境</span><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化worker对象app，用include添加定时任务</span>app<span class="token operator">=</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.task2.update_banner'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token comment" spellcheck="true"># 'args': (),</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A celery_task -l info</span></code></pre><p><strong>task定时任务</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token comment" spellcheck="true"># 每三秒跟新一次缓存</span><span class="token comment" spellcheck="true"># 添加一个任务，celery内设定间隔时间3秒</span><span class="token comment" spellcheck="true"># 任务内去cache跟新banner_list，从数据库中拿到banner放到cache中的banner_list中</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>models <span class="token keyword">import</span> Banner<span class="token comment" spellcheck="true"># from luffyapi.settings import const</span><span class="token comment" spellcheck="true"># [OrderedDict(</span><span class="token comment" spellcheck="true">#     [('image', 'http://127.0.0.1:8000/media/banner/banner1.png'), ('link', '/free-courses'), ('name', 'banner1')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner2.png'), ('link', '/light-courses'), ('name', 'banner2')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner3.png'), ('link', '/actual-courses'), ('name', 'banner3')])]</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>sers <span class="token keyword">import</span> BannerSer@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">update_banner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Banner<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>is_delete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    banner_ser <span class="token operator">=</span> BannerSer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> banner <span class="token keyword">in</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">:</span>        banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000'</span> <span class="token operator">+</span> banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>    cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'更新banner成功'</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、celery介绍&quot;&gt;&lt;a href=&quot;#一、celery介绍&quot; class=&quot;headerlink&quot; title=&quot;一、celery介绍&quot;&gt;&lt;/a&gt;一、celery介绍&lt;/h2&gt;&lt;p&gt;Celery 官网：&lt;a href=&quot;http://www.celerypr</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="异步任务框架" scheme="http://huang_zhao.gitee.io/task/tags/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Redis管道，位图，geo，HyperLogLog，发布订阅</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/23/Redis%E7%AE%A1%E9%81%93%EF%BC%8C%E4%BD%8D%E5%9B%BE%EF%BC%8Cgeo%EF%BC%8CHyperLogLog%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/23/Redis%E7%AE%A1%E9%81%93%EF%BC%8C%E4%BD%8D%E5%9B%BE%EF%BC%8Cgeo%EF%BC%8CHyperLogLog%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</id>
    <published>2020-04-23T12:13:11.000Z</published>
    <updated>2020-09-13T14:51:52.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、慢查询"><a href="#一、慢查询" class="headerlink" title="一、慢查询"></a>一、慢查询</h2><p>因为redis是个单线程架构，所以只要有慢查询夯住会非常影响性能，在生产环境中应该避免出现慢查询或者限制慢查询</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis.conf</span>slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than<span class="token operator">=</span><span class="token number">0</span>，记录所有命令slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span>不记录任何命令<span class="token comment" spellcheck="true"># 也可以直接在链接过程中修改配置</span>config get slowlog<span class="token operator">-</span>max<span class="token operator">-</span>len<span class="token operator">=</span><span class="token number">128</span> <span class="token comment" spellcheck="true"># 慢查询最大接收数</span>Config get slowly<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than<span class="token operator">=</span><span class="token number">10000</span> <span class="token comment" spellcheck="true"># 接受小于1毫秒的命令</span></code></pre><p>总结：</p><ol><li>slowlog-max-len 不要设置过大，默认10ms，通常设置1ms</li><li>slowlog-log-slower-than不要设置过小，通常设置1000左右</li><li>理解命令生命周期</li><li>定期持久化慢查询</li></ol><h2 id="二、pipline和watch"><a href="#二、pipline和watch" class="headerlink" title="二、pipline和watch"></a>二、pipline和watch</h2><h3 id="1-pipline"><a href="#1-pipline" class="headerlink" title="1 pipline"></a>1 pipline</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pipline在redis命令中不支持，但是在编程语言中支持</span><span class="token comment" spellcheck="true"># 其实就是批量执行命令的一种方式，redis命令可以用事务来实现这种功能</span><span class="token comment" spellcheck="true"># 客户端实现</span><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'10.211.55.4'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># pipe = r.pipeline(transaction=False)</span><span class="token comment" spellcheck="true">#创建pipeline</span>pipe <span class="token operator">=</span> r<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span>transaction<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#开启事务</span>pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'lqz'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#其他代码，可能出异常</span>pipe<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'role'</span><span class="token punctuation">,</span> <span class="token string">'nb'</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-原生事务"><a href="#2-原生事务" class="headerlink" title="2 原生事务"></a>2 原生事务</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> multi <span class="token comment" spellcheck="true"># 开启事务后所有的命令都会放到Quee中，直到执行exec结束事务才会执行</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">exec</span> </code></pre><h3 id="3-watch"><a href="#3-watch" class="headerlink" title="3 watch"></a>3 watch</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis中可以通过watch实现乐观锁</span><span class="token comment" spellcheck="true"># 演示：watch一个key，在开启事务后可以修改这个key，但是如果在事务外同时有修改这个key的请求，再修改事务中的key就会失败</span></code></pre><h2 id="三、位图"><a href="#三、位图" class="headerlink" title="三、位图"></a>三、位图</h2><p>因为redis可以通过byte进行存储，归属字符类型，所以可以通过bitmap做一些操作：独立用户统计</p><p>需要用户量非常大大概一亿左右的用户量才会和用集合存储有差别</p><pre class=" language-python"><code class="language-python">set hello big <span class="token comment" spellcheck="true">#放入key位hello 值为big的字符串</span>getbit hello <span class="token number">0</span> <span class="token comment" spellcheck="true">#取位图的第0个位置，返回0</span>getbit hello <span class="token number">1</span> <span class="token comment" spellcheck="true">#取位图的第1个位置，返回1 如上图</span><span class="token comment" spellcheck="true">##我们可以直接操纵位</span>setbit key offset value <span class="token comment" spellcheck="true">#给位图指定索引设置值</span>setbit hello <span class="token number">7</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#把hello的第7个位置设为1 这样，big就变成了cig</span>setbit test <span class="token number">50</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#test不存在，在key为test的value的第50位设为1，那其他位都以0补</span>bitcount key <span class="token punctuation">[</span>start end<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#获取位图指定范围(start到end,单位为字节,注意按字节一个字节8个bit为，如果不指定就是获取全部)位值为1的个数</span>bitop op destkey key <span class="token punctuation">[</span>key<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#做多个Bitmap的and(交集)/or(并集)/not(非)/xor(异或)，操作并将结果保存在destkey中 </span>bitop <span class="token operator">and</span> after_lqz lqz lqz2 <span class="token comment" spellcheck="true">#把lqz和lqz2按位与操作，放到after_lqz中</span>bitpos key targetBit start end <span class="token comment" spellcheck="true">#计算位图指定范围(start到end，单位为字节，如果不指定是获取全部)第一个偏移量对应的值等于targetBit的位置</span>bitpos lqz <span class="token number">1</span> <span class="token comment" spellcheck="true">#big 对应位图中第一个1的位置，在第二个位置上，由于从0开始返回1</span>bitpos lqz <span class="token number">0</span> <span class="token comment" spellcheck="true">#big 对应位图中第一个0的位置，在第一个位置上，由于从0开始返回0</span>bitpos lqz <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">#返回9：返回从第一个字节到第二个字节之间 第一个1的位置，看上图，为9</span></code></pre><h2 id="四、HyperLogLog"><a href="#四、HyperLogLog" class="headerlink" title="四、HyperLogLog"></a>四、HyperLogLog</h2><p>本质：布隆过滤器</p><p>存储数据量极小，只有存在和不存在的状态，本身内容无法读取</p><p>百万级独立用户统计，但是可能会出错，可以做日活用户统计</p><p>实际上就三个操作：添加，合并，统计</p><pre class=" language-python"><code class="language-python">pfadd key element <span class="token comment" spellcheck="true">#向hyperloglog添加元素,可以同时添加多个</span>pfcount key <span class="token comment" spellcheck="true">#计算hyperloglog的独立总数</span>pfmerge destroy sourcekey1 sourcekey2<span class="token comment" spellcheck="true">#合并多个hyperloglog，把sourcekey1和sourcekey2合并为destroy</span>pfadd uuids <span class="token string">"uuid1"</span> <span class="token string">"uuid2"</span> <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span> <span class="token comment" spellcheck="true">#向uuids中添加4个uuid</span>pfcount uuids <span class="token comment" spellcheck="true">#返回4</span>pfadd uuids <span class="token string">"uuid1"</span> <span class="token string">"uuid5"</span><span class="token comment" spellcheck="true">#有一个之前存在了，其实只把uuid5添加了</span>pfcount uuids <span class="token comment" spellcheck="true">#返回5</span>pfadd uuids1 <span class="token string">"uuid1"</span> <span class="token string">"uuid2"</span> <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span>pfadd uuids2 <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span> <span class="token string">"uuid5"</span> <span class="token string">"uuid6"</span>pfmerge uuidsall uuids1 uuids2 <span class="token comment" spellcheck="true">#合并</span>pfcount uuidsall <span class="token comment" spellcheck="true">#统计个数 返回6</span></code></pre><h2 id="五、geo"><a href="#五、geo" class="headerlink" title="五、geo"></a>五、geo</h2><p>根据经纬度计算距离，统计范围内的人</p><p>操作：添加，获取（地理位置，两地距离），查看范围内的人</p><pre class=" language-python"><code class="language-python">geoadd key longitude latitude member <span class="token comment" spellcheck="true">#增加地理位置信息</span>geoadd cities<span class="token punctuation">:</span>locations <span class="token number">116.28</span> <span class="token number">39.55</span> beijing <span class="token comment" spellcheck="true">#把北京地理信息天津到cities:locations中</span>geoadd cities<span class="token punctuation">:</span>locations <span class="token number">117.12</span> <span class="token number">39.08</span> tianjingeoadd cities<span class="token punctuation">:</span>locations <span class="token number">114.29</span> <span class="token number">38.02</span> shijiazhuanggeoadd cities<span class="token punctuation">:</span>locations <span class="token number">118.01</span> <span class="token number">39.38</span> tangshangeoadd cities<span class="token punctuation">:</span>locations <span class="token number">115.29</span> <span class="token number">38.51</span> baodinggeopos key member <span class="token comment" spellcheck="true">#获取地理位置信息</span>geopos cities<span class="token punctuation">:</span>locations beijing <span class="token comment" spellcheck="true">#获取北京地理信息</span>geodist key member1 member2 <span class="token punctuation">[</span>unit<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取两个地理位置的距离 unit:m(米) km(千米) mi(英里) ft(尺)</span>geodist cities<span class="token punctuation">:</span>locations beijing tianjin km <span class="token comment" spellcheck="true">#北京到天津的距离，89公里</span>georadius key logitude latitude radiusm<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>withcoord<span class="token punctuation">]</span> <span class="token punctuation">[</span>withdist<span class="token punctuation">]</span> <span class="token punctuation">[</span>withhash<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> <span class="token punctuation">[</span>asc<span class="token operator">|</span>desc<span class="token punctuation">]</span> <span class="token punctuation">[</span>store key<span class="token punctuation">]</span><span class="token punctuation">[</span>storedist key<span class="token punctuation">]</span>georadiusbymember key member radiusm<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>withcoord<span class="token punctuation">]</span> <span class="token punctuation">[</span>withdist<span class="token punctuation">]</span> <span class="token punctuation">[</span>withhash<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> <span class="token punctuation">[</span>asc<span class="token operator">|</span>desc<span class="token punctuation">]</span> <span class="token punctuation">[</span>store key<span class="token punctuation">]</span><span class="token punctuation">[</span>storedist key<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取指定位置范围内的地理位置信息集合</span><span class="token triple-quoted-string string">'''withcoord:返回结果中包含经纬度withdist：返回结果中包含距离中心节点位置withhash：返回解雇中包含geohashCOUNT count：指定返回结果的数量asc|desc：返回结果按照距离中心店的距离做升序/降序排列store key：将返回结果的地理位置信息保存到指定键storedist key：将返回结果距离中心点的距离保存到指定键'''</span>georadiusbymember cities<span class="token punctuation">:</span>locations beijing <span class="token number">150</span> km<span class="token triple-quoted-string string">'''1) "beijing"2) "tianjin"3) "tangshan"4) "baoding"'''</span></code></pre><h2 id="六、发布订阅（基本不用）"><a href="#六、发布订阅（基本不用）" class="headerlink" title="六、发布订阅（基本不用）"></a>六、发布订阅（基本不用）</h2><p>发布者发布了消息，所有订阅者都能接受到，本质是生产者消费者模型</p><pre class=" language-python"><code class="language-python">publish channel message <span class="token comment" spellcheck="true">#发布命令</span>publish souhu<span class="token punctuation">:</span>tv <span class="token string">"hello world"</span> <span class="token comment" spellcheck="true">#在souhu:tv频道发布一条hello world  返回订阅者个数</span>subscribe <span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#订阅命令，可以订阅一个或多个</span>subscribe souhu<span class="token punctuation">:</span>tv  <span class="token comment" spellcheck="true">#订阅sohu:tv频道</span>unsubscribe <span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#取消订阅一个或多个频道</span>unsubscribe sohu<span class="token punctuation">:</span>tv  <span class="token comment" spellcheck="true">#取消订阅sohu:tv频道</span>psubscribe <span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#订阅模式匹配</span>psubscribe c<span class="token operator">*</span>  <span class="token comment" spellcheck="true">#订阅以c开头的频道</span>unpsubscribe <span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#按模式退订指定频道</span>pubsub channels <span class="token comment" spellcheck="true">#列出至少有一个订阅者的频道,列出活跃的频道</span>pubsub numsub <span class="token punctuation">[</span>channel<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#列出给定频道的订阅者数量</span>pubsub numpat <span class="token comment" spellcheck="true">#列出被订阅模式的数量</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、慢查询&quot;&gt;&lt;a href=&quot;#一、慢查询&quot; class=&quot;headerlink&quot; title=&quot;一、慢查询&quot;&gt;&lt;/a&gt;一、慢查询&lt;/h2&gt;&lt;p&gt;因为redis是个单线程架构，所以只要有慢查询夯住会非常影响性能，在生产环境中应该避免出现慢查询或者限制慢查询&lt;/p</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis高级" scheme="http://huang_zhao.gitee.io/task/tags/Redis%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy框架</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/22/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/22/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</id>
    <published>2020-04-22T04:30:31.000Z</published>
    <updated>2020-09-04T11:23:22.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1 pip3 install scrapy（mac，linux）</span><span class="token comment" spellcheck="true">#2 windows上（80%能成功，少部分人成功不了）</span>    <span class="token number">1</span>、pip3 install wheel <span class="token comment" spellcheck="true">#安装后，便支持通过wheel文件安装软件，wheel文件官网：https://www.lfd.uci.edu/~gohlke/pythonlibs</span>    <span class="token number">3</span>、pip3 install lxml    <span class="token number">4</span>、pip3 install pyopenssl    <span class="token number">5</span>、下载并安装pywin32：https<span class="token punctuation">:</span><span class="token operator">//</span>sourceforge<span class="token punctuation">.</span>net<span class="token operator">/</span>projects<span class="token operator">/</span>pywin32<span class="token operator">/</span>files<span class="token operator">/</span>pywin32<span class="token operator">/</span>    <span class="token number">6</span>、下载twisted的wheel文件：http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>lfd<span class="token punctuation">.</span>uci<span class="token punctuation">.</span>edu<span class="token operator">/</span><span class="token operator">~</span>gohlke<span class="token operator">/</span>pythonlibs<span class="token operator">/</span><span class="token comment" spellcheck="true">#twisted</span>    <span class="token number">7</span>、执行pip3 install 下载目录\Twisted<span class="token number">-17.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>cp36<span class="token operator">-</span>cp36m<span class="token operator">-</span>win_amd64<span class="token punctuation">.</span>whl    <span class="token number">8</span>、pip3 install scrapy<span class="token comment" spellcheck="true"># 3 就有scrapy命令</span>    <span class="token operator">-</span>D<span class="token punctuation">:</span>\Python36\Scripts\scrapy<span class="token punctuation">.</span>exe  用于创建项目</code></pre><h2 id="二、框架简介"><a href="#二、框架简介" class="headerlink" title="二、框架简介"></a>二、框架简介</h2><p><strong>执行流程图</strong></p><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/1036857-20171109221422778-1731419400.png" alt="1036857-20171109221422778-1731419400" loading="lazy"></p><ol><li><p>引擎(EGINE)</p><p>引擎负责控制系统所有组件之间的数据流，并在某些动作发生时触发事件。有关详细信息，请参见上面的数据流部分。</p><p>（scrapy的核心，用于转发数据或请求，如果是数据，转到管道去保存，如果是请求，转到调度器，如果来的是响应对象，转给爬虫）</p></li><li><p><strong>调度器(SCHEDULER)</strong><br>用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL的优先级队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</p><p>（用于处理要爬取的url的顺序，深度优先/表示一条路走到黑，还是广度优先/表示同一层先爬下来，，去重）</p></li><li><p><strong>下载器(DOWLOADER)</strong><br>用于下载网页内容, 并将网页内容返回给EGINE，下载器是建立在twisted这个高效的异步模型上的</p><p>（向外要爬取的地址发送请求）</p></li><li><p><strong>爬虫(SPIDERS)</strong><br>SPIDERS是开发人员自定义的类，用来解析responses，并且提取items，或者发送新的请求</p></li><li><p><strong>项目管道(ITEM PIPLINES)</strong><br>在items被提取后负责处理它们，主要包括清理、验证、持久化（比如存到数据库）等操作</p><p>（需要在settings中配置）</p></li><li><p>下载器中间件(Downloader Middlewares)</p><p>位于Scrapy引擎和下载器之间，主要用来处理从EGINE传到DOWLOADER的请求request，已经从DOWNLOADER传到EGINE的响应response，你可用该中间件做以下几件事</p><ol><li>process a request just before it is sent to the Downloader (i.e. right before Scrapy sends the request to the website);</li><li>change received response before passing it to a spider;</li><li>send a new Request instead of passing received response to a spider;</li><li>pass response to a spider without fetching a web page;</li><li>silently drop some requests.</li></ol></li><li><p><strong>爬虫中间件(Spider Middlewares)</strong><br>位于EGINE和SPIDERS之间，主要工作是处理SPIDERS的输入（即responses）和输出（即requests）</p></li></ol><p>执行顺序：爬虫把要爬的url转发给引擎，引擎再转发给调度器，由调度器决定顺序，返回给引擎，引擎再把要爬取的url通过下载中间件（用于加个头，cookie啥的）向需要爬取的服务端发送请求，响应回来之后也通过下载中间件给引擎，引擎判断是响应数据之后，转发给爬虫，爬虫对数据进行处理，返回一个新的需要爬的地址（就继续上面的流程）或者需要保存的数据，数据部分由引擎转发给管道，保存数据</p><p><strong>目录介绍</strong></p><pre class=" language-python"><code class="language-python">    firstscrapy  <span class="token comment" spellcheck="true"># 项目名字</span>        firstscrapy <span class="token comment" spellcheck="true"># 包</span>            <span class="token operator">-</span>spiders <span class="token comment" spellcheck="true"># 所有的爬虫文件放在里面</span>                <span class="token operator">-</span>baidu<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 一个个的爬虫（以后基本上都在这写东西）</span>                <span class="token operator">-</span>chouti<span class="token punctuation">.</span>py            <span class="token operator">-</span>middlewares<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 中间件（爬虫，下载中间件都写在这）</span>            <span class="token operator">-</span>pipelines<span class="token punctuation">.</span>py   <span class="token comment" spellcheck="true"># 持久化相关写在这（items.py中类的对象）</span>            <span class="token operator">-</span>main<span class="token punctuation">.</span>py        <span class="token comment" spellcheck="true"># 自己加的，执行爬虫</span>            <span class="token operator">-</span>items<span class="token punctuation">.</span>py       <span class="token comment" spellcheck="true"># 一个一个的类，</span>            <span class="token operator">-</span>settings<span class="token punctuation">.</span>py    <span class="token comment" spellcheck="true"># 配置文件</span>        scrapy<span class="token punctuation">.</span>cfg          <span class="token comment" spellcheck="true"># 上线相关</span></code></pre><p><strong>settings参数介绍</strong></p><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 默认情况，scrapy会去遵循爬虫协议<span class="token number">2</span> 修改配置文件参数，强行爬取，不遵循协议    <span class="token operator">-</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token number">3</span> USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'</span><span class="token number">4</span> LOG_LEVEL<span class="token operator">=</span><span class="token string">'ERROR'</span> <span class="token comment" spellcheck="true"># 运行的时候就不会把其他日志展示出来</span></code></pre><h2 id="三、基本使用"><a href="#三、基本使用" class="headerlink" title="三、基本使用"></a>三、基本使用</h2><h3 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1 基本命令"></a>1 基本命令</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建项目</span>scrapy startproject firstscrapy<span class="token comment" spellcheck="true"># 创建爬虫</span>scrapy genspider 爬虫名 爬虫地址scrapy genspider chouti dig<span class="token punctuation">.</span>chouti<span class="token punctuation">.</span>com<span class="token comment" spellcheck="true"># 一执行就会在spider文件夹下创建出一个py文件</span><span class="token comment" spellcheck="true"># 运行爬虫</span>scrapy crawl chouti   <span class="token comment" spellcheck="true"># 带运行日志</span>scrapy crawl chouti <span class="token operator">-</span><span class="token operator">-</span>nolog  <span class="token comment" spellcheck="true"># 不带日志</span><span class="token comment" spellcheck="true"># 支持右键执行爬虫</span><span class="token comment" spellcheck="true"># 在项目路径下新建一个main.py</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>cmdline <span class="token keyword">import</span> executeexecute<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'scrapy'</span><span class="token punctuation">,</span><span class="token string">'crawl'</span><span class="token punctuation">,</span><span class="token string">'chouti'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2-数据解析"><a href="#2-数据解析" class="headerlink" title="2 数据解析"></a>2 数据解析</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#xpath：</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@class,"link-title")]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取文本</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@class,"link-title")]/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#取属性</span><span class="token comment" spellcheck="true">#css</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取文本</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::attr(href)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取属性</span></code></pre><h3 id="3-数据持久化"><a href="#3-数据持久化" class="headerlink" title="3 数据持久化"></a>3 数据持久化</h3><p><strong>items.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 持久化匹配的字段</span><span class="token keyword">class</span> <span class="token class-name">ChoutiItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    laiyuan <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>spiders/chouti.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ChoutiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'chouti'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dig.chouti.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 返回要爬取的页面，或者返回要保存的数据</span>        <span class="token comment" spellcheck="true"># 下面两者效果相同</span>        <span class="token keyword">from</span> pachong<span class="token punctuation">.</span>items <span class="token keyword">import</span> ChoutiItem        item <span class="token operator">=</span> ChoutiItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-con .link-item'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># div_list = response.xpath('//div[contains(@class,"link-item")]')</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> div<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            laiyuan <span class="token operator">=</span> div<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-from::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># title = div.xpath('//a[contains(@class,"link-title")]/text()').extract()</span>            <span class="token keyword">if</span> <span class="token operator">not</span> laiyuan<span class="token punctuation">:</span>                laiyuan <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>laiyuan<span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title            item<span class="token punctuation">[</span><span class="token string">'laiyuan'</span><span class="token punctuation">]</span> <span class="token operator">=</span> laiyuan            <span class="token keyword">yield</span> item</code></pre><p><strong>pipelines.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">PachongPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>                 database<span class="token operator">=</span><span class="token string">'pachong'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">'insert into chouti (title,laiyuan)values(%s,%s)'</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token string">'laiyuan'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>settings.py</strong></p><pre class=" language-python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>   <span class="token string">'pachong.pipelines.PachongPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 配置优先级</span></code></pre><h2 id="四、scrapy高级"><a href="#四、scrapy高级" class="headerlink" title="四、scrapy高级"></a>四、scrapy高级</h2><h3 id="1-提升scrapy爬取数据的效率"><a href="#1-提升scrapy爬取数据的效率" class="headerlink" title="1 提升scrapy爬取数据的效率"></a>1 提升scrapy爬取数据的效率</h3><pre class=" language-python"><code class="language-python"><span class="token operator">-</span> 在配置文件中进行相关的配置即可<span class="token punctuation">:</span><span class="token punctuation">(</span>默认还有一套setting<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1 增加并发：</span>默认scrapy开启的并发线程为<span class="token number">32</span>个，可以适当进行增加。在settings配置文件中修改CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token number">100</span>值为<span class="token number">100</span><span class="token punctuation">,</span>并发设置成了为<span class="token number">100</span>。<span class="token comment" spellcheck="true">#2 降低日志级别：</span>在运行scrapy时，会有大量日志信息的输出，为了减少CPU的使用率。可以设置log输出信息为INFO或者ERROR即可。在配置文件中编写：LOG_LEVEL <span class="token operator">=</span> ‘INFO’<span class="token comment" spellcheck="true"># 3 禁止cookie：</span>如果不是真的需要cookie，则在scrapy爬取数据时可以禁止cookie从而减少CPU的使用率，提升爬取效率。在配置文件中编写：COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 4禁止重试：</span>对失败的HTTP进行重新请求（重试）会减慢爬取速度，因此可以禁止重试。在配置文件中编写：RETRY_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 5 减少下载超时：</span>如果对一个非常慢的链接进行爬取，减少下载超时可以能让卡住的链接快速被放弃，从而提升效率。在配置文件中进行编写：DOWNLOAD_TIMEOUT <span class="token operator">=</span> <span class="token number">10</span> 超时时间为10s</code></pre><h3 id="2-scrapy的中间件（下载中间件）"><a href="#2-scrapy的中间件（下载中间件）" class="headerlink" title="2 scrapy的中间件（下载中间件）"></a>2 scrapy的中间件（下载中间件）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 都写在middlewares.py</span><span class="token comment" spellcheck="true"># 2 爬虫中间件</span><span class="token comment" spellcheck="true"># 3 下载中间件</span><span class="token comment" spellcheck="true"># 4 要生效，一定要配置，配置文件</span><span class="token comment" spellcheck="true"># 下载中间件</span><span class="token operator">-</span>process_request：返回不同的对象，后续处理不同（加代理<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>）          <span class="token comment" spellcheck="true"># 1 更换请求头</span>        <span class="token comment" spellcheck="true"># print(type(request.headers))</span>        <span class="token comment" spellcheck="true"># print(request.headers)</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># from scrapy.http.headers import Headers</span>        <span class="token comment" spellcheck="true"># request.headers['User-Agent']=''</span>        <span class="token comment" spellcheck="true"># 2 加cookie ---cookie池</span>        <span class="token comment" spellcheck="true"># 假设你你已经搭建好cookie 池了，</span>        <span class="token comment" spellcheck="true"># print('00000--',request.cookies)</span>        <span class="token comment" spellcheck="true"># request.cookies=&amp;#123;'username':'asdfasdf'&amp;#125;</span>        <span class="token comment" spellcheck="true"># 3 加代理</span>        <span class="token comment" spellcheck="true"># print(request.meta)</span>        <span class="token comment" spellcheck="true"># request.meta['download_timeout'] = 20</span>        <span class="token comment" spellcheck="true"># request.meta["proxy"] = 'http://27.188.62.3:8060'</span><span class="token operator">-</span>process_response：返回不同的对象，后续处理不同<span class="token operator">-</span> process_exception<span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 不允许直接改url</span>        <span class="token comment" spellcheck="true"># request.url='https://www.baidu.com'</span>        <span class="token keyword">from</span> scrapy <span class="token keyword">import</span> Request        request<span class="token operator">=</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>callback<span class="token operator">=</span>spider<span class="token punctuation">.</span>parser<span class="token punctuation">)</span>        <span class="token keyword">return</span> request</code></pre><h3 id="3-selenium在scrapy中的使用流程"><a href="#3-selenium在scrapy中的使用流程" class="headerlink" title="3 selenium在scrapy中的使用流程"></a>3 selenium在scrapy中的使用流程</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 当前爬虫用的selenium是同一个</span><span class="token comment" spellcheck="true"># 1 在爬虫中初始化webdriver对象</span>    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    <span class="token keyword">class</span> <span class="token class-name">CnblogSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">'cnblog'</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> bro<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'../chromedriver.exe'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 在中间件中使用（process_request）</span>spider<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://dig.chouti.com/'</span><span class="token punctuation">)</span>   response<span class="token operator">=</span>HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://dig.chouti.com/'</span><span class="token punctuation">,</span>body<span class="token operator">=</span>spider<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>page_source<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>request<span class="token operator">=</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token comment" spellcheck="true"># 3 在爬虫中关闭</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我结束了"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-分布式爬虫（scrapy-redis）"><a href="#4-分布式爬虫（scrapy-redis）" class="headerlink" title="4 分布式爬虫（scrapy-redis）"></a>4 分布式爬虫（scrapy-redis）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 pip3 install scrapy-redis</span><span class="token comment" spellcheck="true"># 2 原来继承Spider，现在继承RedisSpider</span><span class="token comment" spellcheck="true"># 3 不能写start_urls = ['https:/www.cnblogs.com/']</span><span class="token comment" spellcheck="true"># 4 需要写redis_key = 'myspider:start_urls'</span><span class="token comment" spellcheck="true"># 5 setting中配置：</span><span class="token comment" spellcheck="true"># redis的连接</span>REDIS_HOST <span class="token operator">=</span> <span class="token string">'localhost'</span>                            <span class="token comment" spellcheck="true"># 主机名</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>                                   <span class="token comment" spellcheck="true"># 端口</span>    <span class="token comment" spellcheck="true"># 使用scrapy-redis的去重</span>DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">"scrapy_redis.dupefilter.RFPDupeFilter"</span><span class="token comment" spellcheck="true"># 使用scrapy-redis的Scheduler</span><span class="token comment" spellcheck="true"># 分布式爬虫的配置</span>SCHEDULER <span class="token operator">=</span> <span class="token string">"scrapy_redis.scheduler.Scheduler"</span><span class="token comment" spellcheck="true"># 持久化的可以配置，也可以不配置</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>   <span class="token string">'scrapy_redis.pipelines.RedisPipeline'</span><span class="token punctuation">:</span> <span class="token number">299</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 9现在要让爬虫运行起来，需要去redis中以myspider:start_urls为key，插入一个起始地址lpush myspider:start_urls https://www.cnblogs.com/</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="python框架" scheme="http://huang_zhao.gitee.io/task/tags/python%E6%A1%86%E6%9E%B6/"/>
    
    <category term="爬虫高级" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup模块的使用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/21/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/21/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-21T06:10:11.000Z</published>
    <updated>2020-09-04T11:23:29.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BeautifulSoup模块的使用"><a href="#BeautifulSoup模块的使用" class="headerlink" title="BeautifulSoup模块的使用"></a>BeautifulSoup模块的使用</h2><h4 id="1-参数介绍"><a href="#1-参数介绍" class="headerlink" title="1 参数介绍"></a>1 参数介绍</h4><pre class=" language-python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一个参数是要解析的html页面，通常是我们通过请求得到的页面数据</span><span class="token comment" spellcheck="true"># 第二个参数是解析的解析器选择</span><span class="token comment" spellcheck="true"># python内置的html.parser</span><span class="token comment" spellcheck="true"># 其他解释器：lxml（通常使用），xml，html5lib</span></code></pre><p>文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><h4 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 标签查找</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有多个只会找到第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>pres <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token comment" spellcheck="true"># 2 标签属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>attrs<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'id': 'bbb', 'class': ['boldest']&amp;#125;</span><span class="token comment" spellcheck="true"># 3 获取文本内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>string <span class="token comment" spellcheck="true"># 当p下只有文本取到，否则为None</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>strings <span class="token comment" spellcheck="true"># 获取全部文本得到一个生成器对象</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 取到标签下所有的文本内容拼接起来</span><span class="token comment" spellcheck="true"># 4 嵌套选择</span><span class="token comment" spellcheck="true"># 可以让选择更加准确</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>string<span class="token comment" spellcheck="true"># 5 子节点、子孙节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents <span class="token comment" spellcheck="true"># 获得p内所有子节点</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>b <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"boldest"</span> id<span class="token operator">=</span><span class="token string">"bbb"</span><span class="token operator">></span>The Dormouse<span class="token string">'s story&lt;/b>, '</span>\n'<span class="token punctuation">]</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children <span class="token comment" spellcheck="true"># 得到一个迭代器，包含p内所有子节点</span><span class="token triple-quoted-string string">'''子节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>'''</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>descendants <span class="token comment" spellcheck="true"># 得到一个生成器，包含p内所有子孙节点</span><span class="token triple-quoted-string string">'''子孙节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>The Dormouse's story'''</span><span class="token comment" spellcheck="true"># 6 父节点、祖节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parent <span class="token comment" spellcheck="true"># 获得p的父节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parents <span class="token comment" spellcheck="true"># 获得p的父节点，和父节点的父节点。。。的生成器</span><span class="token comment" spellcheck="true"># 7 兄弟节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_sibling <span class="token comment" spellcheck="true"># 下一个兄弟</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_previous_sibling <span class="token comment" spellcheck="true"># 上一个兄弟</span></code></pre><h4 id="3-搜索文档树"><a href="#3-搜索文档树" class="headerlink" title="3 搜索文档树"></a>3 搜索文档树</h4><h5 id="3-1-五种过滤器"><a href="#3-1-五种过滤器" class="headerlink" title="3.1 五种过滤器"></a>3.1 五种过滤器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 字符串</span><span class="token comment" spellcheck="true"># 如果有多个取第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取全部，只有一个也是放在列表中</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 正则表达式</span><span class="token comment" spellcheck="true"># 获得所有以b开头的标签：body，b</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3 列表</span><span class="token comment" spellcheck="true"># a标签，b标签都会取</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4 布尔</span><span class="token comment" spellcheck="true"># 会查找到所有标签，不包括文本节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5 自定义过滤器</span><span class="token comment" spellcheck="true"># 会把整个页面传给tag</span><span class="token keyword">def</span> <span class="token function">has_class_not_id</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>has_class_not_id<span class="token punctuation">)</span></code></pre><h5 id="3-2-find-all"><a href="#3-2-find-all" class="headerlink" title="3.2 find_all()"></a>3.2 find_all()</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># name：可以放任意类型的过滤器</span><span class="token comment" spellcheck="true"># keyword：放键值对</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>id <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^my'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有特殊参数不能通过k，v来表示</span><span class="token comment" spellcheck="true"># 比如data-foo = value</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"data-foo":"value"&amp;#125;)</span><span class="token comment" spellcheck="true"># 按类名的时候，关键字是class_</span><span class="token comment" spellcheck="true"># 查找由sister和sss类的a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'sister sss'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># limit参数</span><span class="token comment" spellcheck="true"># 找前连个a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># recursive = False 会查找tag下的直接的子节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>recursive <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h5 id="3-3-css选择器"><a href="#3-3-css选择器" class="headerlink" title="3.3 css选择器"></a>3.3 css选择器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 选择器</span><span class="token comment" spellcheck="true"># 类</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 含有sister类下的b标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># id</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token comment" spellcheck="true"># 获取内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BeautifulSoup模块的使用&quot;&gt;&lt;a href=&quot;#BeautifulSoup模块的使用&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup模块的使用&quot;&gt;&lt;/a&gt;BeautifulSoup模块的使用&lt;/h2&gt;&lt;h4 id=&quot;1</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="python模块" scheme="http://huang_zhao.gitee.io/task/tags/python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化，主从，哨兵，集群</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/21/Redis%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%8C%E4%B8%BB%E4%BB%8E%EF%BC%8C%E5%93%A8%E5%85%B5%EF%BC%8C%E9%9B%86%E7%BE%A4/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/21/Redis%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%8C%E4%B8%BB%E4%BB%8E%EF%BC%8C%E5%93%A8%E5%85%B5%EF%BC%8C%E9%9B%86%E7%BE%A4/</id>
    <published>2020-04-21T06:10:11.000Z</published>
    <updated>2020-09-04T11:15:13.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、持久化"><a href="#一、持久化" class="headerlink" title="一、持久化"></a>一、持久化</h2><p>持久化表示把数据存储到硬盘的过程</p><p>持久化的两种方式</p><ul><li>快照：某事某刻数据库的完整备份 redis的RDB</li><li>写日志：任何操作都记录下来，要恢复数据就重新走一遍流程即可 redis的AOF</li></ul><h3 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1 RDB"></a>1 RDB</h3><p>RDB的三种触发机制</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''save(同步)1 客户端执行save命令----》redis服务端----》同步创建RDB二进制文件2 会造成redis的阻塞（数据量非常大的时候）3 文件策略：如果老的RDB存在，会替换老的4 复杂度 o(n)'''</span><span class="token triple-quoted-string string">'''bgsave(异步，Backgroud saving started)1 客户端执行save命令----》redis服务端----》异步创建RDB二进制文件（fork函数生成一个子进程（fork会阻塞reids），执行createRDB，执行成功，返回给reids消息）2 此时访问redis，会正常响应客户端3 文件策略：跟save相同，如果老的RDB存在，会替换老的4 复杂度 o(n)'''</span><span class="token triple-quoted-string string">'''自动（通过配置）配置   seconds   changessave   900        1save   300        10save   60         10000如果60s中改变了1w条数据，自动生成rdb如果300s中改变了10条数据，自动生成rdb如果900s中改变了1条数据，自动生成rdb以上三条符合任意一条，就自动生成rdb，内部使用bgsave'''</span><span class="token comment" spellcheck="true">#配置：</span>save <span class="token number">900</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#配置一条</span>save <span class="token number">300</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">#配置一条</span>save <span class="token number">60</span> <span class="token number">10000</span> <span class="token comment" spellcheck="true">#配置一条</span>dbfilename dump<span class="token punctuation">.</span>rdb  <span class="token comment" spellcheck="true">#rdb文件的名字，默认为dump.rdb</span>dir <span class="token punctuation">.</span><span class="token operator">/</span> <span class="token comment" spellcheck="true">#rdb文件存在当前目录</span>stop<span class="token operator">-</span>writes<span class="token operator">-</span>on<span class="token operator">-</span>bgsave<span class="token operator">-</span>error yes <span class="token comment" spellcheck="true">#如果bgsave出现错误，是否停止写入，默认为yes</span>rdbcompression yes <span class="token comment" spellcheck="true">#采用压缩格式</span>rdbchecksum yes <span class="token comment" spellcheck="true">#是否对rdb文件进行校验和检验</span><span class="token comment" spellcheck="true">#最佳配置</span>save <span class="token number">900</span> <span class="token number">1</span> save <span class="token number">300</span> <span class="token number">10</span> save <span class="token number">60</span> <span class="token number">10000</span> dbfilename dump<span class="token operator">-</span>$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;port&amp;#125;.rdb  #以端口号作为文件名，可能一台机器上很多reids，不会乱</span>dir <span class="token operator">/</span>bigdiskpath <span class="token comment" spellcheck="true">#保存路径放到一个大硬盘位置目录</span>stop<span class="token operator">-</span>writes<span class="token operator">-</span>on<span class="token operator">-</span>bgsave<span class="token operator">-</span>error yes <span class="token comment" spellcheck="true">#出现错误停止</span>rdbcompression yes <span class="token comment" spellcheck="true">#压缩</span>rdbchecksum yes <span class="token comment" spellcheck="true">#校验</span></code></pre><p><strong>触发机制</strong></p><pre><code>1 全量复制 #没有执行save和bgsave没有添加rdb策略，还会生成rdb文件，如果开启主从复制，主会自动生成rdb2 debug reload #debug级别的重启，不会将内存中的数据清空3 shutdown save#关闭会出发rdb的生成</code></pre><p><strong>存在的问题</strong>：耗时，耗性能，不可控，数据可能会丢失</p><h3 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2 AOF"></a>2 AOF</h3><p>原理：客户端每写入一条命令就会记录一条日志，放到日志文件中，如果出现宕机完全可以恢复</p><p><strong>AOF三种保存策略</strong></p><p>日志不是直接写到硬盘上，而是先放在缓冲区，缓冲区根据一些策略，写到硬盘上</p><ul><li><p>always：redis–》写命令刷新的缓冲区—》每条命令fsync到硬盘—》AOF文件</p></li><li><p>everysec（默认值）：redis——》写命令刷新的缓冲区—》每秒把缓冲区fsync到硬盘–》AOF文件</p></li><li><p>no:redis——》写命令刷新的缓冲区—》操作系统决定，缓冲区fsync到硬盘–》AOF文件</p></li></ul><table><thead><tr><th>命令</th><th>always</th><th>everysec</th><th>no</th></tr></thead><tbody><tr><td>优点</td><td>不丢失数据</td><td>每秒一次fsync，丢失1秒数据</td><td>不用管</td></tr><tr><td>缺点</td><td>IO开销大，一般的sata盘只有几百TPS</td><td>丢1秒数据</td><td>不可控</td></tr></tbody></table><h4 id="3-1-AOF重写"><a href="#3-1-AOF重写" class="headerlink" title="3.1 AOF重写"></a>3.1 AOF重写</h4><p>是aof中的一个模式，日志文件越堆越多就会存在很多没用的命令</p><p>比如给hello赋值了10次，实际上只有第10次有意义，所以前面9次都可以删掉，或者是rpush a，rpush b ，rpush c，可以写成rpush a，b，c</p><p>本质就是把过期的，无用的，重复的，可以优化的命令，来优化</p><p>这样可以减少磁盘占用量，加速恢复速度</p><p><strong>实现方式</strong></p><p>bgrewriteaof：</p><p>客户端向服务端发送bgrewriteaof命令，服务端会起一个fork进程，完成AOF重写</p><p><strong>配置方式</strong></p><pre class=" language-python"><code class="language-python">appendonly yes <span class="token comment" spellcheck="true">#将该选项设置为yes，打开</span>appendfilename <span class="token string">"appendonly-$&amp;#123;port&amp;#125;.aof"</span> #文件保存的名字appendfsync everysec <span class="token comment" spellcheck="true">#采用第二种策略</span>dir <span class="token operator">/</span>bigdiskpath <span class="token comment" spellcheck="true">#存放的路径</span>no<span class="token operator">-</span>appendfsync<span class="token operator">-</span>on<span class="token operator">-</span>rewrite yes <span class="token comment" spellcheck="true">#在aof重写的时候，是否要做aof的append操作，因为aof重写消耗性能，磁盘消耗，正常aof写磁盘有一定的冲突，这段期间的数据，允许丢失</span></code></pre><h2 id="二、主从复制"><a href="#二、主从复制" class="headerlink" title="二、主从复制"></a>二、主从复制</h2><p>QPS达到瓶颈就可以做主从复制</p><ul><li><p>一主一从或者一主多从</p></li><li><p>做读写分离，数据副本</p></li><li><p>扩展操作数据的新能</p></li><li><p>一个master（主）可以有多个slave（从）</p></li><li><p>一个从智能属于一个主</p></li><li><p>数据流向是单向的，从主到从</p></li></ul><p><strong>原理</strong></p><pre><code>1 从库通过 slaveof ip 端口连接主库，并发送一个SYNC请求给主库2 主库接受到SYNC，会立即出发bgsave（持久化），后台保存RDB，发送给从库3 从库接收到RDB文件会执行（就是把数据读出来）4 此时主从复制就能正常工作了，主库会将新的操作以命令的形式陆续发给从库5 所有的复制信息都可以从info中查到6 如果发生主从关系断开时,从库数据没有任何损坏,在下次重连之后,从库发送PSYNC给主库7 主库只会将从库缺失部分的数据同步给从库应用,达到快速恢复主从的目的</code></pre><h3 id="1-辅助配置"><a href="#1-辅助配置" class="headerlink" title="1 辅助配置"></a>1 辅助配置</h3><pre class=" language-python"><code class="language-python">min<span class="token operator">-</span>slaves<span class="token operator">-</span>to<span class="token operator">-</span>write <span class="token number">1</span>min<span class="token operator">-</span>slaves<span class="token operator">-</span>max<span class="token operator">-</span>lag <span class="token number">3</span><span class="token comment" spellcheck="true">#那么在从服务器的数量少于1个，或者三个从服务器的延迟（lag）值都大于或等于3秒时，主服务器将拒绝执行写命令</span></code></pre><h3 id="2-复制配置"><a href="#2-复制配置" class="headerlink" title="2 复制配置"></a>2 复制配置</h3><h4 id="2-1-slave命令"><a href="#2-1-slave命令" class="headerlink" title="2.1 slave命令"></a>2.1 slave命令</h4><pre class=" language-python"><code class="language-python"><span class="token number">6380</span>是从，<span class="token number">6379</span>是主在<span class="token number">6380</span>上执行（去从库配置，配置主库）slaveof <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token comment" spellcheck="true">#异步</span>slaveof no one <span class="token comment" spellcheck="true">#取消复制，不会把之前的数据清除</span></code></pre><h4 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h4><pre class=" language-python"><code class="language-python">slaveof ip port <span class="token comment" spellcheck="true">#配置从节点ip和端口</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes <span class="token comment" spellcheck="true">#从节点只读，因为可读可写，数据会乱</span><span class="token triple-quoted-string string">'''mkdir -p redis1/conf redis1/data redis2/conf redis2/data redis3/conf redis3/datavim redis.confdaemonize nopidfile redis.pidbind 0.0.0.0protected-mode noport 6379timeout 0logfile redis.logdbfilename dump.rdbdir /dataslaveof 10.0.0.101 6379slave-read-only yescp redis.conf /home/redis2/conf/docker run -p 6379:6379 --name redis_6379 -v /home/redis1/conf/redis.conf:/etc/redis/redis.conf -v /home/redis1/data:/data -d redis redis-server /etc/redis/redis.confdocker run -p 6378:6379 --name redis_6378 -v /home/redis2/conf/redis.conf:/etc/redis/redis.conf -v /home/redis2/data:/data -d redis redis-server /etc/redis/redis.confdocker run -p 6377:6379 --name redis_6377 -v /home/redis3/conf/redis.conf:/etc/redis/redis.conf -v /home/redis3/data:/data -d redis redis-server /etc/redis/redis.confinfo replication'''</span></code></pre><h4 id="2-3-复制常见的问题"><a href="#2-3-复制常见的问题" class="headerlink" title="2.3 复制常见的问题"></a>2.3 复制常见的问题</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 读写分离读流量分摊到从节点可能遇到问题：复制数据延迟，读到过期数据，从节点故障<span class="token number">2</span> 主从配置不一致maxmemory不一致：丢失数据数据结构优化参数：主节点做了优化，从节点没有设置优化，会出现一些问题<span class="token number">3</span> 规避全量复制第一次全量复制，不可避免：小主节点，低峰<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>节点运行id不匹配：主节点重启<span class="token punctuation">(</span>运行id变化<span class="token punctuation">)</span>复制挤压缓冲区不足：增大复制缓冲区大小，rel_backlog_size<span class="token number">4</span> 规避复制风暴单主节点复制风暴，主节点重启，所有从节点复制</code></pre><h2 id="三、redis-Sentinel（哨兵）"><a href="#三、redis-Sentinel（哨兵）" class="headerlink" title="三、redis-Sentinel（哨兵）"></a>三、redis-Sentinel（哨兵）</h2><p>哨兵就是为了实现主从复制的高可用</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#主从复制存在的问题：</span><span class="token comment" spellcheck="true">#1 主从复制，主节点发生故障，需要做故障转移，可以手动转移：让其中一个slave变成master</span><span class="token comment" spellcheck="true">#2 主从复制，只能主写数据，所以写能力和存储能力有限</span></code></pre><p><strong>架构说明</strong></p><p>1 多个sentinel发现并确认master有问题</p><p>2 选举触一个sentinel作为领导</p><p>3 选取一个slave作为新的master</p><p>4 通知其余slave成为新的master的slave</p><p>5 通知客户端主从变化</p><p>6 等待老的master复活成为新master的slave</p><h3 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1 安装配置"></a>1 安装配置</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#配置开启sentinel监控主节点</span>mkdir <span class="token operator">-</span>p redis4<span class="token operator">/</span>conf redis4<span class="token operator">/</span>data redis5<span class="token operator">/</span>conf redis5<span class="token operator">/</span>data redis6<span class="token operator">/</span>data redis6<span class="token operator">/</span>confvi sentinel<span class="token punctuation">.</span>confport <span class="token number">26379</span>daemonize yesdir dataprotected<span class="token operator">-</span>mode nobind <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span>logfile <span class="token string">"redis_sentinel.log"</span>sentinel monitor mymaster <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token number">2</span>sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds mymaster <span class="token number">30000</span>sentinel parallel<span class="token operator">-</span>syncs mymaster <span class="token number">1</span>sentinel failover<span class="token operator">-</span>timeout mymaster <span class="token number">180000</span>docker run <span class="token operator">-</span>p <span class="token number">26379</span><span class="token punctuation">:</span><span class="token number">26379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_26379 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis4<span class="token operator">/</span>conf<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis4<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>d redis redis<span class="token operator">-</span>sentinel <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>confdocker run <span class="token operator">-</span>p <span class="token number">26378</span><span class="token punctuation">:</span><span class="token number">26379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_26378 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis5<span class="token operator">/</span>conf<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis5<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>d redis redis<span class="token operator">-</span>sentinel <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>confdocker run <span class="token operator">-</span>p <span class="token number">26377</span><span class="token punctuation">:</span><span class="token number">26379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_26377 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis6<span class="token operator">/</span>conf<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis6<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>d redis redis<span class="token operator">-</span>sentinel <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>confredis<span class="token operator">-</span>sentinel sentinel<span class="token punctuation">.</span>confinfo配置会重写，自动发现slave</code></pre><pre class=" language-python"><code class="language-python">sentinel monitor mymaster <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token number">2</span>sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds mymaster <span class="token number">30000</span>sentinel parallel<span class="token operator">-</span>syncs mymaster <span class="token number">1</span>sentinel failover<span class="token operator">-</span>timeout mymaster <span class="token number">180000</span>sentinel monitor <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>ip<span class="token operator">></span> <span class="token operator">&lt;</span>redis<span class="token operator">-</span>port<span class="token operator">></span> <span class="token operator">&lt;</span>quorum<span class="token operator">></span>告诉sentinel去监听地址为ip<span class="token punctuation">:</span>port的一个master，这里的master<span class="token operator">-</span>name可以自定义，quorum是一个数字，指明当有多少个sentinel认为一个master失效时，master才算真正失效sentinel auth<span class="token operator">-</span><span class="token keyword">pass</span> <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>password<span class="token operator">></span>设置连接master和slave时的密码，注意的是sentinel不能分别为master和slave设置不同的密码，因此master和slave的密码应该设置相同。sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>milliseconds<span class="token operator">></span> 这个配置项指定了需要多少失效时间，一个master才会被这个sentinel主观地认为是不可用的。 单位是毫秒，默认为<span class="token number">30</span>秒sentinel parallel<span class="token operator">-</span>syncs <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>numslaves<span class="token operator">></span> 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 <span class="token number">1</span> 来保证每次只有一个slave 处于不能处理命令请求的状态。sentinel failover<span class="token operator">-</span>timeout <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>milliseconds<span class="token operator">></span>failover<span class="token operator">-</span>timeout 可以用在以下这些方面：     <span class="token number">1</span><span class="token punctuation">.</span> 同一个sentinel对同一个master两次failover之间的间隔时间。   <span class="token number">2</span><span class="token punctuation">.</span> 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。    <span class="token number">3</span><span class="token punctuation">.</span>当想要取消一个正在进行的failover所需要的时间。    <span class="token number">4</span><span class="token punctuation">.</span>当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel<span class="token operator">-</span>syncs所配置的规则来了。</code></pre><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 搭一个一主两从<span class="token comment" spellcheck="true">#创建三个配置文件：</span><span class="token comment" spellcheck="true">#第一个是主配置文件</span>daemonize yespidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis<span class="token punctuation">.</span>pidport <span class="token number">6379</span>dir <span class="token string">"/opt/soft/redis/data"</span>logfile “<span class="token number">6379.</span>log”<span class="token comment" spellcheck="true">#第二个是从配置文件</span>daemonize yespidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis2<span class="token punctuation">.</span>pidport <span class="token number">6378</span>dir <span class="token string">"/opt/soft/redis/data2"</span>logfile “<span class="token number">6378.</span>log”slaveof <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes<span class="token comment" spellcheck="true">#第三个是从配置文件</span>daemonize yespidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis3<span class="token punctuation">.</span>pidport <span class="token number">6377</span>dir <span class="token string">"/opt/soft/redis/data3"</span>logfile “<span class="token number">6377.</span>log”slaveof <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes<span class="token comment" spellcheck="true">#把三个redis服务都启动起来</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server redis_6379<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server redis_6378<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server redis_6377<span class="token punctuation">.</span>conf<span class="token number">2</span> 搭建哨兵<span class="token comment" spellcheck="true"># sentinel.conf这个文件</span><span class="token comment" spellcheck="true"># 把哨兵也当成一个redis服务器</span>创建三个配置文件分别叫sentinel_26379<span class="token punctuation">.</span>conf sentinel_26378<span class="token punctuation">.</span>conf  sentinel_26377<span class="token punctuation">.</span>conf<span class="token comment" spellcheck="true"># 当前路径下创建 data1 data2 data3 个文件夹</span><span class="token comment" spellcheck="true">#内容如下(需要修改端口，文件地址日志文件名字)</span>port <span class="token number">26379</span>daemonize yesdir <span class="token punctuation">.</span><span class="token operator">/</span>data3protected<span class="token operator">-</span>mode nobind <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span>logfile <span class="token string">"redis_sentinel3.log"</span>sentinel monitor mymaster <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token number">2</span>sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds mymaster <span class="token number">30000</span>sentinel parallel<span class="token operator">-</span>syncs mymaster <span class="token number">1</span>sentinel failover<span class="token operator">-</span>timeout mymaster <span class="token number">180000</span><span class="token comment" spellcheck="true">#启动三个哨兵</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel_26379<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel_26378<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel_26377<span class="token punctuation">.</span>conf<span class="token comment" spellcheck="true"># 登陆哨兵</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>p <span class="token number">26377</span><span class="token comment" spellcheck="true"># 输入 info</span><span class="token comment" spellcheck="true"># 查看哨兵的配置文件被修改了，自动生成的</span><span class="token comment" spellcheck="true"># 主动停掉主redis 6379，哨兵会自动选择一个从库作为主库</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>p <span class="token number">6379</span>shutdown<span class="token comment" spellcheck="true">#等待原来的主库启动，该主库会变成从库</span></code></pre><h3 id="2-客户端链接"><a href="#2-客户端链接" class="headerlink" title="2 客户端链接"></a>2 客户端链接</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token keyword">from</span> redis<span class="token punctuation">.</span>sentinel <span class="token keyword">import</span> Sentinel<span class="token comment" spellcheck="true"># 连接哨兵服务器(主机名也可以用域名)</span><span class="token comment" spellcheck="true"># 10.0.0.101:26379</span>sentinel <span class="token operator">=</span> Sentinel<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'10.0.0.101'</span><span class="token punctuation">,</span> <span class="token number">26379</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">'10.0.0.101'</span><span class="token punctuation">,</span> <span class="token number">26378</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">'10.0.0.101'</span><span class="token punctuation">,</span> <span class="token number">26377</span><span class="token punctuation">)</span>             <span class="token punctuation">]</span><span class="token punctuation">,</span>                    socket_timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sentinel<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取主服务器地址</span>master <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>discover_master<span class="token punctuation">(</span><span class="token string">'mymaster'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取从服务器地址</span>slave <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>discover_slaves<span class="token punctuation">(</span><span class="token string">'mymaster'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>slave<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##### 读写分离</span><span class="token comment" spellcheck="true"># 获取主服务器进行写入</span><span class="token comment" spellcheck="true"># master = sentinel.master_for('mymaster', socket_timeout=0.5)</span><span class="token comment" spellcheck="true"># w_ret = master.set('foo', 'bar')</span><span class="token comment" spellcheck="true"># slave = sentinel.slave_for('mymaster', socket_timeout=0.5)</span><span class="token comment" spellcheck="true"># r_ret = slave.get('foo')</span><span class="token comment" spellcheck="true"># print(r_ret)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、持久化&quot;&gt;&lt;a href=&quot;#一、持久化&quot; class=&quot;headerlink&quot; title=&quot;一、持久化&quot;&gt;&lt;/a&gt;一、持久化&lt;/h2&gt;&lt;p&gt;持久化表示把数据存储到硬盘的过程&lt;/p&gt;
&lt;p&gt;持久化的两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快照：某事某刻数据库的完</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis高级" scheme="http://huang_zhao.gitee.io/task/tags/Redis%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Rabbitmq、Rpc</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/24/Rabbitmq%EF%BC%8CRpc/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/24/Rabbitmq%EF%BC%8CRpc/</id>
    <published>2020-03-24T12:30:17.000Z</published>
    <updated>2020-09-09T11:19:32.791Z</updated>
    
    <content type="html"><![CDATA[<p>消息队列介绍：<strong><a href="http://mrw.so/6m21VY">http://mrw.so/6m21VY</a></strong></p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 原生安装    <span class="token operator">-</span>安装扩展epel源    <span class="token operator">-</span>yum <span class="token operator">-</span>y install erlang    <span class="token operator">-</span>yum <span class="token operator">-</span>y install rabbitmq<span class="token operator">-</span>server    <span class="token operator">-</span>systemctl start rabbitmq<span class="token operator">-</span>server<span class="token number">2</span> docker拉取    <span class="token operator">-</span>docker pull rabbitmq<span class="token punctuation">:</span>management（自动开启了web管理界面）    <span class="token operator">-</span>docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name rabbitmq <span class="token operator">-</span>e RABBITMQ_DEFAULT_USER<span class="token operator">=</span>admin <span class="token operator">-</span>e RABBITMQ_DEFAULT_PASS<span class="token operator">=</span>admin <span class="token operator">-</span>p <span class="token number">15672</span><span class="token punctuation">:</span><span class="token number">15672</span> <span class="token operator">-</span>p <span class="token number">5672</span><span class="token punctuation">:</span><span class="token number">5672</span> rabbitmq<span class="token punctuation">:</span>management<span class="token number">3</span> <span class="token number">5672</span>：是rabbitmq的默认端口  <span class="token number">15672</span>：web管理界面的端口<span class="token number">4</span> 创建用户rabbitmqctl add_user lqz <span class="token number">123</span><span class="token number">5</span> 分配权限rabbitmqctl set_user_tags lqz administratorrabbitmqctl set_permissions <span class="token operator">-</span>p <span class="token string">"/"</span> lqz <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span></code></pre><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h3><h4 id="2-1-消息安全☞ack"><a href="#2-1-消息安全☞ack" class="headerlink" title="2.1 消息安全☞ack"></a>2.1 消息安全☞ack</h4><p>是否响应数据已经被接受</p><p>就是消费者中接受数据的时候配置一个参数auto_ack=False，就会导致拿到数据了，但是数据还在队列中</p><p><strong>消费者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pika<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建一个用户对象</span>    credentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建一个链接对象</span>    connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'121.36.98.49'</span><span class="token punctuation">,</span> credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建操作对象</span>    channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建一个队列（默认是在生产者中创建，为了防止消费者先启动，多写也不会重复创建）</span>    channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [x] Received %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等到hello队列中出现数据，如果出现则执行callback</span>    channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span> on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span> auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一直启动等待接收消息</span>    channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>生产者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pika<span class="token comment" spellcheck="true"># 拿到连接对象</span><span class="token comment" spellcheck="true"># connection = pika.BlockingConnection(pika.ConnectionParameters('101.133.225.166'))</span><span class="token comment" spellcheck="true"># 有用户名密码的情况</span>credentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'121.36.98.49'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拿到channel对象</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 声明一个队列</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 指定队列名字</span><span class="token comment" spellcheck="true"># 生产者向hello队列中放一条消息"lqz js nb"</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                      routing_key<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span>                      body<span class="token operator">=</span><span class="token string">'lqz js nb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Sent 'Hello World!'"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭连接</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-2-消息安全☞durable持久化"><a href="#2-2-消息安全☞durable持久化" class="headerlink" title="2.2 消息安全☞durable持久化"></a>2.2 消息安全☞durable持久化</h4><p>durable持久化消费者不需要动，只要在生产者产生数据的时候配置一个参数即可</p><p>注意：配置持久化必须是新的队列</p><p><strong>生产者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 声明一个队列(创建一个队列),durable=True支持持久化，队列必须是新的才可以</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'lqz1'</span><span class="token punctuation">,</span>durable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                      routing_key<span class="token operator">=</span><span class="token string">'lqz1'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 消息队列名称</span>                      body<span class="token operator">=</span><span class="token string">'111'</span><span class="token punctuation">,</span>                      properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>                          delivery_mode<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># make message persistent,消息也持久化</span>                      <span class="token punctuation">)</span>                      <span class="token punctuation">)</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-3-闲置消费"><a href="#2-3-闲置消费" class="headerlink" title="2.3 闲置消费"></a>2.3 闲置消费</h4><p>默认情况下，如果有多个消费者，是按照顺序第一个消息给第一个消费者，第二个消息给第二个消费者</p><p>但是可能第一个消息的消费者处理消息很耗时，一直没结束，就可以让第二个消费者优先获得闲置的消息</p><p>就是在消费者接受数据前配置一个参数</p><p><strong>消费者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 声明一个队列(创建一个队列)</span><span class="token comment" spellcheck="true"># channel.queue_declare(queue='lqz123')</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者接受到了任务: %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通知服务端，消息取走了，如果auto_ack=False，不加下面，消息会一直存在</span>    ch<span class="token punctuation">.</span>basic_ack<span class="token punctuation">(</span>delivery_tag<span class="token operator">=</span>method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_qos<span class="token punctuation">(</span>prefetch_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#####就只有这一句话 谁闲置谁获取，没必要按照顺序一个一个来</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'lqz123'</span><span class="token punctuation">,</span>on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span>auto_ack<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-4-发布订阅"><a href="#2-4-发布订阅" class="headerlink" title="2.4 发布订阅"></a>2.4 发布订阅</h4><p>发布订阅的本质是观察者模式，发布者发布了内容，订阅者只要订阅了发布者就会接受发布者推送的内容</p><p><strong>发布者</strong></p><p>与上面生产者模式的不同，这里发布者是通过一个中间者，所有绑定了这个中间者的订阅者绑定的队列都会接受到这个推送</p><p>就像a,b,c（订阅者）都关注了一个公众号（发布者），只要公众号发了消息，都会由微信的服务器（中间者）转发这个消息到a,b,c的账号（队列）上</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m1'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'fanout'</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m1'</span><span class="token punctuation">,</span>                      routing_key<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                      body<span class="token operator">=</span><span class="token string">'lqz nb'</span><span class="token punctuation">)</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>订阅者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># exchange='m1',exchange(秘书)的名称</span><span class="token comment" spellcheck="true"># exchange_type='fanout' , 秘书工作方式将消息发送给所有的队列</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m1'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'fanout'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机生成一个队列</span>result <span class="token operator">=</span> channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>queue_name <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue<span class="token keyword">print</span><span class="token punctuation">(</span>queue_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 让exchange和queque进行绑定.</span>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m1'</span><span class="token punctuation">,</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者接受到了任务: %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span>auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-5-发布订阅扩☞Routing-按关键字匹配"><a href="#2-5-发布订阅扩☞Routing-按关键字匹配" class="headerlink" title="2.5 发布订阅扩☞Routing(按关键字匹配)"></a>2.5 发布订阅扩☞Routing(按关键字匹配)</h4><p>发布订阅接受推送的条件默认是只有订阅者能接受，routing限定了订阅者必须要有绑定这个关键字</p><p><strong>发布者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'direct'</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>                      routing_key<span class="token operator">=</span><span class="token string">'bnb'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 多个关键字，指定routing_key</span>                      body<span class="token operator">=</span><span class="token string">'lqz nb'</span><span class="token punctuation">)</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>订阅者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># exchange='m1',exchange(秘书)的名称</span><span class="token comment" spellcheck="true"># exchange_type='direct' , 秘书工作方式将消息发送给不同的关键字</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'direct'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机生成一个队列</span>result <span class="token operator">=</span> channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>queue_name <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue<span class="token keyword">print</span><span class="token punctuation">(</span>queue_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 让exchange和queque进行绑定. 可以有多个</span>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>routing_key<span class="token operator">=</span><span class="token string">'nb'</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>routing_key<span class="token operator">=</span><span class="token string">'bnb'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者接受到了任务: %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span>auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-6-发布订阅高级☞Topic-按关键字模糊匹配"><a href="#2-6-发布订阅高级☞Topic-按关键字模糊匹配" class="headerlink" title="2.6 发布订阅高级☞Topic(按关键字模糊匹配)"></a>2.6 发布订阅高级☞Topic(按关键字模糊匹配)</h4><p><strong>发布者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m3'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'topic'</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m3'</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true"># routing_key='lqz.handsome', #都能收到</span>                      routing_key<span class="token operator">=</span><span class="token string">'lqz.handsome.xx'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#只有lqz.#能收到</span>                      body<span class="token operator">=</span><span class="token string">'lqz nb'</span><span class="token punctuation">)</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>*只能加一个单词</p><p>#可以加任意单词字符</p><p><strong>订阅者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># exchange='m1',exchange(秘书)的名称</span><span class="token comment" spellcheck="true"># exchange_type='direct' , 秘书工作方式将消息发送给不同的关键字</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m3'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'topic'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机生成一个队列</span>result <span class="token operator">=</span> channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>queue_name <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue<span class="token keyword">print</span><span class="token punctuation">(</span>queue_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 让exchange和queque进行绑定.</span>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m3'</span><span class="token punctuation">,</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>routing_key<span class="token operator">=</span><span class="token string">'lqz.#'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者接受到了任务: %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span>auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-rpc远程过程调用"><a href="#3-rpc远程过程调用" class="headerlink" title="3 rpc远程过程调用"></a>3 rpc远程过程调用</h3><p>是微服务的一种概念，通过http请求或者socket请求去服务端调用函数或者类的方法</p><h4 id="3-1-rabbitmq实现rpc"><a href="#3-1-rabbitmq实现rpc" class="headerlink" title="3.1 rabbitmq实现rpc"></a>3.1 rabbitmq实现rpc</h4><p><strong>服务端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span> credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'rpc_queue'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">on_request</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> props<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> int<span class="token punctuation">(</span>body<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [.] fib(%s)"</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>    response <span class="token operator">=</span> fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                     routing_key<span class="token operator">=</span>props<span class="token punctuation">.</span>reply_to<span class="token punctuation">,</span>                     properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>correlation_id <span class="token operator">=</span> \                                                         props<span class="token punctuation">.</span>correlation_id<span class="token punctuation">)</span><span class="token punctuation">,</span>                     body<span class="token operator">=</span>str<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>basic_ack<span class="token punctuation">(</span>delivery_tag<span class="token operator">=</span>method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_qos<span class="token punctuation">(</span>prefetch_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'rpc_queue'</span><span class="token punctuation">,</span> on_message_callback<span class="token operator">=</span>on_request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [x] Awaiting RPC requests"</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>客户端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pika<span class="token keyword">import</span> uuid<span class="token keyword">class</span> <span class="token class-name">FibonacciRpcClient</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>credentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span> credentials<span class="token operator">=</span>self<span class="token punctuation">.</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>channel <span class="token operator">=</span> self<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>callback_queue <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue        self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>            queue<span class="token operator">=</span>self<span class="token punctuation">.</span>callback_queue<span class="token punctuation">,</span>            on_message_callback<span class="token operator">=</span>self<span class="token punctuation">.</span>on_response<span class="token punctuation">,</span>            auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> props<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>corr_id <span class="token operator">==</span> props<span class="token punctuation">.</span>correlation_id<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>response <span class="token operator">=</span> body    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>response <span class="token operator">=</span> None        self<span class="token punctuation">.</span>corr_id <span class="token operator">=</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>            exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>            routing_key<span class="token operator">=</span><span class="token string">'rpc_queue'</span><span class="token punctuation">,</span>            properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>                reply_to<span class="token operator">=</span>self<span class="token punctuation">.</span>callback_queue<span class="token punctuation">,</span>                correlation_id<span class="token operator">=</span>self<span class="token punctuation">.</span>corr_id<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            body<span class="token operator">=</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>response <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>process_data_events<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>response<span class="token punctuation">)</span>fibonacci_rpc <span class="token operator">=</span> FibonacciRpcClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [x] Requesting fib(30)"</span><span class="token punctuation">)</span>response <span class="token operator">=</span> fibonacci_rpc<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 外界看上去，就像调用本地的call()函数一样</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [.] Got %r"</span> <span class="token operator">%</span> response<span class="token punctuation">)</span></code></pre><h4 id="3-2-SimpleXMLRPCServer实现rpc"><a href="#3-2-SimpleXMLRPCServer实现rpc" class="headerlink" title="3.2 SimpleXMLRPCServer实现rpc"></a>3.2 SimpleXMLRPCServer实现rpc</h4><p><strong>服务端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> xmlrpc<span class="token punctuation">.</span>server <span class="token keyword">import</span> SimpleXMLRPCServer<span class="token keyword">class</span> <span class="token class-name">RPCServer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RPCServer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'server:'+str(i): i for i in range(100)&amp;#125;</span>        self<span class="token punctuation">.</span>recv_data <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">getObj</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get data'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>send_data    <span class="token keyword">def</span> <span class="token function">sendObj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send data'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recv_data <span class="token operator">=</span> data        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv_data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># SimpleXMLRPCServer</span>server <span class="token operator">=</span> SimpleXMLRPCServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token number">4242</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allow_none<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>register_introspection_functions<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>register_instance<span class="token punctuation">(</span>RPCServer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>客户端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> xmlrpc<span class="token punctuation">.</span>client <span class="token keyword">import</span> ServerProxy<span class="token comment" spellcheck="true"># SimpleXMLRPCServer</span><span class="token keyword">def</span> <span class="token function">xmlrpc_client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xmlrpc client'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ServerProxy<span class="token punctuation">(</span><span class="token string">'http://localhost:4242'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'client:'+str(i): i for i in range(100)&amp;#125;</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token operator">=</span>c<span class="token punctuation">.</span>getObj<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        c<span class="token punctuation">.</span>sendObj<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xmlrpc total time %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    xmlrpc_client<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="3-3-ZeroRPC实现rpc"><a href="#3-3-ZeroRPC实现rpc" class="headerlink" title="3.3 ZeroRPC实现rpc"></a>3.3 ZeroRPC实现rpc</h4><p><strong>服务端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> zerorpc<span class="token keyword">class</span> <span class="token class-name">RPCServer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RPCServer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'server:'+str(i): i for i in range(100)&amp;#125;</span>        self<span class="token punctuation">.</span>recv_data <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">getObj</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get data'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>send_data    <span class="token keyword">def</span> <span class="token function">sendObj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send data'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recv_data <span class="token operator">=</span> data        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv_data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># zerorpc</span>s <span class="token operator">=</span> zerorpc<span class="token punctuation">.</span>Server<span class="token punctuation">(</span>RPCServer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'tcp://0.0.0.0:4243'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>客户端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> zerorpc<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># zerorpc</span><span class="token keyword">def</span> <span class="token function">zerorpc_client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'zerorpc client'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> zerorpc<span class="token punctuation">.</span>Client<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'tcp://127.0.0.1:4243'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'client:'+str(i): i for i in range(100)&amp;#125;</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token operator">=</span>c<span class="token punctuation">.</span>getObj<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        c<span class="token punctuation">.</span>sendObj<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'total time %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    zerorpc_client<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;消息队列介绍：&lt;strong&gt;&lt;a href=&quot;http://mrw.so/6m21VY&quot;&gt;http://mrw.so/6m21VY&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-安装&quot;&gt;&lt;a href=&quot;#1-安装&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Rabbitmq" scheme="http://huang_zhao.gitee.io/task/tags/Rabbitmq/"/>
    
    <category term="Rpc" scheme="http://huang_zhao.gitee.io/task/tags/Rpc/"/>
    
    <category term="消息队列" scheme="http://huang_zhao.gitee.io/task/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>消息队列</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</id>
    <published>2020-03-24T12:30:17.000Z</published>
    <updated>2020-09-09T11:19:07.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>消息队列：是一种数据结构</p><p>生产者：把数据放入到队列中的一方</p><p>消费者：把数据从队列中取出的一方</p><h3 id="2-存在的意义"><a href="#2-存在的意义" class="headerlink" title="2 存在的意义"></a>2 存在的意义</h3><h4 id="2-1-解耦"><a href="#2-1-解耦" class="headerlink" title="2.1 解耦"></a>2.1 解耦</h4><p>场景一：</p><p>存在三个系统</p><p>a系统要给b系统发送数据，调用系统b的接口</p><p>a系统要给c系统发送数据，调用系统c的接口</p><p>如果有一天b不需要a的数据了，就需要让a注释掉掉b接口的代码</p><p>如果新增系统d要接受数据，又要增加调用系统d的代码</p><p><strong>这些调用逻辑都是一些重复的不可避免的劳动</strong></p><p>此处的a系统与bcd系统高度耦合了，因为之间的数据交互如果需要修改，或者接受数据的系统出现了问题，那么a系统的调用逻辑还要思考需不需要继续发送数据</p><p>场景二：</p><p>在上述场景加入消息队列，消息队列是生产者（a系统）与消费者（bcd系统）之间的一个数据交互中转站</p><p>a系统发布消息，bcd订阅消息，如果不需要订阅就取消订阅即可，并不需要修改发布消息的代码</p><h4 id="2-2-异步"><a href="#2-2-异步" class="headerlink" title="2.2 异步"></a>2.2 异步</h4><p>消息队列是一个异步任务，如果a系统要完成<strong>产生数据（100ms）</strong>，<strong>发送数据至系统b（300ms）</strong>，<strong>发送数据至系统c（300ms）</strong></p><p>此时a系统完成消息发送是一个同步任务，完成时间是100+300+300=700ms</p><p>如果用了消息队列，a系统只要产生消息，并发送至消息队列，由消息队列异步回调订阅过的系统接口</p><p>此时a系统完成发送消息的时间是100ms</p><h4 id="2-3-削峰-限流"><a href="#2-3-削峰-限流" class="headerlink" title="2.3 削峰/限流"></a>2.3 削峰/限流</h4><p>如果有一个商场网站出了促销活动，此时每秒的请求数是5000，一般的mysql只能处理2000个左右的并发。</p><p>此时在用户与mysql之间加入mq，它可以接受者5000个请求，但是只给mysql发送2000个。</p><p>就像一个喷水的管子，如果突然流水量过大，管子就会裂开，我们通过开关把水流量放小一点就问题不大，但是我们要知道，在这个开关后水压还是这么大，mq做到的只是限制最大量。</p><h4 id="2-4-其他应用场景"><a href="#2-4-其他应用场景" class="headerlink" title="2.4 其他应用场景"></a>2.4 其他应用场景</h4><ul><li><strong>日志处理</strong>：将大量日志存储到消息队列中（一般采用分布式消息队列kafka），解决大量日志传输的问题。其中，消息队列负责日志数据的接收，存储和转发；</li><li><strong>消息通讯</strong>：点对点通讯或聊天室通讯。</li></ul><h3 id="3-使用消息队列会有什么优缺点"><a href="#3-使用消息队列会有什么优缺点" class="headerlink" title="3 使用消息队列会有什么优缺点"></a>3 使用消息队列会有什么优缺点</h3><p>优点其实就是上文中谈到的，在特殊场景下的应用好处，解耦、异步与削峰等。</p><p><strong>系统可用性</strong>：<br> 系统因为依赖与MQ消息队列这个服务，若这个服务崩溃了，那么我们的整个系统将不可用。为此往往我们都是通过集群/分布式部署来实现MQ高可用的。</p><p>高可用：通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性</p><p><strong>系统复杂度</strong>：<br> 我们将数据写到消息队列上，就有可能会存在数据丢失的情况。以及我们如何保证消息没有被重复消费等问题。</p><p><strong>一致性问题</strong>：<br> A系统将请求写入到消息队列后就返回请求成功了，假设在多机部署的时候，系统B、C写库成功，假设D写入失败了，这种情况下就会产生数据不一致的问题。</p><p><a href="https://www.jianshu.com/p/ec7c2503c3ef">https://www.jianshu.com/p/ec7c2503c3ef</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1 定义&quot;&gt;&lt;/a&gt;1 定义&lt;/h3&gt;&lt;p&gt;消息队列：是一种数据结构&lt;/p&gt;
&lt;p&gt;生产者：把数据放入到队列中的一方&lt;/p&gt;
&lt;p&gt;消费者：把数据从队列中取出的一方&lt;/</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="消息队列" scheme="http://huang_zhao.gitee.io/task/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>requests模块使用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/21/requests%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/21/requests%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-21T05:20:11.000Z</published>
    <updated>2020-08-26T01:00:39.257Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-发送请求"><a href="#1-发送请求" class="headerlink" title="1 发送请求"></a>1 发送请求</h4><pre class=" language-python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://images.cnblogs.com/cnblogs_com/xuexianqi/1749514/o_20042405405202.png'</span><span class="token punctuation">)</span></code></pre><h4 id="2-请求地址中携带数据"><a href="#2-请求地址中携带数据" class="headerlink" title="2 请求地址中携带数据"></a>2 请求地址中携带数据</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># url的编码和解码</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token punctuation">,</span>unquoteheader <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>     <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/s'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'wd':'美女'&amp;#125;)</span></code></pre><h4 id="3-请求中带cookie"><a href="#3-请求中带cookie" class="headerlink" title="3 请求中带cookie"></a>3 请求中带cookie</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一：在headers中携带</span>header <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'cookie'</span><span class="token punctuation">:</span><span class="token string">'name=hz'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方式二：添加cookies参数</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'hz'&amp;#125;)</span></code></pre><h4 id="4-post请求发送url和json格式数据"><a href="#4-post请求发送url和json格式数据" class="headerlink" title="4 post请求发送url和json格式数据"></a>4 post请求发送url和json格式数据</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># url格式</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'hz'&amp;#125;)</span><span class="token comment" spellcheck="true"># post请求发送json格式数据</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'hz'&amp;#125;)</span></code></pre><h4 id="5-session函数自动处理携带cookie"><a href="#5-session函数自动处理携带cookie" class="headerlink" title="5 session函数自动处理携带cookie"></a>5 session函数自动处理携带cookie</h4><pre class=" language-python"><code class="language-python">session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/login/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>r2 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/order/'</span><span class="token punctuation">)</span></code></pre><h4 id="6-response对象的方法"><a href="#6-response对象的方法" class="headerlink" title="6 response对象的方法"></a>6 response对象的方法</h4><pre class=" language-python"><code class="language-python">respone<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 响应的文本信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应体的二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 响应头</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># cookie</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  把cookie转成字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># key和value</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 请求的url</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>history<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#[]放重定向之前的地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应的编码方式</span>respone<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 图片，视频，大文件，一点一点循环取出来</span></code></pre><h4 id="7-编码问题"><a href="#7-编码问题" class="headerlink" title="7 编码问题"></a>7 编码问题</h4><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.autohome.com/news'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 一旦打印出来出现乱码问题</span><span class="token comment" spellcheck="true"># 方式一：手动设定编码格式</span>res<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'gb2312'</span><span class="token comment" spellcheck="true"># 方式二</span>res<span class="token punctuation">.</span>encoding<span class="token operator">=</span>res<span class="token punctuation">.</span>apparent_encoding<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h4 id="8-json解析"><a href="#8-json解析" class="headerlink" title="8 json解析"></a>8 json解析</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonrespone<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/index/'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'lqz'&amp;#125;)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>respone<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应的文本</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>respone<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 相当于上面那句话</span></code></pre><h4 id="9-使用代理"><a href="#9-使用代理" class="headerlink" title="9 使用代理"></a>9 使用代理</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># respone=requests.get('http://127.0.0.1:8000/index/',proxies=&amp;#123;'http':'代理的地址和端口号',&amp;#125;)</span><span class="token comment" spellcheck="true"># 代理，免费代理，收费代理花钱买</span><span class="token comment" spellcheck="true"># 代理池：列表放了一堆代理ip，每次随机取一个，再发请求就不会封ip了</span><span class="token comment" spellcheck="true"># 高匿和透明代理？如果使用高匿代理，后端无论如何拿不到你的ip，使用透明，后端能够拿到你的ip</span><span class="token comment" spellcheck="true"># 后端如何拿到透明代理的ip，  后端：X-Forwarded-For</span><span class="token comment" spellcheck="true"># respone=requests.get('https://www.baidu.com/',proxies=&amp;#123;'http':'27.46.20.226:8888',&amp;#125;)</span><span class="token comment" spellcheck="true"># print(respone.text)</span></code></pre><h4 id="10-其他操作"><a href="#10-其他操作" class="headerlink" title="10 其他操作"></a>10 其他操作</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 11 超时设置</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># respone=requests.get('https://www.baidu.com',</span><span class="token comment" spellcheck="true">#                      timeout=0.0001)</span><span class="token comment" spellcheck="true"># 12 认证设置（你见不到了）</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># r=requests.get('xxx',auth=('user','password'))</span><span class="token comment" spellcheck="true"># print(r.status_code)</span><span class="token comment" spellcheck="true"># 13 异常处理</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># from requests.exceptions import * #可以查看requests.exceptions获取异常类型</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># try:</span><span class="token comment" spellcheck="true">#     r=requests.get('http://www.baidu.com',timeout=0.00001)</span><span class="token comment" spellcheck="true"># # except ReadTimeout:</span><span class="token comment" spellcheck="true"># #     print('===:')</span><span class="token comment" spellcheck="true"># except Exception as e:</span><span class="token comment" spellcheck="true">#     print(e)</span><span class="token comment" spellcheck="true"># 14 上传文件</span><span class="token comment" spellcheck="true"># res=requests.post('http://127.0.0.1:8000/index/',files=&amp;#123;'myfile':open('a.jpg','rb')&amp;#125;)</span><span class="token comment" spellcheck="true"># print(res.text)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-发送请求&quot;&gt;&lt;a href=&quot;#1-发送请求&quot; class=&quot;headerlink&quot; title=&quot;1 发送请求&quot;&gt;&lt;/a&gt;1 发送请求&lt;/h4&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-pytho</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="python模块" scheme="http://huang_zhao.gitee.io/task/tags/python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>跨域问题及解决</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</id>
    <published>2020-03-15T05:33:43.000Z</published>
    <updated>2020-08-26T01:01:58.672Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、同源策略"><a href="#一、同源策略" class="headerlink" title="一、同源策略"></a>一、同源策略</h2><p>同源策略：请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同</p><p>比如:我在本地上的域名是127.0.0.1:8000,请求另外一个域名：127.0.0.1:8001一段数据</p><p>浏览器上就会报错，这就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险</p><h2 id="二、CORS（跨域资源共享）简介"><a href="#二、CORS（跨域资源共享）简介" class="headerlink" title="二、CORS（跨域资源共享）简介"></a>二、CORS（跨域资源共享）简介</h2><p><strong>服务端对某个来源的请求开放请求资源的接口，就是cors</strong></p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p><strong>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><h2 id="三、CORS两种请求详解"><a href="#三、CORS两种请求详解" class="headerlink" title="三、CORS两种请求详解"></a>三、CORS两种请求详解</h2><p>只要同时满足以下两大条件，就属于简单请求，只要其中一个不满足就是非简单请求</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""（1) 请求方法是以下三种方法之一：    HEAD    GET    POST"""</span><span class="token triple-quoted-string string">"""（2）HTTP的头信息不超出以下几种字段：    Accept    Accept-Language    Content-Language    Last-Event-ID    Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain"""</span></code></pre><p><strong>两种请求的区别</strong></p><ul><li>简单请求：一次请求</li><li>非简单请求：两次请求，会在数据请求发送之前，先发送一次‘预检’请求，如果通过了则可以发送真正的请求</li></ul><p><strong>预检</strong></p><pre class=" language-python"><code class="language-python"> <span class="token operator">=</span><span class="token operator">></span> 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过        Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Method <span class="token operator">=</span><span class="token operator">></span> 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过        Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Headers</code></pre><p><strong>支持跨域，简单请求</strong></p><p>服务器设置响应头：Access-Control-Allow-Origin = ‘域名’ 或 ‘*’</p><p><strong>支持跨域，复杂请求</strong></p><p>由于复杂请求时，首先会发送“预检”请求，如果“预检”成功，则发送真实数据。</p><ul><li>“预检”请求时，允许请求方式则需服务器设置响应头：Access-Control-Request-Method</li><li>“预检”请求时，允许请求头则需服务器设置响应头：Access-Control-Request-Headers</li></ul><h2 id="四、django中解决跨域的两种方式"><a href="#四、django中解决跨域的两种方式" class="headerlink" title="四、django中解决跨域的两种方式"></a>四、django中解决跨域的两种方式</h2><h3 id="1-自定义中间件"><a href="#1-自定义中间件" class="headerlink" title="1 自定义中间件"></a>1 自定义中间件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定制中间件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">class</span> <span class="token class-name">CorsMiddleWare</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">"OPTIONS"</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#可以加*</span>            response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Content-Type"</span>        response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://localhost:8080"</span>        <span class="token keyword">return</span> response</code></pre><h3 id="2-使用django-cors-headers-解决跨域问题"><a href="#2-使用django-cors-headers-解决跨域问题" class="headerlink" title="2 使用django-cors-headers 解决跨域问题"></a>2 使用django-cors-headers 解决跨域问题</h3><ul><li><p>安装：pip install django-cors-headers</p></li><li><p>注册app：’corsheaders’</p></li><li><p>添加中间件：’corsheaders.middleware.CorsMiddleware’,</p></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 基本配置</span>CORS_ALLOW_CREDENTIALS <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_ALLOW_ALL <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_WHITELIST <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'*'</span><span class="token punctuation">)</span>CORS_ALLOW_METHODS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'DELETE'</span><span class="token punctuation">,</span>    <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token string">'OPTIONS'</span><span class="token punctuation">,</span>    <span class="token string">'PATCH'</span><span class="token punctuation">,</span>    <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token string">'PUT'</span><span class="token punctuation">,</span>    <span class="token string">'VIEW'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>CORS_ALLOW_HEADERS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>    <span class="token string">'X_FILENAME'</span><span class="token punctuation">,</span>    <span class="token string">'accept-encoding'</span><span class="token punctuation">,</span>    <span class="token string">'authorization'</span><span class="token punctuation">,</span>    <span class="token string">'content-type'</span><span class="token punctuation">,</span>    <span class="token string">'dnt'</span><span class="token punctuation">,</span>    <span class="token string">'origin'</span><span class="token punctuation">,</span>    <span class="token string">'user-agent'</span><span class="token punctuation">,</span>    <span class="token string">'x-csrftoken'</span><span class="token punctuation">,</span>    <span class="token string">'x-requested-with'</span><span class="token punctuation">,</span>    <span class="token string">'Pragma'</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、同源策略&quot;&gt;&lt;a href=&quot;#一、同源策略&quot; class=&quot;headerlink&quot; title=&quot;一、同源策略&quot;&gt;&lt;/a&gt;一、同源策略&lt;/h2&gt;&lt;p&gt;同源策略：请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="跨域问题" scheme="http://huang_zhao.gitee.io/task/tags/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>sql搜索变慢的原因</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/15/sql%E6%90%9C%E7%B4%A2%E5%8F%98%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/15/sql%E6%90%9C%E7%B4%A2%E5%8F%98%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/</id>
    <published>2020-03-15T05:33:43.000Z</published>
    <updated>2020-08-26T01:13:13.169Z</updated>
    
    <content type="html"><![CDATA[<pre class=" language-mysql"><code class="language-mysql">mysql> CREATE TABLE `t_tweet` (  `id` int(11) NOT NULL,  `tweet_id` varchar(32) DEFAULT NULL,  `user_id` int(11) DEFAULT NULL,  `gmt_create` datetime DEFAULT NULL,  PRIMARY KEY (`id`),  KEY `tweet_id` (`tweet_id`),  KEY `gmt_create` (`gmt_create`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></pre><h5 id="1-用函数处理索引"><a href="#1-用函数处理索引" class="headerlink" title="1 用函数处理索引"></a>1 用函数处理索引</h5><p>Q：为什么条件是<code>where gmt_create=&#39;2018-7-1’</code>的时候可以用上索引，而改成<code>where month(gmt_create)=7</code>的时候就不行了？</p><p>A：sql搜索是根据B+树快速定位的，这种能力来源于同一层兄弟节点的有序性。</p><p>简单来说如果是<code>where gmt_create=&#39;2018-7-1’</code>那么根据节点的有序性，我们可以快速知道所要找的叶子节点的路径</p><p>如果是<code>where month(gmt_create)=7</code>，树在第一层就不知道如何判断子节点的走向，就会放弃树搜索功能，走全文遍历。</p><p>总结：对索引字段进行函数操作，会破坏索引的值的有序性</p><p>但并不是直接遍历主键了，优化器会对比两者之间的索引大小，最后还是会决定索引gmt_create</p><p><strong>优化器在某些问题上确实有“偷懒”行为，即使是对于不改变有序性的函数，也不会考虑使用索 引。</strong></p><p>比如，对于<code>select * from t_tweet where id + 1 = 10000</code>这个SQL语句，这个加1操作并不会改变有序性，但是MySQL优化器还是不能用id索引快速定位到9999这一行。所以，需要你在写 SQL语句的时候，手动改写成 <code>where id = 10000 -1</code>才可以。</p><h5 id="2-索引的数据类型需要类型转化"><a href="#2-索引的数据类型需要类型转化" class="headerlink" title="2 索引的数据类型需要类型转化"></a>2 索引的数据类型需要类型转化</h5><pre class=" language-python"><code class="language-python">select <span class="token operator">*</span> <span class="token keyword">from</span> t_tweet where tweet_id<span class="token operator">=</span><span class="token number">110717</span><span class="token punctuation">;</span></code></pre><p>通过上述索引我们会发现还是进行了全表扫描，可以看到我们传入的值是 110717是整形，但是表中字段需要的数据类型是varchar</p><p>这里有两个问题：</p><p>Q1：数据类型转化的规则是什么？</p><p>Q2：为什么有数据类型转换，就会走全表索引？</p><p>问题1的答案是当数字类型和字符类型比较时会把字符类型转化成整形做<strong>整形比较</strong></p><p>可以通过<code>select &#39;10&#39;&gt;9</code>如果返回1，则是转化成整形，如果返回0则是转化成字符串</p><p>所以问题2的答案也油然而生，这个语句写全了</p><pre class=" language-mysql"><code class="language-mysql">select * from t_tweet where CAST(tweet_id AS tweetId int) = 110717;</code></pre><p>本质上还是对字段做了函数操作，导致优化器放弃走树搜索功能</p><p>转自：<a href="https://juejin.im/post/6860513755000733709#heading-1">https://juejin.im/post/6860513755000733709#heading-1</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot; language-mysql&quot;&gt;&lt;code class=&quot;language-mysql&quot;&gt;mysql&gt; CREATE TABLE `t_tweet` (  `id` int(11) NOT NULL,  `tweet_id` varchar(32) DE</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="mysql" scheme="http://huang_zhao.gitee.io/task/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>selenium基本使用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/03/15/selenium%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/03/15/selenium%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-15T05:33:43.000Z</published>
    <updated>2020-08-26T01:14:56.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ul><li>模块安装：<code>pip install selenium</code></li><li>驱动安装，安装和浏览器适配的驱动exe，放到解释器的script文件夹中（<a href="http://npm.taobao.org/mirrors/chromedriver/%EF%BC%89">http://npm.taobao.org/mirrors/chromedriver/）</a></li></ul><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 案例：打开百度输入搜索海贼王</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 得到一个谷歌浏览器驱动对象</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 隐式等待：页面中查找标签时等待，如果超出时间还没找到就报错</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>input_tag <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'海贼王'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># input_tag.send_keys(Keys.ENTER)</span>commit_tag <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span>commit_tag<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>所有方法</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ##############选择器（find系列）</span><span class="token comment" spellcheck="true"># ===============所有方法===================</span><span class="token comment" spellcheck="true"># 1、find_element_by_id   # 通过id查找控件</span><span class="token comment" spellcheck="true"># 2、find_element_by_link_text  # 通过a标签内容找</span><span class="token comment" spellcheck="true"># 3、find_element_by_partial_link_text  # 通过a标签内容找，模糊匹配</span><span class="token comment" spellcheck="true"># 4、find_element_by_tag_name   # 标签名</span><span class="token comment" spellcheck="true"># 5、find_element_by_class_name  # 类名</span><span class="token comment" spellcheck="true"># 6、find_element_by_name      # name属性</span><span class="token comment" spellcheck="true"># 7、find_element_by_css_selector  # 通过css选择器</span><span class="token comment" spellcheck="true"># 8、find_element_by_xpath       # 通过xpaht选择器</span>css选择中<span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取文本</span><span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::attr(href)'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取标签</span><span class="token comment" spellcheck="true"># 以上全都可以改成find_elements_xxx获取多个</span></code></pre><p><strong>获取属性</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重点</span><span class="token comment" spellcheck="true"># tag.get_attribute('href')  # 找当前控件 的href属性对的值</span><span class="token comment" spellcheck="true"># tag.text   # 获取文本内容</span><span class="token comment" spellcheck="true"># 了解</span><span class="token comment" spellcheck="true"># print(tag.id)   # 当前控件id号</span><span class="token comment" spellcheck="true"># print(tag.location)  # 当前控件在页面位置</span><span class="token comment" spellcheck="true"># print(tag.tag_name)  # 标签名</span><span class="token comment" spellcheck="true"># print(tag.size)      #标签的大小</span></code></pre><p><strong>其他</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">####无界面浏览器（phantomjs）</span><span class="token comment" spellcheck="true">#谷歌浏览器支持不打开页面</span><span class="token comment" spellcheck="true"># from selenium.webdriver.chrome.options import Options</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># chrome_options = Options()</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('window-size=1920x3000') #指定浏览器分辨率</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--disable-gpu') #谷歌文档提到需要加上这个属性来规避bug</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--hide-scrollbars') #隐藏滚动条, 应对一些特殊页面</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('blink-settings=imagesEnabled=false') #不加载图片, 提升速度</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--headless') #浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># bro=webdriver.Chrome(chrome_options=chrome_options,executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># bro.get('https://www.baidu.com/')</span><span class="token comment" spellcheck="true"># print(bro.page_source)</span><span class="token comment" spellcheck="true"># bro.close()</span><span class="token comment" spellcheck="true">######元素交互</span><span class="token comment" spellcheck="true"># tag.send_keys()  # 往里面写内容</span><span class="token comment" spellcheck="true"># tag.click()      # 点击控件</span><span class="token comment" spellcheck="true"># tag.clear()      # 清空控件内容</span><span class="token comment" spellcheck="true">#####执行js(有什么用?)</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># bro=webdriver.Chrome(executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># bro.implicitly_wait(5)  # 隐士等待：找一个控件，如果控件没有加载出来，等待5s中  等待所有，只需要写着一句，以后找所有控件都按这个操作来</span><span class="token comment" spellcheck="true"># bro.get('https://www.baidu.com/')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># bro.execute_script('window.open()')</span><span class="token comment" spellcheck="true"># bro.execute_script('window.open()')</span><span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token comment" spellcheck="true"># bro.close()</span><span class="token comment" spellcheck="true">####模拟浏览器前进后退</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># browser=webdriver.Chrome(executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># browser.get('https://www.baidu.com')</span><span class="token comment" spellcheck="true"># browser.get('https://www.taobao.com')</span><span class="token comment" spellcheck="true"># browser.get('http://www.sina.com.cn/')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># browser.back()</span><span class="token comment" spellcheck="true"># time.sleep(1)</span><span class="token comment" spellcheck="true"># browser.forward()</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># browser.close()</span><span class="token comment" spellcheck="true">#####获取cookie</span><span class="token comment" spellcheck="true"># bro.get_cookies()</span><span class="token comment" spellcheck="true">#### 选项卡管理(了解)</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># browser=webdriver.Chrome()</span><span class="token comment" spellcheck="true"># browser.get('https://www.baidu.com')</span><span class="token comment" spellcheck="true"># browser.execute_script('window.open()')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># print(browser.window_handles) #获取所有的选项卡</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[1])</span><span class="token comment" spellcheck="true"># browser.get('https://www.taobao.com')</span><span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[0])</span><span class="token comment" spellcheck="true"># browser.get('https://www.sina.com.cn')</span><span class="token comment" spellcheck="true"># browser.close()</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;模块安装：&lt;code&gt;pip install selenium&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;驱动安装，安装和</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>drf内置排序源码</title>
    <link href="http://huang_zhao.gitee.io/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/"/>
    <id>http://huang_zhao.gitee.io/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/</id>
    <published>2020-02-15T12:10:57.000Z</published>
    <updated>2020-08-26T00:58:50.274Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们要用排序，那么写的视图类就必须直接或间接继承ListModelMixin，因为其内部有帮我们排序的放方法</p><p>ListModelMixin</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用了视图类对象的filter_queryset方法</span>queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>但是我们视图类本身没有，根据orm查找顺序，我们就要看第一位父类</p><p>最后找到GenericAPIView的filter_queryset方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># filter_backends就是我们在视图类中写的drf内置的排序类</span>    <span class="token keyword">for</span> backend <span class="token keyword">in</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>filter_backends<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 实例化排序类对象，并调用它的filter_queryset方法</span>        queryset <span class="token operator">=</span> backend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token keyword">return</span> queryset<span class="token comment" spellcheck="true"># 视图类中我们是这样设置的</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>OrderingFilter<span class="token punctuation">]</span></code></pre><p>OrderingFilter的filter_queryset方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 调用了自己的get_ordering方法返回值应到是原本的queryset对象</span>    ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>get_ordering<span class="token punctuation">(</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span>    <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 下面是得到ordering的方法，返回的结果是('id', 'price')，直接通过这个排序</span>        <span class="token keyword">return</span> queryset<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token operator">*</span>ordering<span class="token punctuation">)</span>    <span class="token keyword">return</span> queryset</code></pre><p>OrderingFilter的get_ordering方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_ordering</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># ordering_param是在drf的配置文件中的字符串：ordering</span>    <span class="token comment" spellcheck="true"># params就是从url后ordering跟的排序字符串</span>    <span class="token comment" spellcheck="true"># params：‘id，name，price’</span>    params <span class="token operator">=</span> request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ordering_param<span class="token punctuation">)</span>    <span class="token keyword">if</span> params<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 通过一个列表生成式得到['id','name','price']</span>        fields <span class="token operator">=</span> <span class="token punctuation">[</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 通过内部remove_invalid_fields去移除fields中和视图类中设置不匹配的</span>        <span class="token comment" spellcheck="true"># 视图类是这样设置的ordering_fields = ('id', 'price')</span>        <span class="token comment" spellcheck="true"># 所以这里name是无效排序，就会通过这个方法移除</span>           ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>remove_invalid_fields<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> view<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>            <span class="token keyword">return</span> ordering</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果我们要用排序，那么写的视图类就必须直接或间接继承ListModelMixin，因为其内部有帮我们排序的放方法&lt;/p&gt;
&lt;p&gt;ListModelMixin&lt;/p&gt;
&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-py</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="drf" scheme="http://huang_zhao.gitee.io/task/tags/drf/"/>
    
    <category term="python函数" scheme="http://huang_zhao.gitee.io/task/tags/python%E5%87%BD%E6%95%B0/"/>
    
    <category term="面试" scheme="http://huang_zhao.gitee.io/task/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="源码" scheme="http://huang_zhao.gitee.io/task/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>drf☞jwt自动签发与手动签发</title>
    <link href="http://huang_zhao.gitee.io/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/"/>
    <id>http://huang_zhao.gitee.io/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/</id>
    <published>2020-02-15T07:33:45.000Z</published>
    <updated>2020-08-26T00:59:07.492Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、自动签发"><a href="#一、自动签发" class="headerlink" title="一、自动签发"></a>一、自动签发</h2><p><strong>urls</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token<span class="token comment" spellcheck="true"># 使用jwt自带的登录视图</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><strong>settings</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimeJWT_AUTH<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token comment" spellcheck="true"># 配置响应格式，必须和自动签发使用</span>  <span class="token string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span><span class="token punctuation">:</span><span class="token string">'app01.utils.my_jwt_response_payload_handler'</span><span class="token punctuation">,</span>    <span class="token string">'JWT_EXPIRATION_DELTA'</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 过期时间，手动配置</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><strong>utils</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重写jwt响应格式（需要到settings配置）</span><span class="token comment" spellcheck="true"># 与之配合使用的必须是自动签发</span><span class="token keyword">def</span> <span class="token function">my_jwt_response_payload_handler</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token operator">=</span>None<span class="token punctuation">,</span> request<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 返回什么，前端就能看到什么样子</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>        <span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'登录成功'</span><span class="token punctuation">,</span>        <span class="token string">'status'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>        <span class="token string">'username'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>username    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>然后直接在前端提交post请求发送账号和密码，会返回我们定义好的响应格式</p><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6Imh6IiwiZXhwIjoxNTk1NDE1MTEyLCJlbWFpbCI6IiJ9.BxBdsm6oBz8iPAwSSpo_7IaU4pBp6RjK4c0GJ_FYN1E"</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span>    <span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>然后拿出token对测试类发送测试请求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestAPI</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 因为内置的他没有对匿名用户设置拦截，素以匿名用户也能看到ok</span><span class="token comment" spellcheck="true"># 我们用request.user来区分</span><span class="token comment" spellcheck="true"># 这里可能会出现我登录了很多次，用每次不同的token都能登录</span><span class="token comment" spellcheck="true"># 这是因为token校验的是规则，是要加密规则符合且没有超时，那用哪次token都一样的</span></code></pre><h2 id="二、手动签发"><a href="#二、手动签发" class="headerlink" title="二、手动签发"></a>二、手动签发</h2><p><strong>utils</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> BaseJSONWebTokenAuthentication<span class="token punctuation">,</span>jwt_decode_handler<span class="token keyword">import</span> jwt<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> AuthenticationFailed<span class="token keyword">class</span> <span class="token class-name">MyAuthentication</span><span class="token punctuation">(</span>BaseJSONWebTokenAuthentication<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里重写的逻辑和BaseJSONWebTokenAuthentication里的authenticate一模一样</span>    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        jwt_token <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取浏览器传来的token</span>        <span class="token keyword">if</span> jwt_token<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                payload <span class="token operator">=</span> jwt_decode_handler<span class="token punctuation">(</span>jwt_token<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 传入token，拿出第二段用户信息,有内置的校验token功能</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>ExpiredSignature<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'签名过期'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>InvalidTokenError<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'用户非法'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 所有异常都会走到这</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 通过内置的方法把payload转换成用户对象</span>            user <span class="token operator">=</span> self<span class="token punctuation">.</span>authenticate_credentials<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">return</span> user<span class="token punctuation">,</span>None <span class="token comment" spellcheck="true"># ===》request.user,request.auth</span>        <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'您没有携带认证信息'</span><span class="token punctuation">)</span></code></pre><p><strong>sers</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true"># 多方序列化校验登录</span><span class="token keyword">import</span> re<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_encode_handler<span class="token punctuation">,</span>jwt_payload_handler<span class="token keyword">class</span> <span class="token class-name">LoginSer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 我们要提交校验数据的时候，如果直接用下面Meta绑定给模型类的话</span>    <span class="token comment" spellcheck="true"># 关键点2：这里如果不写username的话，序列化器直接用的是模型类的username</span>    <span class="token comment" spellcheck="true"># 这两者的区别在于，如果覆盖写了username，他表示的可以是任何前端传来的数据，如果是模型类绑定，那只能是用户名了</span>    <span class="token comment" spellcheck="true"># 我们这里username用于多方登录的校验数据，必须要重写</span>    <span class="token comment" spellcheck="true"># 而password不用重写，因为password用的就是模型类本身的</span>    username <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>User        fields <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> username<span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^1[3-9][0-9]&amp;#123;9&amp;#125;$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>mobile<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^.+@.+$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 邮箱</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>email<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> user<span class="token punctuation">:</span>                <span class="token keyword">if</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 关键点3：jwt_payload_handler把用户数据对象转化成用户信息的字典</span>                    <span class="token comment" spellcheck="true"># jwt_encode_handler把用户信息的字典转化成token</span>                    payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># print('user:',user,type(user))</span>                    token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># print('payload:',payload,type(payload))</span>                    <span class="token comment" spellcheck="true"># print('token:',token)</span>                    <span class="token comment" spellcheck="true"># 关键点4：如果我们要给序列化器添加数据，让视图函数去使用</span>                    <span class="token comment" spellcheck="true"># 通常都是传给对象的context属性,当然直接赋值也可以，这只是他给我们提供的传值接口</span>                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> token                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> user                    self<span class="token punctuation">.</span>user <span class="token operator">=</span> user                    <span class="token keyword">return</span> attrs                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'不存在用户'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span></code></pre><p><strong>views</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LoginApi</span><span class="token punctuation">(</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在调用序列化类给context传数据，可以直接在序列化类中调用</span>        <span class="token comment" spellcheck="true"># 关键点1：注意区分序列化传值与反序列化</span>        <span class="token comment" spellcheck="true"># 这里只要拿字典取校验数据，那就传给data</span>        <span class="token comment" spellcheck="true"># 如果是要把数据对象转化成字典就传给instance</span>        user_ser <span class="token operator">=</span> sers<span class="token punctuation">.</span>LoginSer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'request': request&amp;#125;)</span>        user_ser<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>user_ser<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 100, 'msg': '登录成功', 'token': token, 'username': user.username&amp;#125;)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、自动签发&quot;&gt;&lt;a href=&quot;#一、自动签发&quot; class=&quot;headerlink&quot; title=&quot;一、自动签发&quot;&gt;&lt;/a&gt;一、自动签发&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;urls&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot; language-python</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="drf" scheme="http://huang_zhao.gitee.io/task/tags/drf/"/>
    
    <category term="jwt" scheme="http://huang_zhao.gitee.io/task/tags/jwt/"/>
    
  </entry>
  
  <entry>
    <title>魔法方法</title>
    <link href="http://huang_zhao.gitee.io/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://huang_zhao.gitee.io/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-01-25T02:30:17.000Z</published>
    <updated>2020-08-26T00:59:30.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-str"><a href="#一、-str" class="headerlink" title="一、__str__"></a>一、<code>__str__</code></h2><p>改变对象的字符串显示，可以理解为print打印对象的显示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token comment" spellcheck="true"># 定义对象的字符串表示</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>names1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 会调用s1的__str__方法</span><span class="token operator">>></span><span class="token operator">></span> 张三</code></pre><h2 id="二、-repr"><a href="#二、-repr" class="headerlink" title="二、__repr__"></a>二、<code>__repr__</code></h2><p>在python解释器环境下，会默认显示对象的repr表示。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s1张三</code></pre><p><strong>总结：</strong></p><p>str函数或者print函数调用的是obj.<strong>str</strong>()<br>repr函数或者交互式解释器调用的是obj.<strong>repr</strong>()</p><p>注意：<br>如果__str__没有被定义，那么就会使用__repr__来代替输出。<br>__str__和__repr__方法的返回值都必须是字符串。</p><h2 id="三、-format"><a href="#三、-format" class="headerlink" title="三、__format__"></a>三、<code>__format__</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    __format_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'n-a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&amp;#123;obj.name&amp;#125;-年龄是：&amp;#123;obj.age&amp;#125;'</span><span class="token punctuation">,</span>  # 名字是：lqz<span class="token operator">-</span>年龄是：<span class="token number">18</span>        <span class="token string">'n:a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&amp;#123;obj.name&amp;#125;：年龄是：&amp;#123;obj.age&amp;#125;'</span><span class="token punctuation">,</span>  # 名字是：lqz：年龄是：<span class="token number">18</span>        <span class="token string">'n/a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&amp;#123;obj.name&amp;#125;/年龄是：&amp;#123;obj.age&amp;#125;'</span><span class="token punctuation">,</span>  # 名字是：<span class="token operator">/</span>年龄是：<span class="token number">18</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">def</span> <span class="token function">__format__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_spec<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> format_spec <span class="token operator">or</span> format_spec <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">:</span>            format_spec <span class="token operator">=</span> <span class="token string">'n-a'</span>        fmt <span class="token operator">=</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">[</span>format_spec<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&amp;#123;obj.name&amp;#125;:&amp;#123;obj.age&amp;#125;</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span>format<span class="token punctuation">(</span>obj<span class="token operator">=</span>self<span class="token punctuation">)</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'lqz'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> format<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">'n/a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># lqz/24</span></code></pre><h2 id="四、-del"><a href="#四、-del" class="headerlink" title="四、__del__"></a>四、<code>__del__</code></h2><p>当对象的内存被施放的时候执行</p><p>注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除了...'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;__main__.A object at 0x10164fb00></span><span class="token keyword">del</span> a  <span class="token comment" spellcheck="true"># 删除了...</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># NameError: name 'a' is not defined</span></code></pre><h2 id="五、-dict-和-slots"><a href="#五、-dict-和-slots" class="headerlink" title="五、__dict__和__slots__"></a>五、<code>__dict__和__slots__</code></h2><p>Python中的类，都会从object里继承一个__dict__属性，这个属性中存放着类的属性和方法对应的键值对。一个类实例化之后，这个类的实例也具有这么一个__dict__属性。但是二者并不相同。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    some <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> numa <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'num': 10&amp;#125;</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'num': 10, 'age': 10&amp;#125;</span></code></pre><p>从上面的例子可以看出来，实例只保存实例的属性和方法，类的属性和方法它是不保存的。正是由于类和实例有__dict__属性，所以类和实例可以在运行过程动态添加属性和方法。</p><p>但是由于每实例化一个类都要分配一个__dict__变量，容易浪费内存。因此在Python中有一个内置的__slots__属性。当一个类设置了__slots__属性后，这个类的__dict__属性就不存在了（同理，该类的实例也不存在__dict__属性），如此一来，设置了__slots__属性的类的属性，只能是预先设定好的。</p><p>当你定义__slots__后，__slots__就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的小型数组来构建的，而不是为每个实例都定义一个__dict__字典，在__slots__中列出的属性名在内部被映射到这个数组的特定索引上。使用__slots__带来的副作用是我们没有办法给实例添加任何新的属性了。</p><p>注意：尽管__slots__看起来是个非常有用的特性，但是除非你十分确切的知道要使用它，否则尽量不要使用它。比如定义了__slots__属性的类就不支持多继承。__slots__通常都是作为一种优化工具来使用。–摘自《Python Cookbook》8.4</p><p>注意事项：<br>__slots__的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了__slots__后的类不再 支持一些普通类特性了,比如多继承。大多数情况下,你应该只在那些经常被使用到的用作数据结构的类上定义__slots__，比如在程序中需要创建某个类的几百万个实例对象 。<br>关于__slots__的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用__slots__可以达到这样的目的,但是这个并不是它的初衷。它更多的是用来作为一个内存优化工具。</p><h2 id="六、-item-、-attr-系列"><a href="#六、-item-、-attr-系列" class="headerlink" title="六、__item__、__attr__系列"></a>六、<code>__item__、__attr__系列</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj[key]=lqz赋值时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__delitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj[key]时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__delattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj.key时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.key = value的时候执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.get(key)的时候执行我'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">[</span>item<span class="token punctuation">]</span>f1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token string">'sb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>f1<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">'泡妞'</span><span class="token keyword">del</span> f1<span class="token punctuation">.</span>hobby<span class="token keyword">del</span> f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>f1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'lqz'</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></code></pre><h2 id="七、-init"><a href="#七、-init" class="headerlink" title="七、__init__"></a>七、<code>__init__</code></h2><p>使用Python写面向对象的代码的时候我们都会习惯性写一个 <strong>init</strong> 方法，<strong>init</strong> 方法通常用在初始化一个类实例的时候。例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: &amp;#123;&amp;#125;(&amp;#123;&amp;#125;)>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></code></pre><p>上面是<strong>init__最普通的用法了。但是__init__其实不是实例化一个类的时候第一个被调用的方法。当使用 Persion(name, age) 来实例化一个类时，最先被调用的方法其实是 __new</strong> 方法。</p><h2 id="八、-new"><a href="#八、-new" class="headerlink" title="八、__new__"></a>八、<code>__new__</code></h2><p>其实__init__是在类实例被创建之后调用的，它完成的是类实例的初始化操作，而 __new__方法正是创建这个类实例的方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__new__，创建类实例'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Person<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__init__，初始化实例'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: &amp;#123;&amp;#125;(&amp;#123;&amp;#125;)>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python">调用__new__，创建类实例调用__init__，初始化实例<span class="token operator">&lt;</span>Person<span class="token punctuation">:</span> 张三<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">></span></code></pre><p>__new__方法在类定义中不是必须写的，如果没定义的话默认会调用object.__new__去创建一个对象（因为创建类的时候默认继承的就是object）。</p><p>如果我们在类中定义了__new__方法，就是重写了默认的__new__方法，我们可以借此自定义创建对象的行为。</p><p>举个例子：</p><p>重写类的__new__方法来实现单例模式。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 重写__new__方法，实现每一次实例化的时候，返回同一个instance对象</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> ages1 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这两实例都一样</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h2 id="九、-call"><a href="#九、-call" class="headerlink" title="九、__call__"></a>九、<code>__call__</code></h2><p><strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象()。拥有此方法的对象可以像函数一样被调用。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用对象的__call__方法'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 类Person可调用</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对象a可以调用</span></code></pre><p><strong>注意：</strong> </p><p>__new__、__init__、__call__等方法都不是必须写的。</p><h2 id="十、-doc"><a href="#十、-doc" class="headerlink" title="十、__doc__"></a>十、<code>__doc__</code></h2><p>定义类的描述信息（注释）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""我是A类的描述信息"""</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span></code></pre><h2 id="十一、-iter-和-next"><a href="#十一、-iter-和-next" class="headerlink" title="十一、__iter__和__next__"></a>十一、<code>__iter__和__next__</code></h2><p>如果一个对象拥有了__iter__和__next__方法，那这个对象就是迭代器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> stop<span class="token punctuation">:</span>            start<span class="token punctuation">,</span> stop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start        self<span class="token punctuation">.</span>start <span class="token operator">=</span> start        self<span class="token punctuation">.</span>stop <span class="token operator">=</span> stop    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>start <span class="token operator">>=</span> self<span class="token punctuation">.</span>stop<span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration        n <span class="token operator">=</span> self<span class="token punctuation">.</span>start        self<span class="token punctuation">.</span>start <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> na <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterator<span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>a<span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>aaa<span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#抛异常</span></code></pre><h2 id="十二、-enter-和-exit"><a href="#十二、-enter-和-exit" class="headerlink" title="十二、__enter__和__exit__"></a>十二、<code>__enter__和__exit__</code></h2><p>一个对象如果实现了__enter__和___exit__方法，那么这个对象就支持上下文管理协议，即with语句</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块时执行此方法，此方法如果有返回值会赋值给as声明的变量'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'oo'</span>    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'退出with代码块时执行此方法'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> exc_type<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> exc_val<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token keyword">with</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># with语句中代码块出现异常，则with后的代码都无法执行。</span>    <span class="token comment" spellcheck="true"># raise AttributeError('sb')</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#f打印出oo</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'嘿嘿嘿'</span><span class="token punctuation">)</span></code></pre><h2 id="十三、-len"><a href="#十三、-len" class="headerlink" title="十三、__len__"></a>十三、<code>__len__</code></h2><p>拥有__len__方法的对象支持len(obj)操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十四、-hash"><a href="#十四、-hash" class="headerlink" title="十四、__hash__"></a>十四、<code>__hash__</code></h2><p>拥有__hash__方法的对象支持hash(obj)操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hash<span class="token punctuation">(</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十五、-eq"><a href="#十五、-eq" class="headerlink" title="十五、__eq__"></a>十五、<code>__eq__</code></h2><p>拥有__eq__方法的对象支持相等的比较操作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 打印出比较的第二个对象的x值</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span>self<span class="token punctuation">.</span>y <span class="token operator">==</span> obj<span class="token punctuation">.</span>x<span class="token operator">+</span>obj<span class="token punctuation">.</span>y<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>b <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、-str&quot;&gt;&lt;a href=&quot;#一、-str&quot; class=&quot;headerlink&quot; title=&quot;一、__str__&quot;&gt;&lt;/a&gt;一、&lt;code&gt;__str__&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;改变对象的字符串显示，可以理解为print打印对象的显示&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="面试" scheme="http://huang_zhao.gitee.io/task/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="python面向对象" scheme="http://huang_zhao.gitee.io/task/tags/python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Go基础语法</title>
    <link href="http://huang_zhao.gitee.io/task/2020/01/10/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://huang_zhao.gitee.io/task/2020/01/10/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2020-01-10T11:58:57.000Z</published>
    <updated>2020-09-10T11:59:02.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-包管理"><a href="#1-包管理" class="headerlink" title="1 包管理"></a>1 包管理</h3><h4 id="1-1-自定义包的规则"><a href="#1-1-自定义包的规则" class="headerlink" title="1.1 自定义包的规则"></a>1.1 自定义包的规则</h4><ul><li>go语言代码必须放在gopath的stc路径下</li><li>包导入是从gopath的src路径下开始检索</li><li>除了mian包，其他包名建议都叫所在文件夹名</li><li>同一个包下，变量，函数只能定义一次</li><li>同一个包下变量函数可以直接使用</li><li><strong>包内的函数和变量，想让外部包使用，必须首字母大写</strong></li></ul><p><strong>扩展</strong></p><p>包内的特殊函数 init</p><ul><li>不需要调用就会执行，可以设置多个</li></ul><p>go语言没有一个统一的包管理的地址，都放在github上</p><h4 id="1-2-包导入的几种方式"><a href="#1-2-包导入的几种方式" class="headerlink" title="1.2 包导入的几种方式"></a>1.2 包导入的几种方式</h4><pre class=" language-go"><code class="language-go"><span class="token operator">-</span><span class="token keyword">import</span> <span class="token string">"day02/mypackage"</span>    <span class="token operator">-</span>给包重命名        <span class="token operator">-</span><span class="token keyword">import</span> 名字 <span class="token string">"day02/mypackage"</span>        名字<span class="token punctuation">.</span>变量<span class="token operator">/</span>函数    <span class="token operator">-</span>包只导入，不使用    <span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"day02/mypackage"</span></code></pre><h4 id="1-3-go-mode模式"><a href="#1-3-go-mode模式" class="headerlink" title="1.3 go mode模式"></a>1.3 go mode模式</h4><pre class=" language-go"><code class="language-go"><span class="token operator">-</span>两种创建方式    <span class="token number">1</span>        <span class="token operator">-</span>命令行下输入：<span class="token keyword">go</span> mod init 项目名   在当前路径下创建出<span class="token keyword">go</span><span class="token punctuation">.</span><span class="token function">mod</span><span class="token punctuation">(</span>该项目依赖<span class="token keyword">go</span>的版本，第三方包版本<span class="token punctuation">)</span>        <span class="token operator">-</span>项目路径的cmd窗口，<span class="token keyword">go</span> get 第三方包，就会在<span class="token keyword">go</span><span class="token punctuation">.</span>mod中加入依赖        <span class="token operator">-</span>以后把项目<span class="token builtin">copy</span>给别人，<span class="token keyword">go</span> install        <span class="token operator">-</span>自己写的包，就放在自己项目路径下        <span class="token operator">-</span>加代理的方式：手动写，goland中配置    <span class="token number">2</span>       <span class="token operator">-</span>在goland中创建项目时，直接指定modules，可以配置环境变量（加代理）代理设置：GOPROXY<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>goproxy<span class="token punctuation">.</span>cn<span class="token punctuation">,</span>direct下载一个包测试一下：<span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>astaxie<span class="token operator">/</span>beego下载完成后会自动在mod文件内写入依赖</code></pre><h3 id="2-if-else"><a href="#2-if-else" class="headerlink" title="2 if-else"></a>2 if-else</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">14</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">changeAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> age<span class="token operator">>=</span><span class="token number">15</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"gt15"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> age<span class="token operator">&lt;=</span><span class="token number">14</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"lte15"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"都不是"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">changeAge</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    age <span class="token operator">=</span> <span class="token number">19</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="3-循环"><a href="#3-循环" class="headerlink" title="3 循环"></a>3 循环</h3><p>只有一种循环for</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 基本循环</span><span class="token comment" spellcheck="true">//for i:=0;i&lt;10;i++&amp;#123;</span><span class="token comment" spellcheck="true">//    fmt.Println(i)</span><span class="token comment" spellcheck="true">//&amp;#125;</span><span class="token comment" spellcheck="true">// 省略中间</span><span class="token comment" spellcheck="true">//for i:=0;;i++&amp;#123;</span><span class="token comment" spellcheck="true">//    fmt.Println(i)</span><span class="token comment" spellcheck="true">//&amp;#125;</span><span class="token comment" spellcheck="true">// 省略头</span><span class="token comment" spellcheck="true">//i:=0</span><span class="token comment" spellcheck="true">//for ;;i++&amp;#123;</span><span class="token comment" spellcheck="true">//    fmt.Println(i)</span><span class="token comment" spellcheck="true">//&amp;#125;</span><span class="token comment" spellcheck="true">// 省略头和尾 （while）</span><span class="token comment" spellcheck="true">//i:=2</span><span class="token comment" spellcheck="true">//for i>1&amp;#123;</span><span class="token comment" spellcheck="true">//    fmt.Println(i)</span><span class="token comment" spellcheck="true">//    i++</span><span class="token comment" spellcheck="true">//&amp;#125;</span></code></pre><h3 id="4-switch"><a href="#4-switch" class="headerlink" title="4 switch"></a>4 switch</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 基本使用</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> age <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">15</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"15"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">16</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"16"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 默认值，只要上面没有匹配就会走这个</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 多条件表达式</span><span class="token keyword">switch</span> age <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">:</span>           fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 无表达式的 switch</span>num<span class="token operator">:=</span><span class="token number">12</span>num2<span class="token operator">:=</span><span class="token number">55</span><span class="token keyword">switch</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 条件关系为or</span>    <span class="token keyword">case</span> num<span class="token operator">+</span>num2<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">,</span>num<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> num<span class="token operator">+</span>num2<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">,</span>num2<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Fallthrough</span>age<span class="token operator">:=</span><span class="token number">11</span><span class="token keyword">switch</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> age<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">fallthrough</span>    <span class="token keyword">case</span> age<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">fallthrough</span> <span class="token comment" spellcheck="true">// 只要存在fallthrough就会无条件执行下一条</span>    <span class="token keyword">case</span> age<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h3><p>数组：数组是同一类元素的集合，可以放多个值，但是类型必须一致，在内存中连续存储</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 1 定义数组</span><span class="token keyword">var</span> name  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">--</span> 一个长度为<span class="token number">3</span>的空数组<span class="token comment" spellcheck="true">// 2 给数组中的元素赋值</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hz"</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hz"</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hz"</span><span class="token comment" spellcheck="true">// 3 定义并初始化</span><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token string">"fl"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以写全也可以空几个或者全空</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4 数组特殊初始化</span><span class="token comment" spellcheck="true">// 数组的长度根据&amp;#123;&amp;#125;给的长度决定</span>name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"1"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 5 数组是值传递</span><span class="token comment" spellcheck="true">// 所以在go中数组作为参数传给函数，就是copy了一个新的数组在函数中操作</span><span class="token comment" spellcheck="true">// 值传递不会影响原值</span>name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token function">change</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span> 两次都是<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>name <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 6 数组长度</span>name <span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3,数组的长度在数组定义的时候就决定好了</span><span class="token comment" spellcheck="true">// 7 数组循环</span><span class="token comment" spellcheck="true">// 普通循环</span>name<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// range循环</span>name<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token keyword">range</span> name<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印的是索引</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 补充</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>value<span class="token operator">:=</span><span class="token keyword">range</span> a<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把数组循环打印出来</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>value<span class="token operator">:=</span><span class="token keyword">range</span> a<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 8 多维数组</span><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">55</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 多维数组循环</span><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">66</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token operator">:=</span> <span class="token keyword">range</span> name<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 索引</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 每个数组</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>num <span class="token operator">:=</span><span class="token keyword">range</span> y<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数组中的元素</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 9 数组初始化の指定位置初始化</span><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></code></pre><h3 id="6-切片"><a href="#6-切片" class="headerlink" title="6 切片"></a>6 切片</h3><p>切片是由数组建立的一种方便，灵活，有强大包装能力的类型</p><p>切片本身不拥有任何数据类型，它只是对数组的引用</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 切片的定义方式</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查看b的类型 []int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [0,1,2,3,4,5,6,7,8,9]</span><span class="token comment" spellcheck="true">// 修改切片，数组会跟着变</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 修改数组，切片会跟着变</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 只切数组的一部分的情况</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 切片顾头不顾尾 [2,3,4]</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [12,3,4]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [0,1,12,3,4,5,6,7,8,9] 根据切的地方修改</span><span class="token comment" spellcheck="true">// 多个切片切了同一块数组的值改变情况</span><span class="token comment" spellcheck="true">// 这里可以深刻理解切片只是数组的一段引用</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">var</span> c <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> c<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [12,3,4]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [0,1,12,3,4,5,6,7,8,9]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [12,3,4,5]</span><span class="token comment" spellcheck="true">// 查看切片的长度和容量</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//8 理解：从索引为2的位置到数组的最后就是8</span><span class="token comment" spellcheck="true">// 切片追加</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 追加b后，会修改原数组中对应的位置的值</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 长度增加了，最后一个位置为100</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 追加超出切片容量</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时切片的追加索引已经超出了数组的最大索引，所以不会改</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 16 在原来的基础上翻了一倍</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-包管理&quot;&gt;&lt;a href=&quot;#1-包管理&quot; class=&quot;headerlink&quot; title=&quot;1 包管理&quot;&gt;&lt;/a&gt;1 包管理&lt;/h3&gt;&lt;h4 id=&quot;1-1-自定义包的规则&quot;&gt;&lt;a href=&quot;#1-1-自定义包的规则&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="go" scheme="http://huang_zhao.gitee.io/task/tags/go/"/>
    
    <category term="基础" scheme="http://huang_zhao.gitee.io/task/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Go语言基础</title>
    <link href="http://huang_zhao.gitee.io/task/2020/01/09/GO%E5%85%A5%E9%97%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/01/09/GO%E5%85%A5%E9%97%A8/</id>
    <published>2020-01-09T11:17:57.000Z</published>
    <updated>2020-09-09T11:17:15.400Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、语言介绍"><a href="#一、语言介绍" class="headerlink" title="一、语言介绍"></a>一、语言介绍</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h4><p>Go 即Golang，是Google公司2009年11月正式对外公开的一门编程语言。</p><p>Go是静态强类型语言，是区别于解析型语言的编译型语言(静态：类型固定 强类型：不同类型不允许直接运算)。</p><h4 id="2-特性"><a href="#2-特性" class="headerlink" title="2 特性"></a>2 特性</h4><p>跨平台的编译型语言</p><p>语法接近C语言</p><p>管道（channel），切片（slice），并发（routine）</p><p>有垃圾回收的机制</p><p>支持面向对象（但是go中没有类的概念）和面向过程的编程模式</p><h4 id="3-版本"><a href="#3-版本" class="headerlink" title="3 版本"></a>3 版本</h4><ul><li>2009年11月7日 weekly.2009-11-06 —— 早期的版本</li><li>2018年8月24日 go1.11 —— modules和WebAssembly支持。</li><li>2020 年 8 月 go 1.15</li></ul><h4 id="4-下载"><a href="#4-下载" class="headerlink" title="4 下载"></a>4 下载</h4><p>开发环境搭建：<a href="https://golang.google.cn/dl/%E3%80%82">https://golang.google.cn/dl/。</a></p><p>一路下一步，默认会添加到环境变量</p><p>cmd窗口输入<code>go version</code>判断是否安装完成</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 常用命令</span><span class="token keyword">go</span> env <span class="token comment" spellcheck="true">// go的环境变量</span><span class="token keyword">go</span> build <span class="token comment" spellcheck="true">// 编译成可执行文件</span><span class="token keyword">go</span> run <span class="token comment" spellcheck="true">// 编译并执行</span></code></pre><p>ide下载：<a href="https://www.jetbrains.com/go/download/#section=mac">https://www.jetbrains.com/go/download/#section=mac</a></p><p>一路下一步，试用30天，再打开一个窗口把jar包拖入，重启软件后输入验证码即可永久试用</p><p>创建项目后会默认把go的所有项目都放到用户家目录下的go文件夹下，要运行的项目<strong>必须</strong>在这里，不然无法执行</p><h4 id="5-hello-world"><a href="#5-hello-world" class="headerlink" title="5 hello world"></a>5 hello world</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 编译型语言的特性，必须有一个入口，一个运行程序只能有一个入口main</span><span class="token keyword">package</span> main<span class="token comment" spellcheck="true">// 打印函数在fmt包下</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello word"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 自带换行和python的一样</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><p>注意点：</p><ul><li>变量定义了就必须使用，否则报错</li><li>变量类型在定义阶段就决定了，无法改变</li><li>变量推荐用驼峰体，文件名推荐用下划线分隔</li></ul><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 变量的三种定义方式</span><span class="token comment" spellcheck="true">// 1 全定义</span><span class="token comment" spellcheck="true">// var 变量名 类型 = 值</span><span class="token comment" spellcheck="true">//var a int = 123</span><span class="token comment" spellcheck="true">//fmt.Println(a)</span><span class="token comment" spellcheck="true">// 2 类型推导式</span><span class="token comment" spellcheck="true">// 和上面的区别就是不用写类型</span><span class="token comment" spellcheck="true">//var a = 123</span><span class="token comment" spellcheck="true">//fmt.Println(a)</span><span class="token comment" spellcheck="true">// 3 简略型</span><span class="token comment" spellcheck="true">// 变量名 := 值</span>a <span class="token operator">:=</span> <span class="token number">123</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4 声明多个变量</span>a<span class="token punctuation">,</span>b<span class="token operator">:=</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token comment" spellcheck="true">// 5 按默认值定义</span><span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// int类型默认值为0，string默认值为空字符串</span><span class="token comment" spellcheck="true">// 坑</span><span class="token comment" spellcheck="true">// 原来在go中，变量不能重复定义，但是在多个同时赋值时，左边只要有一个是未定义的，就可以这样使用</span>a<span class="token operator">:=</span><span class="token number">123</span>a<span class="token punctuation">,</span>b<span class="token operator">:=</span><span class="token number">789</span><span class="token punctuation">,</span><span class="token number">444</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span></code></pre><h3 id="三、类型"><a href="#三、类型" class="headerlink" title="三、类型"></a>三、类型</h3><pre class=" language-go"><code class="language-go">基础数据类型        数字：            有符号整形                <span class="token operator">-</span><span class="token builtin">int</span>：在<span class="token number">32</span>位机器是<span class="token builtin">int32</span>，在<span class="token number">64</span>位机器是<span class="token builtin">int64</span>                <span class="token operator">-</span><span class="token builtin">int8</span>：表示整数范围是：<span class="token number">8</span>个比特位，<span class="token number">8</span>个bit是1byte ，负数和<span class="token number">0</span>， <span class="token number">2</span>的<span class="token number">7</span>次方<span class="token operator">-</span><span class="token number">1</span> 的范围                <span class="token operator">-</span><span class="token builtin">int16</span> <span class="token number">2</span>的<span class="token number">15</span>次方减一                <span class="token operator">-</span><span class="token builtin">int32</span>                <span class="token operator">-</span><span class="token builtin">int64</span>            无符号整型                <span class="token operator">-</span><span class="token builtin">uint8</span>   <span class="token number">2</span>的<span class="token number">8</span>次方减一  定义一个人的年龄                <span class="token operator">-</span><span class="token builtin">uint16</span>                <span class="token operator">-</span><span class="token builtin">uint32</span>                <span class="token operator">-</span><span class="token builtin">uint64</span>            浮点型（小数），表示小数点后长度多少位                <span class="token operator">-</span><span class="token builtin">float32</span>                <span class="token operator">-</span><span class="token builtin">float64</span>            复数                <span class="token operator">-</span><span class="token builtin">complex64</span>                <span class="token operator">-</span><span class="token builtin">complex128</span>            <span class="token builtin">byte</span>：是<span class="token builtin">int8</span>的别名  单引号包裹            <span class="token builtin">rune</span>：是<span class="token builtin">int32</span>的别名  单引号包裹        字符串            双引号包裹            反引号包裹  <span class="token string">` `</span> 可以换行        布尔            <span class="token builtin">bool</span> <span class="token boolean">true</span> 和 <span class="token boolean">false</span>        数据类型默认值：            数字类型是<span class="token number">0</span>            字符串类型是 空字符串            布尔类型   <span class="token boolean">false</span></code></pre><h3 id="四、常量"><a href="#四、常量" class="headerlink" title="四、常量"></a>四、常量</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 只有两种定义方式，且不能修改</span><span class="token comment" spellcheck="true">// 1 </span><span class="token keyword">const</span> 常量名 常量类型 <span class="token operator">=</span> 常量值<span class="token comment" spellcheck="true">// 2</span><span class="token keyword">const</span> 常量名 <span class="token operator">=</span> 常量值<span class="token comment" spellcheck="true">// 3 扩展</span><span class="token keyword">const</span> name<span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"hz"</span>    age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    s1 <span class="token operator">=</span><span class="token boolean">iota</span> <span class="token comment" spellcheck="true">// 从0自增  0</span>    s2 <span class="token operator">=</span><span class="token boolean">iota</span> <span class="token comment" spellcheck="true">// 1</span>    s3  <span class="token comment" spellcheck="true">// 2</span>    s4 <span class="token operator">=</span><span class="token number">99</span>    s5 <span class="token operator">=</span><span class="token boolean">iota</span> <span class="token comment" spellcheck="true">// 4</span><span class="token punctuation">)</span></code></pre><h3 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 有参，有返回值函数的调用与定义</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    msg<span class="token punctuation">,</span>s <span class="token operator">:=</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 多个同类型参数可以省略类型，如果有返回值就必须定义时书写返回值类型，而且写了就必须一一对应返回</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"加法"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 匿名函数</span><span class="token comment" spellcheck="true">// 在go中函数是一等公民，可以把函数的内存地址传给变量</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"我是匿名函数"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 要遵循变量被定义就必须使用的原则</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 函数的参数是函数，函数的返回值也是函数</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    add <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    newAdd <span class="token operator">:=</span> <span class="token function">niuBiDeFunc</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>    msg <span class="token operator">:=</span> <span class="token function">newAdd</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">,</span><span class="token string">"帅"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">niuBiDeFunc</span><span class="token punctuation">(</span>add <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    msg <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token punctuation">,</span><span class="token string">"hz"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token keyword">return</span> add<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 闭包函数 1 定义在函数内部 2 对外部作用域有引用</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    a<span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="六、变量作用域和范围"><a href="#六、变量作用域和范围" class="headerlink" title="六、变量作用域和范围"></a>六、变量作用域和范围</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 定义在全局的变量</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 拿到的是全局的，改的也是全局的</span>    age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    age <span class="token operator">=</span> <span class="token number">20</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义在全局和局部的变量</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在main函数名称空间内用的是自己的age</span>    age <span class="token operator">:=</span> <span class="token number">0</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">func</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    age <span class="token operator">=</span> <span class="token number">20</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="补充自己发现的小点"><a href="#补充自己发现的小点" class="headerlink" title="补充自己发现的小点"></a>补充自己发现的小点</h5><p>go语言在最外层同级别下只能存在关键字</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">// 报错</span>hz <span class="token operator">:=</span> <span class="token number">123</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、语言介绍&quot;&gt;&lt;a href=&quot;#一、语言介绍&quot; class=&quot;headerlink&quot; title=&quot;一、语言介绍&quot;&gt;&lt;/a&gt;一、语言介绍&lt;/h3&gt;&lt;h4 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="go" scheme="http://huang_zhao.gitee.io/task/tags/go/"/>
    
    <category term="基础" scheme="http://huang_zhao.gitee.io/task/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
