<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工藤旧二の博客</title>
  
  
  <link href="http://huang_zhao.gitee.io/task/atom.xml" rel="self"/>
  
  <link href="http://huang_zhao.gitee.io/task/"/>
  <updated>2021-06-27T09:18:22.000Z</updated>
  <id>http://huang_zhao.gitee.io/task/</id>
  
  <author>
    <name>爱肖彤真是太好了</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis</title>
    <link href="http://huang_zhao.gitee.io/task/2021/06/27/Redis/"/>
    <id>http://huang_zhao.gitee.io/task/2021/06/27/Redis/</id>
    <published>2021-06-27T06:10:11.000Z</published>
    <updated>2021-06-27T09:18:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>[TOC]</p><h2 id="一、redis简介"><a href="#一、redis简介" class="headerlink" title="一、redis简介"></a>一、redis简介</h2><p>介绍：</p><p>redis是一个<strong>key-value</strong>存储系统。和Memcached类似，它支持存储的value类型相对更多，包括<strong>string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）</strong>。这些数据类型都支持<strong>push/pop、add/remove</strong>及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)<strong>同步</strong></p><p>Q：为什么redis这么快</p><p>A：用了io多路复用减少了io操作对资源的消耗，在内存中使用，单线程单进程，避免了线程之前数据交互的资源消耗</p><h3 id="1-使用redis的好处"><a href="#1-使用redis的好处" class="headerlink" title="1 使用redis的好处"></a>1 使用redis的好处</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比mysql这种关系型数据库速度更快，原因是查找方式和存储方式</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 支持丰富数据类型，支持string，list，set，sorted set，hash<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行<span class="token comment" spellcheck="true"># 事务性支持也没那么好，如果需要事务严格遵守的流程，比如转账功能，必定用的还是mysql等</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</code></pre><h3 id="2-redis相比于memcached的优势"><a href="#2-redis相比于memcached的优势" class="headerlink" title="2 redis相比于memcached的优势"></a>2 redis相比于memcached的优势</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> redis的速度比memcached快很多（其实差不多，分具体场景）<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> redis可以持久化其数据</code></pre><h3 id="3-redis常见的性能问题和解决方案"><a href="#3-redis常见的性能问题和解决方案" class="headerlink" title="3 redis常见的性能问题和解决方案"></a>3 redis常见的性能问题和解决方案</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 尽量避免在压力很大的主库上增加从库<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <span class="token operator">&lt;</span><span class="token operator">-</span> Slave1 <span class="token operator">&lt;</span><span class="token operator">-</span> Slave2 <span class="token operator">&lt;</span><span class="token operator">-</span> Slave3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</code></pre><h3 id="4-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"><a href="#4-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据" class="headerlink" title="4 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"></a>4 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h3><pre class=" language-python"><code class="language-python"> 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 <span class="token number">6</span>种数据淘汰策略：voltile<span class="token operator">-</span>lru：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中挑选最近最少使用的数据淘汰volatile<span class="token operator">-</span>ttl：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中挑选将要过期的数据淘汰volatile<span class="token operator">-</span>random：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中任意选择数据淘汰allkeys<span class="token operator">-</span>lru：从数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dict）中挑选最近最少使用的数据淘汰allkeys<span class="token operator">-</span>random：从数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dict）中任意选择数据淘汰no<span class="token operator">-</span>enviction（驱逐）：禁止驱逐数据</code></pre><h3 id="5-redis-最适合的场景"><a href="#5-redis-最适合的场景" class="headerlink" title="5 redis 最适合的场景"></a>5 redis 最适合的场景</h3><pre class=" language-python"><code class="language-python">Redis最适合所有数据<span class="token keyword">in</span><span class="token operator">-</span>momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk<span class="token operator">-</span>backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached<span class="token punctuation">,</span>何时使用Redis呢?       如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：     <span class="token number">1</span> 、Redis不仅仅支持简单的k<span class="token operator">/</span>v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。     <span class="token number">2</span> 、Redis支持数据的备份，即master<span class="token operator">-</span>slave模式的数据备份。     <span class="token number">3</span> 、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。（<span class="token number">1</span>）、会话缓存（Session Cache）最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。（<span class="token number">2</span>）、全页缓存（FPC）除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp<span class="token operator">-</span>redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。（<span class="token number">3</span>）、队列Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push<span class="token operator">/</span>pop 操作。如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。（<span class="token number">4</span>），排行榜<span class="token operator">/</span>计数器Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的<span class="token number">10</span>个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：ZRANGE user_scores <span class="token number">0</span> <span class="token number">10</span> WITHSCORESAgora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。（<span class="token number">5</span>）、发布<span class="token operator">/</span>订阅最后（但肯定不是最不重要的）是Redis的发布<span class="token operator">/</span>订阅功能。发布<span class="token operator">/</span>订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布<span class="token operator">/</span>订阅的脚本触发器，甚至用Redis的发布<span class="token operator">/</span>订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。</code></pre><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>安装好redis后，顺便可以安装一个Another Redis Desktop Manager，这是redis版的navicat</p><ul><li><code>redis-server</code>启动服务端（通常会自动设成自启服务，不需要手动开）</li><li><code>redis-cli</code>启动客户端</li><li>python中安装操作redis的模块  <code>pip install redis</code></li></ul><h3 id="1-python操作redis之普通链接"><a href="#1-python操作redis之普通链接" class="headerlink" title="1 python操作redis之普通链接"></a>1 python操作redis之普通链接</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token comment" spellcheck="true"># Redis实例化有很多可以设定的参数，其中decode_responses=True是把拿到的二进制数据转换成字符串</span>conn <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'hz'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="2-python操作redis之连接池"><a href="#2-python操作redis之连接池" class="headerlink" title="2 python操作redis之连接池"></a>2 python操作redis之连接池</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用连接池来管理链接对象，如果每一次请求都要建立链接，当请求量很大时会造成内存堵塞</span><span class="token comment" spellcheck="true"># 连接池的连接数量是固定的，超过这个最大链接数的其他链接只能在外面等着</span><span class="token comment" spellcheck="true"># 这里注意连接池要做成单例模式，不然每次链接进来都要实例化一个连接池，那限定的意义就没了</span><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>r<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'Bar'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="三、redis字符串操作"><a href="#三、redis字符串操作" class="headerlink" title="三、redis字符串操作"></a>三、redis字符串操作</h2><p><strong>set(name, value, ex=None, px=None, nx=False, xx=False)</strong></p><pre><code>在Redis中设置值，默认，不存在则创建，存在则修改参数：     ex，过期时间（秒）     px，过期时间（毫秒）     nx，如果设置为True，则只有name不存在时，当前set操作才执行,值存在，就修改不了，执行没效果     xx，如果设置为True，则只有name存在时，当前set操作才执行，值存在才能修改，值不存在，不会设置新值</code></pre><p><strong>setnx(name, value)</strong></p><pre><code>设置值，只有name不存在时，执行设置操作（添加）,如果存在，不会修改</code></pre><p><strong>setex(name, value, time)</strong></p><pre><code># 设置值# 参数：    # time，过期时间（数字秒 或 timedelta对象）</code></pre><p><strong>psetex(name, time_ms, value)</strong></p><pre><code># 设置值# 参数：    # time_ms，过期时间（数字毫秒 或 timedelta对象</code></pre><p><strong>mset(*args, \</strong>kwargs)**</p><pre><code>批量设置值如：    mset(k1=&#39;v1&#39;, k2=&#39;v2&#39;)    或    mget(&#123;&#39;k1&#39;: &#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;)</code></pre><p><strong>get(name)</strong></p><pre><code>获取值</code></pre><p><strong>mget(keys, *args)</strong></p><pre><code>批量获取如：    mget(&#39;k1&#39;, &#39;k2&#39;)    或    r.mget([&#39;k3&#39;, &#39;k4&#39;])</code></pre><p><strong>getset(name, value)</strong></p><pre><code>设置新值并获取原来的值</code></pre><p><strong>getrange(key, start, end)</strong></p><pre><code># 获取子序列（根据字节获取，非字符）# 参数：    # name，Redis 的 name    # start，起始位置（字节）    # end，结束位置（字节）# 如： &quot;刘清政&quot; ，0-3表示 &quot;刘&quot;</code></pre><p><strong>setrange(name, offset, value)</strong></p><pre><code># 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）# 参数：    # offset，字符串的索引，字节（一个汉字三个字节）    # value，要设置的值</code></pre><p><strong>setbit(name, offset, value)</strong></p><pre><code># 对name对应值的二进制表示的位进行操作# 参数：    # name，redis的name    # offset，位的索引（将值变换成二进制后再进行索引）    # value，值只能是 1 或 0# 注：如果在Redis中有一个对应： n1 = &quot;foo&quot;，        那么字符串foo的二进制表示为：01100110 01101111 01101111    所以，如果执行 setbit(&#39;n1&#39;, 7, 1)，则就会将第7位设置为1，        那么最终二进制则变成 01100111 01101111 01101111，即：&quot;goo&quot;</code></pre><p><strong>getbit(name, offset)</strong></p><pre><code># 获取name对应的值的二进制表示中的某位的值 （0或1）</code></pre><p><strong>bitcount(key, start=None, end=None)</strong></p><pre><code># 获取name对应的值的二进制表示中 1 的个数# 参数：    # key，Redis的name    # start，位起始位置    # end，位结束位置</code></pre><p><strong>bitop(operation, dest, *keys)</strong></p><pre><code># 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值# 参数：    # operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）    # dest, 新的Redis的name    # *keys,要查找的Redis的name# 如：    bitop(&quot;AND&quot;, &#39;new_name&#39;, &#39;n1&#39;, &#39;n2&#39;, &#39;n3&#39;)    # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中</code></pre><p><strong>strlen(name)</strong></p><pre><code># 返回name对应值的字节长度（一个汉字3个字节）</code></pre><p><strong>incr(self, name, amount=1)</strong></p><pre><code># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。# 参数：    # name,Redis的name    # amount,自增数（必须是整数）# 注：同incrby</code></pre><p><strong>incrbyfloat(self, name, amount=1.0)</strong></p><pre><code># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。# 参数：    # name,Redis的name    # amount,自增数（浮点型）</code></pre><p><strong>decr(self, name, amount=1)</strong></p><pre><code># 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。# 参数：    # name,Redis的name    # amount,自减数（整数）</code></pre><p><strong>append(key, value)</strong></p><pre><code># 在redis name对应的值后面追加内容# 参数：    key, redis的name    value, 要追加的字符串</code></pre><p><strong>总结</strong>：</p><p>需要注意的操作：</p><ul><li>set  存值，有很多可以修改的参数，主要是可以设置超时时间</li><li>get  获取值，没有返回None</li><li>mset 批量存值，可以传一个字典，也可直接传关键字参数</li><li>mget 批量取值</li><li>incr name存在就自增，没有就新增，并设置自增最小值</li><li>decr 自减，本质上和上面一样，甚至incr设置为负数也能完成一样的操作</li><li>append 对指定的key的value拼接字符串</li></ul><h2 id="四、redis哈希类型操作"><a href="#四、redis哈希类型操作" class="headerlink" title="四、redis哈希类型操作"></a>四、redis哈希类型操作</h2><p><strong>hset(name, key, value)</strong></p><pre><code># name对应的hash中设置一个键值对（不存在，则创建；否则，修改）# 参数：    # name，redis的name    # key，name对应的hash中的key    # value，name对应的hash中的value# 注：    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</code></pre><p><strong>hmset(name, mapping)</strong></p><pre><code># 在name对应的hash中批量设置键值对# 参数：    # name，redis的name    # mapping，字典，如：&#123;&#39;k1&#39;:&#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;# 如：    # r.hmset(&#39;xx&#39;, &#123;&#39;k1&#39;:&#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;)</code></pre><p><strong>hget(name,key)</strong></p><pre><code># 在name对应的hash中获取根据key获取value</code></pre><p><strong>hmget(name, keys, *args)</strong></p><pre><code># 在name对应的hash中获取多个key的值# 参数：    # name，reids对应的name    # keys，要获取key集合，如：[&#39;k1&#39;, &#39;k2&#39;, &#39;k3&#39;]    # *args，要获取的key，如：k1,k2,k3# 如：    # r.mget(&#39;xx&#39;, [&#39;k1&#39;, &#39;k2&#39;])    # 或    # print r.hmget(&#39;xx&#39;, &#39;k1&#39;, &#39;k2&#39;)</code></pre><p><strong>hgetall(name)</strong></p><pre><code># 获取name对应hash的所有键值print(re.hgetall(&#39;xxx&#39;).get(b&#39;name&#39;))</code></pre><p><strong>hlen(name)</strong></p><pre><code># 获取name对应的hash中键值对的个数</code></pre><p><strong>hkeys(name)</strong></p><pre><code># 获取name对应的hash中所有的key的值</code></pre><p><strong>hvals(name)</strong></p><pre><code># 获取name对应的hash中所有的value的值</code></pre><p><strong>hexists(name, key)</strong></p><pre><code># 检查name对应的hash是否存在当前传入的key</code></pre><p><strong>hdel(name,*keys)</strong></p><pre><code># 将name对应的hash中指定key的键值对删除print(re.hdel(&#39;xxx&#39;,&#39;sex&#39;,&#39;name&#39;))</code></pre><p><strong>hincrby(name, key, amount=1)</strong></p><pre><code># 自增name对应的hash中的指定key的值，不存在则创建key=amount# 参数：    # name，redis中的name    # key， hash对应的key    # amount，自增数（整数）</code></pre><p><strong>hincrbyfloat(name, key, amount=1.0)</strong></p><pre><code># 自增name对应的hash中的指定key的值，不存在则创建key=amount# 参数：    # name，redis中的name    # key， hash对应的key    # amount，自增数（浮点数）# 自增name对应的hash中的指定key的值，不存在则创建key=amount</code></pre><p><strong>hscan(name, cursor=0, match=None, count=None)</strong></p><pre><code># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆# 参数：    # name，redis的name    # cursor，游标（基于游标分批取获取数据）    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # 第一次：cursor1, data1 = r.hscan(&#39;xx&#39;, cursor=0, match=None, count=None)    # 第二次：cursor2, data1 = r.hscan(&#39;xx&#39;, cursor=cursor1, match=None, count=None)    # ...    # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</code></pre><p><strong>hscan_iter(name, match=None, count=None)</strong></p><pre><code># 利用yield封装hscan创建生成器，实现分批去redis中获取数据# 参数：    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # for item in r.hscan_iter(&#39;xx&#39;):    #     print item</code></pre><p><strong>总结：</strong></p><p>需要注意的操作：</p><ul><li>hset 给name的value设置{key,value}的值，存在就修改</li><li>hget 获取值</li><li>hmset 批量设置，mapping参数放一个字典</li><li>hmget 批量获取</li><li>hincrby 自增name对应的key值，不存在则创建key：amout（自增数），只能自增value是数字的类型</li><li>hgetall 获取name对于的hash的所有键值</li><li>hscan_iter  利用yield创建生成器，分批去redis中取值</li></ul><h2 id="五、redis链表类型操作"><a href="#五、redis链表类型操作" class="headerlink" title="五、redis链表类型操作"></a>五、redis链表类型操作</h2><p><strong>lpush(name,values)</strong></p><pre><code># 在name对应的list中添加元素，每个新的元素都添加到列表的最左边# 如：    # r.lpush(&#39;oo&#39;, 11,22,33)    # 保存顺序为: 33,22,11# 扩展：    # rpush(name, values) 表示从右向左操作</code></pre><p><strong>lpushx(name,value)</strong></p><pre><code># 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边# 更多：    # rpushx(name, value) 表示从右向左操作</code></pre><p><strong>llen(name)</strong></p><pre><code># name对应的list元素的个数</code></pre><p><strong>linsert(name, where, refvalue, value))</strong></p><pre><code># 在name对应的列表的某一个值前或后插入一个新值# 参数：    # name，redis的name    # where，BEFORE或AFTER(小写也可以)    # refvalue，标杆值，即：在它前后插入数据（如果存在多个标杆值，以找到的第一个为准）    # value，要插入的数据</code></pre><p><strong>r.lset(name, index, value)</strong></p><pre><code># 对name对应的list中的某一个索引位置重新赋值# 参数：    # name，redis的name    # index，list的索引位置    # value，要设置的值</code></pre><p><strong>r.lrem(name, value, num)</strong></p><pre><code># 在name对应的list中删除指定的值# 参数：    # name，redis的name    # value，要删除的值    # num，  num=0，删除列表中所有的指定值；           # num=2,从前到后，删除2个；           # num=-2,从后向前，删除2个</code></pre><p><strong>lpop(name)</strong></p><pre><code># 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素# 更多：    # rpop(name) 表示从右向左操作</code></pre><p><strong>lindex(name, index)</strong></p><pre><code>在name对应的列表中根据索引获取列表元素</code></pre><p><strong>lrange(name, start, end)</strong></p><pre><code># 在name对应的列表分片获取数据# 参数：    # name，redis的name    # start，索引的起始位置    # end，索引结束位置  print(re.lrange(&#39;aa&#39;,0,re.llen(&#39;aa&#39;)))</code></pre><p><strong>ltrim(name, start, end)</strong></p><pre><code># 在name对应的列表中移除没有在start-end索引之间的值# 参数：    # name，redis的name    # start，索引的起始位置    # end，索引结束位置（大于列表长度，则代表不移除任何）</code></pre><p><strong>rpoplpush(src, dst)</strong></p><pre><code># 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边# 参数：    # src，要取数据的列表的name    # dst，要添加数据的列表的name</code></pre><p><strong>blpop(keys, timeout)</strong></p><pre><code># 将多个列表排列，按照从左到右去pop对应列表的元素# 参数：    # keys，redis的name的集合    # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞# 更多：    # r.brpop(keys, timeout)，从右向左获取数据爬虫实现简单分布式：多个url放到列表里，往里不停放URL，程序循环取值，但是只能一台机器运行取值，可以把url放到redis中，多台机器从redis中取值，爬取数据，实现简单分布式</code></pre><p><strong>brpoplpush(src, dst, timeout=0)</strong></p><pre><code># 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧# 参数：    # src，取出并要移除元素的列表对应的name    # dst，要插入元素的列表对应的name    # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞</code></pre><p><strong>自定义增量迭代</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</span>    <span class="token comment" spellcheck="true"># 1、获取name对应的所有列表</span>    <span class="token comment" spellcheck="true"># 2、循环列表</span><span class="token comment" spellcheck="true"># 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</span><span class="token keyword">import</span> redisconn<span class="token operator">=</span>redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># conn.lpush('test',*[1,2,3,4,45,5,6,7,7,8,43,5,6,768,89,9,65,4,23,54,6757,8,68])</span><span class="token comment" spellcheck="true"># conn.flushall()</span><span class="token keyword">def</span> <span class="token function">scan_list</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    index<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data_list<span class="token operator">=</span>conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span>name<span class="token punctuation">,</span>index<span class="token punctuation">,</span>count<span class="token operator">+</span>index<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data_list<span class="token punctuation">:</span>            <span class="token keyword">return</span>        index<span class="token operator">+=</span>count        <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            <span class="token keyword">yield</span> item<span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> scan_list<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p><strong>总结</strong>：</p><p>需要注意的操作：</p><ul><li>lpush 每个新元素都添加到列表的最左边，最早来的在最后，rpush与之相反</li><li>lpop 删除name对应列表的左侧的第一个值，并返回，rpop与之相反</li><li>blpop 将多个列表排列从左到右pop对于列表的元素阻塞时间内如果还有新增数据，就会继续pop</li><li>lrange 切片start开始，end结束，闭区间</li><li>llen 统计元素个数</li></ul><h2 id="六、其他操作"><a href="#六、其他操作" class="headerlink" title="六、其他操作"></a>六、其他操作</h2><p><strong>delete(*names)</strong></p><pre><code># 根据删除redis中的任意数据类型</code></pre><p><strong>exists(name)</strong></p><pre><code># 检测redis的name是否存在</code></pre><p><strong>keys(pattern=’*‘)</strong></p><pre><code># 根据模型获取redis的name（其实就是通过正则匹配）# 更多：    # KEYS * 匹配数据库中所有 key 。    # KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。    # KEYS h*llo 匹配 hllo 和 heeeeello 等。    # KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo </code></pre><p><strong>expire(name ,time)</strong></p><pre><code># 为某个redis的某个name设置超时时间</code></pre><p><strong>rename(src, dst)</strong></p><pre><code># 对redis的name重命名为</code></pre><p><strong>move(name, db))</strong></p><pre><code># 将redis的某个值移动到指定的db下（换数据库）</code></pre><p><strong>randomkey()</strong></p><pre><code># 随机获取一个redis的name（不删除）（抽奖）</code></pre><p><strong>type(name)</strong></p><pre><code># 获取name对应值的类型</code></pre><p><strong>scan(cursor=0, match=None, count=None)</strong><br><strong>scan_iter(match=None, count=None)</strong></p><pre><code># 同字符串操作，用于增量迭代获取key</code></pre><h2 id="七、管道"><a href="#七、管道" class="headerlink" title="七、管道"></a>七、管道</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis支持事务</span><span class="token comment" spellcheck="true"># 管道实现事务</span><span class="token comment" spellcheck="true"># import redis</span><span class="token comment" spellcheck="true"># pool = redis.ConnectionPool(host='127.0.0.1', port=6379)</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># conn = redis.Redis(connection_pool=pool)</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># # pipe = r.pipeline(transaction=False)</span><span class="token comment" spellcheck="true"># pipe = conn.pipeline(transaction=True)</span><span class="token comment" spellcheck="true"># pipe.multi() # 开启管道，开启事务</span><span class="token comment" spellcheck="true"># pipe.set('name', 'alex')</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># pipe.set('role', 'sb')</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># pipe.execute()  # 这句话，才真正的去执行，结束管道</span></code></pre><h2 id="八、django中使用redis"><a href="#八、django中使用redis" class="headerlink" title="八、django中使用redis"></a>八、django中使用redis</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一（通用方式）</span><span class="token comment" spellcheck="true"># 方式二：django-redis</span>    <span class="token operator">-</span>pip install django<span class="token operator">-</span>redis    <span class="token operator">-</span>setting中配置        CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span>                    <span class="token string">"LOCATION"</span><span class="token punctuation">:</span> <span class="token string">"redis://127.0.0.1:6379"</span><span class="token punctuation">,</span>                    <span class="token string">"OPTIONS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"CLIENT_CLASS"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.client.DefaultClient"</span><span class="token punctuation">,</span>                        <span class="token string">"CONNECTION_POOL_KWARGS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"max_connections"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true"># "PASSWORD": "123",</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>       <span class="token operator">-</span>使用两种方式        <span class="token number">1</span> 使用cache        <span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache        cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>         <span class="token number">2</span> 直接使用conn对象        <span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connection        conn <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="九、接口缓存"><a href="#九、接口缓存" class="headerlink" title="九、接口缓存"></a>九、接口缓存</h2><p>接口缓存简单来说就是把需要经常从mysql数据查的数据放到redis等内存数据库（快速读取）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 首页轮播图数据缓存到redis中</span><span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># response=super().list(request, *args, **kwargs)</span>    <span class="token comment" spellcheck="true"># 把data的数据加缓存</span>    <span class="token comment" spellcheck="true"># 1 先去缓存拿数据</span>    banner_list<span class="token operator">=</span>cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> banner_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'走数据库了'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 缓存中没有，去数据库拿</span>        response <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>list<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 加到缓存</span>        cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token operator">=</span>banner_list<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#Redis&quot; class=&quot;headerlink&quot; title=&quot;Redis&quot;&gt;&lt;/a&gt;Redis&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、redis简介&quot;&gt;&lt;a href=&quot;#一、redis简介&quot; class=&quot;h</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="redis" scheme="http://huang_zhao.gitee.io/task/tags/redis/"/>
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>流畅的python学习记录</title>
    <link href="http://huang_zhao.gitee.io/task/2021/06/27/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://huang_zhao.gitee.io/task/2021/06/27/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-06-27T06:10:11.000Z</published>
    <updated>2021-06-27T09:15:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="流畅的python学习记录"><a href="#流畅的python学习记录" class="headerlink" title="流畅的python学习记录"></a>流畅的python学习记录</h1><h2 id="第一章：python数据模型"><a href="#第一章：python数据模型" class="headerlink" title="第一章：python数据模型"></a>第一章：python数据模型</h2><h3 id="1-一副python风格的纸牌"><a href="#1-一副python风格的纸牌" class="headerlink" title="1 一副python风格的纸牌"></a>1 一副python风格的纸牌</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># import collections</span><span class="token comment" spellcheck="true"># Card = collections.namedtuple('Card',['rank','suit'])</span><span class="token comment" spellcheck="true"># collections.namedtuple常用于创建一个只有少数属性但没有方法的类，比如数据库条目？</span><span class="token keyword">import</span> collectionsCard <span class="token operator">=</span> collections<span class="token punctuation">.</span>namedtuple<span class="token punctuation">(</span><span class="token string">'Card'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rank'</span><span class="token punctuation">,</span> <span class="token string">'suit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">FrenchDeck</span><span class="token punctuation">:</span>    ranks <span class="token operator">=</span> <span class="token punctuation">[</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> list<span class="token punctuation">(</span><span class="token string">'JQKA'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用于创建一组牌</span>    suits <span class="token operator">=</span> <span class="token string">'spades diamonds clubs hearts'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用于创建一个组</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_cards <span class="token operator">=</span> <span class="token punctuation">[</span>Card<span class="token punctuation">(</span>rank<span class="token punctuation">,</span> suit<span class="token punctuation">)</span>                       <span class="token keyword">for</span> suit <span class="token keyword">in</span> self<span class="token punctuation">.</span>suits                            <span class="token keyword">for</span> rank <span class="token keyword">in</span> self<span class="token punctuation">.</span>ranks<span class="token punctuation">]</span>                        <span class="token comment" spellcheck="true"># 列表生成式，每循环一次生成一个对象</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_cards<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_cards<span class="token punctuation">[</span>position<span class="token punctuation">]</span>deck <span class="token operator">=</span> FrenchDeck<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(deck.ranks)</span><span class="token comment" spellcheck="true"># print(deck.suits)</span><span class="token comment" spellcheck="true"># print(deck._cards[51])</span><span class="token comment" spellcheck="true"># print(len(deck))</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 24点小游戏</span>game24 <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>deck<span class="token punctuation">.</span>_cards<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(game24)</span>res <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token punctuation">.</span>rank <span class="token keyword">for</span> i <span class="token keyword">in</span> game24<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># res = map(lambda card:card.rank,game24)</span><span class="token comment" spellcheck="true"># print(res)</span></code></pre><p>总结：</p><p>1 学会了一个快速实例化得到对象的方法<code>collections.namedtuple</code>由这个方法得到的对象只有属性没有方法</p><p>2 我们在创建一个数据模型的时候，尽量把它做得像基本数据类型，比如说我要看这个牌对象的总张数，不需要去想是obj.length还是obj.len()。应当做成<code>res = len(obj)</code>一样简洁明了</p><h3 id="2-如何使用特殊方法"><a href="#2-如何使用特殊方法" class="headerlink" title="2 如何使用特殊方法"></a>2 如何使用特殊方法</h3><p>python中的特殊方法比如<code>__len__</code>并不是拿来给我们直接使用的，而是给解释器使用的，也就是说没有<code>obj.__len__()</code>这种写法。这里要注意一个小点：<code>len(obj)</code>如果这个obj是一个自定义类的对象，那会调用这个对象的<code>__len__</code>方法，如果obj是python的一个基本数据类型，那CPython会抄个近路，<code>__len__</code>实际上会直接返回 PyVarObject 里的 ob_size 属 性，PyVarObject 是表示内存中长度可变的内置对象的 C 语言结构体。直接读取这个值比 调用一个方法要快很多。</p><p><strong>python实现向量</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> hypot<span class="token keyword">class</span> <span class="token class-name">Vector</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Vector(%r, %r)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__abs__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hypot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__bool__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> bool<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span> other<span class="token punctuation">.</span>x        y <span class="token operator">=</span> self<span class="token punctuation">.</span>y <span class="token operator">+</span> other<span class="token punctuation">.</span>y        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__mul__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scalar<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Vector<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x <span class="token operator">*</span> scalar<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y <span class="token operator">*</span> scalar<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># v1 = Vector(1,2)</span><span class="token comment" spellcheck="true"># v2 = Vector(3,4)</span><span class="token comment" spellcheck="true"># print(v)</span></code></pre><p><strong>测试<code>__bool__,__len__</code></strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Mynum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> num        self<span class="token punctuation">.</span>l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># def __bool__(self):</span>    <span class="token comment" spellcheck="true">#     if self.num&lt;10:</span>    <span class="token comment" spellcheck="true">#         return False</span>    <span class="token comment" spellcheck="true">#     return True</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>l1<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 如果l1有值则返回真</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>num <span class="token operator">=</span> Mynum<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># num.l1.append(123)</span><span class="token comment" spellcheck="true"># 在这里调用了对象的__bool__方法</span><span class="token keyword">if</span> num<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></code></pre><p>总结：</p><p>1 <code>__repr__</code> 和 <code>__str__</code> 的区别在于，后者是在 str() 函数被使用，或是在用 print 函数打印 一个对象的时候才被调用的，并且它返回的字符串对终端用户更友好。 如果你只想实现这两个特殊方法中的一个，<code>__repr__</code> 是更好的选择，因为如果一个对象没 有 <code>__str__</code> 函数，而 Python 又需要调用它的时候，解释器会用 <code>__repr__</code> 作为替代。</p><p>2 中缀运算符的基本原则就是不改变操作对 象，而是产出一个新的值,就像如果我们要构造一个x+y，那得到的结果就不应该影响xy原本的数值，而应该返回一个新值</p><p>3 python中在判断一个值是真还是假就会调用<code>bool(x)</code>这个函数只会返回True/False，如果这个对象没有<code>__bool__</code>方法，那python就会尝试使用它的<code>__len__</code>如果长度是0，返回False</p><p><strong>表1-1：跟运算符无关的特殊方法</strong></p><table><thead><tr><th>类别</th><th>方法名</th></tr></thead><tbody><tr><td>字符串 / 字节序列 表示形式</td><td><code>__repr__、__str__、__format__、__bytes__</code></td></tr><tr><td>数值转换</td><td><code>__abs__、__bool__、__complex__、__int__、__float__、__hash__、__index__</code></td></tr><tr><td>集合模拟</td><td><code>__len__、__getitem__、__setitem__、__delitem__、__contains__</code></td></tr><tr><td>迭代枚举</td><td><code>__iter__、__reversed__、__next__</code></td></tr><tr><td>可调用模拟</td><td><code>__call__</code></td></tr><tr><td>上下文管理</td><td><code>__enter__、__exit__</code></td></tr><tr><td>实例创建和销毁</td><td><code>__new__、__init__、__del__</code></td></tr><tr><td>属性管理</td><td><code>__getattr__、__getattribute__、__setattr__、__delattr__、__dir__</code></td></tr><tr><td>属性描述符</td><td><code>__get__、__set__、__delete__</code></td></tr><tr><td>跟类相关的服务</td><td><code>__prepare__、__instancecheck__、__subclasscheck__</code></td></tr></tbody></table><p><strong>表1-2：跟运算符相关的特殊方法</strong></p><table><thead><tr><th>类别</th><th>方法名和对应的运算符</th></tr></thead><tbody><tr><td>一元运算符</td><td><code>__neg__ -、__pos__ +、__abs__ abs()</code></td></tr><tr><td>众多比较运算符</td><td><code>__lt__ &lt;、__le__ &lt;=、__eq__ ==、__ne__ !=、__gt__ &gt;、__ge__ &gt;=</code></td></tr><tr><td>算术运算符</td><td><code>__add__ +、__sub__ -、__mul__ *、__truediv__ /、__floordiv__ //、__ mod__ %、__divmod__ divmod()、__pow__ ** 或 pow()、__round__ round()</code></td></tr><tr><td>反向算术运算符</td><td><code>__radd__、__rsub__、__rmul__、__rtruediv__、__rfloordiv__、__rmod__、 __rdivmod__、__rpow__</code></td></tr><tr><td>增量赋值算术运算符</td><td><code>__iadd__、__isub__、__imul__、__itruediv__、__ifloordiv__、__imod__、 __ipow__</code></td></tr><tr><td>位运算符</td><td><code>__invert__ ~、__lshift__ &lt;&lt;、__rshift__ &gt;&gt;、__and__ &amp;、__or__</code></td></tr><tr><td>反向位运算符</td><td><code>__rlshift__、__rrshift__、__rand__、__rxor__、__ror__</code></td></tr><tr><td>增量赋值位运算符</td><td><code>__ilshift__、__irshift__、__iand__、__ixor__、__ior__</code></td></tr></tbody></table><h2 id="第二章：序列构成的数组"><a href="#第二章：序列构成的数组" class="headerlink" title="第二章：序列构成的数组"></a>第二章：序列构成的数组</h2><h3 id="1-变量泄露"><a href="#1-变量泄露" class="headerlink" title="1 变量泄露"></a>1 变量泄露</h3><p>python2中使用列表生成式容易造成变量泄露的问题，例如：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># python2.7中</span>x <span class="token operator">=</span> <span class="token string">'my precious'</span>dummy <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token string">'ABC'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'C'</span><span class="token comment" spellcheck="true"># python3.x中</span>x <span class="token operator">=</span> <span class="token string">'ABC'</span>dummy <span class="token operator">=</span> <span class="token punctuation">[</span>ord<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token string">'ABC'</span><span class="token keyword">print</span><span class="token punctuation">(</span>dummy<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">]</span> </code></pre><h3 id="2-具名元组"><a href="#2-具名元组" class="headerlink" title="2 具名元组"></a>2 具名元组</h3><p>collections.namedtuple 是一个工厂函数，它可以用来构建一个带字段名的元组和一个有 名字的类——这个带名字的类对调试程序有很大帮助。</p><p>创建一个具名元组需要两个参数，一个是类名，另一个是类的各个字段的名字。后者可 以是由数个字符串组成的可迭代对象，或者是由空格分隔开的字段名组成的字符串。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtupleCity <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'City'</span><span class="token punctuation">,</span> <span class="token string">'name country population coordinates'</span><span class="token punctuation">)</span> </code></pre><p><strong>切片赋值</strong></p><pre class=" language-python"><code class="language-python">l <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span> l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment" spellcheck="true"># 如果赋值对象是一个切片，那赋值语句的右侧必须是一个可迭代对象</span>l<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 可以执行</span></code></pre><p>*<em>对序列使用+和**</em></p><p>对序列使用*与+的时候，要知道，得到的是一个新的结果不会再原来的结果上修改</p><p>但是如果a*n中，序列a中包含了其他可变类型的话，内部可变类型的复制，最终指向的都是同一个内存地址</p><pre class=" language-python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p><strong>关于返回值</strong></p><p>要判断一个语句的返回值是什么，首先判断的是是否会产生新值，这句话也可以逆向判断，例如<code>list.sort</code>的返回值是None，那我们就可以知道得到的列表还是原来的列表，并没有新值产生，当然只针对内置的数据类型的基本方法。</p><p>继续展开对例子的描述</p><p><code>列表的方法：list.sort 与内置函数sorted()对比</code></p><p><strong>最大的区别就是</strong>，<code>list.sort</code>是在原列表上直接排序，返回值None，内置函数<code>sorted</code>是创建一个新列表，源列表不动，返回值为新排序列表</p><p>这两种方法都有两个可选参数：</p><ul><li>reverse<ul><li>默认False，降序，可改为True，升序</li></ul></li><li>key<ul><li>一个只有一个参数的函数，不写的话，就是按自己的值排序，比如<code>key=str.lower</code>来实现忽略大小写，注意这里不能加括号调用</li></ul></li></ul><pre class=" language-python"><code class="language-python">fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span>sorted<span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">]</span> ➊fruits<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span> ➋sorted<span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">]</span> ➌sorted<span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> key<span class="token operator">=</span>len<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">]</span> ➍sorted<span class="token punctuation">(</span>fruits<span class="token punctuation">,</span> key<span class="token operator">=</span>len<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">]</span> ➎fruits<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">,</span> <span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">]</span> ➏fruits<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span> ➐fruits<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token string">'grape'</span><span class="token punctuation">,</span> <span class="token string">'raspberry'</span><span class="token punctuation">]</span> ➑</code></pre><h2 id="第三章：字典和集合"><a href="#第三章：字典和集合" class="headerlink" title="第三章：字典和集合"></a>第三章：字典和集合</h2><h3 id="1-映射的弹性键查询"><a href="#1-映射的弹性键查询" class="headerlink" title="1 映射的弹性键查询"></a>1 映射的弹性键查询</h3><p>如果有这么一个需求，在字典中查询一个值，如果查询不到，给我们返回一个特定的值。完成这个需求有两个方法，一是使用defaultdict这个类型而不是使用普通的dict，二是自己写一个新的dict继承dict然后重写<code>__missing__</code>方法</p><p>注意：defaultdict实现的原理就是重写了<code>__missing__</code>方法，所以也只会在[]取值找不到的时候调用</p><h4 id="1-1-defaultdict的使用"><a href="#1-1-defaultdict的使用" class="headerlink" title="1.1 defaultdict的使用"></a>1.1 defaultdict的使用</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> collections<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'没有找到指定的值'</span><span class="token comment" spellcheck="true"># defaultdict如果索引找不到值会调用实例化的时候传入的第一个可调用对象</span><span class="token comment" spellcheck="true"># 将它的返回值作为a['xx']的返回值返回</span>a <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token keyword">lambda</span> <span class="token punctuation">:</span><span class="token string">'没有找到指定的值'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># a = collections.defaultdict(test,{})</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">'xx'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h4 id="1-2-missing-使用"><a href="#1-2-missing-使用" class="headerlink" title="1.2 __missing__使用"></a>1.2 <code>__missing__</code>使用</h4><p>在映射类型找不到键的时候都会牵扯到<code>__missing__</code>，虽然dict没有写这个方法，但是它知道有这个东西的存在，也就是如果我们重写了这个方法，并继承dict，那在<code>__getitem__</code>进行取值的时候只要找不到，就会自动调用这个方法而不是返回报错信息。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CommonDict</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__missing__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> f<span class="token string">'{key}这种键不存在于该字典中'</span>dict1 <span class="token operator">=</span> CommonDict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span>这种键不存在于该字典中</code></pre><h3 id="2-不可变的映射类型"><a href="#2-不可变的映射类型" class="headerlink" title="2 不可变的映射类型"></a>2 不可变的映射类型</h3><p>标准库中所有的映射类型都是可变的，但是我们可能会有这样的需求，不能让用户错误的修改某个映射，在现实中实现这样的需求有一个很具体的例子：如果我们有一个密码锁，别人能看到密码锁，但是不能修改，我们自己也能看到但是能修改。这种情况只要在密码锁上放一层玻璃覆盖，外人是无法隔着玻璃修改原值的，而我们可以把玻璃拿掉去修改原值，且原值和玻璃后的值应当是同步更新的。</p><p>从 Python 3.3 开始，<strong>types</strong> 模块中引入了一个封装类名叫 <strong>MappingProxyType</strong>。如果给这个类 一个映射，它会返回一个只读的映射视图。虽然是个只读视图，但是它是动态的。这意味 着如果对原映射做出了改动，我们通过这个视图可以观察到，但是无法通过这个视图对原 映射做出修改。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> types <span class="token keyword">import</span> MappingProxyTyped <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'hz'</span><span class="token punctuation">}</span>d_map <span class="token operator">=</span> MappingProxyType<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d_map<span class="token punctuation">,</span>type<span class="token punctuation">(</span>d_map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'hz'</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'mappingproxy'</span><span class="token operator">></span>d<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>  <span class="token operator">=</span><span class="token number">18</span><span class="token keyword">print</span><span class="token punctuation">(</span>d_map<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'hz'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;流畅的python学习记录&quot;&gt;&lt;a href=&quot;#流畅的python学习记录&quot; class=&quot;headerlink&quot; title=&quot;流畅的python学习记录&quot;&gt;&lt;/a&gt;流畅的python学习记录&lt;/h1&gt;&lt;h2 id=&quot;第一章：python数据模型&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="读书笔记" scheme="http://huang_zhao.gitee.io/task/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>django知识点扩展</title>
    <link href="http://huang_zhao.gitee.io/task/2021/05/15/django%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%89%A9%E5%B1%95/"/>
    <id>http://huang_zhao.gitee.io/task/2021/05/15/django%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%89%A9%E5%B1%95/</id>
    <published>2021-05-15T07:11:23.000Z</published>
    <updated>2021-06-27T09:20:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="django-知识点扩展"><a href="#django-知识点扩展" class="headerlink" title="django 知识点扩展"></a>django 知识点扩展</h1><h2 id="一、模型部分"><a href="#一、模型部分" class="headerlink" title="一、模型部分"></a>一、模型部分</h2><h3 id="1-关于ForeignKey"><a href="#1-关于ForeignKey" class="headerlink" title="1 关于ForeignKey"></a>1 关于ForeignKey</h3><h4 id="1-1-级联"><a href="#1-1-级联" class="headerlink" title="1.1 级联"></a>1.1 级联</h4><p>在django2版本以上，外键关联的数据需要设置级联更新</p><pre class=" language-python"><code class="language-python">xxx <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>关联的表<span class="token punctuation">,</span>on_delete<span class="token operator">=</span>model<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 级联操作需要注意，如果是一对一的关联，那没问题应该级联删除</span><span class="token comment" spellcheck="true"># 但如果是一对多，删除了一个出版社，就把这个出版社的所有书都删了，显然不合理，因为书和出版社只是逻辑联系，不是真的物理关联</span><span class="token comment" spellcheck="true"># 所以通常我们会断开一对多的关联表</span> publish <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>to<span class="token operator">=</span><span class="token string">'Publish'</span><span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>DO_NOTHING<span class="token punctuation">,</span>db_constraint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># db_constraint=False 表示这个外键只有逻辑关联，没有实质的关联</span><span class="token comment" spellcheck="true"># 级联也应当修改</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>DO_NOTHING <span class="token comment" spellcheck="true"># 删除出版社的时候，书表什么都不做</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>CASCADE <span class="token comment" spellcheck="true"># 级联删除</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>SET_NULL <span class="token comment" spellcheck="true"># 前提是这个字段可以为空</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>SET_DEFAULT <span class="token comment" spellcheck="true"># 前提是有默认值</span></code></pre><h4 id="1-2-参数"><a href="#1-2-参数" class="headerlink" title="1.2 参数"></a>1.2 参数</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># to 设置要关联的表</span><span class="token comment" spellcheck="true"># to_field 设置要关联表的字段</span><span class="token comment" spellcheck="true"># related_name 反向查询的时候替代原来的‘表名_set’</span><span class="token comment" spellcheck="true"># db_constraint 是否在数据库中创建外键约束，默认为True</span></code></pre><h3 id="2-关于内部类"><a href="#2-关于内部类" class="headerlink" title="2 关于内部类"></a>2 关于内部类</h3><p>内部类class Meta提供模型的元数据，元数据不属于任何字段的东西，是对整张表的描述</p><p>具体拥有的参数</p><ul><li><p>ordering 排序选项</p><ul><li><pre class=" language-python"><code class="language-python">ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要注意排序的根据是一个元组，所以如果只有一个根据就要加逗号，排序如果出现重复就会根据第二个元素的排序依据进行排序</span></code></pre></li></ul></li></ul><ul><li><p>db_table 数据库表名</p><ul><li><pre class=" language-python"><code class="language-python">db_table <span class="token operator">=</span> <span class="token string">'数据库表名'</span><span class="token comment" spellcheck="true"># 注意此处修改表名是真实的在数据库中的表名被修改了，所以需要重新进行数据迁移</span></code></pre></li></ul></li><li><p>verbose_name_plural/verbose_name 单复数名称</p><ul><li>这是在admin后台管理的时候显示的名称，复数后缀会在中文后加s通常用中文的话就用单数</li></ul></li></ul><p><strong>其他相关字段</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>        nid <span class="token operator">=</span> models<span class="token punctuation">.</span>AutoField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 设置成虚拟表，通常用于通用表，添加一些每个表必有的字段，让其他表继承</span>            abstract <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true"># 数据库中生成的表名称 默认 app名称 + 下划线 + 类名</span>            db_table <span class="token operator">=</span> <span class="token string">"table_name"</span>            <span class="token comment" spellcheck="true"># 联合索引</span>            index_together <span class="token operator">=</span> <span class="token punctuation">[</span>                <span class="token punctuation">(</span><span class="token string">"pub_date"</span><span class="token punctuation">,</span> <span class="token string">"deadline"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 联合唯一索引</span>            unique_together <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span> <span class="token string">"restaurant"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>            ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># admin中显示的表名称</span>            verbose_name<span class="token operator">=</span><span class="token string">'哈哈'</span>            <span class="token comment" spellcheck="true"># verbose_name加s</span>            verbose_name_plural<span class="token operator">=</span>verbose_name</code></pre><h2 id="二、视图函数部分"><a href="#二、视图函数部分" class="headerlink" title="二、视图函数部分"></a>二、视图函数部分</h2><h3 id="1-关于markdown使用"><a href="#1-关于markdown使用" class="headerlink" title="1 关于markdown使用"></a>1 关于markdown使用</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> markdown<span class="token comment" spellcheck="true"># 将markdown语法渲染成html样式</span>    article<span class="token punctuation">.</span>body <span class="token operator">=</span> markdown<span class="token punctuation">.</span>markdown<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">,</span>        extensions<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true"># 包含 缩写、表格等常用扩展</span>        <span class="token string">'markdown.extensions.extra'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 语法高亮扩展</span>        <span class="token string">'markdown.extensions.codehilite'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里需要注意，原本的文本格式的文章现在转化成了html代码，如果要展示到前端，就要对数据进行转义</span><span class="token comment" spellcheck="true"># 复习:转义的两种方式</span><span class="token number">1</span> 直接在前端参数后面加safe过滤器<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> article<span class="token punctuation">.</span>body<span class="token operator">|</span>safe <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token number">2</span> 在后端给html代码做标记<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>safestring <span class="token keyword">import</span> mark_saferes <span class="token operator">=</span> mark_safe<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><h3 id="2、queryset对象"><a href="#2、queryset对象" class="headerlink" title="2、queryset对象"></a>2、queryset对象</h3><h4 id="2-1-可切片"><a href="#2-1-可切片" class="headerlink" title="2.1 可切片"></a>2.1 可切片</h4><p>用python的切片语法去限制查询的数据条数</p><pre class=" language-python"><code class="language-python">Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># (LIMIT 5)</span>Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># (OFFSET 5 LIMIT 5)</span></code></pre><p>不支持负的索引，切片返回的是一个新的查询集，是由原来的查询集筛选得到的。</p><h4 id="2-2-可迭代"><a href="#2-2-可迭代" class="headerlink" title="2.2 可迭代"></a>2.2 可迭代</h4><p>取出的是每一个数据对象</p><h4 id="2-3-惰性查询"><a href="#2-3-惰性查询" class="headerlink" title="2.3 惰性查询"></a>2.3 惰性查询</h4><p>简单来说就是如果只是把查询结果赋值给了一个变量，而没使用这个变量的话，查询语句是不会执行的，只有真正对数据进行操作了才会回过头来执行查询语句。</p><h4 id="2-4-缓存机制？"><a href="#2-4-缓存机制？" class="headerlink" title="2.4 缓存机制？"></a>2.4 缓存机制？</h4><h4 id="2-5-exists-与iterator-方法"><a href="#2-5-exists-与iterator-方法" class="headerlink" title="2.5 exists()与iterator()方法"></a>2.5 exists()与iterator()方法</h4><p><strong>exists</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 由于简单的if判断也会把整个数据对象集放入cache中，但是我们不需要判断这么多就可以用到exists</span><span class="token keyword">if</span> 查询集<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 相当于只从查询集中拿出一条数据进行判断</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><strong>iterator</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询得到的数据集可能会非常大，一次性放入内存就会影响性能，我们可以通过iterator把数据集做成一个迭代器</span><span class="token comment" spellcheck="true"># 注意做成迭代器的特点，取完数据后数据需要重新查询，无法回头</span><span class="token comment" spellcheck="true"># 每次在内存中只会存在一个数据</span>objs <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterator<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面两种方法都是为了防止出现cache，所以他可能会增多了我们对数据库的查询，没有完美的方法只有合适的方法。</p><h4 id="2-6-orm额外方法"><a href="#2-6-orm额外方法" class="headerlink" title="2.6 orm额外方法"></a>2.6 orm额外方法</h4><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>object<span class="token punctuation">.</span>update_or_create<span class="token punctuation">(</span>aa<span class="token operator">=</span>aa<span class="token punctuation">,</span>defaults<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'bb=bb'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拿第一个参数作为查询依据，如果存在则修改，如果不存在则新增</span></code></pre><h3 id="3-extra"><a href="#3-extra" class="headerlink" title="3 extra"></a>3 extra</h3><p>由于orm对mysql的封装程度太高，有些情况下我们需要用一些复杂的查询就可以通过extra来对查询注入新的sql语句</p><p>extra可以指定一个或多个 <code>参数</code>,例如 <code>select</code>, <code>where</code> or <code>tables</code>. 这些参数都不是必须的，但是你至少要使用一个!要注意这些额外的方式对不同的数据库引擎可能存在移植性问题.(因为你在显式的书写SQL语句),除非万不得已,尽量避免这样做</p><h4 id="4-1参数之select"><a href="#4-1参数之select" class="headerlink" title="4.1参数之select"></a>4.1参数之select</h4><p>The <code>select</code> 参数可以让你在 <code>SELECT</code> 从句中添加其他字段信息，它应该是一个字典，存放着属性名到 SQL 从句的映射。</p><pre class=" language-python"><code class="language-python">queryResult<span class="token operator">=</span>models<span class="token punctuation">.</span>Article　　　　　　　　　　　<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'is_recent'</span><span class="token punctuation">:</span> <span class="token string">"create_time > '2017-09-05'"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>结果集中每个 Entry 对象都有一个额外的属性is_recent, 它是一个布尔值，表示 Article对象的create_time 是否晚于2017-09-05.</p><p>练习：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># in sqlite:</span>    article_obj<span class="token operator">=</span>models<span class="token punctuation">.</span>Article<span class="token punctuation">.</span>objects　　　　　　　　　　　　　　<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>nid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>　　　　　　　　　　　　　　<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"standard_time"</span><span class="token punctuation">:</span><span class="token string">"strftime('%%Y-%%m-%%d',create_time)"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>　　　　　　　　　　　　　　<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">"standard_time"</span><span class="token punctuation">,</span><span class="token string">"nid"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>article_obj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;QuerySet [{'title': 'MongoDb 入门教程', 'standard_time': '2017-09-03', 'nid': 1}]></span></code></pre><h4 id="4-2参数之where-tables"><a href="#4-2参数之where-tables" class="headerlink" title="4.2参数之where / tables"></a>4.2参数之<code>where</code> / <code>tables</code></h4><p>您可以使用<code>where</code>定义显式SQL <code>WHERE</code>子句 - 也许执行非显式连接。您可以使用<code>tables</code>手动将表添加到SQL <code>FROM</code>子句。</p><p><code>where</code>和<code>tables</code>都接受字符串列表。所有<code>where</code>参数均为“与”任何其他搜索条件。</p><p>举例来讲：</p><pre class=" language-python"><code class="language-python">queryResult<span class="token operator">=</span>models<span class="token punctuation">.</span>Article　　　　　　　　　　　<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>where<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'nid in (1,3) OR title like "py%" '</span><span class="token punctuation">,</span><span class="token string">'nid>2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">extra<span class="token punctuation">,</span> 额外查询条件以及相关表，排序                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># id name age ut_id</span>                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>self<span class="token punctuation">,</span> select<span class="token operator">=</span>None<span class="token punctuation">,</span> where<span class="token operator">=</span>None<span class="token punctuation">,</span> params<span class="token operator">=</span>None<span class="token punctuation">,</span> tables<span class="token operator">=</span>None<span class="token punctuation">,</span> order_by<span class="token operator">=</span>None<span class="token punctuation">,</span> select_params<span class="token operator">=</span>None<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># a. 映射</span>                    <span class="token comment" spellcheck="true"># select </span>                    <span class="token comment" spellcheck="true"># select_params=None</span>                    <span class="token comment" spellcheck="true"># select 此处 from 表</span>                <span class="token comment" spellcheck="true"># b. 条件</span>                    <span class="token comment" spellcheck="true"># where=None</span>                    <span class="token comment" spellcheck="true"># params=None,</span>                    <span class="token comment" spellcheck="true"># select * from 表 where 此处</span>                <span class="token comment" spellcheck="true"># c. 表</span>                    <span class="token comment" spellcheck="true"># tables</span>                    <span class="token comment" spellcheck="true"># select * from 表,此处</span>                <span class="token comment" spellcheck="true"># c. 排序</span>                    <span class="token comment" spellcheck="true"># order_by=None</span>                    <span class="token comment" spellcheck="true"># select * from 表 order by 此处</span>                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>                    select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'newid'</span><span class="token punctuation">:</span><span class="token string">'select count(1) from app01_usertype where id>%s'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    select_params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    where <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'age>%s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    order_by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'-age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    tables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'app01_usertype'</span><span class="token punctuation">]</span>                <span class="token punctuation">)</span>                <span class="token triple-quoted-string string">"""                select                     app01_userinfo.id,                    (select count(1) from app01_usertype where id>1) as newid                from app01_userinfo,app01_usertype                where                     app01_userinfo.age > 18                order by                     app01_userinfo.age desc                """</span>                result <span class="token operator">=</span> models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extra<span class="token punctuation">(</span>                    where<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'app01_userinfo.id &lt; %s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    tables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'app01_usertype'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    order_by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'-app01_userinfo.id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'uid'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'sw'</span><span class="token punctuation">:</span><span class="token string">"select count(1) from app01_userinfo"</span><span class="token punctuation">}</span>                <span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>query<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># SELECT (1) AS "uid", (select count(1) from app01_userinfo) AS "sw", "app01_userinfo"."id", "app01_userinfo"."name", "app01_userinfo"."age", "app01_userinfo"."ut_id" FROM "app01_userinfo" , "app01_usertype" WHERE ("app01_userinfo"."id" > 1 AND (app01_userinfo.id &lt; 100)) ORDER BY ("app01_userinfo".id) DESC</span></code></pre><h2 id="三、路由部分"><a href="#三、路由部分" class="headerlink" title="三、路由部分"></a>三、路由部分</h2><h3 id="1-url和path的区别"><a href="#1-url和path的区别" class="headerlink" title="1 url和path的区别"></a>1 url和path的区别</h3><p>django1.x版本用的是url</p><p>基本用法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url，include<span class="token comment" spellcheck="true"># 参数部分是放一个{}内部键值对的key在views函数内要以关键字参数接受</span><span class="token comment" spellcheck="true"># 别名用于反向解析</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     url<span class="token punctuation">(</span>正则表达式<span class="token punctuation">,</span> views视图函数，参数，别名<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 有名分组 year = 4位数的数字</span>re_path<span class="token punctuation">(</span>r<span class="token string">'^articles/(?P&lt;year>[0-9]{4})/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>year_archive<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 无名分组</span>re_path<span class="token punctuation">(</span>r<span class="token string">'^articles/([0-9]{4})/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>year_archive<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 路由分发</span>path<span class="token punctuation">(</span><span class="token string">'app01/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 反向解析的应用场景，当我们视图中或者模版中多次用到了某个url</span><span class="token comment" spellcheck="true"># 为了防止这个url后期修改导致所有用到的地方都要改，这里通过一个别名反向解析就行</span><span class="token comment" spellcheck="true"># 两种反向解析</span><span class="token comment" spellcheck="true"># 在视图函数中</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> reverseurl <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'tag'</span><span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">/</span>mytag_test<span class="token operator">/</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 得到的是url路径，args是拼接在后面的参数</span><span class="token comment" spellcheck="true"># 在页面中</span><span class="token punctuation">{</span><span class="token operator">%</span> url <span class="token string">"别名"</span> 参数  参数<span class="token operator">%</span><span class="token punctuation">}</span></code></pre><p>django2.x用的大部分是path，也可以导入url去使用，也有结合两种特性的re_path</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># path的第一个是一个写死的路径，不支持正则</span><span class="token comment" spellcheck="true"># 第二个参数是具体的视图函数</span><span class="token comment" spellcheck="true"># 也可以反向解析</span><span class="token comment" spellcheck="true"># 在1.x版本的分组到2中变成了转换器拼接在url后面</span>path<span class="token punctuation">(</span><span class="token string">'article-create/&lt;int:id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_create<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'article_create'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 内置了5中转化器</span>str<span class="token punctuation">,</span>匹配除了路径分隔符（<span class="token operator">/</span>）之外的非空字符串，这是默认的形式int<span class="token punctuation">,</span>匹配正整数，包含<span class="token number">0</span>。slug<span class="token punctuation">,</span>匹配字母、数字以及横杠、下划线组成的字符串。uuid<span class="token punctuation">,</span>匹配格式化的uuid，如 <span class="token number">075194d3</span><span class="token operator">-</span><span class="token number">6885</span><span class="token operator">-</span><span class="token number">417e</span><span class="token operator">-</span>a8a8<span class="token number">-6c931e272f00</span>。path<span class="token punctuation">,</span>匹配任何非空字符串，包含了路径分隔符（<span class="token operator">/</span>）（不能用？）</code></pre><h2 id="四、模版部分"><a href="#四、模版部分" class="headerlink" title="四、模版部分"></a>四、模版部分</h2><h3 id="1-xss攻击"><a href="#1-xss攻击" class="headerlink" title="1 xss攻击"></a>1 xss攻击</h3><p>当我们服务端提供用户提交js代码的接口，就容易受到xss攻击，去用一些js代码影响我们的服务器。</p><p>如何解决xss攻击？</p><p>python中用了转义，让被设计者标记安全的语言才能显示到页面，内部原理是，如果用户给了<code>&lt;a href = &#39;meizitu.com&#39;&gt; 点击&lt;/a&gt;</code>这样的标签上传，如果标记安全，那这个字符串就会直接渲染到页面上变成一个标签。</p><p>如果我们没有对其转义，他会原封不动的显示在html页面上</p><p>展示的就是一些特殊字符，比如<code>&amp;gt</code>表示的就是&gt;，所以展示到页面的就是在后端显示的</p><h2 id="五、settings"><a href="#五、settings" class="headerlink" title="五、settings"></a>五、settings</h2><h3 id="1-静态资源暴露"><a href="#1-静态资源暴露" class="headerlink" title="1 静态资源暴露"></a>1 静态资源暴露</h3><p>网站所用的静态文件我们通常都放在static内，比如js，css文件，如果要让前端可以用这些静态文件渲染页面，就需要开放接口，关于网站的静态文件，django已经给我们开放了令牌（功能类似于反向解析），我们只要配置路径即可</p><pre class=" language-python"><code class="language-python">STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>而用户上传的静态文件，也需要专门有一个文件夹来接收，通常我们用media做文件夹的名字，也可以修改</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># settings.py</span>MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'media'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用户上传的文件就会保存到该文件夹下</span><span class="token comment" spellcheck="true"># media是文件夹的名字，可以自定义，一般使用media作为名字</span></code></pre><p>用户只要上传文件，就会自动创建media目录，会自动在media内创建相应的上传目录</p><p>例如models中，avatar字段</p><pre class=" language-python"><code class="language-python">avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>FileField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'avatar/default.png'</span><span class="token punctuation">)</span></code></pre><p>在上传了头像后，media内会自动创建一个avatar文件夹来存放头像</p><p>当然我们配置了路径只能在服务端使用这个路径，如果前端要访问后端的资源，就必须要开放相应的接口</p><p>在urls配置</p><p>固定写法，复制就能使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>static <span class="token keyword">import</span> serve<span class="token keyword">from</span> bbs <span class="token keyword">import</span> settingsurl<span class="token punctuation">(</span>r<span class="token string">'^media/(?P&lt;path>.*)'</span><span class="token punctuation">,</span> serve<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'document_root'</span><span class="token punctuation">:</span> settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="2-项目修改成中文"><a href="#2-项目修改成中文" class="headerlink" title="2 项目修改成中文"></a>2 项目修改成中文</h3><pre class=" language-python"><code class="language-python">LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/shanghai'</span>USE_I18N <span class="token operator">=</span> <span class="token boolean">True</span>USE_L10N <span class="token operator">=</span> <span class="token boolean">True</span>USE_TZ <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><h2 id="六、RBAC：基于角色的权限控制（django内置的auth体系）"><a href="#六、RBAC：基于角色的权限控制（django内置的auth体系）" class="headerlink" title="六、RBAC：基于角色的权限控制（django内置的auth体系）"></a>六、RBAC：基于角色的权限控制（django内置的auth体系）</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># RBAC :是基于角色的访问控制（Role-Based Access Control ）,公司内部系统</span><span class="token comment" spellcheck="true"># django的auth就是内置了一套基于RBAC的权限系统</span><span class="token comment" spellcheck="true"># django中</span>    <span class="token comment" spellcheck="true"># 后台的权限控制（公司内部系统，crm，erp，协同平台）</span>    user表  <span class="token comment" spellcheck="true">#用户表</span>    permssion表 <span class="token comment" spellcheck="true"># 权限表</span>    group表 <span class="token comment" spellcheck="true"># 组别表</span>    user_groups表是user和group的中间表    group_permissions表是group和permssion中间表    user_user_permissions表是user和permission中间表    <span class="token comment" spellcheck="true"># 前台（主站），需要用三大认证</span><span class="token comment" spellcheck="true"># 用户和组别是多对多</span>用户a可以是销售组也可以是开发组销售组也可以有多个人<span class="token comment" spellcheck="true"># 组别和权限是多对多</span>销售组的人有销售产品的权限，也有检查产品的权限检查产品的权限可能管理组也有<span class="token comment" spellcheck="true"># 用户和权限</span>用户可以有多重权限一个权限也可以有多个用户拥有</code></pre><h2 id="七、django的缓存"><a href="#七、django的缓存" class="headerlink" title="七、django的缓存"></a>七、django的缓存</h2><h3 id="1-缓存6中配置位置"><a href="#1-缓存6中配置位置" class="headerlink" title="1 缓存6中配置位置"></a>1 缓存6中配置位置</h3><ol><li><p>开发调试(此模式为开发调试使用,实际上不执行任何操作)</p></li><li><p>内存缓存</p><pre class=" language-python"><code class="language-python">CACHES <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.core.cache.backends.locmem.LocMemCache'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 指定缓存使用的引擎</span>  <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token string">'unique-snowflake'</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># 写在内存中的变量的唯一值 </span>  <span class="token string">'TIMEOUT'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># 缓存超时时间(默认为300秒,None表示永不过期)</span>  <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>   <span class="token string">'MAX_ENTRIES'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># 最大缓存记录的数量（默认300）</span>   <span class="token string">'CULL_FREQUENCY'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span>  <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>文件缓存</p></li><li><p>数据库缓存</p><pre class=" language-pythhon"><code class="language-pythhon">CACHES = { 'default': {  'BACKEND': 'django.core.cache.backends.db.DatabaseCache',  # 指定缓存使用的引擎  'LOCATION': 'cache_table',          # 数据库表      'OPTIONS':{   'MAX_ENTRIES': 300,           # 最大缓存记录的数量（默认300）   'CULL_FREQUENCY': 3,          # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）  }   }   }</code></pre></li><li><p>Memcache缓存(使用python-memcached模块连接memcache)</p></li><li><p>Memcache缓存(使用pylibmc模块连接memcache)</p></li></ol><h3 id="2-缓存应用"><a href="#2-缓存应用" class="headerlink" title="2 缓存应用"></a>2 缓存应用</h3><p>Django提供了不同粒度的缓存,可以缓存某个页面,可以只缓存一个页面的某个部分,甚至可以缓存整个网站.</p><h4 id="2-1-视图中使用缓存"><a href="#2-1-视图中使用缓存" class="headerlink" title="2.1 视图中使用缓存"></a>2.1 视图中使用缓存</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache_page<span class="token keyword">import</span> time<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span>@cache_page<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#超时时间为15秒</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>　　t<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#获取当前时间</span>　　bookList<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>　　<span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"index.html"</span><span class="token punctuation">,</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># index.html</span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>当前时间<span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span> t <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> book <span class="token keyword">in</span> bookList <span class="token operator">%</span><span class="token punctuation">}</span>       <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> book<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> book<span class="token punctuation">.</span>price <span class="token punctuation">}</span><span class="token punctuation">}</span>$<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token comment" spellcheck="true"># 我们可以看到的效果是15秒内不管前端刷新了几次 t都不会改变</span></code></pre><h4 id="2-2-全局使用缓存"><a href="#2-2-全局使用缓存" class="headerlink" title="2.2 全局使用缓存"></a>2.2 全局使用缓存</h4><p>既然是全站缓存,当然要使用Django中的中间件.</p><p>用户的请求通过中间件,经过一系列的认证等操作,如果请求的内容在缓存中存在,则使用FetchFromCacheMiddleware获取内容并返回给用户</p><p>当返回给用户之前,判断缓存中是否已经存在,如果不存在,则UpdateCacheMiddleware会将缓存保存至Django的缓存之中,以实现全站缓存</p><pre class=" language-python"><code class="language-python">缓存整个站点，是最简单的缓存方法在 MIDDLEWARE_CLASSES 中加入 “update” 和 “fetch” 中间件MIDDLEWARE_CLASSES <span class="token operator">=</span> <span class="token punctuation">(</span>    ‘django<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>UpdateCacheMiddleware’<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#第一</span>    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span>    ‘django<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>FetchFromCacheMiddleware’<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#最后</span><span class="token punctuation">)</span>“update” 必须配置在第一个“fetch” 必须配置在最后一个<span class="token comment" spellcheck="true"># 视图和模版都不需要配置</span></code></pre><h4 id="2-3-局部视图缓存"><a href="#2-3-局部视图缓存" class="headerlink" title="2.3 局部视图缓存"></a>2.3 局部视图缓存</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># views</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache_page<span class="token keyword">import</span> time<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>     t<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#获取当前时间</span>     bookList<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"index.html"</span><span class="token punctuation">,</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># index.html</span><span class="token punctuation">{</span><span class="token operator">%</span> load cache <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> cache <span class="token number">2</span> <span class="token string">'name'</span> <span class="token operator">%</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>h3<span class="token operator">></span>缓存<span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span> t <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endcache <span class="token operator">%</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;django-知识点扩展&quot;&gt;&lt;a href=&quot;#django-知识点扩展&quot; class=&quot;headerlink&quot; title=&quot;django 知识点扩展&quot;&gt;&lt;/a&gt;django 知识点扩展&lt;/h1&gt;&lt;h2 id=&quot;一、模型部分&quot;&gt;&lt;a href=&quot;#一、模型部分&quot;</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>linux学习</title>
    <link href="http://huang_zhao.gitee.io/task/2021/03/15/linux%E5%AD%A6%E4%B9%A0/"/>
    <id>http://huang_zhao.gitee.io/task/2021/03/15/linux%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-15T05:33:43.000Z</published>
    <updated>2021-06-27T09:25:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linux学习"><a href="#linux学习" class="headerlink" title="linux学习"></a>linux学习</h1><p>[TOC]</p><h2 id="一、虚拟软件安装"><a href="#一、虚拟软件安装" class="headerlink" title="一、虚拟软件安装"></a>一、虚拟软件安装</h2><h3 id="1-虚拟化技术"><a href="#1-虚拟化技术" class="headerlink" title="1 虚拟化技术"></a>1 虚拟化技术</h3><p>kvm，vmware，这两个的功能是可以在硬件上开辟一个虚拟空间，在这个空间上可以安装不同的操作系统</p><ul><li>iaas 基础设置及服务</li><li>paas 平台及服务 </li><li>saas 软件及服务</li></ul><p>openstack管理在硬件上安装的所有的操作系统，实现iaas</p><p>docker：实现paas</p><p>k8s：容器编排，管理不同机器上的容器（docker容器）</p><h3 id="2-centos-安装"><a href="#2-centos-安装" class="headerlink" title="2 centos 安装"></a>2 centos 安装</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># DHCP :</span>DHCP（动态主机配置协议）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。默认情况下，DHCP作为Windows Server的一个服务组件不会被系统自动安装，还需要管理员手动安装并进行必要的配置<span class="token comment" spellcheck="true"># dns:可以把域名地址转换成ip地址</span><span class="token comment" spellcheck="true"># 主机名：生产环境，要有意义  地址+楼层+房间号+业务</span><span class="token comment" spellcheck="true"># swap分区：交换分区</span><span class="token comment" spellcheck="true"># 关于分区</span>linux 分区结构为树结构， windows 为森林结构，所以有C盘D盘之类的， 而linux <span class="token operator">/</span>分区就是根分区， swap可以理解为虚拟内存， <span class="token operator">/</span>boot 这是个目录， 可以分成一个分区，然后挂载到<span class="token operator">/</span>boot目录， 也可以只用一个<span class="token operator">/</span>分区， 里面会有boot目录的，保存的是引导文件，内核等等的东东</code></pre><h2 id="二、-bash-shell-介绍和使用"><a href="#二、-bash-shell-介绍和使用" class="headerlink" title="二、 bash shell 介绍和使用"></a>二、 bash shell 介绍和使用</h2><h3 id="1-什么是Bash-shell-壳"><a href="#1-什么是Bash-shell-壳" class="headerlink" title="1 什么是Bash shell(壳)"></a>1 什么是Bash shell(壳)</h3><pre class=" language-python"><code class="language-python">是一个命令解释器，就是一个软件  执行就是bash，可以在里面输入命令，做交互，exit退出</code></pre><h3 id="2-能干什么"><a href="#2-能干什么" class="headerlink" title="2 能干什么"></a>2 能干什么</h3><pre class=" language-python"><code class="language-python">原来在windows上点点点完成的是，它都能做到使用Shell实现对Linux系统的大部分管理，例如<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>文件管理<span class="token punctuation">(</span>文件创建，移动，复制，删除，编辑…<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>权限管理<span class="token punctuation">(</span>不同用户不通权限<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>用户管理（创建，删除…<span class="token punctuation">.</span>）<span class="token number">4</span><span class="token punctuation">.</span>磁盘管理（挂载）<span class="token number">5</span><span class="token punctuation">.</span>网络管理<span class="token number">6</span><span class="token punctuation">.</span>软件管理等等</code></pre><h3 id="3-平时我们如何使用Shell呢？"><a href="#3-平时我们如何使用Shell呢？" class="headerlink" title="3 平时我们如何使用Shell呢？"></a>3 平时我们如何使用Shell呢？</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 输入命令，低效<span class="token number">2</span> shell script：shell脚本  ，批量执行命令</code></pre><h3 id="4-shell提示符"><a href="#4-shell提示符" class="headerlink" title="4  shell提示符"></a>4  shell提示符</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># root：当前用户</span><span class="token comment" spellcheck="true"># @ ：没有意义</span><span class="token comment" spellcheck="true">#lqz：主机名</span><span class="token comment" spellcheck="true"># ~：家目录</span><span class="token comment" spellcheck="true"># #:表示超级用户</span><span class="token punctuation">[</span>lqz@lqz <span class="token operator">~</span><span class="token punctuation">]</span>$ </code></pre><h3 id="5-Shell基础语法"><a href="#5-Shell基础语法" class="headerlink" title="5 Shell基础语法"></a>5 Shell基础语法</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  命令  选项  参数   三部分组成</span>ls <span class="token operator">-</span>a  <span class="token operator">/</span>temp      ls <span class="token operator">-</span><span class="token operator">-</span>all<span class="token comment" spellcheck="true"># 以下三个一样</span>ls <span class="token operator">-</span>l <span class="token operator">-</span>als <span class="token operator">-</span>lals <span class="token operator">-</span>al</code></pre><h3 id="6-命令补全"><a href="#6-命令补全" class="headerlink" title="6 命令补全"></a>6 命令补全</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 一下或者两下tab建</span><span class="token comment" spellcheck="true"># 一下的话会直接找到你要用的命令</span><span class="token comment" spellcheck="true"># 两下，可能会用到的全列出来</span><span class="token comment" spellcheck="true"># ifconfig 在7的版本没有，需要装软件</span>yum insatll net<span class="token operator">-</span>tools <span class="token operator">-</span>yyum insatll net<span class="token operator">-</span>tools<span class="token comment" spellcheck="true"># yum install bash-completion -y   补齐选项</span>ls <span class="token operator">-</span> 两下tab建，所有的选项都会提示出来</code></pre><h3 id="7-命令快捷键"><a href="#7-命令快捷键" class="headerlink" title="7 命令快捷键"></a>7 命令快捷键</h3><pre class=" language-python"><code class="language-python">Ctrl <span class="token operator">+</span> a    <span class="token comment" spellcheck="true">#光标跳转至正在输入的命令行的首部</span>Ctrl <span class="token operator">+</span> e    <span class="token comment" spellcheck="true">#光标跳转至正在输入的命令行的尾部</span>Ctrl <span class="token operator">+</span> c    <span class="token comment" spellcheck="true">#终止前台运行的程序   ##################</span>Ctrl <span class="token operator">+</span> d    <span class="token comment" spellcheck="true">#在shell中，ctrl-d表示推出当前shell。</span>Ctrl <span class="token operator">+</span> z    <span class="token comment" spellcheck="true">#将任务暂停，挂至后台</span>Ctrl <span class="token operator">+</span> l    <span class="token comment" spellcheck="true">#清屏，和clear命令等效。  ##############</span>Ctrl <span class="token operator">+</span> k    <span class="token comment" spellcheck="true">#删除从光标到行末的所有字符</span>Ctrl <span class="token operator">+</span> u    <span class="token comment" spellcheck="true">#删除从光标到行首的所有字符</span>Ctrl <span class="token operator">+</span> r    <span class="token comment" spellcheck="true">#搜索历史命令, 利用关键字，Tab建选中,只能找到最近的一条</span>Ctrl <span class="token operator">+</span> w    <span class="token comment" spellcheck="true">#按单词或空格进行向前删除</span>Ctrl <span class="token operator">+</span> 左右建 <span class="token comment" spellcheck="true">#按单词或空格进行向前向后跳</span><span class="token comment" spellcheck="true">#在命令行前加面加 "#" 则该命令不会被执行</span></code></pre><h3 id="8-history"><a href="#8-history" class="headerlink" title="8 history"></a>8 history</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># history查看历史命令</span><span class="token comment" spellcheck="true"># !数字   快速执行数字那一行</span><span class="token comment" spellcheck="true"># !yum    快速执行最近一条yum命令</span><span class="token comment" spellcheck="true"># history -d 70  把历史记录的第70行删除</span><span class="token comment" spellcheck="true"># history -c   清空所有记录（连到人家服务器，操作完了，执行一下）</span><span class="token comment" spellcheck="true"># history -w   可以把 历史记录写到用户家路径的.bash_history文件中</span></code></pre><h3 id="9-网络问题"><a href="#9-网络问题" class="headerlink" title="9 网络问题"></a>9 网络问题</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 如果出现pingip可以但是ping百度不行，重启一下网络即可</span>service network restart</code></pre><h2 id="三、linux基本命令"><a href="#三、linux基本命令" class="headerlink" title="三、linux基本命令"></a>三、linux基本命令</h2><h3 id="1-命令别名"><a href="#1-命令别名" class="headerlink" title="1 命令别名"></a>1 命令别名</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 定义一个临时别名,ck查看目录下的所有文件</span>alias ck <span class="token operator">=</span> <span class="token string">'ls -a'</span><span class="token comment" spellcheck="true"># 2 删除临时别名</span>unalias ck<span class="token comment" spellcheck="true"># 3 永久生效别名（需要将别名的配置写到配置文件中）</span>echo <span class="token string">'alias ck="ls -a"'</span> <span class="token operator">>></span> <span class="token operator">/</span>etc<span class="token operator">/</span>bashrc</code></pre><h3 id="2-–help帮助"><a href="#2-–help帮助" class="headerlink" title="2 –help帮助"></a>2 –help帮助</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls --help</span>用法<span class="token punctuation">:</span> ls <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#ls 常见选项</span><span class="token operator">-</span>a  <span class="token comment" spellcheck="true">#查看目录下的所有文件，包括隐藏文件</span><span class="token operator">-</span>l  <span class="token comment" spellcheck="true">#以长格式的方式显示文件的详细内容</span><span class="token operator">-</span>h  <span class="token comment" spellcheck="true">#以人性化的方式显示内容，配合-l使用</span><span class="token operator">-</span>d  <span class="token comment" spellcheck="true">#只列出目录名，不列出目录以下的内容</span><span class="token operator">-</span>t  <span class="token comment" spellcheck="true">#按修改时间进行排序</span><span class="token operator">-</span>i  <span class="token comment" spellcheck="true">#显示文件的inode(该文件在该分区的一个编号)</span><span class="token comment" spellcheck="true"># man ls    #查看ls命令的手册</span></code></pre><h3 id="3-目录介绍"><a href="#3-目录介绍" class="headerlink" title="3 目录介绍"></a>3 目录介绍</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> linux 是单根 <span class="token operator">/</span> 根路径，windows是多根<span class="token number">2</span> bin和sbin：bin普通用户命令，超级用户命令  都是usr下的文件夹软链接到根路径<span class="token number">3</span> home 、root：home普通用户的家路径，home下的用户名的文件夹    <span class="token operator">-</span>用户一登录系统，是在自己的家路径 jack<span class="token operator">-</span><span class="token operator">-</span>》<span class="token operator">/</span>home<span class="token operator">/</span>jack</code></pre><h4 id="1-目录之usr"><a href="#1-目录之usr" class="headerlink" title="1 目录之usr"></a>1 目录之usr</h4><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>usr，相当于C<span class="token punctuation">:</span>Windows<span class="token operator">/</span>usr<span class="token operator">/</span>local，软件安装的目录，相当于C<span class="token punctuation">:</span>Program<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>，普通用户使用的应用程序<span class="token punctuation">(</span>重要<span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>sbin，管理员使用的应用程序<span class="token punctuation">(</span>重要<span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib，库文件Glibc 32bit<span class="token operator">/</span>usr<span class="token operator">/</span>lib64，库文件Glibc 64bit<span class="token number">1</span> df <span class="token operator">-</span>h  <span class="token comment" spellcheck="true"># 查看系统中文件的使用情况</span><span class="token number">2</span> du <span class="token operator">-</span>sh <span class="token operator">/</span>usr<span class="token operator">/</span>  <span class="token comment" spellcheck="true">#查看当前目录下各个文件及目录占用空间大小</span><span class="token comment" spellcheck="true"># 补充：远程执行ssh命令：</span><span class="token comment" spellcheck="true"># ansiable：python写的，批量执行命令（速度比较慢，大量的主机，会卡顿）</span><span class="token comment" spellcheck="true"># salstack：在客户端装agent，</span><span class="token comment" spellcheck="true"># zabbix：监控，php写的，监控mysql运行情况</span><span class="token comment" spellcheck="true"># /boot</span>存放的系统启动相关的文件，例如<span class="token punctuation">:</span>kernel，grub<span class="token punctuation">(</span>引导装载程序<span class="token punctuation">)</span></code></pre><h4 id="2-目录之etc"><a href="#2-目录之etc" class="headerlink" title="2 目录之etc"></a>2 目录之etc</h4><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>etc，极其重要，后续所有服务的配置都在这个目录中<span class="token operator">/</span>etc<span class="token operator">/</span>sysconfig<span class="token operator">/</span>network<span class="token operator">-</span>script<span class="token operator">/</span>ifcfg<span class="token operator">-</span>，网络配置文件<span class="token operator">/</span>etc<span class="token operator">/</span>hostname，系统主机名配置文件<span class="token punctuation">,</span>主机名很重要，有些特殊服务要依赖主机名，没有主机名会报错起不来；修改了要重启：reboot<span class="token operator">/</span>etc<span class="token operator">/</span>resolv<span class="token punctuation">.</span>conf，dns客户端配置文件<span class="token punctuation">,</span>域名解析服务器，一般我们不配置，因为网卡的配置好了，会覆盖掉它，网卡的优先级高<span class="token operator">/</span>etc<span class="token operator">/</span>hosts，本地域名解析配置文件，域名解析，先找自己的hosts，再去域名解析</code></pre><h4 id="3-目录之var-dev"><a href="#3-目录之var-dev" class="headerlink" title="3 目录之var dev"></a>3 目录之var dev</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> cat <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>secure <span class="token comment" spellcheck="true">#查看用户登陆时间</span><span class="token operator">/</span>dev，存放设备文件，比如硬盘，硬盘分区，光驱，等等<span class="token operator">/</span>dev<span class="token operator">/</span>sd 硬盘设备<span class="token operator">/</span>dev<span class="token operator">/</span>null，黑洞设备，只进不出。类似于垃圾回收站<span class="token operator">/</span>dev<span class="token operator">/</span>random，生成随机数的设备<span class="token operator">/</span>dev<span class="token operator">/</span>zero，能远远不断的产生数据，类似于取款机，随时随地取钱</code></pre><h4 id="4-目录之proc"><a href="#4-目录之proc" class="headerlink" title="4 目录之proc"></a>4 目录之proc</h4><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>proc，反映系统当前进程的实时状态 <span class="token punctuation">:</span>process加上跑着一个uwsgi<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>》id号，重启，id号会变，<span class="token number">1</span>这个永远不变<span class="token comment" spellcheck="true">#1 media:提供设备的挂载点，媒体文件</span><span class="token comment" spellcheck="true"># linux 新增了盘符，需要手动挂载</span><span class="token comment" spellcheck="true"># 把光盘里的数据，挂载到media目录</span>mount  <span class="token operator">/</span>dev<span class="token operator">/</span>cdrom <span class="token operator">/</span>media<span class="token operator">/</span><span class="token comment" spellcheck="true"># 2 mnt：提供设备的挂载点（同上）</span><span class="token comment" spellcheck="true"># 3 opt：第三方工具，第三方软件默认安装的(mysql...)</span><span class="token comment" spellcheck="true"># run :下有pid，log结尾的文件</span>ls <span class="token operator">/</span>runcat sshd<span class="token punctuation">.</span>pid  <span class="token comment" spellcheck="true"># 进程运行的pid号,放在文件中</span>ps aux <span class="token operator">|</span>grep sshd<span class="token comment" spellcheck="true"># .lock文件的作用,锁机制</span><span class="token comment" spellcheck="true"># 假设现在执行</span>yum install tree<span class="token comment" spellcheck="true"># 再开一个窗口执行相同命令</span>yum install tree<span class="token triple-quoted-string string">'''Another app is currently holding the yum lock; waiting for it to exit...  The other application is: yum    Memory :  71 M RSS (470 MB VSZ)    Started: Tue Aug 18 00:26:31 2020 - 00:24 ago    State  : Sleeping, pid: 6191'''</span>cat <span class="token operator">/</span>run<span class="token operator">/</span>yum<span class="token punctuation">.</span>pid</code></pre><h3 id="4-文件管理"><a href="#4-文件管理" class="headerlink" title="4 文件管理"></a>4 文件管理</h3><h4 id="1-创建"><a href="#1-创建" class="headerlink" title="1 创建"></a>1 创建</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># touch 文件创建</span><span class="token comment" spellcheck="true"># 无则创建，有则修改更新时间</span>touch filetouch <span class="token operator">/</span>home<span class="token operator">/</span>od<span class="token operator">/</span>file1 file2  <span class="token comment" spellcheck="true"># home和od都必须存在</span>touch file｛a，b，c｝<span class="token comment" spellcheck="true"># mkdir 目录创建</span><span class="token comment" spellcheck="true"># 选项：-v 显示详细信息  -p 递归创建目录</span><span class="token comment" spellcheck="true"># mkdir dir1</span><span class="token comment" spellcheck="true"># mkdir /home/od/dir1 /home/od/dir2</span><span class="token comment" spellcheck="true"># mkdir -v /home/od/{dir3,dir4} </span><span class="token comment" spellcheck="true"># mkdir -pv /home/od/dir5/dir6</span><span class="token comment" spellcheck="true"># mkdir -pv /home/{od/{diu,but},boy}</span></code></pre><h4 id="2-查看"><a href="#2-查看" class="headerlink" title="2 查看"></a>2 查看</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> ls<span class="token number">2</span> <span class="token comment" spellcheck="true"># 选项: -L: 显示目录树的层级</span><span class="token comment" spellcheck="true"># tree /home/od/    #显示当前目录下的结构</span><span class="token operator">/</span>home<span class="token operator">/</span>od<span class="token operator">/</span>├── but├── dir1├── dir2├── dir3├── dir4├── dir5│   └── dir6└── diu</code></pre><h4 id="3-复制"><a href="#3-复制" class="headerlink" title="3 复制"></a>3 复制</h4><pre class=" language-python"><code class="language-python">cp<span class="token comment" spellcheck="true">#选项： -v:详细显示命令执行的操作 -r: 递归处理目录与子目录 -p: 保留源文件或目录的属性</span><span class="token comment" spellcheck="true"># cp file /tmp/file_copy</span><span class="token comment" spellcheck="true"># cp name /tmp/name         #不修改名称</span><span class="token comment" spellcheck="true"># cp file /tmp/             #不修改名称</span><span class="token comment" spellcheck="true"># cp -p file /tmp/file_p    #-p保持原文件或目录的属性</span><span class="token comment" spellcheck="true"># cp -r  /etc/ /tmp/        #复制目录需要使用-r参数, 递归复制</span><span class="token comment" spellcheck="true"># cp -rv /etc/hosts /etc/hostname /tmp  #拷贝多个文件至一个目录</span><span class="token comment" spellcheck="true"># cp -rv /etc/{hosts,hosts.bak}</span><span class="token comment" spellcheck="true"># cp -rv /etc/hosts{,-org}</span></code></pre><h4 id="4-移动"><a href="#4-移动" class="headerlink" title="4 移动"></a>4 移动</h4><pre><code>mv# mv file file1             #原地移动算改名# mv file1 /tmp/            #移动文件至tmp目录# mv /tmp/file1 ./          #移动tmp目录的文件至当前目录# mv dir/ /tmp/             #移动目录至/tmp目录下# touch file&#123;1..3&#125;# mv file1 file2 file3 /opt/    #移动多个文件或至同一个目录# mkdir dir&#123;1..3&#125;# mv dir1/ dir2/ dir3/ /opt     #移动多个目录至同一个目录</code></pre><h4 id="5-删除"><a href="#5-删除" class="headerlink" title="5 删除"></a>5 删除</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#选项：-r: 递归 -f: 强制删除 -v: 详细过程</span><span class="token comment" spellcheck="true"># rm  file.txt      #删除文件, 默认rm存在alias别名，rm -i所以会提醒是否删除文件</span><span class="token comment" spellcheck="true"># rm -f file.txt    #删除文件, 不提醒</span><span class="token comment" spellcheck="true"># rm -r dir/        #递归删除目录，会提示</span><span class="token comment" spellcheck="true"># rm -rf dir/       #强制删除目录,不提醒(慎用)</span><span class="token comment" spellcheck="true">#1.rm删除示例</span><span class="token comment" spellcheck="true"># mkdir /home/dir10</span><span class="token comment" spellcheck="true"># touch /home/dir10/{file2,file3,.file4}</span><span class="token comment" spellcheck="true"># rm -f /home/dir10/  //不包括隐藏文件 </span><span class="token comment" spellcheck="true"># ls /home/dir10/ -a</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>file4<span class="token comment" spellcheck="true">#2.rm删除示例2</span><span class="token comment" spellcheck="true"># touch file{1..10}</span><span class="token comment" spellcheck="true"># touch {1..10}.pdf</span><span class="token comment" spellcheck="true"># rm -rf file </span><span class="token comment" spellcheck="true"># rm -rf .pdf</span></code></pre><h4 id="6-查看文件内容cat"><a href="#6-查看文件内容cat" class="headerlink" title="6 查看文件内容cat"></a>6 查看文件内容cat</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------cat</span><span class="token comment" spellcheck="true"># cp /etc/passwd ./pass</span><span class="token comment" spellcheck="true"># cat pass      #正常查看文件方式</span><span class="token comment" spellcheck="true"># cat -n pass   #-n显示文件有多少行</span><span class="token comment" spellcheck="true"># cat -A pass   #查看文件的特殊符号,比如文件中存在tab键</span><span class="token comment" spellcheck="true"># tac pass      #倒序查看文件</span>cat <span class="token operator">>></span> test2<span class="token punctuation">.</span>txt <span class="token operator">&lt;&lt;</span>EOFadsadfEOF</code></pre><h4 id="7-查看文件内容less，more"><a href="#7-查看文件内容less，more" class="headerlink" title="7 查看文件内容less，more"></a>7 查看文件内容less，more</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------less、more</span><span class="token comment" spellcheck="true"># less /etc/services    #使用光标上下翻动，空格进行翻页，q退出</span><span class="token comment" spellcheck="true"># more /etc/services    #使用回车上下翻动，空格进行翻页，q退出(有百分比)</span></code></pre><h4 id="8-查看文件头head，尾tail"><a href="#8-查看文件头head，尾tail" class="headerlink" title="8 查看文件头head，尾tail"></a>8 查看文件头head，尾tail</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------head</span><span class="token comment" spellcheck="true"># head pass     #查看头部内容，默认前十行</span><span class="token comment" spellcheck="true"># head -n5 pass #查看头部5行，使用-n指定</span><span class="token comment" spellcheck="true"># ps aux | head -5 # 只看头部5个进程</span><span class="token comment" spellcheck="true">#------tail</span><span class="token comment" spellcheck="true"># tail pass  # 查看文件尾部，默认10行</span><span class="token comment" spellcheck="true"># tail -20 /var/log/secure  # 查看文件尾部20行</span><span class="token comment" spellcheck="true"># tail -f /var/log/messages #-f动态查看文件尾部的变化</span><span class="token comment" spellcheck="true"># tailf /var/log/messages   #查看文件尾部的变化</span><span class="token comment" spellcheck="true"># ps aux | tail -2</span></code></pre><h4 id="9-过滤文件"><a href="#9-过滤文件" class="headerlink" title="9 过滤文件"></a>9 过滤文件</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------grep过滤文件内容</span><span class="token comment" spellcheck="true"># grep "^root" pass     #匹配以root开头的行</span><span class="token comment" spellcheck="true"># grep "bash$" pass     #匹配以bash结尾的行</span><span class="token comment" spellcheck="true"># grep -i "ftp" pass    #忽略大小写匹配</span><span class="token comment" spellcheck="true"># grep  -Ei "sync$|ftp" pass    #匹配文件中包含sync结尾或ftp字符串</span><span class="token comment" spellcheck="true"># grep -n -A 2 "Failed" /var/log/secure #匹配/var/log/secure文件中Failed字符串,并打印它的下2行</span><span class="token comment" spellcheck="true"># grep -n -B 2 "Failed" /var/log/secure #匹配/var/log/secure文件中Failed字符串,并打印它的上2行</span><span class="token comment" spellcheck="true"># grep -n -C 2 "Failed" /var/log/secure #匹配/var/log/secure文件中Failed字符串,并打印它的上下2行</span><span class="token comment" spellcheck="true"># 上翻，下翻</span>control<span class="token operator">+</span>b：下翻control<span class="token operator">+</span>f：上翻</code></pre><h4 id="10-联网下载文件"><a href="#10-联网下载文件" class="headerlink" title="10 联网下载文件"></a>10 联网下载文件</h4><pre class=" language-python"><code class="language-python">yum install wget <span class="token operator">-</span>y<span class="token comment" spellcheck="true">#选项: -O: 指定下载地址</span><span class="token comment" spellcheck="true"># wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><span class="token comment" spellcheck="true"># 比如下载图片</span><span class="token comment" spellcheck="true"># crul：浏览网络上资源，-o保存到本地</span><span class="token comment" spellcheck="true">#选项: -o: 指定下载地址</span><span class="token comment" spellcheck="true"># curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><span class="token comment" spellcheck="true"># 请求网址得到的是页面的html地址类似request模块</span></code></pre><h4 id="11-本地上传下载"><a href="#11-本地上传下载" class="headerlink" title="11 本地上传下载"></a>11 本地上传下载</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># yum install lrzsz -y  #不安装软件则无法执行该命令</span><span class="token comment" spellcheck="true"># rz            #只能上传文件文件上传(不能大于4g)</span><span class="token comment" spellcheck="true"># sz /path/file #只能下载文件</span></code></pre><h4 id="12-文件查找"><a href="#12-文件查找" class="headerlink" title="12 文件查找"></a>12 文件查找</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># locate /etc/sh       #搜索etc目录下所有以sh开头的文件</span><span class="token comment" spellcheck="true"># locate -i /etc/sh    #搜索etc目录下，所有以sh开头的文件，忽略大小写</span></code></pre><h4 id="13-命令查找"><a href="#13-命令查找" class="headerlink" title="13 命令查找"></a>13 命令查找</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># which ls  #查找ls命令的绝对路径</span><span class="token comment" spellcheck="true"># whereis ls       //查找命令的路径、帮助手册、等</span><span class="token comment" spellcheck="true"># whereis -b ls    //仅显示命令所在的路径，仅看二进制</span><span class="token comment" spellcheck="true"># 对于内核相关的一些命令，用which whereis 是无法查询到的，需要使用type采查询</span><span class="token comment" spellcheck="true"># type -a ls        #查看命令的绝对路径(包括别名)</span><span class="token comment" spellcheck="true"># type -a for</span></code></pre><h4 id="14-文件字符处理"><a href="#14-文件字符处理" class="headerlink" title="14 文件字符处理"></a>14 文件字符处理</h4><pre class=" language-python"><code class="language-python">sort 排序uniq 去重cut 截断wc 统计行号http<span class="token punctuation">:</span><span class="token operator">//</span>liuqingzheng<span class="token punctuation">.</span>top<span class="token operator">/</span>linux<span class="token operator">/</span><span class="token operator">%</span>E5<span class="token operator">%</span><span class="token number">85</span><span class="token operator">%</span>A5<span class="token operator">%</span>E9<span class="token operator">%</span><span class="token number">97</span><span class="token operator">%</span>A8<span class="token operator">%</span>E5<span class="token operator">%</span><span class="token number">88</span><span class="token operator">%</span>B0<span class="token operator">%</span>E7<span class="token operator">%</span>B2<span class="token operator">%</span>BE<span class="token operator">%</span>E9<span class="token operator">%</span><span class="token number">80</span><span class="token operator">%</span><span class="token number">9A</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">-</span>Linux<span class="token operator">%</span>E6<span class="token operator">%</span><span class="token number">96</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>E4<span class="token operator">%</span>BB<span class="token operator">%</span>B6<span class="token operator">%</span>E7<span class="token operator">%</span>AE<span class="token operator">%</span>A1<span class="token operator">%</span>E7<span class="token operator">%</span><span class="token number">90</span><span class="token operator">%</span><span class="token number">86</span><span class="token operator">/</span></code></pre><h4 id="15-系统文件属性"><a href="#15-系统文件属性" class="headerlink" title="15 系统文件属性"></a>15 系统文件属性</h4><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l ks.cfg</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll -h ks.cfg</span><span class="token operator">-</span>rw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span> <span class="token number">1</span> root root <span class="token number">4434</span> May <span class="token number">30</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">58</span> ks<span class="token punctuation">.</span>cfg<span class="token comment" spellcheck="true">#</span><span class="token operator">-</span>rw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span> ①<span class="token punctuation">:</span>第一个字符是文件类型，其他则是权限<span class="token number">1</span>           ②<span class="token punctuation">:</span>硬链接次数root        ③<span class="token punctuation">:</span>文件属于哪个用户root        ④<span class="token punctuation">:</span>文件属于哪个组（用户的分组）<span class="token number">4434</span>        ⑤<span class="token punctuation">:</span>文件大小May30 <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">58</span> ⑥⑦⑧<span class="token punctuation">:</span>最新修改的时间与日期ks<span class="token punctuation">.</span>cfg      ⑨<span class="token punctuation">:</span>文件或目录名称<span class="token comment" spellcheck="true"># 文件类型解析</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll -d /etc/hosts /tmp /bin/ls  /dev/sda /dev/tty1 /etc/grub2.cfg /dev/log /run/dmeventd-client</span><span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token punctuation">.</span>  <span class="token number">1</span> root root <span class="token number">117656</span> Jun <span class="token number">30</span>  <span class="token number">2016</span> <span class="token operator">/</span>bin<span class="token operator">/</span>lssrw<span class="token operator">-</span>rw<span class="token operator">-</span>rw<span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root      <span class="token number">0</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">35</span> <span class="token operator">/</span>dev<span class="token operator">/</span>logbrw<span class="token operator">-</span>rw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root disk   <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">/</span>dev<span class="token operator">/</span>sdacrw<span class="token operator">-</span><span class="token operator">-</span>w<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root tty    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">/</span>dev<span class="token operator">/</span>tty1lrwxrwxrwx<span class="token punctuation">.</span>  <span class="token number">1</span> root root     <span class="token number">22</span> Jan <span class="token number">13</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">31</span> <span class="token operator">/</span>etc<span class="token operator">/</span>grub2<span class="token punctuation">.</span>cfg <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>boot<span class="token operator">/</span>grub2<span class="token operator">/</span>grub<span class="token punctuation">.</span>cfg<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root    <span class="token number">199</span> Jan <span class="token number">20</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">03</span> <span class="token operator">/</span>etc<span class="token operator">/</span>hostsprw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root      <span class="token number">0</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">/</span>run<span class="token operator">/</span>dmeventd<span class="token operator">-</span>clientdrwxrwxrwt<span class="token punctuation">.</span> <span class="token number">61</span> root root   <span class="token number">8192</span> Jan <span class="token number">21</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">01</span> <span class="token operator">/</span>tmp<span class="token comment" spellcheck="true">#说明</span><span class="token operator">-</span>   <span class="token comment" spellcheck="true">#普通文件(文本, 二进制, 压缩, 图片, 日志等) </span>d   <span class="token comment" spellcheck="true">#目录文件</span>b   <span class="token comment" spellcheck="true">#设备文件(块设备)存储设备硬盘 /dev/sda1, /dev/sda2</span>c   <span class="token comment" spellcheck="true">#设备文件(字符设备)，终端 /dev/tty1, /dev/zero</span>s   <span class="token comment" spellcheck="true">#套接字文件, 进程间通信(socket)</span>p   <span class="token comment" spellcheck="true">#管道文件</span>l   <span class="token comment" spellcheck="true">#链接文件</span><span class="token comment" spellcheck="true"># 但是有时候这样给的文件类型不太精确，我们可以file来判断这个文件的类型</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /etc/hosts</span><span class="token operator">/</span>etc<span class="token operator">/</span>hosts<span class="token punctuation">:</span> ASCII text<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /bin/ls</span><span class="token operator">/</span>bin<span class="token operator">/</span>ls<span class="token punctuation">:</span> ELF <span class="token number">64</span><span class="token operator">-</span>bit LSB executable<span class="token punctuation">,</span> x86<span class="token number">-64</span><span class="token punctuation">,</span> version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span><span class="token punctuation">,</span> dynamically linked <span class="token punctuation">(</span>uses shared libs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">for</span> GNU<span class="token operator">/</span>Linux <span class="token number">2.6</span><span class="token punctuation">.</span><span class="token number">32</span><span class="token punctuation">,</span> BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>aa7ff68f13de25936a098016243ce57c3c982e06<span class="token punctuation">,</span> stripped<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /dev/sda</span><span class="token operator">/</span>dev<span class="token operator">/</span>sda<span class="token punctuation">:</span> block special<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /dev/tty1</span><span class="token operator">/</span>dev<span class="token operator">/</span>tty1<span class="token punctuation">:</span> character special<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /etc/grub2.cfg</span><span class="token operator">/</span>etc<span class="token operator">/</span>grub2<span class="token punctuation">.</span>cfg<span class="token punctuation">:</span> broken symbolic link to `<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>boot<span class="token operator">/</span>grub2<span class="token operator">/</span>grub<span class="token punctuation">.</span>cfg'<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /home</span><span class="token operator">/</span>home<span class="token punctuation">:</span> directory<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /run/dmeventd-client</span><span class="token operator">/</span>run<span class="token operator">/</span>dmeventd<span class="token operator">-</span>client<span class="token punctuation">:</span> fifo <span class="token punctuation">(</span>named pipe<span class="token punctuation">)</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll but</span><span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> root root <span class="token number">42125</span> Apr  <span class="token number">1</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">26</span> but<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file but</span>but<span class="token punctuation">:</span> Zip archive data<span class="token punctuation">,</span> at least v1<span class="token number">.0</span> to extract</code></pre><h4 id="16-系统链接文件"><a href="#16-系统链接文件" class="headerlink" title="16 系统链接文件"></a>16 系统链接文件</h4><p>文件有文件名与数据，在Linux上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。<br>用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方，我们将其称为Block<br>元数据，即文件的附加属性，如文件大小、创建时间、所有者等信息。我们称其为Inode<br>在Linux中，inode是文件元数据的一部分但其并不包含文件名，inode号即索引节点号）<br>文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图1.展示了程序通过文件名获取文件内容的过程。</p><p>Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）</p><p>ll -i 查看inode</p><h5 id="16-1软连接"><a href="#16-1软连接" class="headerlink" title="16.1软连接"></a>16.1软连接</h5><p>软链接相当于Windows的快捷方式，软链接文件会将inode指向源文件的block，当我们访问这个软链接文件时，其实访问的是源文件本身。那么当我们对一个文件创建多个软链接，其实就是多个inode指向同一个block。当我们删除软链接文件时，其实只是删除了一个inode指向，并不会对源文件源文件造成影响，但如果删除的是源文件则会造成所有软链接文件失效。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#文件软链接示例</span>touch <span class="token operator">/</span>root<span class="token operator">/</span>fileln <span class="token operator">-</span>s <span class="token operator">/</span>root<span class="token operator">/</span>file <span class="token operator">/</span>tmp<span class="token operator">/</span>file_bakll <span class="token operator">/</span>tmp<span class="token operator">/</span>file_bak  <span class="token operator">//</span>root下file链接到<span class="token operator">/</span>tmp下并重命名为file_bak<span class="token comment" spellcheck="true">#目录软链接示例</span>mkdir <span class="token operator">/</span>soft<span class="token operator">/</span>nginx1<span class="token number">.1</span> <span class="token operator">-</span>pln <span class="token operator">-</span>s <span class="token operator">/</span>soft<span class="token operator">/</span>nginx1<span class="token number">.1</span><span class="token operator">/</span> <span class="token operator">/</span>soft<span class="token operator">/</span>nginxll <span class="token operator">/</span>soft<span class="token operator">/</span>nginx   <span class="token operator">//</span>查看链接指向<span class="token comment" spellcheck="true">#软链接使用场景</span><span class="token number">1</span><span class="token punctuation">.</span>软件升级<span class="token number">2</span><span class="token punctuation">.</span>企业代码发布 <span class="token number">3</span><span class="token punctuation">.</span>不方便目录移动</code></pre><h5 id="16-2-硬链接"><a href="#16-2-硬链接" class="headerlink" title="16.2 硬链接"></a>16.2 硬链接</h5><p>若一个inode号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名，如下图hard link 就是 file 的一个别名，他们有共同的 inode。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#文件硬链接示例</span>ln  <span class="token operator">/</span>root<span class="token operator">/</span>file <span class="token operator">/</span>tmp<span class="token operator">/</span>file_hardll <span class="token operator">/</span>tmp<span class="token operator">/</span>file_hard<span class="token comment" spellcheck="true">#PS：目录不能创建硬链接，硬链接文件可以用rm命令删除</span></code></pre><p>5.硬链接与软链接区别<br>1)ln命令创建硬链接，ln -s命令创建软链接。<br>2)目录不能创建硬链接，并且硬链接不可以跨越分区系统。<br>3)目录软链接特别常用,并且软链接支持跨越分区系统。<br>4)硬链接文件与源文件的inode相同，软链接文件与源文件inode不同。<br>5)删除软链接文件，对源文件及硬链接文件无任何影响。<br>6)删除文件的硬链接文件，对源文件及链接文件无任何影响。<br>7)删除链接文件的源文件，对硬链接无影响，会导致软链接失效。<br>8)删除源文件及其硬链接文件，整个文件会被真正的删除。</p><h3 id="5-读写文件"><a href="#5-读写文件" class="headerlink" title="5 读写文件"></a>5 读写文件</h3><p><strong>vim</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># yum install vim -y</span><span class="token comment" spellcheck="true"># 普通模式、编辑模式、命令模式</span><span class="token comment" spellcheck="true"># 普通模式：</span>    <span class="token operator">-</span>上下翻    <span class="token operator">-</span>yy 复制一行    <span class="token operator">-</span>p   粘贴    <span class="token operator">-</span>dd  剪切    <span class="token operator">-</span>p   把上面剪切的粘贴上<span class="token comment" spellcheck="true"># 编辑模式</span>    <span class="token operator">-</span>i：insert插入    <span class="token operator">-</span>a：append追加    <span class="token operator">-</span>o：换行    <span class="token operator">-</span>正常写就可以了    <span class="token operator">-</span>esc回到普通模式<span class="token comment" spellcheck="true"># 命令模式：</span>    <span class="token operator">-</span>不能从编辑模式直接进，只能先到普通模式按 <span class="token punctuation">:</span>  进入命令，退出命令模式esc     <span class="token operator">-</span>w  表示保存     <span class="token operator">-</span>q   退出     <span class="token operator">-</span>！  强制退出     <span class="token operator">-</span>修改了文件后保存：  wq    wq！     <span class="token operator">-</span>修改了不想保存退出： q     q！     <span class="token operator">-</span><span class="token punctuation">:</span>set nu 显示行号     <span class="token operator">-</span><span class="token punctuation">:</span>set nonu 不显示行号     <span class="token operator">-</span><span class="token operator">/</span>字符串    搜索这个字符串     <span class="token operator">-</span><span class="token punctuation">:</span><span class="token operator">%</span>s<span class="token comment" spellcheck="true">#sbin#test#g #替换整个文本文件中包含sbin的替换为test</span></code></pre><h3 id="6-用户相关"><a href="#6-用户相关" class="headerlink" title="6 用户相关"></a>6 用户相关</h3><h4 id="1-用户与权限"><a href="#1-用户与权限" class="headerlink" title="1 用户与权限"></a>1 用户与权限</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  id  查看当前用户信息</span>uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> groups<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2  用户信息保存在 cat /etc/passwd</span>root<span class="token punctuation">:</span>x<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span>root<span class="token punctuation">:</span><span class="token operator">/</span>root<span class="token punctuation">:</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash<span class="token comment" spellcheck="true">#3  密码存放路径 cat /etc/shadow</span><span class="token comment" spellcheck="true">#4 约定不同用户的uid属于某个范围（了解）</span><span class="token comment" spellcheck="true"># 5 用户的增，删，改</span>    <span class="token operator">-</span>useradd（一个用户只能属于一个主组，属于多个附加组）        <span class="token operator">-</span>groupadd sa  新增一个组        <span class="token operator">-</span>groupadd sa1  新增一个组        <span class="token operator">-</span>groupadd students 新增一个组        <span class="token operator">-</span>useradd <span class="token operator">-</span>u <span class="token number">5001</span> <span class="token operator">-</span>g students <span class="token operator">-</span>G sa<span class="token punctuation">,</span>sa1 <span class="token operator">-</span>c <span class="token string">"2020 new student"</span> <span class="token operator">-</span>s <span class="token operator">/</span>bin<span class="token operator">/</span>bash lqz1    <span class="token operator">-</span>创建mysql系统用户，<span class="token operator">-</span>M不建立用户家目录 <span class="token operator">-</span>s指定nologin使其用户无法登陆系统        useradd mysql <span class="token operator">-</span>M <span class="token operator">-</span>s <span class="token operator">/</span>sbin<span class="token operator">/</span>nologin    <span class="token operator">-</span>usermod        <span class="token operator">-</span>usermod <span class="token operator">-</span>c <span class="token string">"2019 new student"</span> <span class="token operator">-</span>md <span class="token operator">/</span>bgx <span class="token operator">-</span>s <span class="token operator">/</span>bin<span class="token operator">/</span>sh <span class="token operator">-</span>l change_bgx bgx        <span class="token operator">-</span>usermod <span class="token operator">-</span>L change_bgx  <span class="token comment" spellcheck="true">#锁定后会无法登陆系统</span>        <span class="token operator">-</span>usermod <span class="token operator">-</span>U change_bgx    <span class="token operator">-</span>userdel        <span class="token operator">-</span>userdel egon  <span class="token comment" spellcheck="true"># 删除用户，不删家目录</span>        <span class="token operator">-</span>userdel <span class="token operator">-</span>r egon1 <span class="token comment" spellcheck="true"># 删除用户，删家目录</span><span class="token comment" spellcheck="true">#6  改密码</span>    <span class="token operator">-</span>passwd root<span class="token comment" spellcheck="true">#7 组增删改</span>    <span class="token operator">-</span>groupadd no_gid   新增组    <span class="token operator">-</span>groupmod <span class="token operator">-</span>g <span class="token number">1111</span> student  改组id号    <span class="token operator">-</span>groupmod student <span class="token operator">-</span>n new_student  改组名字    <span class="token operator">-</span>groupdel new_student   删除组（组下没有人，把人删除，再删）<span class="token comment" spellcheck="true"># 8 su 和sudo</span>    <span class="token operator">-</span>su 切换用户        <span class="token operator">-</span>su <span class="token operator">-</span> jack：打开新的shell，会加载自己的环境变量        <span class="token operator">-</span>su jack：不打开新的shell，不会加载它的环境变量    <span class="token operator">-</span>sudo 普通用户可以有一些超级用户的权限，不需要输入密码        usermod jack <span class="token operator">-</span>G wheel  <span class="token comment" spellcheck="true"># 把jack用户加入到了wheel组</span>        <span class="token operator">-</span>你这个用户没有权限，你尝试 sudo mkdir ll试一下，不行，超级管理员没有给你配这个权限</code></pre><h4 id="2-文件权限（特殊权限）"><a href="#2-文件权限（特殊权限）" class="headerlink" title="2 文件权限（特殊权限）"></a>2 文件权限（特殊权限）</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#选项: + 增加权限 -减少权限 =等于某个权限</span><span class="token comment" spellcheck="true"># a：让文件或目录仅可追加内容</span><span class="token comment" spellcheck="true"># i：不得任意更动文件或目录</span><span class="token comment" spellcheck="true"># 给某个文件或者文件夹加特殊权限</span>    <span class="token operator">-</span>chattr <span class="token operator">+</span>i lqz<span class="token punctuation">.</span>text        <span class="token operator">-</span>chattr <span class="token operator">-</span>i lqz<span class="token punctuation">.</span>text</code></pre><h3 id="7-压缩解压"><a href="#7-压缩解压" class="headerlink" title="7 压缩解压"></a>7 压缩解压</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  Windows的压缩包与Linux的压缩包能否互通</span>    windwods：rar，zip      linux：tar<span class="token punctuation">.</span>gz<span class="token punctuation">,</span>zip互通，不支持rar<span class="token comment" spellcheck="true"># 2 gzip (只能压一个文件，不能压文件夹，会把原来的删除)</span>    <span class="token operator">-</span>gzip file    <span class="token operator">-</span>gzip <span class="token operator">-</span>d file    <span class="token operator">-</span>有什么用？       <span class="token operator">-</span>cd <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>       <span class="token comment" spellcheck="true"># 可以把文件做个备份</span><span class="token comment" spellcheck="true">#3 zip的压缩和解压</span>    <span class="token operator">-</span>yum install zip unzip <span class="token operator">-</span>y    <span class="token operator">-</span>zip  filename<span class="token punctuation">.</span>zip  filename  <span class="token comment" spellcheck="true"># 压单个文件</span>    <span class="token operator">-</span>zip <span class="token operator">-</span>r home<span class="token punctuation">.</span>zip <span class="token operator">/</span>home<span class="token operator">/</span>   <span class="token comment" spellcheck="true">#把home文件夹压缩</span>    <span class="token operator">-</span>unzip  home<span class="token punctuation">.</span>zip   <span class="token comment" spellcheck="true">#解压</span>    <span class="token operator">-</span>unzip <span class="token operator">-</span>l  home<span class="token punctuation">.</span>zip <span class="token comment" spellcheck="true"># 不解压，看内容</span>    <span class="token operator">-</span>unzip home<span class="token punctuation">.</span>zip  <span class="token operator">-</span>d <span class="token operator">/</span>opt<span class="token operator">/</span>   <span class="token comment" spellcheck="true"># 把当前路径下的home.zip 解压到opt</span><span class="token comment" spellcheck="true"># 4 tar打包与压缩</span>    <span class="token operator">-</span>tar <span class="token operator">-</span>czf 压缩后的文件名 压缩前的文件名        <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>》tar<span class="token punctuation">.</span>gz    <span class="token operator">-</span>tar <span class="token operator">-</span>xf  xx<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>解压xx<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz    tar <span class="token operator">-</span>xzvf  xx<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz ：解压tar<span class="token punctuation">.</span>gz，详细过程列出来    <span class="token comment" spellcheck="true"># 可以把不同目录的文件都压缩到一个文件内</span>    <span class="token operator">-</span>tar <span class="token operator">-</span>czf home<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz dd<span class="token operator">/</span> lqz1 lqz2 <span class="token operator">/</span>home<span class="token operator">/</span>    <span class="token operator">-</span>tar czf etc<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">-</span><span class="token operator">-</span>exclude<span class="token operator">=</span>etc<span class="token operator">/</span>services etc<span class="token operator">/</span>  <span class="token comment" spellcheck="true"># 排除文件</span>    <span class="token operator">-</span>tar xf <span class="token operator">/</span>etc<span class="token operator">/</span>local<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz  <span class="token operator">-</span>C <span class="token operator">/</span>tmp  <span class="token comment" spellcheck="true"># -C指定解压到哪个路径</span></code></pre><h3 id="8-软件管理：rpm"><a href="#8-软件管理：rpm" class="headerlink" title="8 软件管理：rpm"></a>8 软件管理：rpm</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  红帽的软件安装包（windows的：exe，mis）</span><span class="token comment" spellcheck="true">#2  mount /dev/cdrom /mnt 把光盘挂在到 /mnt文件夹</span><span class="token comment" spellcheck="true">#3  Linux中除了rpm安装软件，是否还有安装软件方式</span>    <span class="token operator">-</span>源码安装<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>官网下源码<span class="token operator">-</span><span class="token operator">-</span>》编译安装<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>》最新    <span class="token operator">-</span>rpm包，预先编译打包<span class="token punctuation">,</span>安装简单，yum安装，本质就是rmp安装<span class="token operator">-</span><span class="token operator">-</span>》稍微老一些    <span class="token operator">-</span>二进制包：绿色包    <span class="token operator">-</span>安装rpm的软件：rpm <span class="token operator">-</span>ivh tree<span class="token number">-1.6</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">10.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm    <span class="token operator">-</span>强制安装：rpm <span class="token operator">-</span>ivh <span class="token operator">-</span><span class="token operator">-</span>force <span class="token operator">/</span>mnt<span class="token operator">/</span>Packages<span class="token operator">/</span>tree<span class="token number">-1.5</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">3.</span>el6<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm    <span class="token operator">-</span>rpm <span class="token operator">-</span>q ：查看这个软件是否安装<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>    <span class="token operator">-</span>rpm <span class="token operator">-</span>qa <span class="token operator">|</span>grep tr  ：列出所有安装的软件    <span class="token operator">-</span>rpm <span class="token operator">-</span>ql <span class="token punctuation">:</span>查询指定软件包所安装的目录、文件列表rpm <span class="token operator">-</span>ql unzip <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>    <span class="token operator">-</span>rpm <span class="token operator">-</span>qc unzip<span class="token punctuation">:</span>查看这个软件的配置文件位置    <span class="token operator">-</span>rpm <span class="token operator">-</span>qf <span class="token operator">/</span>etc<span class="token operator">/</span>pam<span class="token punctuation">.</span>d<span class="token operator">/</span>vsftpd  ：查看配置文件属于哪个软件    <span class="token operator">-</span>rpm <span class="token operator">-</span>qlp trace<span class="token operator">-</span>cmd<span class="token number">-2.6</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">10.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm ：查看该软件包安装后会释放哪些文件    <span class="token operator">-</span>使用远程地址安装：rpm <span class="token operator">-</span>ivh https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>zabbix<span class="token operator">/</span>zabbix<span class="token operator">/</span><span class="token number">3.0</span><span class="token operator">/</span>rhel<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>x86_64<span class="token operator">/</span>zabbix<span class="token operator">-</span>agent<span class="token number">-3.0</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">2.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm    <span class="token operator">-</span>rpm <span class="token operator">-</span>Uivh  升级软件需要用  U    <span class="token operator">-</span>rpm <span class="token operator">-</span>e zabbix<span class="token operator">-</span>agent</code></pre><h3 id="9-yum仓库，源"><a href="#9-yum仓库，源" class="headerlink" title="9 yum仓库，源"></a>9 yum仓库，源</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 Yum是RedHat以及CentOS中的软件包管理器。能够通过互联网下载 .rpm 包并且安装，并可以自动处理依赖性关系，无须繁琐地一次次下载、安装</span><span class="token comment" spellcheck="true"># 2 cd /etc/yum.repos.d/  路径下有xx.repo 文件---》yum源</span><span class="token comment" spellcheck="true"># 3 换阿里云的源</span>    wget <span class="token operator">-</span>O <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>CentOS<span class="token operator">-</span>Base<span class="token punctuation">.</span>repo https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>repo<span class="token operator">/</span>Centos<span class="token number">-7.</span>repo<span class="token comment" spellcheck="true"># 4 配置其他源</span>    <span class="token operator">-</span>wget <span class="token operator">-</span>O <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>epel<span class="token punctuation">.</span>repo http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>repo<span class="token operator">/</span>epel<span class="token number">-7.</span>repo    <span class="token operator">-</span>yum install nginx     <span class="token operator">-</span>yum provides ipconfig  <span class="token comment" spellcheck="true"># 通过命令查软件，这个命令属于哪个软件</span>       <span class="token operator">-</span>rpm <span class="token operator">-</span>qf `which ifconfig` <span class="token comment" spellcheck="true"># 查命令属于哪个软件，前提是该软件安装了z</span></code></pre><h3 id="10-文件权限chmod"><a href="#10-文件权限chmod" class="headerlink" title="10 文件权限chmod"></a>10 文件权限chmod</h3><pre><code>1 rwx                 r-x       r-x  属主(文件所有者)      属组权限    其他人权限2 权限详解    r：read写权限    w: write写权限    x:可执行3 修改权限    7=4(r)+2(w)+1(x)    chmod 777 文件夹/文件</code></pre><h3 id="11-源码安装软件"><a href="#11-源码安装软件" class="headerlink" title="11 源码安装软件"></a>11 源码安装软件</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 会了yum安装，为什么还要会二进制安装（编译安装）    <span class="token operator">-</span>官方不提供yum安装    <span class="token operator">-</span>二进制安装是最新的<span class="token number">2</span> 向服务器传递文件的几种方式     <span class="token operator">-</span>scp nginx<span class="token number">-1.18</span><span class="token punctuation">.</span><span class="token number">0.</span>tar<span class="token punctuation">.</span>gz root@<span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>jack     <span class="token operator">-</span>sz，rz    <span class="token operator">-</span>xftp软件来传    <span class="token comment" spellcheck="true">#1.基础环境准备</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y gcc make wget </span><span class="token comment" spellcheck="true">#2.下载源码包</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://nginx.org/download/nginx-1.15.12.tar.gz</span><span class="token comment" spellcheck="true">#3.解压源码包, 并进入相应目录</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar xf nginx-1.15.12.tar.gz</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd nginx-1.15.12</span><span class="token comment" spellcheck="true">#4.配置相关的选项，并生成Makefile</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --help</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --prefix=/usr/local/nginx</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo $? # 检查上一个命令是否执行成功</span><span class="token comment" spellcheck="true">#5.将Makefile文件编译可执行二进制程序，此时,/usr/local/nginx可执行文件还不在，需要执行make install 才能copy过去</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make</span><span class="token comment" spellcheck="true">#6.将二进制文件拷贝至对应的目录中</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make install</span><span class="token comment" spellcheck="true">#7 建立软连接（以后方便升级）</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s nginx-1.18.0 nginx</span><span class="token comment" spellcheck="true">#8 目录介绍</span>conf<span class="token punctuation">:</span>配置文件html：网站文件存放logs：日志sbin<span class="token punctuation">:</span>可执行文件<span class="token comment" spellcheck="true"># 9 命令</span>nginx  <span class="token comment" spellcheck="true"># 启动</span>nginx <span class="token operator">-</span>s reload <span class="token comment" spellcheck="true"># 重新加载</span>nginx <span class="token operator">-</span>s stop  <span class="token comment" spellcheck="true"># 重启</span>nginx <span class="token operator">-</span>s stop <span class="token comment" spellcheck="true"># 停止</span></code></pre><h3 id="12-进程管理"><a href="#12-进程管理" class="headerlink" title="12 进程管理"></a>12 进程管理</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  ps -aux 用它，[系统进程]</span><span class="token comment" spellcheck="true">#2  ps -ef</span><span class="token comment" spellcheck="true">#3  ps -aux|grep id,进程名字，</span><span class="token comment" spellcheck="true"># 4 top实时看状态</span><span class="token comment" spellcheck="true"># 5 kill -l</span><span class="token comment" spellcheck="true"># 6 kill -9 进程id号 强行关闭</span><span class="token comment" spellcheck="true"># 7 pkill -9 nginx  关闭nginx所有进程</span><span class="token comment" spellcheck="true"># 8 killall nginx   关闭nginx所有进程</span><span class="token comment" spellcheck="true"># 通过来管理进程screen</span>yum install screen <span class="token operator">-</span>y创建一个窗口screen <span class="token operator">-</span>S myjobs执行耗时任务，进程ctrl<span class="token operator">+</span>a<span class="token operator">+</span>d  退出当前bashshell但是耗时任务还在后台运行screen <span class="token operator">-</span>r myjobs 调到前台执行screen <span class="token operator">-</span>list  查看所有任务</code></pre><h3 id="13-系统服务"><a href="#13-系统服务" class="headerlink" title="13 系统服务"></a>13 系统服务</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  centos6 上启动服务service start network</span><span class="token comment" spellcheck="true">#2  centos7 启动服务：systemctl start network</span><span class="token comment" spellcheck="true"># 制作系统服务其实就是编写一堆配置，在配置文件中最起码要有这个程序的启动和关闭命令</span><span class="token comment" spellcheck="true"># 如果有必要也可以做成系统服务</span><span class="token comment" spellcheck="true">#3  cd /usr/lib/systemd/system/</span><span class="token comment" spellcheck="true">###制作系统服务</span><span class="token comment" spellcheck="true">#4 vim mynginx.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>my nginxAfter<span class="token operator">=</span>network<span class="token punctuation">.</span>target  <span class="token comment" spellcheck="true">#在哪个服务启动后启动</span><span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type<span class="token operator">=</span>forkingExecStart<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginxExecStop<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s stopExecRestart<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s restartExecReload<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s reload<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi<span class="token operator">-</span>user<span class="token punctuation">.</span>target<span class="token comment" spellcheck="true"># 以后就支持使用 systemctl start mynginx.service</span><span class="token comment" spellcheck="true"># 查看服务状态：</span>    systemctl status mynginx<span class="token punctuation">.</span>service    <span class="token comment" spellcheck="true"># disabled表示没有开机自启动</span>    Loaded<span class="token punctuation">:</span> loaded <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>systemd<span class="token operator">/</span>system<span class="token operator">/</span>mynginx<span class="token punctuation">.</span>service<span class="token punctuation">;</span> disabled<span class="token punctuation">;</span> vendor preset<span class="token punctuation">:</span> disabled<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开机自启动</span>    systemctl enable mynginx<span class="token comment" spellcheck="true"># 取消开机自启动</span>systemctl disable mynginx<span class="token punctuation">.</span>service</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;linux学习&quot;&gt;&lt;a href=&quot;#linux学习&quot; class=&quot;headerlink&quot; title=&quot;linux学习&quot;&gt;&lt;/a&gt;linux学习&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;一、虚拟软件安装&quot;&gt;&lt;a href=&quot;#一、虚拟软件安装&quot; cl</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="操作系统" scheme="http://huang_zhao.gitee.io/task/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 接口</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/19/Typescript%20%E6%8E%A5%E5%8F%A3/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/19/Typescript%20%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-09-19T15:59:11.000Z</published>
    <updated>2020-09-18T11:01:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-接口"><a href="#1-接口" class="headerlink" title="1 接口"></a>1 接口</h3><p>接口的本质就是定义一个标准，起到限制和规范的作用，和抽象类有点相似，但是抽象类只规范类，接口规范的范围更大，对属性，函数，类都可以有限制作用</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口</span><span class="token comment" spellcheck="true">// 属性接口，对传入参数进行约束</span><span class="token comment" spellcheck="true">// 一般函数在传参的时候定义参数类型string，其实也是一种约束</span><span class="token comment" spellcheck="true">// 但这种约束是简单约束，我们需要自定制或者更复杂的约束就需要用到接口</span><span class="token keyword">interface</span> <span class="token class-name">FullName</span><span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token keyword">string</span>    secondName<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token comment" spellcheck="true">// 可选参数，可传可不传</span>    age<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">printName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>FullName<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>name<span class="token punctuation">.</span>secondName<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里函数传参必须要传一个满足接口规范的对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token string">"黄"</span><span class="token punctuation">,</span>    secondName<span class="token punctuation">:</span><span class="token string">"钊"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 也可以传其他无关参数,但是函数中的name无法使用</span>    xxx<span class="token punctuation">:</span><span class="token number">18</span>    <span class="token comment" spellcheck="true">// 可选参数可穿可不传</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果直接在传参括号内定义对象就只能有接口中的属性，不能添加额外的</span><span class="token function">printName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h3 id="2-封装ajax（接口小🌰）"><a href="#2-封装ajax（接口小🌰）" class="headerlink" title="2 封装ajax（接口小🌰）"></a>2 封装ajax（接口小🌰）</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口例子，实现ajax</span><span class="token keyword">interface</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span><span class="token keyword">string</span>    url<span class="token punctuation">:</span><span class="token keyword">string</span>    data<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span>    dataType<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span>Config<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>type<span class="token punctuation">,</span>config<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dataType<span class="token operator">==</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 真实请求api地址</span>    dataType<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-函数类型接口"><a href="#3-函数类型接口" class="headerlink" title="3 函数类型接口"></a>3 函数类型接口</h3><p>对传入的参数和返回值批量约束</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 函数类型接口</span><span class="token keyword">interface</span> <span class="token class-name">base</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用这个函数类型就必须遵循它的参数和返回值格式</span>    <span class="token punctuation">(</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> printMsg<span class="token punctuation">:</span>base <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> key<span class="token operator">+</span>num<span class="token punctuation">}</span><span class="token function">printMsg</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span></code></pre><h3 id="4-可索引接口：数组，对象的约束（不常用）"><a href="#4-可索引接口：数组，对象的约束（不常用）" class="headerlink" title="4 可索引接口：数组，对象的约束（不常用）"></a>4 可索引接口：数组，对象的约束（不常用）</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可索引接口 对数组的约束</span><span class="token keyword">interface</span> <span class="token class-name">userNum</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr<span class="token punctuation">:</span>userNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token string">"yyy"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 对对象的约束</span><span class="token keyword">interface</span> <span class="token class-name">userObj</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr<span class="token punctuation">:</span>userObj <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">:</span><span class="token string">"hz"</span><span class="token punctuation">]</span></code></pre><h3 id="5-类类型接口"><a href="#5-类类型接口" class="headerlink" title="5 类类型接口"></a>5 类类型接口</h3><p>和抽象类很相似</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token function">run</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里只是约束了得有这个方法，具体的传参和返回值没法约束</span>    <span class="token function">run</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="6-接口的继承"><a href="#6-接口的继承" class="headerlink" title="6 接口的继承"></a>6 接口的继承</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口的继承+类继承综合使用</span><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">People</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token function">work</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    age<span class="token punctuation">:</span><span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"is play"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Peo</span> <span class="token keyword">implements</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在工作"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在吃"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-接口&quot;&gt;&lt;a href=&quot;#1-接口&quot; class=&quot;headerlink&quot; title=&quot;1 接口&quot;&gt;&lt;/a&gt;1 接口&lt;/h3&gt;&lt;p&gt;接口的本质就是定义一个标准，起到限制和规范的作用，和抽象类有点相似，但是抽象类只规范类，接口规范的范围更大，对属性，函数，类</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts面向对象" scheme="http://huang_zhao.gitee.io/task/tags/ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 泛型</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/19/Typescript%20%E6%B3%9B%E5%9E%8B/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/19/Typescript%20%E6%B3%9B%E5%9E%8B/</id>
    <published>2020-09-19T15:59:11.000Z</published>
    <updated>2020-09-18T11:01:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-泛型的定义"><a href="#1-泛型的定义" class="headerlink" title="1 泛型的定义"></a>1 泛型的定义</h3><p>泛型：要考虑到组件的可重用性和扩展性，要求组件不仅支持当前的数据类型，也要支持未来的数据类型，在创建大型系统时提供了十分灵活的功能</p><p>ts中的泛型类似于c#和java，用户可以自定义数据类型来使用组件</p><p>通俗理解：泛型就是解决 类 接口 方法的复用性，以及对不确定类型进行数据校验</p><h3 id="2-泛型函数"><a href="#2-泛型函数" class="headerlink" title="2 泛型函数"></a>2 泛型函数</h3><p>当我们需要一个方法传入什么类型就返回什么类型的时候就可以用到，和any不一样，any忽略了类型检查，可以返回一样的也可以返回不一样的</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 在函数名后加 &lt;T>,表示使用了泛型</span><span class="token comment" spellcheck="true">// 泛型的规则是</span><span class="token comment" spellcheck="true">// 1 你必须有一个/多个参数属于泛型类型</span><span class="token comment" spellcheck="true">// 2 返回值类型必须是泛型类型</span><span class="token comment" spellcheck="true">// 3 函数调用必须指定泛型的类型</span><span class="token keyword">function</span> getData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>msg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span>getData<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token string">"hz"</span><span class="token punctuation">)</span></code></pre><h3 id="3-泛型类"><a href="#3-泛型类" class="headerlink" title="3 泛型类"></a>3 泛型类</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 泛型</span><span class="token comment" spellcheck="true">// 在函数名后加 &lt;T>,表示使用了泛型</span><span class="token comment" spellcheck="true">// 泛型的规则是</span><span class="token comment" spellcheck="true">// 1 你必须有一个/多个参数属于泛型类型</span><span class="token comment" spellcheck="true">// 2 返回值类型必须是泛型类型</span><span class="token comment" spellcheck="true">// 3 函数调用必须指定泛型的类型</span><span class="token keyword">function</span> getData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>msg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// getData&lt;number>(123,456,"hz")</span><span class="token comment" spellcheck="true">// 定义一个类，有添加数据到数组的功能，也有求数组中最小元素的功能</span><span class="token keyword">class</span> <span class="token class-name">MinClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    list<span class="token punctuation">:</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>        <span class="token keyword">var</span> minMsg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>minMsg<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                minMsg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minMsg    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实例化类，并指定了泛型的类型</span><span class="token keyword">var</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinClass</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4-泛型接口"><a href="#4-泛型接口" class="headerlink" title="4 泛型接口"></a>4 泛型接口</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 泛型接口</span><span class="token keyword">interface</span> <span class="token class-name">ConfigFn</span><span class="token punctuation">{</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>value2<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">}</span><span class="token keyword">var</span> printMsg<span class="token punctuation">:</span>ConfigFn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>value2<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span>printMsg<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">)</span>printMsg<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"444"</span><span class="token punctuation">)</span></code></pre><h3 id="5-泛型类，以类为参数传递（小🌰）"><a href="#5-泛型类，以类为参数传递（小🌰）" class="headerlink" title="5 泛型类，以类为参数传递（小🌰）"></a>5 泛型类，以类为参数传递（小🌰）</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 定义几个类映射数据库的表</span><span class="token comment" spellcheck="true">// 定义一个MysqlDB操作数据添加到数据库</span><span class="token keyword">class</span> <span class="token class-name">MysqlDB</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    password <span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined        desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>desc    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个db对象，只能操作添加User类的数据</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlDB</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>admin<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"admin"</span>admin<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token number">123</span> db<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义一个db对象，只能操作添加Articld类的数据</span><span class="token keyword">var</span> dbA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlDB</span><span class="token operator">&lt;</span>Article<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token string">"金品梅"</span><span class="token punctuation">,</span>    desc<span class="token punctuation">:</span><span class="token string">"好看"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>dbA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-泛型的定义&quot;&gt;&lt;a href=&quot;#1-泛型的定义&quot; class=&quot;headerlink&quot; title=&quot;1 泛型的定义&quot;&gt;&lt;/a&gt;1 泛型的定义&lt;/h3&gt;&lt;p&gt;泛型：要考虑到组件的可重用性和扩展性，要求组件不仅支持当前的数据类型，也要支持未来的数据类型，在创建</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts高级" scheme="http://huang_zhao.gitee.io/task/tags/ts%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 模块</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/19/Typescript%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/19/Typescript%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-09-19T15:59:11.000Z</published>
    <updated>2020-09-18T11:02:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-模块的定义"><a href="#1-模块的定义" class="headerlink" title="1 模块的定义"></a>1 模块的定义</h3><p>ts中<strong>内部模块</strong>现在称为“命名空间”，<strong>外部模块</strong>简称模块</p><p>ts中模块想要使用首先要在模块内部通过export把内的数据暴露出去，再在需要使用的地方import引入模块</p><h3 id="2-模块的简单使用"><a href="#2-模块的简单使用" class="headerlink" title="2 模块的简单使用"></a>2 模块的简单使用</h3><p><strong>被导入页面</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">printMsg</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>salary<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hz"</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token comment" spellcheck="true">// 默认导入，只能使用一次</span><span class="token keyword">export</span> <span class="token keyword">default</span> salary<span class="token keyword">export</span><span class="token punctuation">{</span>name <span class="token punctuation">,</span> age<span class="token punctuation">}</span></code></pre><p><strong>导入页面</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认导入的方式就不需要加花括号，但是只能导入一个</span><span class="token keyword">import</span> salary <span class="token keyword">from</span> <span class="token string">"./modules/func"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> printMsg as print<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./modules/func"</span><span class="token comment" spellcheck="true">// 可以多个一起导入，也可以起别名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-命名空间的简单使用"><a href="#3-命名空间的简单使用" class="headerlink" title="3 命名空间的简单使用"></a>3 命名空间的简单使用</h3><p>命名空间就是在一个ts文件中，使用名称空间包裹一个范围，这个范围内的数据只属于这个名称空间，在外部可以重复</p><p><strong>index.ts</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 如果其他页面要使用这个命名空间的数据就必须先导出namespace，再导出内部数据</span><span class="token keyword">export</span> namespace A<span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">printMsg</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>salary<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">}</span> <span class="token keyword">export</span> namespace B<span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">printMsg</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>salary<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">}</span> </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-模块的定义&quot;&gt;&lt;a href=&quot;#1-模块的定义&quot; class=&quot;headerlink&quot; title=&quot;1 模块的定义&quot;&gt;&lt;/a&gt;1 模块的定义&lt;/h3&gt;&lt;p&gt;ts中&lt;strong&gt;内部模块&lt;/strong&gt;现在称为“命名空间”，&lt;strong&gt;外部模块&lt;/s</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts基础" scheme="http://huang_zhao.gitee.io/task/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 装饰器</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/19/Typescript%20%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/19/Typescript%20%E8%A3%85%E9%A5%B0%E5%99%A8/</id>
    <published>2020-09-19T15:59:11.000Z</published>
    <updated>2020-09-18T11:02:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>模仿python的，没啥好说</p><p>用法基本一模一样</p><p>ts中的装饰器可以注入到类，属性，方法，参数上</p><h3 id="2-类装饰器"><a href="#2-类装饰器" class="headerlink" title="2 类装饰器"></a>2 类装饰器</h3><h4 id="2-1-无参装饰器"><a href="#2-1-无参装饰器" class="headerlink" title="2.1 无参装饰器"></a>2.1 无参装饰器</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    params<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apiUrl <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">}</span>@logClass<span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可能会报错，检测不到这个属性，是ide报的错不用管</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span></code></pre><h4 id="2-2-有参装饰器（装饰器工厂）"><a href="#2-2-有参装饰器（装饰器工厂）" class="headerlink" title="2.2 有参装饰器（装饰器工厂）"></a>2.2 有参装饰器（装饰器工厂）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 有参装饰器</span><span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apiUrl <span class="token operator">=</span> msg    <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token function">logClass</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span></code></pre><h3 id="3-属性装饰器"><a href="#3-属性装饰器" class="headerlink" title="3 属性装饰器"></a>3 属性装饰器</h3><p>注意点：</p><p>只能有参，传入的俩参数</p><ul><li>参数1：对于静态成员来说就是类的构造函数，对于实例成员来说就是类的原形对象</li><li>参数2：成员名字</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logPrototype</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>targat<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attr<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targat<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 注意这里在修改的时候需要用[]而不能直接点，当然也可以用原形链</span>        targat<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> params    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    @<span class="token function">logPrototype</span><span class="token punctuation">(</span><span class="token string">"baidu"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>url<span class="token punctuation">)</span></code></pre><h3 id="4-方法装饰器"><a href="#4-方法装饰器" class="headerlink" title="4 方法装饰器"></a>4 方法装饰器</h3><p>接受三个参数</p><ul><li>参数1：对于静态成员来说是类的构造函数，对于实例成员是类的原形</li><li>成员名字</li><li>成员的属性描述符</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>funcName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>funcName<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 这跟类装饰器没啥区别，直接拿到类了就能随便改了</span>        <span class="token comment" spellcheck="true">// 但是这里没有修改成功，看下面</span>        target<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logFunc</span><span class="token punctuation">(</span><span class="token string">"run func"</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     </code></pre><p><strong>替换方法</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>funcName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// desc.value 就是原来的方法</span>        <span class="token comment" spellcheck="true">// 直接替换了个新的</span>        <span class="token comment" spellcheck="true">// 但是我只想扩展不是想直接换了，看下面</span>        desc<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logFunc</span><span class="token punctuation">(</span><span class="token string">"run func"</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre><p><strong>修改方法</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 有参装饰器</span><span class="token keyword">function</span> <span class="token function">logFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    <span class="token comment" spellcheck="true">// console.log(params)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>funcName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// desc.value 就是原来的方法</span>        <span class="token keyword">var</span> oMethod <span class="token operator">=</span> desc<span class="token punctuation">.</span>value        desc<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            args <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 调用原来的方法</span>            <span class="token comment" spellcheck="true">// oMethod()</span>            <span class="token comment" spellcheck="true">// 为原来的方法传参</span>            oMethod<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logFunc</span><span class="token punctuation">(</span><span class="token string">"run func"</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"zaaa"</span><span class="token punctuation">)</span>     </code></pre><p>方法参数装饰器用的不多就不记了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1 定义&quot;&gt;&lt;/a&gt;1 定义&lt;/h3&gt;&lt;p&gt;模仿python的，没啥好说&lt;/p&gt;
&lt;p&gt;用法基本一模一样&lt;/p&gt;
&lt;p&gt;ts中的装饰器可以注入到类，属性，方法，参数上&lt;</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts高级" scheme="http://huang_zhao.gitee.io/task/tags/ts%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Typescript 类，继承，修饰符，静态，多态，抽象类</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/15/Typescript%20%E7%B1%BB%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/15/Typescript%20%E7%B1%BB%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6/</id>
    <published>2020-09-15T15:59:11.000Z</published>
    <updated>2020-09-18T11:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-类的定义"><a href="#1-类的定义" class="headerlink" title="1 类的定义"></a>1 类的定义</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token comment" spellcheck="true">// constructor 是类实例化触发的构造函数</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 可以通过类中的方法去对属性改值，取值</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name    <span class="token punctuation">}</span>    <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> peo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span>peo<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2 继承"></a>2 继承</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：通过extend super</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 继承要点1：必须继承父类的构造方法，可以在上面新增，但是不能缺</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 继承要点2：属性和方法的查找顺序优先从自己开始到父类</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> w <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-修饰符"><a href="#3-修饰符" class="headerlink" title="3 修饰符"></a>3 修饰符</h3><p>修饰符修饰的是类中的属性和方法</p><ul><li>public：公有<ul><li>在类中，子类中，类外部都可以访问</li></ul></li><li>protected：保护类型（封装）<ul><li>在类中，子类中可以访问，类外部不能访问</li></ul></li><li>private：私有<ul><li>只有在类中能访问，在子类和类外部都不能访问</li></ul></li></ul><p>注意：属性如果不加修饰符默认是public</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">protected</span> sex<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span>    <span class="token keyword">private</span> xxx<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 继承要点1：必须继承父类的构造方法，可以在上面新增，但是不能缺</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 继承要点2：属性和方法的查找顺序优先从自己开始到父类</span>    <span class="token comment" spellcheck="true">// 继承要点3：如果父类中有私有属性，子类中不能重复定义这个属性</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 类中的修饰符运用</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-静态属性-方法"><a href="#4-静态属性-方法" class="headerlink" title="4 静态属性/方法"></a>4 静态属性/方法</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">protected</span> sex<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span>    <span class="token keyword">private</span> xxx<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">static</span> wifi<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"lxt"</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实例方法,只能使用实例属性</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态方法，静态方法不能直接调用属性，只能调用静态属性</span>    <span class="token keyword">static</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>wifi<span class="token operator">+</span><span class="token string">"在play"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span>People<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="5-多态"><a href="#5-多态" class="headerlink" title="5 多态"></a>5 多态</h3><p>ts中的多态属于继承的一种形式，父类定义方法但不去实现，子类去实现父类的方法，实现多态</p><p>ts中的多态属于鸭子类型，和python和go中的多态相似，都属于非侵入式，就算不写也不会报错</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃肉"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃🐭"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"xd"</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"xm"</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="6-抽象类，抽象方法"><a href="#6-抽象类，抽象方法" class="headerlink" title="6 抽象类，抽象方法"></a>6 抽象类，抽象方法</h3><p>注意点：</p><ul><li>抽象方法无法单独存在必须定义在抽象类中</li><li>继承抽象类的子类，必须实现抽象类中的抽象方法</li><li>抽象类无法实例化</li><li>抽象类的继承也属于多态，属于侵入式，没有重写就会报错</li></ul><pre class=" language-ts"><code class="language-ts">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义在抽象类内部的抽象方法</span>    <span class="token comment" spellcheck="true">// 不能在这里实现</span>    <span class="token comment" spellcheck="true">// 必须定义返回值类型：void为无返回值</span>    abstract <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃肉"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃🐭"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"xd"</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"xm"</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-类的定义&quot;&gt;&lt;a href=&quot;#1-类的定义&quot; class=&quot;headerlink&quot; title=&quot;1 类的定义&quot;&gt;&lt;/a&gt;1 类的定义&lt;/h3&gt;&lt;pre class=&quot; language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts面向对象" scheme="http://huang_zhao.gitee.io/task/tags/ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>go 结构体、方法、接口</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/14/go%20%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%8E%A5%E5%8F%A3/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/14/go%20%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%8E%A5%E5%8F%A3/</id>
    <published>2020-09-14T14:47:11.000Z</published>
    <updated>2020-09-14T13:58:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1 结构体"></a>1 结构体</h3><p>定义：结构体是多个字段的集合</p><p>面向对象中类的定义是属性和方法的集合，结构体可以看做是属性的集合</p><h4 id="1-1-结构体定义（创建命名结构体）"><a href="#1-1-结构体定义（创建命名结构体）" class="headerlink" title="1.1 结构体定义（创建命名结构体）"></a>1.1 结构体定义（创建命名结构体）</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// type关键字 结构体名 struct关键字{}</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 如果是大写开头表示可以在作为包导入中引用</span>    Age <span class="token builtin">int</span>    sex <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 两种定义方式，按位置必须全传，按关键字可以不按顺序少传</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">}</span>    peo2 <span class="token operator">:=</span> People<span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"lxt"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>补充：如果只定义不初始化内部只存在对应字段的零值</p><h4 id="1-2-创建匿名结构体"><a href="#1-2-创建匿名结构体" class="headerlink" title="1.2 创建匿名结构体"></a>1.2 创建匿名结构体</h4><p>匿名结构体通常在创建的时候就定义，一般只用一次，在整合多个数据类型的时候可以用，通常定义在方法内部或者结构体内部</p><pre class=" language-go"><code class="language-go">dog <span class="token operator">:=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">189</span><span class="token punctuation">,</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span></code></pre><h4 id="1-3-访问-修改结构体字段"><a href="#1-3-访问-修改结构体字段" class="headerlink" title="1.3 访问/修改结构体字段"></a>1.3 访问/修改结构体字段</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 直接.访问修改赋值</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-结构体指针"><a href="#1-4-结构体指针" class="headerlink" title="1.4 结构体指针"></a>1.4 结构体指针</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 指向结构体的指针，用法和结构体没差</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 原本必须要写(*peo).age go内部支持简写</span>    peo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-5-匿名字段"><a href="#1-5-匿名字段" class="headerlink" title="1.5 匿名字段"></a>1.5 匿名字段</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 匿名字段本质就是把字段类型当名字一起使用</span><span class="token comment" spellcheck="true">// 但是同时只能存在一种类型，就是不能写俩string</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span>    <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"xxx"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-6-嵌套结构体"><a href="#1-6-嵌套结构体" class="headerlink" title="1.6 嵌套结构体"></a>1.6 嵌套结构体</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span>    Hobby Hobby<span class="token punctuation">}</span><span class="token keyword">type</span> Hobby <span class="token keyword">struct</span> <span class="token punctuation">{</span>    hobbyId <span class="token builtin">int</span>    hobbyName <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义方式1</span>    <span class="token comment" spellcheck="true">//peo.Hobby.hobbyId = 1</span>    <span class="token comment" spellcheck="true">//peo.Hobby.hobbyName= "xxx"</span>    <span class="token comment" spellcheck="true">// 定义方式2</span>    peo<span class="token punctuation">.</span>Hobby <span class="token operator">=</span> Hobby<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"xxx"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>Hobby<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-7-字段提升"><a href="#1-7-字段提升" class="headerlink" title="1.7 字段提升"></a>1.7 字段提升</h4><p>在<strong>不重名</strong>的情况下可以把嵌套在内部的结构体字段提升到外层结构体来使用，如果重名就会优先使用外层结构体的字段名</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 必须使用匿名嵌套结构体才能提升</span>    Hobby<span class="token punctuation">}</span><span class="token keyword">type</span> Hobby <span class="token keyword">struct</span> <span class="token punctuation">{</span>    hobbyId <span class="token builtin">int</span>    hobbyName <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span>Hobby <span class="token operator">=</span> Hobby<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"xxx"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>hobbyName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>hobbyId<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-8-结构体相等性"><a href="#1-8-结构体相等性" class="headerlink" title="1.8 结构体相等性"></a>1.8 结构体相等性</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo1 <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    peo2 <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 两个字段稍微一点不同就是false</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo1 <span class="token operator">==</span> peo2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意：结构体中只有全是值类型才能比较，如果存在引用类型比如切片，map这种引用类型就不能比较</span></code></pre><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2 方法"></a>2 方法</h3><p>方法就是在定义函数之前加一个特殊的接收器类型，接收器可以是结构体或者非结构体，接收器内部可以访问这个方法</p><h4 id="1-1-定义一个方法"><a href="#1-1-定义一个方法" class="headerlink" title="1.1 定义一个方法"></a>1.1 定义一个方法</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为People结构体绑定了printName方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化一个结构体对象</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-2-函数能实现同样的功能，为什么要方法？"><a href="#1-2-函数能实现同样的功能，为什么要方法？" class="headerlink" title="1.2 函数能实现同样的功能，为什么要方法？"></a>1.2 函数能实现同样的功能，为什么要方法？</h4><ul><li>go不是纯粹的面向对象的语言，go不支持类，方法是对应面向对象中对象的方法</li><li>一个方法可以绑定给多个不同的结构体，但是一个函数不能接受不同的结构体作为参数</li></ul><h4 id="1-3-指针接收器与值接收器"><a href="#1-3-指针接收器与值接收器" class="headerlink" title="1.3 指针接收器与值接收器"></a>1.3 指针接收器与值接收器</h4><p>如果是在方法中</p><p>有值接收器，那它可以接收值接收器和指针接收器</p><p>有指针接收器，那它可以接收值接收器和指针接收器</p><p>总结：不管方法的接收器是什么，都可以用值或者指针去接受，两种接收器的区别就是：值接收器是值传递，指针接收器是引用传递</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果只是简单的值传递，那在内部改的值其实是一个copy的新值</span><span class="token comment" spellcheck="true">// 值接收器</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lxt"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果需要改动真的生效，就需要用到指针接收器</span><span class="token comment" spellcheck="true">// 指针接收器（全都用这个就行了）</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>People<span class="token punctuation">)</span><span class="token function">changeName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lxt"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//peo.changeName()  // 没有改原值</span>    peo<span class="token punctuation">.</span><span class="token function">changeName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    peo<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-非结构体方法"><a href="#1-4-非结构体方法" class="headerlink" title="1.4 非结构体方法"></a>1.4 非结构体方法</h4><p>如果要对非结构体绑定方法，那这个非结构体必须是我们自己定义的类型或者重命名的类型</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> MyInt <span class="token builtin">int</span><span class="token comment" spellcheck="true">// 注意在运算中类型必须一致才能运算</span><span class="token comment" spellcheck="true">// int不能传入结构体，必须重命名</span><span class="token keyword">func</span> <span class="token punctuation">(</span>i MyInt<span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span>x MyInt<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i MyInt <span class="token operator">=</span> <span class="token number">5</span>    i<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="3-接口"><a href="#3-接口" class="headerlink" title="3 接口"></a>3 接口</h3><p>接口就是一系列方法的集合，类似于面向对象中的多态，go语言的接口也支持鸭子类型</p><p>面向对象领域中，接口是指定义和规范一个子类的行为</p><h4 id="3-1-接口简单实现（鸭子类型）（非侵入式）"><a href="#3-1-接口简单实现（鸭子类型）（非侵入式）" class="headerlink" title="3.1 接口简单实现（鸭子类型）（非侵入式）"></a>3.1 接口简单实现（鸭子类型）（非侵入式）</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> TDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> DDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    salary <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TDUCK"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DDUCK"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"T EAT"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D EAT"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 让Tduck和Dduck都实现Duck接口</span>    <span class="token comment" spellcheck="true">// 方式一：通过鸭子类型，写同样的方法</span>    t <span class="token operator">:=</span>TDuck<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token operator">:=</span>DDuck<span class="token punctuation">{</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">}</span>    d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-侵入式接口"><a href="#3-2-侵入式接口" class="headerlink" title="3.2 侵入式接口"></a>3.2 侵入式接口</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TDUCK"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DDUCK"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"T EAT"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D EAT"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> TDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> DDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    salary <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 让Tduck和Dduck都实现Duck接口</span>    <span class="token comment" spellcheck="true">// 方式二：侵入式接口，接口方法没有，报错</span>    <span class="token keyword">var</span> duck Duck    t<span class="token operator">:=</span>TDuck<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    duck<span class="token operator">=</span>t    duck<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token operator">:=</span>DDuck<span class="token punctuation">{</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">}</span>    duck <span class="token operator">=</span> d    duck<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-接口的内部表示"><a href="#3-3-接口的内部表示" class="headerlink" title="3.3 接口的内部表示"></a>3.3 接口的内部表示</h4><p>我们可以把接口看作内部的一个元组 (type, value)。<br>type 是接口底层的具体类型（Concrete Type），而 value 是具体类型的值。</p><h4 id="3-4-类型断言"><a href="#3-4-类型断言" class="headerlink" title="3.4 类型断言"></a>3.4 类型断言</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TDUCK"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DDUCK"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"T EAT"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D EAT"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> TDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> DDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    salary <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 断言类型</span>    <span class="token comment" spellcheck="true">// 把接口类型转换成结构体类型</span>    <span class="token comment" spellcheck="true">// 定义了一个接口类型</span>    <span class="token keyword">var</span> tduck Duck <span class="token operator">=</span> TDuck<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 断言这个值的类型，v为值，ok为判断的bool</span>    <span class="token comment" spellcheck="true">// 如果断言失败，ok为false v为空值</span>    v<span class="token punctuation">,</span>ok <span class="token operator">:=</span> tduck<span class="token punctuation">.</span><span class="token punctuation">(</span>TDuck<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>类型断言扩展</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//5 类型选择(通过switch)</span><span class="token comment" spellcheck="true">//var duck Duck =TDuck{"egon","男",1,"刘亦菲"}</span><span class="token comment" spellcheck="true">////var duck Duck =PDuck{"egon","男",1}</span><span class="token comment" spellcheck="true">//test4(duck)</span><span class="token comment" spellcheck="true">//使用switch，选择成功，拿到结构体对象</span><span class="token comment" spellcheck="true">//func test4(duck Duck)  {</span><span class="token comment" spellcheck="true">//    switch v:=duck.(type) {</span><span class="token comment" spellcheck="true">//    case PDuck:</span><span class="token comment" spellcheck="true">//        fmt.Println(v.name)</span><span class="token comment" spellcheck="true">//        fmt.Println("我是普通鸭子")</span><span class="token comment" spellcheck="true">//    case TDuck:</span><span class="token comment" spellcheck="true">//        fmt.Println(v.wife)</span><span class="token comment" spellcheck="true">//        fmt.Println("我是唐老鸭")</span><span class="token comment" spellcheck="true">//    default:</span><span class="token comment" spellcheck="true">//        fmt.Println(v)</span><span class="token comment" spellcheck="true">//        fmt.Println("我是鸭子这个类")</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span></code></pre><h4 id="3-5-空接口"><a href="#3-5-空接口" class="headerlink" title="3.5 空接口"></a>3.5 空接口</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Empty <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个空接口</span>    <span class="token comment" spellcheck="true">// 所有数据类型都实现了空接口，所以空接口可以接受任意类型的值</span>    <span class="token keyword">var</span> e Empty    a <span class="token operator">:=</span> <span class="token number">123</span>    e <span class="token operator">=</span> a    <span class="token comment" spellcheck="true">// 虽然可以接受任意类型，但是有一个缺点就是本身没有任何方法</span>    <span class="token comment" spellcheck="true">// 所以要使用原来值类型的方法就必须类型断言回去，再使用</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>同理，集合中也可以放入空接口来接收任意值</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//var a[3]Duck</span><span class="token comment" spellcheck="true">//a[1]=PDuck{}</span><span class="token comment" spellcheck="true">//a[2]=TDuck{}</span><span class="token comment" spellcheck="true">//var a map[string]interface{}= make(map[string]interface{})</span><span class="token comment" spellcheck="true">//a["name"]="lqz"</span><span class="token comment" spellcheck="true">//a["age"]=19</span><span class="token comment" spellcheck="true">//a["duck"]=PDuck{}</span></code></pre><h4 id="3-7-实现多个接口"><a href="#3-7-实现多个接口" class="headerlink" title="3.7 实现多个接口"></a>3.7 实现多个接口</h4><p>方式一：直接写方法就行</p><p>方式二：通过接口嵌套</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    Animal    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//type Cat interface {</span><span class="token comment" spellcheck="true">//    Animal</span><span class="token comment" spellcheck="true">//    speak()</span><span class="token comment" spellcheck="true">//    run()</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//如果一个结构体实现duck接口</span><span class="token keyword">type</span> PDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    sex <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 实现多个接口</span>    <span class="token comment" spellcheck="true">//var t TDuck=TDuck{}</span>    <span class="token comment" spellcheck="true">//var a Animal</span>    <span class="token comment" spellcheck="true">//var d Duck</span>    <span class="token comment" spellcheck="true">////一旦转到某个接口上，只能使用接口的方法，自身属性和自身方法需要类型断言后才能使用</span>    <span class="token comment" spellcheck="true">//a=t</span>    <span class="token comment" spellcheck="true">//d=ta</span>    <span class="token comment" spellcheck="true">//2 接口嵌套</span>    <span class="token comment" spellcheck="true">//var a Animal</span>    <span class="token comment" spellcheck="true">//var d Duck</span>    <span class="token comment" spellcheck="true">//var c PDuck=PDuck{}</span>    <span class="token comment" spellcheck="true">//a=c</span>    <span class="token comment" spellcheck="true">//d=c</span>    <span class="token comment" spellcheck="true">//3 接口的零值</span>    <span class="token comment" spellcheck="true">//var a Animal   //nil 是引用类型</span>    <span class="token comment" spellcheck="true">//fmt.Println(a)</span><span class="token punctuation">}</span></code></pre><h3 id="4-自定义集合类型"><a href="#4-自定义集合类型" class="headerlink" title="4 自定义集合类型"></a>4 自定义集合类型</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">//定义MySet类型</span><span class="token keyword">type</span> MySet <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token comment" spellcheck="true">//判断元素是否存在</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">isExist</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回set长度</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">set</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">delete</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试代码</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个set</span>    <span class="token keyword">var</span> a MySet <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span>MySet<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//相当于</span>    <span class="token comment" spellcheck="true">//var a MySet = make(map[interface{}]bool)</span>    <span class="token comment" spellcheck="true">//打印set的长度</span>    <span class="token comment" spellcheck="true">//fmt.Println(a.len())</span>    <span class="token comment" spellcheck="true">//放入一个值</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//放入一个相同值</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//打印长度，还是1</span>    <span class="token comment" spellcheck="true">//fmt.Println(a.len())</span>    <span class="token comment" spellcheck="true">//判断1是否存在</span>    <span class="token comment" spellcheck="true">//fmt.Println(a.isExist(2))</span>    <span class="token comment" spellcheck="true">////删除1</span>    a<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">////判断1是否存在</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">isExist</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span><span class="token keyword">range</span> a<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-make和new的区别"><a href="#5-make和new的区别" class="headerlink" title="5 make和new的区别"></a>5 make和new的区别</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment" spellcheck="true">//make和new的区别</span><span class="token keyword">type</span> PDuck1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    sex <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//make是引用类型初始化的时候用的</span>    <span class="token comment" spellcheck="true">//var per *PDuck1 =new(PDuck1)    //new 是返回指向这个类型的指针</span>    <span class="token comment" spellcheck="true">//fmt.Println(per)</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//var per1 =&amp;PDuck1{}</span>    <span class="token comment" spellcheck="true">//fmt.Println(per1)</span>    <span class="token comment" spellcheck="true">//var per2 = make([]int,3,4)  //make是具体的造引用类型  //new是造指向这个类型的指针</span>    <span class="token comment" spellcheck="true">//var per2 *[]int= new([]int)</span>    <span class="token comment" spellcheck="true">//fmt.Println(per2)</span>    <span class="token comment" spellcheck="true">//(*per2)=append((*per2),99)</span>    <span class="token comment" spellcheck="true">//fmt.Println(per2)</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-结构体&quot;&gt;&lt;a href=&quot;#1-结构体&quot; class=&quot;headerlink&quot; title=&quot;1 结构体&quot;&gt;&lt;/a&gt;1 结构体&lt;/h3&gt;&lt;p&gt;定义：结构体是多个字段的集合&lt;/p&gt;
&lt;p&gt;面向对象中类的定义是属性和方法的集合，结构体可以看做是属性的集合&lt;/p&gt;</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="go" scheme="http://huang_zhao.gitee.io/task/tags/go/"/>
    
    <category term="go面向接口" scheme="http://huang_zhao.gitee.io/task/tags/go%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Typescript函数</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/14/Typescript%E5%87%BD%E6%95%B0/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/14/Typescript%E5%87%BD%E6%95%B0/</id>
    <published>2020-09-14T13:59:11.000Z</published>
    <updated>2020-09-14T14:00:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-函数基本定义"><a href="#1-函数基本定义" class="headerlink" title="1 函数基本定义"></a>1 函数基本定义</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5中函数写法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hz"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es5 中的匿名函数</span><span class="token keyword">var</span> run1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es6中有名函数，推荐返回值指定类型</span><span class="token keyword">function</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hz"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es6中匿名函数</span><span class="token keyword">var</span> run3 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span></code></pre><h3 id="2-参数和返回值"><a href="#2-参数和返回值" class="headerlink" title="2 参数和返回值"></a>2 参数和返回值</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 定义函数传参</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义没有返回值的函数</span><span class="token keyword">function</span> <span class="token function">run4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里return就会报错，因为已经指定了void没有返回值</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es5 的写法可以传也可以不传，对返回值没有要求</span><span class="token keyword">function</span> <span class="token function">run5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span></code></pre><h3 id="3-可选参数"><a href="#3-可选参数" class="headerlink" title="3 可选参数"></a>3 可选参数</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可选参数</span><span class="token comment" spellcheck="true">// ts中默认必须按照形参传实参，如果设置某个参数可以不传就需要配置</span><span class="token keyword">function</span> <span class="token function">prinyMsg</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">   </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> age保密`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">prinyMsg</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token keyword">var</span> res1 <span class="token operator">=</span> <span class="token function">prinyMsg</span><span class="token punctuation">(</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span></code></pre><p>注意：可选参数必须放在形参的最后面，不然会报错</p><h3 id="4-默认参数"><a href="#4-默认参数" class="headerlink" title="4 默认参数"></a>4 默认参数</h3><p>es5中不能设置默认参数，es6和ts中都可以设置默认参数</p><p>注意：默认参数也必须写在最后，否则没有效果</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认参数</span><span class="token keyword">function</span> <span class="token function">prinyMsg2</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">   </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> age保密`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">prinyMsg2</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">prinyMsg2</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><h3 id="5-剩余参数（三点运算符）"><a href="#5-剩余参数（三点运算符）" class="headerlink" title="5 剩余参数（三点运算符）"></a>5 剩余参数（三点运算符）</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 也可以先传一个，后面的再接受起来</span><span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token operator">...</span>result<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> a<span class="token operator">+</span>b    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="6-函数重载"><a href="#6-函数重载" class="headerlink" title="6 函数重载"></a>6 函数重载</h3><p>es5中出现同名函数，下面的会替换上面的</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 方法重载</span><span class="token comment" spellcheck="true">// 如果我只写两个getInfo就会报错，必须要有重载函数</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是"</span><span class="token operator">+</span> str    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我的年龄是"</span> <span class="token operator">+</span> str    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 且这里传参必须传能找到的，否则报错</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="7-箭头函数"><a href="#7-箭头函数" class="headerlink" title="7 箭头函数"></a>7 箭头函数</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es6 ts</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 箭头函数中的this指代上下文</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-函数基本定义&quot;&gt;&lt;a href=&quot;#1-函数基本定义&quot; class=&quot;headerlink&quot; title=&quot;1 函数基本定义&quot;&gt;&lt;/a&gt;1 函数基本定义&lt;/h3&gt;&lt;pre class=&quot; language-ts&quot;&gt;&lt;code class=&quot;language-t</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts基础" scheme="http://huang_zhao.gitee.io/task/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>es5面向对象（ts面向对象前提扩展）</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/14/es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%89%8D%E6%8F%90%E6%89%A9%E5%B1%95%EF%BC%89/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/14/es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%89%8D%E6%8F%90%E6%89%A9%E5%B1%95%EF%BC%89/</id>
    <published>2020-09-14T13:58:11.000Z</published>
    <updated>2020-09-14T13:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="es5面向对象（ts面向对象前提扩展）"><a href="#es5面向对象（ts面向对象前提扩展）" class="headerlink" title="es5面向对象（ts面向对象前提扩展）"></a>es5面向对象（ts面向对象前提扩展）</h2><h3 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1 创建对象"></a>1 创建对象</h3><p>定义，创建，原形链，静态方法</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 配置静态方法</span>Peopel<span class="token punctuation">.</span>getInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是类的静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>sex<span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>Peopel<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2 继承"></a>2 继承</h3><h4 id="2-1-对象冒充实现继承"><a href="#2-1-对象冒充实现继承" class="headerlink" title="2.1 对象冒充实现继承"></a>2.1 对象冒充实现继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：原形链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Peopel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对象冒充实现继承</span>    <span class="token comment" spellcheck="true">// 可以调用父类中的属性和方法，除原形链的方法和属性外</span><span class="token punctuation">}</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-2-原形链实现继承"><a href="#2-2-原形链实现继承" class="headerlink" title="2.2 原形链实现继承"></a>2.2 原形链实现继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：原形链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链即可以是用父类原型链扩展的，也可以使用父类中的属性和方法</span>Web<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peopel</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 存在问题：在实例化子类的时候无法给父类传参</span></code></pre><h4 id="3-3-原形链-构造函数组合继承"><a href="#3-3-原形链-构造函数组合继承" class="headerlink" title="3.3 原形链+构造函数组合继承"></a>3.3 原形链+构造函数组合继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：原形链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    Peopel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第一种写法</span>Web<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第二种写法</span>Web<span class="token punctuation">.</span>protorype <span class="token operator">=</span> Peopel<span class="token punctuation">.</span>protorype<span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;es5面向对象（ts面向对象前提扩展）&quot;&gt;&lt;a href=&quot;#es5面向对象（ts面向对象前提扩展）&quot; class=&quot;headerlink&quot; title=&quot;es5面向对象（ts面向对象前提扩展）&quot;&gt;&lt;/a&gt;es5面向对象（ts面向对象前提扩展）&lt;/h2&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts基础" scheme="http://huang_zhao.gitee.io/task/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Typescript入门，基本数据类型</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/13/Typescript%E5%85%A5%E9%97%A8%EF%BC%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/13/Typescript%E5%85%A5%E9%97%A8%EF%BC%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-09-13T14:47:11.000Z</published>
    <updated>2020-09-14T13:59:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1 基本介绍"></a>1 基本介绍</h3><p>ts是js的超集，是目前前端必备的基础，包含了es5，es6的语法</p><p>也可以集成到vue中</p><p>安装：cnpm install -g typescript</p><p>查看版本：tsc -v</p><p>语言类型：静态弱类型</p><p>无法直接在浏览器运行，需要编译成js代码</p><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h3><h4 id="2-1-如何配置自动编译"><a href="#2-1-如何配置自动编译" class="headerlink" title="2.1 如何配置自动编译"></a>2.1 如何配置自动编译</h4><p>使用idev：vscode</p><p>在vscode中在项目下cmd窗口输入<code>tsc --init</code>就会自动生成一个.json的配置文件</p><p>修改配置文件中</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认是注释的解开注释即可</span><span class="token string">"outDir"</span><span class="token punctuation">:</span> <span class="token string">"./js"</span><span class="token comment" spellcheck="true">// 会把编译完成的ts代码放到js目录下的文件中</span></code></pre><p>然后点击终端–typescript–监视配置文件</p><p>如果报错9成是因为tsc权限不足</p><p>解决方式：以管理员方式打开cmd</p><p>输入<code>set-ExecutionPolicy RemoteSigned</code></p><p>再输入A或者Y即可</p><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3 数据类型"></a>3 数据类型</h3><h4 id="3-1-数据类型定义"><a href="#3-1-数据类型定义" class="headerlink" title="3.1 数据类型定义"></a>3.1 数据类型定义</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 布尔类型 boolean</span><span class="token keyword">let</span> boo<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// let关键字 变量名:变量类型 = 值</span></code></pre><h4 id="3-2-数字类型-number"><a href="#3-2-数字类型-number" class="headerlink" title="3.2 数字类型(number)"></a>3.2 数字类型(number)</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123.3</span><span class="token comment" spellcheck="true">// 数值类型包括整形和浮点型</span></code></pre><h4 id="3-3-字符类型（string）"><a href="#3-3-字符类型（string）" class="headerlink" title="3.3 字符类型（string）"></a>3.3 字符类型（string）</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> str<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"hz"</span></code></pre><h4 id="3-4-数组类型（array）"><a href="#3-4-数组类型（array）" class="headerlink" title="3.4 数组类型（array）"></a>3.4 数组类型（array）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 数组在定义的时候必须指定内部的类型</span><span class="token comment" spellcheck="true">// 第一种定义方式</span><span class="token keyword">let</span> test_arry1<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span><span class="token keyword">let</span> test_arry2<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"lxt"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 推荐用双引号</span><span class="token comment" spellcheck="true">// 第二种定义方式</span><span class="token keyword">let</span> test_arry3<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 第三种定义方式</span><span class="token comment" spellcheck="true">// 通过any类型就可以放任意类型</span><span class="token keyword">let</span> arr<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">]</span></code></pre><h4 id="3-5-元组类型（tuple）"><a href="#3-5-元组类型（tuple）" class="headerlink" title="3.5 元组类型（tuple）"></a>3.5 元组类型（tuple）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可以定义内部类型的数组，必须一一对应</span><span class="token comment" spellcheck="true">// 元组类型（数组的一种）</span><span class="token keyword">let</span> test_arry4<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"nb"</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h4 id="3-6-枚举类型（enum）"><a href="#3-6-枚举类型（enum）" class="headerlink" title="3.6 枚举类型（enum）"></a>3.6 枚举类型（enum）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 枚举类型，相当于创建一种新的类型，通过标识符和数值的对应来表示值类</span><span class="token comment" spellcheck="true">// 用于标识一种状态</span><span class="token keyword">enum</span> Flag <span class="token punctuation">{</span>success<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">var</span> f<span class="token punctuation">:</span>Flag <span class="token operator">=</span> Flag<span class="token punctuation">.</span>success console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Flag<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2 </span><span class="token comment" spellcheck="true">// 如果枚举类型没有定义值，打印的就是索引值</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>red<span class="token punctuation">,</span>blue<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>green<span class="token punctuation">}</span><span class="token keyword">var</span> c<span class="token punctuation">:</span>Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>redconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6 如果上一个对应值不是索引，就会按照上一个值递增1</span></code></pre><h4 id="3-7-任意类型（any）"><a href="#3-7-任意类型（any）" class="headerlink" title="3.7 任意类型（any）"></a>3.7 任意类型（any）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 任意类型 any</span><span class="token keyword">let</span> data<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">123</span>data <span class="token operator">=</span> <span class="token string">'123'</span><span class="token comment" spellcheck="true">// 任意类型的用途</span><span class="token comment" spellcheck="true">// 当我们需要用变量接受一个对象时，js中是可以直接接受</span><span class="token comment" spellcheck="true">// 必须指定any</span><span class="token keyword">let</span> oBox<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>oBox<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span></code></pre><h4 id="3-8-其他类型（never类型）的子类型"><a href="#3-8-其他类型（never类型）的子类型" class="headerlink" title="3.8 其他类型（never类型）的子类型"></a>3.8 其他类型（never类型）的子类型</h4><p>代表从不会出现的值</p><p>以为这never类型的变量只能被类型所赋值</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 其他类型（never类型）的子类型</span><span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">// num此时只能被赋值undefined</span><span class="token keyword">var</span> num<span class="token punctuation">:</span>undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果被赋值就是number类型，没赋值就是undefined类型</span><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// null</span><span class="token comment" spellcheck="true">// undefined可以不赋值是因为他不仅可以作为类型，也可以作为值，而null不一样，如果要定义null类型就必须赋值null值</span><span class="token keyword">var</span> num1<span class="token punctuation">:</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 综合运用</span><span class="token comment" spellcheck="true">// 如果我们对一个值的类型不能确定，不仅可以用any，也可以用|分隔可能出现的类型</span><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>num <span class="token operator">=</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// null</span>num <span class="token operator">=</span> <span class="token number">123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span></code></pre><h4 id="3-9-void表示没有任何类型"><a href="#3-9-void表示没有任何类型" class="headerlink" title="3.9 void表示没有任何类型"></a>3.9 void表示没有任何类型</h4><p>一般用于定义方法的时候没有任何返回值</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 表示这个方法没有返回值</span><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'456'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果一个方法有返回值，就指定返回值类型</span><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1 基本介绍&quot;&gt;&lt;/a&gt;1 基本介绍&lt;/h3&gt;&lt;p&gt;ts是js的超集，是目前前端必备的基础，包含了es5，es6的语法&lt;/p&gt;
&lt;p&gt;也可以集成到vue中&lt;/p</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="ts" scheme="http://huang_zhao.gitee.io/task/tags/ts/"/>
    
    <category term="ts基础" scheme="http://huang_zhao.gitee.io/task/tags/ts%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议查漏补缺</title>
    <link href="http://huang_zhao.gitee.io/task/2020/09/13/HTTP%E5%8D%8F%E8%AE%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    <id>http://huang_zhao.gitee.io/task/2020/09/13/HTTP%E5%8D%8F%E8%AE%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</id>
    <published>2020-09-13T05:20:11.000Z</published>
    <updated>2020-09-13T14:49:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、HTTP协议版本区别"><a href="#一、HTTP协议版本区别" class="headerlink" title="一、HTTP协议版本区别"></a>一、HTTP协议版本区别</h3><ul><li>0.9 远古版本，只有一个GET命令，只支持纯文本</li><li>1.1 主流版本<ul><li>引入了持久链接，通过请求头中的<code> keep-alive</code>来设置</li><li>引入了管道机制，同一个tcp链接可以同时发送多个请求</li><li>支持断点续传，请求头中的<code> range</code>来实现</li><li>使用了虚拟网络，一个物理机上可以存在多个虚拟主机，共享一个ip地址</li></ul></li><li>2.0 先进版本<ul><li>二进制分帧：头信息和数据体都是二进制</li><li>头部压缩：在1.1版本头部信息会偏重，而body只有几十个字节，通过HPACK算法进行亚索</li><li>多路复用：一个TCP链接，哭护短和浏览器都可以同时发出多个请求，不用按顺序一一对应，解决了队头阻塞的问题</li><li>请求优先级：可以设置数据帧的优先级，让服务器先处理重要的请求</li></ul></li></ul><h3 id="二、状态码"><a href="#二、状态码" class="headerlink" title="二、状态码"></a>二、状态码</h3><ul><li>1xx：代表请求已经被接受，需要后续处理</li><li>2xx：表示成功</li><li>3xx：重定向状态</li><li>4xx：客户端有误</li><li>5xx：服务器错误</li></ul><h4 id="1xx-信息类"><a href="#1xx-信息类" class="headerlink" title="1xx 信息类"></a>1xx 信息类</h4><p>接受的请求正在处理，信息类状态码</p><h4 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx 成功"></a>2xx 成功</h4><ul><li><p>200 OK 表示从客户端发来的请求在服务器端被正确请求。</p></li><li><p>204 No content，表示请求成功，但没有资源可返回。</p></li><li><p>206 Partial Content，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求 响应报文中包含由 <strong>「Content-Range」</strong> 指定范围的实体内容。</p></li></ul><h4 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h4><ul><li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL，这时应该按 Location 首部字段提示的 URI 重新保存。</li><li>302 found，临时性重定向，表示资源临时被分配了新的 URL。</li><li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源。</li><li>304 not modified，当协商缓存命中时会返回这个状态码。</li><li>307 temporary redirect，临时重定向，和302含义相同,不会改变method</li></ul><p>注意区分：301（永久重定向），302（临时重定向）</p><h4 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx 客户端错误"></a>4xx 客户端错误</h4><ul><li>400 bad request，请求报文存在语法错误。</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息。</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝，可能遇到跨站请求伪造</li><li>404 not found，表示在服务器上没有找到请求的资源，可能是网址输错了</li><li>405 Method Not Allowed，服务器禁止使用该方法，客户端可以通过options方法来查看服务器允许的访问方法，可能遇到了cors，跨域问题</li></ul><h4 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx 服务器错误"></a>5xx 服务器错误</h4><ul><li>500 internal sever error，表示服务器端在执行请求时发生了错误。</li><li>502 Bad Gateway，服务器自身是正常的，访问的时候出了问题，具体啥错误我们不知道。</li><li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求。</li></ul><h3 id="三、HTTP的缓存策略"><a href="#三、HTTP的缓存策略" class="headerlink" title="三、HTTP的缓存策略"></a>三、HTTP的缓存策略</h3><h4 id="1-强缓存"><a href="#1-强缓存" class="headerlink" title="1 强缓存"></a>1 强缓存</h4><p>两个关键字段：Expires，Cache-Control</p><p>HTTP1.0版本，使用的是Expires，HTTP1.1使用的是Cache-Control</p><ul><li>Expires表示过期时间，时间是相对于服务器时间而言，所以可能因为服务器和客户端时间不一致而出错</li><li>Cache-Control 表示过期时长，从现在开始多少秒过期，这样就避免了两端时间不一致的问题</li></ul><p>注意点：</p><ul><li>当Expires和Cache-Control同时存在时，优先考虑Cache-Control。</li><li>当然了，当缓存资源失效了，也就是没有命中强缓存，接下来就进入协商缓存👇</li></ul><h4 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2 协商缓存"></a>2 协商缓存</h4><p>强缓存失效后，浏览器就会在请求头中携带响应的缓存Tag向服务器发送请求，服务器根据tag决定是否使用缓存</p><p>缓存分成两种：<strong>「Last-Modified」</strong> 和 <strong>「ETag」</strong></p><h5 id="2-1-Last-Modified"><a href="#2-1-Last-Modified" class="headerlink" title="2.1 Last-Modified"></a>2.1 Last-Modified</h5><p>表示最后修改时间，第一次请求的时候，服务器的响应头会带上这个参数，然后这个参数会在下一次缓存未命中的时候加入到请求头改为：<strong>If-Modified-Since</strong>，key不同，但是value相同，服务器拿到这个字段后，就会和请求资源的最后修改时间对比</p><ul><li>如果请求头的时间更久远，说明这个数据已经发生了改变就要跟新这个缓存了，返回新的资源</li><li>否则返回304告诉浏览器直接使用缓存</li></ul><h5 id="2-2-ETag"><a href="#2-2-ETag" class="headerlink" title="2.2 ETag"></a>2.2 ETag</h5><p>本质就是对请求的资源通过md5算法运算，生成的结果哪怕动了一个字节都算是修改，存储和请求方式和上面相似</p><p>浏览器接受到ETag值，会在下次请求的时候，将这个值作为<strong>「If-None-Match」</strong>这个字段的内容，发给服务器。</p><p>服务器接收到<strong>「If-None-Match」</strong>后，会跟服务器上该资源的<strong>「ETag」</strong>进行比对👇</p><ul><li>如果两者一样的话，直接返回304，告诉浏览器直接使用缓存</li><li>如果不一样的话，说明内容更新了，返回新的资源，跟常规的HTTP请求响应的流程一样</li></ul><h5 id="2-3-总结："><a href="#2-3-总结：" class="headerlink" title="2.3 总结："></a>2.3 总结：</h5><p>协商缓存的两种方式</p><ul><li>性能上：Last-Modified更好，因为etag需要运算</li><li>精度上：etag更好，比如说某个资源文件，只是touch了一下，并没有修改内容，在修改时间上是更新了，但是本质上内容没变。</li><li>如果两种方式都支持，优先考虑etag</li></ul><h4 id="3-缓存位置"><a href="#3-缓存位置" class="headerlink" title="3 缓存位置"></a>3 缓存位置</h4><p>总结来说：大的js，css缓存是放在磁盘中，一些小的资源类是放在内存中</p><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h4><ul><li><p>首先检查<code>Cache-Control</code>， 尝鲜，看强缓存是否可用</p></li><li><p>如果可用的话，直接使用</p></li><li><p>否则进入协商缓存，发送HTTP请求，服务器通过请求头中的<code>If-Modified-Since</code>或者<code>If-None-Match</code>字段检查资源是否更新</p></li><li><p>资源更新，返回资源和200状态码。</p></li><li><p>否则，返回304，直接告诉浏览器直接从缓存中去资源。</p></li></ul><h3 id="四、HTTP和HTTPS"><a href="#四、HTTP和HTTPS" class="headerlink" title="四、HTTP和HTTPS"></a>四、HTTP和HTTPS</h3><p>HTTPS不是一个行的应用层协议，本质是HTTP+TLS/SSL协议的组合，保证安全性是SSL/TLS的工作</p><ul><li>SSL：安全套接层2</li><li>TLS：传输层安全（非对称加密）</li></ul><p>HTTPS的关键：</p><ul><li>对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全;</li><li>对网站服务器进行真实身份认证。</li></ul><h3 id="五、短轮询，长轮询，WebSocket"><a href="#五、短轮询，长轮询，WebSocket" class="headerlink" title="五、短轮询，长轮询，WebSocket"></a>五、短轮询，长轮询，WebSocket</h3><h4 id="1-短轮询"><a href="#1-短轮询" class="headerlink" title="1 短轮询"></a>1 短轮询</h4><p>通过不断建立http请求，无论数据是否有更新都直接响应</p><p>优缺点：</p><ul><li>优点：简单</li><li>缺点：大量浪费资源</li></ul><h4 id="2-长轮询"><a href="#2-长轮询" class="headerlink" title="2 长轮询"></a>2 长轮询</h4><p>接受到请求不会直接响应，先把这个请求挂起，判断服务端数据是否有更新</p><p>如果有更新就响应，没有更新就等一会再返回</p><p>优缺点：</p><ul><li>优点：比短轮询节省了资源</li><li>缺点：挂起也会导致资源的浪费</li></ul><h4 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3 WebSocket"></a>3 WebSocket</h4><p>WebSocket 是 Html5 定义的一个新协议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。</p><p>使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息。</p><h3 id="六、正向代理和反向代理"><a href="#六、正向代理和反向代理" class="headerlink" title="六、正向代理和反向代理"></a>六、正向代理和反向代理</h3><p>正向代理：</p><p>我要去找马云借钱，但是直接找马云他不会给我，我可以通过花呗找马云借钱，隐藏的是我（客户端）</p><p>反向代理：</p><p>输入<a href="http://www.baidu.com,我们不知道是哪台服务器为我们工作,但是只要能访问到就行,隐藏的是服务器/">www.baidu.com，我们不知道是哪台服务器为我们工作，但是只要能访问到就行，隐藏的是服务器</a></p><p>一般反向代理用于实现服务器的负载均衡</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、HTTP协议版本区别&quot;&gt;&lt;a href=&quot;#一、HTTP协议版本区别&quot; class=&quot;headerlink&quot; title=&quot;一、HTTP协议版本区别&quot;&gt;&lt;/a&gt;一、HTTP协议版本区别&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;0.9 远古版本，只有一个GET命令，只支持纯文</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="前端" scheme="http://huang_zhao.gitee.io/task/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="协议，查漏补缺" scheme="http://huang_zhao.gitee.io/task/tags/%E5%8D%8F%E8%AE%AE%EF%BC%8C%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
    
  </entry>
  
  <entry>
    <title>Xpath基本用法</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-26T01:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>XPath 是一门在 XML 文档中查找信息的语言，本质上和bs4差不多</p><p>主要选取节点的表达式是<code>/</code>和<code>//</code>组成</p><p>教程：<a href="https://www.runoob.com/xpath/xpath-syntax.html">https://www.runoob.com/xpath/xpath-syntax.html</a></p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">nodename</td><td align="left">选取此节点的所有子节点。</td></tr><tr><td align="left">/</td><td align="left">从根节点选取。</td></tr><tr><td align="left">//</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td align="left">.</td><td align="left">选取当前节点。</td></tr><tr><td align="left">..</td><td align="left">选取当前节点的父节点。</td></tr><tr><td align="left">@</td><td align="left">选取属性。</td></tr></tbody></table><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">bookstore</td><td align="left">选取 bookstore 元素的所有子节点。</td></tr><tr><td align="left">/bookstore</td><td align="left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">bookstore/book</td><td align="left">选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td align="left">//book</td><td align="left">选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="left">bookstore//book</td><td align="left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td align="left">//@lang</td><td align="left">选取名为 lang 的所有属性。</td></tr></tbody></table><pre class=" language-python"><code class="language-python">doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story li">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span></code></pre><p>测试案例：</p><pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 所有节点，列表包含一个个tag对象</span><span class="token comment" spellcheck="true"># a = html.xpath('//*')</span><span class="token comment" spellcheck="true"># 在body下的所有b标签（包含子子孙孙）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//b')</span><span class="token comment" spellcheck="true"># 在bdoy下的子标签中的b标签（只有子标签）</span><span class="token comment" spellcheck="true"># a = html.xpath('body/b')</span><span class="token comment" spellcheck="true"># 属性匹配,只能完全匹配，如果有多个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]')</span><span class="token comment" spellcheck="true"># 属性匹配模糊，只要有就能匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li")]')</span><span class="token comment" spellcheck="true"># 多属性匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li") or @id="my_p"]')</span><span class="token comment" spellcheck="true"># 获取当前标签的文本（不包含其子节点内部的）（列表）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/text()')</span><span class="token comment" spellcheck="true"># 获取标签的属性</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/@id')</span><span class="token comment" spellcheck="true"># 索引取出一个标签（注意第一个就是【1】不是0｝）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[1]/text()')</span><span class="token comment" spellcheck="true"># 取出最后一个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()]/text()')</span><span class="token comment" spellcheck="true"># 取出位置小于3的</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[position()&lt;3]')</span><span class="token comment" spellcheck="true"># 取出倒数第二个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()-2]')</span><span class="token comment" spellcheck="true"># 11 节点轴选择</span><span class="token comment" spellcheck="true"># ancestor：祖先节点</span><span class="token comment" spellcheck="true"># 使用了* 获取所有祖先节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::*')</span><span class="token comment" spellcheck="true"># # 获取祖先节点中的div</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::div')</span><span class="token comment" spellcheck="true"># attribute：属性值</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/attribute::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/@aa')</span><span class="token comment" spellcheck="true"># child：直接子节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::img/@src')</span><span class="token comment" spellcheck="true"># descendant：所有子孙节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::h5/text()')</span><span class="token comment" spellcheck="true"># following:当前节点之后所有节点(兄弟节点和兄弟内部的节点)</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*[1]/@href')</span><span class="token comment" spellcheck="true"># following-sibling:当前节点之后同级节点（只找兄弟）</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::a')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]/@href')</span></code></pre><h3 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文本</span>a <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'body//p[1]/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性值</span>a<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>'<span class="token operator">//</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>@href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 要注意，如果我们是找到一个标签再通过这个标签进行xpath筛选</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示还是从根往下找</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示从当前标签位置为根往下找</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;XPath 是一门在 XML 文档中查找信息的语言，本质上和bs4差不多&lt;/p&gt;
&lt;p&gt;主要选取节点的表达式是&lt;code&gt;/&lt;/code&gt;和&lt;code&gt;//&lt;/code&gt;组成&lt;/p&gt;
&lt;p&gt;教程：&lt;a href=&quot;https://www.runoob.com/xpath/x</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>celery基础</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/celery/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/celery/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-26T01:02:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、celery介绍"><a href="#一、celery介绍" class="headerlink" title="一、celery介绍"></a>一、celery介绍</h2><p>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></p><p>Celery 官方文档英文版：<a href="http://docs.celeryproject.org/en/latest/index.html">http://docs.celeryproject.org/en/latest/index.html</a></p><p>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></p><ul><li>异步任务框架</li><li>执行异步任务</li><li>执行延迟任务</li><li>执行定时任务</li></ul><h2 id="二、celery架构"><a href="#二、celery架构" class="headerlink" title="二、celery架构"></a>二、celery架构</h2><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/007S8ZIlgy1ggqw0f7bltj30q80c174d.jpg" alt="007S8ZIlgy1ggqw0f7bltj30q80c174d" loading="lazy"></p><h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p><h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>异步执行：解决耗时任务,将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p><p>延迟执行：解决延迟任务</p><p>定时执行：解决周期(周期)任务,比如每天数据统计</p><h2 id="三、celery使用"><a href="#三、celery使用" class="headerlink" title="三、celery使用"></a>三、celery使用</h2><p>安装：<code>pip install celery</code></p><p>根据celery架构，我们可以看出，worker就像是一个工人，一直在工作，如果有工作的时候就会从broker（Redist）里去拿过来执行，并放到pakend（redist）中存放结果</p><h3 id="方式一：在一个文件夹内的三个页面"><a href="#方式一：在一个文件夹内的三个页面" class="headerlink" title="方式一：在一个文件夹内的三个页面"></a>方式一：在一个文件夹内的三个页面</h3><p><strong>worker执行页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celery<span class="token comment" spellcheck="true"># broker存储的位置</span>broker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span><span class="token comment" spellcheck="true"># backend存储的位置</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化的celery对象</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要添加的任务</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><p><strong>broker提交任务的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> add<span class="token comment" spellcheck="true"># 执行这个文件，就是把这个任务添加到数据库中，只要worker在工作</span><span class="token comment" spellcheck="true"># 就会把这个任务从数据库1中拿出来执行，并把结果放到数据库2中</span>ret <span class="token operator">=</span> add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ret 是这个任务的uuid，用于获取任务结果</span></code></pre><p><strong>backend获取任务结果的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> app<span class="token keyword">from</span> celery<span class="token punctuation">.</span>result <span class="token keyword">import</span> AsyncResult<span class="token comment" spellcheck="true"># 任务对象的唯一标识：uuid</span>id <span class="token operator">=</span> <span class="token string">'19dc2faa-39f9-47b6-af77-e9d3a4d05d2e'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    async1 <span class="token operator">=</span> AsyncResult<span class="token punctuation">(</span>id<span class="token operator">=</span>id<span class="token punctuation">,</span> app<span class="token operator">=</span>app<span class="token punctuation">)</span>    <span class="token keyword">if</span> async1<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> async1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>failed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务失败'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'PENDING'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务等待中被执行'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'RETRY'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务异常后正在重试'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'STARTED'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务已经开始被执行'</span><span class="token punctuation">)</span></code></pre><h3 id="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"><a href="#方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）" class="headerlink" title="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"></a>方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）</h3><p>创建一个celery项目（包），内部必须含有名字为celery的py文件，在内部创建celery对象</p><p><strong>celery.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task1'</span><span class="token punctuation">,</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>编写需要添加的任务也在这个包内，可创建不同的任务文件，可添加多个</p><p><strong>task1.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><h3 id="执行延迟任务"><a href="#执行延迟任务" class="headerlink" title="执行延迟任务"></a>执行延迟任务</h3><p>添加任务页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 执行延迟任务就是多个一个时间参数</span><span class="token comment" spellcheck="true"># 这里注意，时间参数是根据utc时间，并不是中国时间</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token comment" spellcheck="true"># 时间对象必须和时间对象相加</span>eta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>add<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eta<span class="token operator">=</span>eta<span class="token punctuation">)</span></code></pre><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>celery页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.tasks.low'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A pc_celery -l info</span><span class="token comment" spellcheck="true"># celery -A pc_celery worker -l info -P eventlet</span></code></pre><h2 id="四、django中配置celery"><a href="#四、django中配置celery" class="headerlink" title="四、django中配置celery"></a>四、django中配置celery</h2><p>celery包最好放在根路径下</p><p><strong>添加定时任务</strong></p><p>celery.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 配置django配置</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'luffyapi.settings.dev'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置celery的worker环境</span><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化worker对象app，用include添加定时任务</span>app<span class="token operator">=</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.task2.update_banner'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token comment" spellcheck="true"># 'args': (),</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A celery_task -l info</span></code></pre><p><strong>task定时任务</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token comment" spellcheck="true"># 每三秒跟新一次缓存</span><span class="token comment" spellcheck="true"># 添加一个任务，celery内设定间隔时间3秒</span><span class="token comment" spellcheck="true"># 任务内去cache跟新banner_list，从数据库中拿到banner放到cache中的banner_list中</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>models <span class="token keyword">import</span> Banner<span class="token comment" spellcheck="true"># from luffyapi.settings import const</span><span class="token comment" spellcheck="true"># [OrderedDict(</span><span class="token comment" spellcheck="true">#     [('image', 'http://127.0.0.1:8000/media/banner/banner1.png'), ('link', '/free-courses'), ('name', 'banner1')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner2.png'), ('link', '/light-courses'), ('name', 'banner2')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner3.png'), ('link', '/actual-courses'), ('name', 'banner3')])]</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>sers <span class="token keyword">import</span> BannerSer@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">update_banner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Banner<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>is_delete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    banner_ser <span class="token operator">=</span> BannerSer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> banner <span class="token keyword">in</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">:</span>        banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000'</span> <span class="token operator">+</span> banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>    cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'更新banner成功'</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、celery介绍&quot;&gt;&lt;a href=&quot;#一、celery介绍&quot; class=&quot;headerlink&quot; title=&quot;一、celery介绍&quot;&gt;&lt;/a&gt;一、celery介绍&lt;/h2&gt;&lt;p&gt;Celery 官网：&lt;a href=&quot;http://www.celerypr</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="异步任务框架" scheme="http://huang_zhao.gitee.io/task/tags/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E6%A1%86%E6%9E%B6/"/>
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>支付宝网页支付接口调用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/25/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/25/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</id>
    <published>2020-04-25T05:20:11.000Z</published>
    <updated>2020-08-26T01:05:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、SDK-API接口的调用"><a href="#一、SDK-API接口的调用" class="headerlink" title="一、SDK/API接口的调用"></a>一、SDK/API接口的调用</h2><p>支付宝平台不提供python的sdk，只有api，我们可以去网上找别人封装好的sdk，复制过来，了解对应参数</p><p>可以通过支付宝提供的软件自动生成公钥和私钥</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment" spellcheck="true"># app_private_key_string = open("/path/to/your/private/key.pem").read()</span><span class="token comment" spellcheck="true"># alipay_public_key_string = open("/path/to/alipay/public/key.pem").read()</span>app_private_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN RSA PRIVATE KEY-----你的私钥-----END RSA PRIVATE KEY-----"""</span>alipay_public_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN PUBLIC KEY-----支付宝平台创建的应用的公钥-----END PUBLIC KEY-----"""</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 创建应用的appid</span>    appid<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token string">'http://127.0.0.1:8000/home/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># the default notify path</span>    <span class="token comment" spellcheck="true"># 配置你的私钥</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># alipay public key, do not use your own public key!</span>    <span class="token comment" spellcheck="true"># 配置应用的公钥</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 加密方式</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># RSA or RSA2</span>    <span class="token comment" spellcheck="true"># 调试模式，如果用真实环境就要改成True</span>    debug<span class="token operator">=</span><span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># False by default</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 支付宝的网关接口</span>alipay_url<span class="token operator">=</span><span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span><span class="token comment" spellcheck="true"># 生成支付页面</span>order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>    out_trade_no<span class="token operator">=</span><span class="token string">"20161112www4334"</span><span class="token punctuation">,</span>    total_amount<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">,</span>    subject<span class="token operator">=</span><span class="token string">'韩红版充气娃娃'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 商品名称</span>    <span class="token comment" spellcheck="true"># 提交get请求的url</span>    return_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 提交post请求的url</span>    notify_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成支付链接</span><span class="token keyword">print</span><span class="token punctuation">(</span>alipay_url<span class="token operator">+</span>order_string<span class="token punctuation">)</span></code></pre><p>这里内部有很多配置信息，可以把配置信息提取出来放到settings文件中，解耦合</p><h2 id="二、项目中调用支付接口"><a href="#二、项目中调用支付接口" class="headerlink" title="二、项目中调用支付接口"></a>二、项目中调用支付接口</h2><p>前端点击立即购买，把后端所需要的参数发送给后端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayView</span><span class="token punctuation">(</span>GenericViewSet<span class="token punctuation">,</span> CreateModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 登录jwt认证</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span>JSONWebTokenAuthentication<span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 防止游客登录</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAuthenticated<span class="token punctuation">,</span> <span class="token punctuation">]</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> sers<span class="token punctuation">.</span>OrderSerializer    <span class="token comment" spellcheck="true"># 重写create方法</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'request'</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 通过序列化类去校验数据，保存数据到数据库，生成支付宝链接</span>        <span class="token comment" spellcheck="true"># 主要逻辑都在序列化类中</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 等同于ser.save（）</span>        self<span class="token punctuation">.</span>perform_create<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回支付宝支付链接</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pay_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>序列化类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">OrderSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 前端传什么数据过来{course:[1,2,3],total_amount:100,subject:xx商品,pay_type:1,}</span>    <span class="token comment" spellcheck="true"># user字段需要，但是不是传的，使用了jwt</span>    <span class="token comment" spellcheck="true"># 需要把course:[1,2,3] 处理成 course:[obj1,obj2,obj3]</span>    <span class="token comment" spellcheck="true"># 课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    <span class="token comment" spellcheck="true"># course=serializers.CharField()</span>    <span class="token keyword">from</span> course<span class="token punctuation">.</span>models <span class="token keyword">import</span> Course    <span class="token comment" spellcheck="true"># 这个方法可以让课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    course<span class="token operator">=</span>serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Course<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Order        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'total_amount'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">,</span><span class="token string">'pay_type'</span><span class="token punctuation">,</span><span class="token string">'course'</span><span class="token punctuation">]</span>        extra_kwargs<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">'total_amount'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'required'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'pay_type'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">_check_price</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        total_amount<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'total_amount'</span><span class="token punctuation">)</span>        course_list<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        total_price<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            total_price<span class="token operator">+=</span>course<span class="token punctuation">.</span>price        <span class="token keyword">if</span> total_price<span class="token operator">!=</span>total_amount<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'价格不合法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> total_amount    <span class="token keyword">def</span> <span class="token function">_gen_out_trade_no</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> uuid        <span class="token keyword">return</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 需要request对象(需要视图通过context把reuqest对象传入。重写create方法)</span>        request<span class="token operator">=</span>self<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> request<span class="token punctuation">.</span>user    <span class="token keyword">def</span> <span class="token function">_gen_pay_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>subject<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># total_amout是Decimal类型，识别不了，需要转换成float类型</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay<span class="token punctuation">,</span>gateway        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>            out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">,</span>            total_amount<span class="token operator">=</span>float<span class="token punctuation">(</span>total_amout<span class="token punctuation">)</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span>subject<span class="token punctuation">,</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># get回调，前台地址（最后跳转的支付成功页面）</span>            notify_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>NOTIFY_URL   <span class="token comment" spellcheck="true"># post回调，后台地址（给后端去判断是否支付成功，支付成功返回success）</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span> gateway<span class="token operator">+</span>order_string    <span class="token keyword">def</span> <span class="token function">_before_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token operator">=</span>user        attrs<span class="token punctuation">[</span><span class="token string">'out_trade_no'</span><span class="token punctuation">]</span><span class="token operator">=</span>out_trade_no        self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'pay_url'</span><span class="token punctuation">]</span><span class="token operator">=</span>pay_url    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        # 1）订单总价校验        # 2）生成订单号        # 3）支付用户：request.user        # 4）支付链接生成        # 5）入库(两个表)的信息准备        '''</span>        <span class="token comment" spellcheck="true"># 1）订单总价校验</span>        total_amout <span class="token operator">=</span> self<span class="token punctuation">.</span>_check_price<span class="token punctuation">(</span>attrs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2）生成订单号</span>        out_trade_no<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_out_trade_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3）支付用户：request.user</span>        user<span class="token operator">=</span>self<span class="token punctuation">.</span>_get_user<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 4）支付链接生成</span>        pay_url<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_pay_url<span class="token punctuation">(</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'subject'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5）入库(两个表)的信息准备</span>        self<span class="token punctuation">.</span>_before_create<span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span>        <span class="token keyword">return</span> attrs    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        course_list<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            models<span class="token punctuation">.</span>OrderDetail<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>order<span class="token operator">=</span>order<span class="token punctuation">,</span>course<span class="token operator">=</span>course<span class="token punctuation">,</span>price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">,</span>real_price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        <span class="token keyword">return</span> order</code></pre><p>支付成功后，前端会直接跳转到支付成功的页面，支付宝会向后端发送post请求，让我们验证所有的信息是否正确</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        支付宝回调接口        '''</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>logger <span class="token keyword">import</span> log        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        out_trade_no<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        gmt_payment<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gmt_payment'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        signature <span class="token operator">=</span> data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 验证签名</span>        success <span class="token operator">=</span> alipay<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>data<span class="token punctuation">,</span> signature<span class="token punctuation">)</span>        <span class="token keyword">if</span> success <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"trade_status"</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"TRADE_SUCCESS"</span><span class="token punctuation">,</span> <span class="token string">"TRADE_FINISHED"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>order_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>pay_time<span class="token operator">=</span>gmt_payment<span class="token punctuation">)</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单支付成功'</span><span class="token operator">%</span>out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单有问题'</span> <span class="token operator">%</span> out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span></code></pre><p>前端到了支付成功的页面，其实也不完全是支付成功，因为还没有得到后端的确认，所以可以发送一个get请求去校验一下是否成功</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        out_trade_no<span class="token operator">=</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> order<span class="token punctuation">.</span>order_status<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、SDK-API接口的调用&quot;&gt;&lt;a href=&quot;#一、SDK-API接口的调用&quot; class=&quot;headerlink&quot; title=&quot;一、SDK/API接口的调用&quot;&gt;&lt;/a&gt;一、SDK/API接口的调用&lt;/h2&gt;&lt;p&gt;支付宝平台不提供python的sdk，只有a</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="python" scheme="http://huang_zhao.gitee.io/task/tags/python/"/>
    
    <category term="django" scheme="http://huang_zhao.gitee.io/task/tags/django/"/>
    
    <category term="第三方接口" scheme="http://huang_zhao.gitee.io/task/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Redis管道，位图，geo，HyperLogLog，发布订阅</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/23/Redis%E7%AE%A1%E9%81%93%EF%BC%8C%E4%BD%8D%E5%9B%BE%EF%BC%8Cgeo%EF%BC%8CHyperLogLog%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/23/Redis%E7%AE%A1%E9%81%93%EF%BC%8C%E4%BD%8D%E5%9B%BE%EF%BC%8Cgeo%EF%BC%8CHyperLogLog%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</id>
    <published>2020-04-23T12:13:11.000Z</published>
    <updated>2020-09-13T14:51:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、慢查询"><a href="#一、慢查询" class="headerlink" title="一、慢查询"></a>一、慢查询</h2><p>因为redis是个单线程架构，所以只要有慢查询夯住会非常影响性能，在生产环境中应该避免出现慢查询或者限制慢查询</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis.conf</span>slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than<span class="token operator">=</span><span class="token number">0</span>，记录所有命令slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span>不记录任何命令<span class="token comment" spellcheck="true"># 也可以直接在链接过程中修改配置</span>config get slowlog<span class="token operator">-</span>max<span class="token operator">-</span>len<span class="token operator">=</span><span class="token number">128</span> <span class="token comment" spellcheck="true"># 慢查询最大接收数</span>Config get slowly<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than<span class="token operator">=</span><span class="token number">10000</span> <span class="token comment" spellcheck="true"># 接受小于1毫秒的命令</span></code></pre><p>总结：</p><ol><li>slowlog-max-len 不要设置过大，默认10ms，通常设置1ms</li><li>slowlog-log-slower-than不要设置过小，通常设置1000左右</li><li>理解命令生命周期</li><li>定期持久化慢查询</li></ol><h2 id="二、pipline和watch"><a href="#二、pipline和watch" class="headerlink" title="二、pipline和watch"></a>二、pipline和watch</h2><h3 id="1-pipline"><a href="#1-pipline" class="headerlink" title="1 pipline"></a>1 pipline</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pipline在redis命令中不支持，但是在编程语言中支持</span><span class="token comment" spellcheck="true"># 其实就是批量执行命令的一种方式，redis命令可以用事务来实现这种功能</span><span class="token comment" spellcheck="true"># 客户端实现</span><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'10.211.55.4'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># pipe = r.pipeline(transaction=False)</span><span class="token comment" spellcheck="true">#创建pipeline</span>pipe <span class="token operator">=</span> r<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span>transaction<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#开启事务</span>pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'lqz'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#其他代码，可能出异常</span>pipe<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'role'</span><span class="token punctuation">,</span> <span class="token string">'nb'</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-原生事务"><a href="#2-原生事务" class="headerlink" title="2 原生事务"></a>2 原生事务</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> multi <span class="token comment" spellcheck="true"># 开启事务后所有的命令都会放到Quee中，直到执行exec结束事务才会执行</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">exec</span> </code></pre><h3 id="3-watch"><a href="#3-watch" class="headerlink" title="3 watch"></a>3 watch</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis中可以通过watch实现乐观锁</span><span class="token comment" spellcheck="true"># 演示：watch一个key，在开启事务后可以修改这个key，但是如果在事务外同时有修改这个key的请求，再修改事务中的key就会失败</span></code></pre><h2 id="三、位图"><a href="#三、位图" class="headerlink" title="三、位图"></a>三、位图</h2><p>因为redis可以通过byte进行存储，归属字符类型，所以可以通过bitmap做一些操作：独立用户统计</p><p>需要用户量非常大大概一亿左右的用户量才会和用集合存储有差别</p><pre class=" language-python"><code class="language-python">set hello big <span class="token comment" spellcheck="true">#放入key位hello 值为big的字符串</span>getbit hello <span class="token number">0</span> <span class="token comment" spellcheck="true">#取位图的第0个位置，返回0</span>getbit hello <span class="token number">1</span> <span class="token comment" spellcheck="true">#取位图的第1个位置，返回1 如上图</span><span class="token comment" spellcheck="true">##我们可以直接操纵位</span>setbit key offset value <span class="token comment" spellcheck="true">#给位图指定索引设置值</span>setbit hello <span class="token number">7</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#把hello的第7个位置设为1 这样，big就变成了cig</span>setbit test <span class="token number">50</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#test不存在，在key为test的value的第50位设为1，那其他位都以0补</span>bitcount key <span class="token punctuation">[</span>start end<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#获取位图指定范围(start到end,单位为字节,注意按字节一个字节8个bit为，如果不指定就是获取全部)位值为1的个数</span>bitop op destkey key <span class="token punctuation">[</span>key<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#做多个Bitmap的and(交集)/or(并集)/not(非)/xor(异或)，操作并将结果保存在destkey中 </span>bitop <span class="token operator">and</span> after_lqz lqz lqz2 <span class="token comment" spellcheck="true">#把lqz和lqz2按位与操作，放到after_lqz中</span>bitpos key targetBit start end <span class="token comment" spellcheck="true">#计算位图指定范围(start到end，单位为字节，如果不指定是获取全部)第一个偏移量对应的值等于targetBit的位置</span>bitpos lqz <span class="token number">1</span> <span class="token comment" spellcheck="true">#big 对应位图中第一个1的位置，在第二个位置上，由于从0开始返回1</span>bitpos lqz <span class="token number">0</span> <span class="token comment" spellcheck="true">#big 对应位图中第一个0的位置，在第一个位置上，由于从0开始返回0</span>bitpos lqz <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">#返回9：返回从第一个字节到第二个字节之间 第一个1的位置，看上图，为9</span></code></pre><h2 id="四、HyperLogLog"><a href="#四、HyperLogLog" class="headerlink" title="四、HyperLogLog"></a>四、HyperLogLog</h2><p>本质：布隆过滤器</p><p>存储数据量极小，只有存在和不存在的状态，本身内容无法读取</p><p>百万级独立用户统计，但是可能会出错，可以做日活用户统计</p><p>实际上就三个操作：添加，合并，统计</p><pre class=" language-python"><code class="language-python">pfadd key element <span class="token comment" spellcheck="true">#向hyperloglog添加元素,可以同时添加多个</span>pfcount key <span class="token comment" spellcheck="true">#计算hyperloglog的独立总数</span>pfmerge destroy sourcekey1 sourcekey2<span class="token comment" spellcheck="true">#合并多个hyperloglog，把sourcekey1和sourcekey2合并为destroy</span>pfadd uuids <span class="token string">"uuid1"</span> <span class="token string">"uuid2"</span> <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span> <span class="token comment" spellcheck="true">#向uuids中添加4个uuid</span>pfcount uuids <span class="token comment" spellcheck="true">#返回4</span>pfadd uuids <span class="token string">"uuid1"</span> <span class="token string">"uuid5"</span><span class="token comment" spellcheck="true">#有一个之前存在了，其实只把uuid5添加了</span>pfcount uuids <span class="token comment" spellcheck="true">#返回5</span>pfadd uuids1 <span class="token string">"uuid1"</span> <span class="token string">"uuid2"</span> <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span>pfadd uuids2 <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span> <span class="token string">"uuid5"</span> <span class="token string">"uuid6"</span>pfmerge uuidsall uuids1 uuids2 <span class="token comment" spellcheck="true">#合并</span>pfcount uuidsall <span class="token comment" spellcheck="true">#统计个数 返回6</span></code></pre><h2 id="五、geo"><a href="#五、geo" class="headerlink" title="五、geo"></a>五、geo</h2><p>根据经纬度计算距离，统计范围内的人</p><p>操作：添加，获取（地理位置，两地距离），查看范围内的人</p><pre class=" language-python"><code class="language-python">geoadd key longitude latitude member <span class="token comment" spellcheck="true">#增加地理位置信息</span>geoadd cities<span class="token punctuation">:</span>locations <span class="token number">116.28</span> <span class="token number">39.55</span> beijing <span class="token comment" spellcheck="true">#把北京地理信息天津到cities:locations中</span>geoadd cities<span class="token punctuation">:</span>locations <span class="token number">117.12</span> <span class="token number">39.08</span> tianjingeoadd cities<span class="token punctuation">:</span>locations <span class="token number">114.29</span> <span class="token number">38.02</span> shijiazhuanggeoadd cities<span class="token punctuation">:</span>locations <span class="token number">118.01</span> <span class="token number">39.38</span> tangshangeoadd cities<span class="token punctuation">:</span>locations <span class="token number">115.29</span> <span class="token number">38.51</span> baodinggeopos key member <span class="token comment" spellcheck="true">#获取地理位置信息</span>geopos cities<span class="token punctuation">:</span>locations beijing <span class="token comment" spellcheck="true">#获取北京地理信息</span>geodist key member1 member2 <span class="token punctuation">[</span>unit<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取两个地理位置的距离 unit:m(米) km(千米) mi(英里) ft(尺)</span>geodist cities<span class="token punctuation">:</span>locations beijing tianjin km <span class="token comment" spellcheck="true">#北京到天津的距离，89公里</span>georadius key logitude latitude radiusm<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>withcoord<span class="token punctuation">]</span> <span class="token punctuation">[</span>withdist<span class="token punctuation">]</span> <span class="token punctuation">[</span>withhash<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> <span class="token punctuation">[</span>asc<span class="token operator">|</span>desc<span class="token punctuation">]</span> <span class="token punctuation">[</span>store key<span class="token punctuation">]</span><span class="token punctuation">[</span>storedist key<span class="token punctuation">]</span>georadiusbymember key member radiusm<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>withcoord<span class="token punctuation">]</span> <span class="token punctuation">[</span>withdist<span class="token punctuation">]</span> <span class="token punctuation">[</span>withhash<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> <span class="token punctuation">[</span>asc<span class="token operator">|</span>desc<span class="token punctuation">]</span> <span class="token punctuation">[</span>store key<span class="token punctuation">]</span><span class="token punctuation">[</span>storedist key<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取指定位置范围内的地理位置信息集合</span><span class="token triple-quoted-string string">'''withcoord:返回结果中包含经纬度withdist：返回结果中包含距离中心节点位置withhash：返回解雇中包含geohashCOUNT count：指定返回结果的数量asc|desc：返回结果按照距离中心店的距离做升序/降序排列store key：将返回结果的地理位置信息保存到指定键storedist key：将返回结果距离中心点的距离保存到指定键'''</span>georadiusbymember cities<span class="token punctuation">:</span>locations beijing <span class="token number">150</span> km<span class="token triple-quoted-string string">'''1) "beijing"2) "tianjin"3) "tangshan"4) "baoding"'''</span></code></pre><h2 id="六、发布订阅（基本不用）"><a href="#六、发布订阅（基本不用）" class="headerlink" title="六、发布订阅（基本不用）"></a>六、发布订阅（基本不用）</h2><p>发布者发布了消息，所有订阅者都能接受到，本质是生产者消费者模型</p><pre class=" language-python"><code class="language-python">publish channel message <span class="token comment" spellcheck="true">#发布命令</span>publish souhu<span class="token punctuation">:</span>tv <span class="token string">"hello world"</span> <span class="token comment" spellcheck="true">#在souhu:tv频道发布一条hello world  返回订阅者个数</span>subscribe <span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#订阅命令，可以订阅一个或多个</span>subscribe souhu<span class="token punctuation">:</span>tv  <span class="token comment" spellcheck="true">#订阅sohu:tv频道</span>unsubscribe <span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#取消订阅一个或多个频道</span>unsubscribe sohu<span class="token punctuation">:</span>tv  <span class="token comment" spellcheck="true">#取消订阅sohu:tv频道</span>psubscribe <span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#订阅模式匹配</span>psubscribe c<span class="token operator">*</span>  <span class="token comment" spellcheck="true">#订阅以c开头的频道</span>unpsubscribe <span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#按模式退订指定频道</span>pubsub channels <span class="token comment" spellcheck="true">#列出至少有一个订阅者的频道,列出活跃的频道</span>pubsub numsub <span class="token punctuation">[</span>channel<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#列出给定频道的订阅者数量</span>pubsub numpat <span class="token comment" spellcheck="true">#列出被订阅模式的数量</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、慢查询&quot;&gt;&lt;a href=&quot;#一、慢查询&quot; class=&quot;headerlink&quot; title=&quot;一、慢查询&quot;&gt;&lt;/a&gt;一、慢查询&lt;/h2&gt;&lt;p&gt;因为redis是个单线程架构，所以只要有慢查询夯住会非常影响性能，在生产环境中应该避免出现慢查询或者限制慢查询&lt;/p</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="数据库" scheme="http://huang_zhao.gitee.io/task/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="Redis高级" scheme="http://huang_zhao.gitee.io/task/tags/Redis%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Scrapy框架</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/22/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/22/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</id>
    <published>2020-04-22T04:30:31.000Z</published>
    <updated>2020-09-04T11:23:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1 pip3 install scrapy（mac，linux）</span><span class="token comment" spellcheck="true">#2 windows上（80%能成功，少部分人成功不了）</span>    <span class="token number">1</span>、pip3 install wheel <span class="token comment" spellcheck="true">#安装后，便支持通过wheel文件安装软件，wheel文件官网：https://www.lfd.uci.edu/~gohlke/pythonlibs</span>    <span class="token number">3</span>、pip3 install lxml    <span class="token number">4</span>、pip3 install pyopenssl    <span class="token number">5</span>、下载并安装pywin32：https<span class="token punctuation">:</span><span class="token operator">//</span>sourceforge<span class="token punctuation">.</span>net<span class="token operator">/</span>projects<span class="token operator">/</span>pywin32<span class="token operator">/</span>files<span class="token operator">/</span>pywin32<span class="token operator">/</span>    <span class="token number">6</span>、下载twisted的wheel文件：http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>lfd<span class="token punctuation">.</span>uci<span class="token punctuation">.</span>edu<span class="token operator">/</span><span class="token operator">~</span>gohlke<span class="token operator">/</span>pythonlibs<span class="token operator">/</span><span class="token comment" spellcheck="true">#twisted</span>    <span class="token number">7</span>、执行pip3 install 下载目录\Twisted<span class="token number">-17.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>cp36<span class="token operator">-</span>cp36m<span class="token operator">-</span>win_amd64<span class="token punctuation">.</span>whl    <span class="token number">8</span>、pip3 install scrapy<span class="token comment" spellcheck="true"># 3 就有scrapy命令</span>    <span class="token operator">-</span>D<span class="token punctuation">:</span>\Python36\Scripts\scrapy<span class="token punctuation">.</span>exe  用于创建项目</code></pre><h2 id="二、框架简介"><a href="#二、框架简介" class="headerlink" title="二、框架简介"></a>二、框架简介</h2><p><strong>执行流程图</strong></p><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/1036857-20171109221422778-1731419400.png" alt="1036857-20171109221422778-1731419400" loading="lazy"></p><ol><li><p>引擎(EGINE)</p><p>引擎负责控制系统所有组件之间的数据流，并在某些动作发生时触发事件。有关详细信息，请参见上面的数据流部分。</p><p>（scrapy的核心，用于转发数据或请求，如果是数据，转到管道去保存，如果是请求，转到调度器，如果来的是响应对象，转给爬虫）</p></li><li><p><strong>调度器(SCHEDULER)</strong><br>用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL的优先级队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</p><p>（用于处理要爬取的url的顺序，深度优先/表示一条路走到黑，还是广度优先/表示同一层先爬下来，，去重）</p></li><li><p><strong>下载器(DOWLOADER)</strong><br>用于下载网页内容, 并将网页内容返回给EGINE，下载器是建立在twisted这个高效的异步模型上的</p><p>（向外要爬取的地址发送请求）</p></li><li><p><strong>爬虫(SPIDERS)</strong><br>SPIDERS是开发人员自定义的类，用来解析responses，并且提取items，或者发送新的请求</p></li><li><p><strong>项目管道(ITEM PIPLINES)</strong><br>在items被提取后负责处理它们，主要包括清理、验证、持久化（比如存到数据库）等操作</p><p>（需要在settings中配置）</p></li><li><p>下载器中间件(Downloader Middlewares)</p><p>位于Scrapy引擎和下载器之间，主要用来处理从EGINE传到DOWLOADER的请求request，已经从DOWNLOADER传到EGINE的响应response，你可用该中间件做以下几件事</p><ol><li>process a request just before it is sent to the Downloader (i.e. right before Scrapy sends the request to the website);</li><li>change received response before passing it to a spider;</li><li>send a new Request instead of passing received response to a spider;</li><li>pass response to a spider without fetching a web page;</li><li>silently drop some requests.</li></ol></li><li><p><strong>爬虫中间件(Spider Middlewares)</strong><br>位于EGINE和SPIDERS之间，主要工作是处理SPIDERS的输入（即responses）和输出（即requests）</p></li></ol><p>执行顺序：爬虫把要爬的url转发给引擎，引擎再转发给调度器，由调度器决定顺序，返回给引擎，引擎再把要爬取的url通过下载中间件（用于加个头，cookie啥的）向需要爬取的服务端发送请求，响应回来之后也通过下载中间件给引擎，引擎判断是响应数据之后，转发给爬虫，爬虫对数据进行处理，返回一个新的需要爬的地址（就继续上面的流程）或者需要保存的数据，数据部分由引擎转发给管道，保存数据</p><p><strong>目录介绍</strong></p><pre class=" language-python"><code class="language-python">    firstscrapy  <span class="token comment" spellcheck="true"># 项目名字</span>        firstscrapy <span class="token comment" spellcheck="true"># 包</span>            <span class="token operator">-</span>spiders <span class="token comment" spellcheck="true"># 所有的爬虫文件放在里面</span>                <span class="token operator">-</span>baidu<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 一个个的爬虫（以后基本上都在这写东西）</span>                <span class="token operator">-</span>chouti<span class="token punctuation">.</span>py            <span class="token operator">-</span>middlewares<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 中间件（爬虫，下载中间件都写在这）</span>            <span class="token operator">-</span>pipelines<span class="token punctuation">.</span>py   <span class="token comment" spellcheck="true"># 持久化相关写在这（items.py中类的对象）</span>            <span class="token operator">-</span>main<span class="token punctuation">.</span>py        <span class="token comment" spellcheck="true"># 自己加的，执行爬虫</span>            <span class="token operator">-</span>items<span class="token punctuation">.</span>py       <span class="token comment" spellcheck="true"># 一个一个的类，</span>            <span class="token operator">-</span>settings<span class="token punctuation">.</span>py    <span class="token comment" spellcheck="true"># 配置文件</span>        scrapy<span class="token punctuation">.</span>cfg          <span class="token comment" spellcheck="true"># 上线相关</span></code></pre><p><strong>settings参数介绍</strong></p><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 默认情况，scrapy会去遵循爬虫协议<span class="token number">2</span> 修改配置文件参数，强行爬取，不遵循协议    <span class="token operator">-</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token number">3</span> USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'</span><span class="token number">4</span> LOG_LEVEL<span class="token operator">=</span><span class="token string">'ERROR'</span> <span class="token comment" spellcheck="true"># 运行的时候就不会把其他日志展示出来</span></code></pre><h2 id="三、基本使用"><a href="#三、基本使用" class="headerlink" title="三、基本使用"></a>三、基本使用</h2><h3 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1 基本命令"></a>1 基本命令</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建项目</span>scrapy startproject firstscrapy<span class="token comment" spellcheck="true"># 创建爬虫</span>scrapy genspider 爬虫名 爬虫地址scrapy genspider chouti dig<span class="token punctuation">.</span>chouti<span class="token punctuation">.</span>com<span class="token comment" spellcheck="true"># 一执行就会在spider文件夹下创建出一个py文件</span><span class="token comment" spellcheck="true"># 运行爬虫</span>scrapy crawl chouti   <span class="token comment" spellcheck="true"># 带运行日志</span>scrapy crawl chouti <span class="token operator">-</span><span class="token operator">-</span>nolog  <span class="token comment" spellcheck="true"># 不带日志</span><span class="token comment" spellcheck="true"># 支持右键执行爬虫</span><span class="token comment" spellcheck="true"># 在项目路径下新建一个main.py</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>cmdline <span class="token keyword">import</span> executeexecute<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'scrapy'</span><span class="token punctuation">,</span><span class="token string">'crawl'</span><span class="token punctuation">,</span><span class="token string">'chouti'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2-数据解析"><a href="#2-数据解析" class="headerlink" title="2 数据解析"></a>2 数据解析</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#xpath：</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@class,"link-title")]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取文本</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@class,"link-title")]/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#取属性</span><span class="token comment" spellcheck="true">#css</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取文本</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::attr(href)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取属性</span></code></pre><h3 id="3-数据持久化"><a href="#3-数据持久化" class="headerlink" title="3 数据持久化"></a>3 数据持久化</h3><p><strong>items.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 持久化匹配的字段</span><span class="token keyword">class</span> <span class="token class-name">ChoutiItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    laiyuan <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>spiders/chouti.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ChoutiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'chouti'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dig.chouti.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 返回要爬取的页面，或者返回要保存的数据</span>        <span class="token comment" spellcheck="true"># 下面两者效果相同</span>        <span class="token keyword">from</span> pachong<span class="token punctuation">.</span>items <span class="token keyword">import</span> ChoutiItem        item <span class="token operator">=</span> ChoutiItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-con .link-item'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># div_list = response.xpath('//div[contains(@class,"link-item")]')</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> div<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            laiyuan <span class="token operator">=</span> div<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-from::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># title = div.xpath('//a[contains(@class,"link-title")]/text()').extract()</span>            <span class="token keyword">if</span> <span class="token operator">not</span> laiyuan<span class="token punctuation">:</span>                laiyuan <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>laiyuan<span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title            item<span class="token punctuation">[</span><span class="token string">'laiyuan'</span><span class="token punctuation">]</span> <span class="token operator">=</span> laiyuan            <span class="token keyword">yield</span> item</code></pre><p><strong>pipelines.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">PachongPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>                 database<span class="token operator">=</span><span class="token string">'pachong'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">'insert into chouti (title,laiyuan)values(%s,%s)'</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token string">'laiyuan'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>settings.py</strong></p><pre class=" language-python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'pachong.pipelines.PachongPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 配置优先级</span></code></pre><h2 id="四、scrapy高级"><a href="#四、scrapy高级" class="headerlink" title="四、scrapy高级"></a>四、scrapy高级</h2><h3 id="1-提升scrapy爬取数据的效率"><a href="#1-提升scrapy爬取数据的效率" class="headerlink" title="1 提升scrapy爬取数据的效率"></a>1 提升scrapy爬取数据的效率</h3><pre class=" language-python"><code class="language-python"><span class="token operator">-</span> 在配置文件中进行相关的配置即可<span class="token punctuation">:</span><span class="token punctuation">(</span>默认还有一套setting<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1 增加并发：</span>默认scrapy开启的并发线程为<span class="token number">32</span>个，可以适当进行增加。在settings配置文件中修改CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token number">100</span>值为<span class="token number">100</span><span class="token punctuation">,</span>并发设置成了为<span class="token number">100</span>。<span class="token comment" spellcheck="true">#2 降低日志级别：</span>在运行scrapy时，会有大量日志信息的输出，为了减少CPU的使用率。可以设置log输出信息为INFO或者ERROR即可。在配置文件中编写：LOG_LEVEL <span class="token operator">=</span> ‘INFO’<span class="token comment" spellcheck="true"># 3 禁止cookie：</span>如果不是真的需要cookie，则在scrapy爬取数据时可以禁止cookie从而减少CPU的使用率，提升爬取效率。在配置文件中编写：COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 4禁止重试：</span>对失败的HTTP进行重新请求（重试）会减慢爬取速度，因此可以禁止重试。在配置文件中编写：RETRY_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 5 减少下载超时：</span>如果对一个非常慢的链接进行爬取，减少下载超时可以能让卡住的链接快速被放弃，从而提升效率。在配置文件中进行编写：DOWNLOAD_TIMEOUT <span class="token operator">=</span> <span class="token number">10</span> 超时时间为10s</code></pre><h3 id="2-scrapy的中间件（下载中间件）"><a href="#2-scrapy的中间件（下载中间件）" class="headerlink" title="2 scrapy的中间件（下载中间件）"></a>2 scrapy的中间件（下载中间件）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 都写在middlewares.py</span><span class="token comment" spellcheck="true"># 2 爬虫中间件</span><span class="token comment" spellcheck="true"># 3 下载中间件</span><span class="token comment" spellcheck="true"># 4 要生效，一定要配置，配置文件</span><span class="token comment" spellcheck="true"># 下载中间件</span><span class="token operator">-</span>process_request：返回不同的对象，后续处理不同（加代理<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>）          <span class="token comment" spellcheck="true"># 1 更换请求头</span>        <span class="token comment" spellcheck="true"># print(type(request.headers))</span>        <span class="token comment" spellcheck="true"># print(request.headers)</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># from scrapy.http.headers import Headers</span>        <span class="token comment" spellcheck="true"># request.headers['User-Agent']=''</span>        <span class="token comment" spellcheck="true"># 2 加cookie ---cookie池</span>        <span class="token comment" spellcheck="true"># 假设你你已经搭建好cookie 池了，</span>        <span class="token comment" spellcheck="true"># print('00000--',request.cookies)</span>        <span class="token comment" spellcheck="true"># request.cookies={'username':'asdfasdf'}</span>        <span class="token comment" spellcheck="true"># 3 加代理</span>        <span class="token comment" spellcheck="true"># print(request.meta)</span>        <span class="token comment" spellcheck="true"># request.meta['download_timeout'] = 20</span>        <span class="token comment" spellcheck="true"># request.meta["proxy"] = 'http://27.188.62.3:8060'</span><span class="token operator">-</span>process_response：返回不同的对象，后续处理不同<span class="token operator">-</span> process_exception<span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 不允许直接改url</span>        <span class="token comment" spellcheck="true"># request.url='https://www.baidu.com'</span>        <span class="token keyword">from</span> scrapy <span class="token keyword">import</span> Request        request<span class="token operator">=</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>callback<span class="token operator">=</span>spider<span class="token punctuation">.</span>parser<span class="token punctuation">)</span>        <span class="token keyword">return</span> request</code></pre><h3 id="3-selenium在scrapy中的使用流程"><a href="#3-selenium在scrapy中的使用流程" class="headerlink" title="3 selenium在scrapy中的使用流程"></a>3 selenium在scrapy中的使用流程</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 当前爬虫用的selenium是同一个</span><span class="token comment" spellcheck="true"># 1 在爬虫中初始化webdriver对象</span>    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    <span class="token keyword">class</span> <span class="token class-name">CnblogSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">'cnblog'</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> bro<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'../chromedriver.exe'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 在中间件中使用（process_request）</span>spider<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://dig.chouti.com/'</span><span class="token punctuation">)</span>   response<span class="token operator">=</span>HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://dig.chouti.com/'</span><span class="token punctuation">,</span>body<span class="token operator">=</span>spider<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>page_source<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>request<span class="token operator">=</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token comment" spellcheck="true"># 3 在爬虫中关闭</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我结束了"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-分布式爬虫（scrapy-redis）"><a href="#4-分布式爬虫（scrapy-redis）" class="headerlink" title="4 分布式爬虫（scrapy-redis）"></a>4 分布式爬虫（scrapy-redis）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 pip3 install scrapy-redis</span><span class="token comment" spellcheck="true"># 2 原来继承Spider，现在继承RedisSpider</span><span class="token comment" spellcheck="true"># 3 不能写start_urls = ['https:/www.cnblogs.com/']</span><span class="token comment" spellcheck="true"># 4 需要写redis_key = 'myspider:start_urls'</span><span class="token comment" spellcheck="true"># 5 setting中配置：</span><span class="token comment" spellcheck="true"># redis的连接</span>REDIS_HOST <span class="token operator">=</span> <span class="token string">'localhost'</span>                            <span class="token comment" spellcheck="true"># 主机名</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>                                   <span class="token comment" spellcheck="true"># 端口</span>    <span class="token comment" spellcheck="true"># 使用scrapy-redis的去重</span>DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">"scrapy_redis.dupefilter.RFPDupeFilter"</span><span class="token comment" spellcheck="true"># 使用scrapy-redis的Scheduler</span><span class="token comment" spellcheck="true"># 分布式爬虫的配置</span>SCHEDULER <span class="token operator">=</span> <span class="token string">"scrapy_redis.scheduler.Scheduler"</span><span class="token comment" spellcheck="true"># 持久化的可以配置，也可以不配置</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'scrapy_redis.pipelines.RedisPipeline'</span><span class="token punctuation">:</span> <span class="token number">299</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 9现在要让爬虫运行起来，需要去redis中以myspider:start_urls为key，插入一个起始地址lpush myspider:start_urls https://www.cnblogs.com/</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、安装&quot;&gt;&lt;a href=&quot;#一、安装&quot; class=&quot;headerlink&quot; title=&quot;一、安装&quot;&gt;&lt;/a&gt;一、安装&lt;/h2&gt;&lt;pre class=&quot; language-python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="python框架" scheme="http://huang_zhao.gitee.io/task/tags/python%E6%A1%86%E6%9E%B6/"/>
    
    <category term="爬虫高级" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>BeautifulSoup模块的使用</title>
    <link href="http://huang_zhao.gitee.io/task/2020/04/21/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://huang_zhao.gitee.io/task/2020/04/21/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-21T06:10:11.000Z</published>
    <updated>2020-09-04T11:23:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BeautifulSoup模块的使用"><a href="#BeautifulSoup模块的使用" class="headerlink" title="BeautifulSoup模块的使用"></a>BeautifulSoup模块的使用</h2><h4 id="1-参数介绍"><a href="#1-参数介绍" class="headerlink" title="1 参数介绍"></a>1 参数介绍</h4><pre class=" language-python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一个参数是要解析的html页面，通常是我们通过请求得到的页面数据</span><span class="token comment" spellcheck="true"># 第二个参数是解析的解析器选择</span><span class="token comment" spellcheck="true"># python内置的html.parser</span><span class="token comment" spellcheck="true"># 其他解释器：lxml（通常使用），xml，html5lib</span></code></pre><p>文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><h4 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 标签查找</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有多个只会找到第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>pres <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token comment" spellcheck="true"># 2 标签属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>attrs<span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'bbb'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'boldest'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 3 获取文本内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>string <span class="token comment" spellcheck="true"># 当p下只有文本取到，否则为None</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>strings <span class="token comment" spellcheck="true"># 获取全部文本得到一个生成器对象</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 取到标签下所有的文本内容拼接起来</span><span class="token comment" spellcheck="true"># 4 嵌套选择</span><span class="token comment" spellcheck="true"># 可以让选择更加准确</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>string<span class="token comment" spellcheck="true"># 5 子节点、子孙节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents <span class="token comment" spellcheck="true"># 获得p内所有子节点</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>b <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"boldest"</span> id<span class="token operator">=</span><span class="token string">"bbb"</span><span class="token operator">></span>The Dormouse<span class="token string">'s story&lt;/b>, '</span>\n'<span class="token punctuation">]</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children <span class="token comment" spellcheck="true"># 得到一个迭代器，包含p内所有子节点</span><span class="token triple-quoted-string string">'''子节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>'''</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>descendants <span class="token comment" spellcheck="true"># 得到一个生成器，包含p内所有子孙节点</span><span class="token triple-quoted-string string">'''子孙节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>The Dormouse's story'''</span><span class="token comment" spellcheck="true"># 6 父节点、祖节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parent <span class="token comment" spellcheck="true"># 获得p的父节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parents <span class="token comment" spellcheck="true"># 获得p的父节点，和父节点的父节点。。。的生成器</span><span class="token comment" spellcheck="true"># 7 兄弟节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_sibling <span class="token comment" spellcheck="true"># 下一个兄弟</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_previous_sibling <span class="token comment" spellcheck="true"># 上一个兄弟</span></code></pre><h4 id="3-搜索文档树"><a href="#3-搜索文档树" class="headerlink" title="3 搜索文档树"></a>3 搜索文档树</h4><h5 id="3-1-五种过滤器"><a href="#3-1-五种过滤器" class="headerlink" title="3.1 五种过滤器"></a>3.1 五种过滤器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 字符串</span><span class="token comment" spellcheck="true"># 如果有多个取第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取全部，只有一个也是放在列表中</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 正则表达式</span><span class="token comment" spellcheck="true"># 获得所有以b开头的标签：body，b</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3 列表</span><span class="token comment" spellcheck="true"># a标签，b标签都会取</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4 布尔</span><span class="token comment" spellcheck="true"># 会查找到所有标签，不包括文本节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5 自定义过滤器</span><span class="token comment" spellcheck="true"># 会把整个页面传给tag</span><span class="token keyword">def</span> <span class="token function">has_class_not_id</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>has_class_not_id<span class="token punctuation">)</span></code></pre><h5 id="3-2-find-all"><a href="#3-2-find-all" class="headerlink" title="3.2 find_all()"></a>3.2 find_all()</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># name：可以放任意类型的过滤器</span><span class="token comment" spellcheck="true"># keyword：放键值对</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>id <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^my'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有特殊参数不能通过k，v来表示</span><span class="token comment" spellcheck="true"># 比如data-foo = value</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"data-foo"</span><span class="token punctuation">:</span><span class="token string">"value"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按类名的时候，关键字是class_</span><span class="token comment" spellcheck="true"># 查找由sister和sss类的a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'sister sss'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># limit参数</span><span class="token comment" spellcheck="true"># 找前连个a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># recursive = False 会查找tag下的直接的子节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>recursive <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h5 id="3-3-css选择器"><a href="#3-3-css选择器" class="headerlink" title="3.3 css选择器"></a>3.3 css选择器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 选择器</span><span class="token comment" spellcheck="true"># 类</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 含有sister类下的b标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># id</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token comment" spellcheck="true"># 获取内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;BeautifulSoup模块的使用&quot;&gt;&lt;a href=&quot;#BeautifulSoup模块的使用&quot; class=&quot;headerlink&quot; title=&quot;BeautifulSoup模块的使用&quot;&gt;&lt;/a&gt;BeautifulSoup模块的使用&lt;/h2&gt;&lt;h4 id=&quot;1</summary>
      
    
    
    
    <category term="技术分享" scheme="http://huang_zhao.gitee.io/task/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="爬虫" scheme="http://huang_zhao.gitee.io/task/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="python模块" scheme="http://huang_zhao.gitee.io/task/tags/python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
</feed>
