<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>支付宝网页支付接口调用</title>
      <link href="/task/2020/04/25/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
      <url>/task/2020/04/25/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SDK-API接口的调用"><a href="#一、SDK-API接口的调用" class="headerlink" title="一、SDK/API接口的调用"></a>一、SDK/API接口的调用</h2><p>支付宝平台不提供python的sdk，只有api，我们可以去网上找别人封装好的sdk，复制过来，了解对应参数</p><p>可以通过支付宝提供的软件自动生成公钥和私钥</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment" spellcheck="true"># app_private_key_string = open("/path/to/your/private/key.pem").read()</span><span class="token comment" spellcheck="true"># alipay_public_key_string = open("/path/to/alipay/public/key.pem").read()</span>app_private_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN RSA PRIVATE KEY-----你的私钥-----END RSA PRIVATE KEY-----"""</span>alipay_public_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN PUBLIC KEY-----支付宝平台创建的应用的公钥-----END PUBLIC KEY-----"""</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 创建应用的appid</span>    appid<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token string">'http://127.0.0.1:8000/home/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># the default notify path</span>    <span class="token comment" spellcheck="true"># 配置你的私钥</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># alipay public key, do not use your own public key!</span>    <span class="token comment" spellcheck="true"># 配置应用的公钥</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 加密方式</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># RSA or RSA2</span>    <span class="token comment" spellcheck="true"># 调试模式，如果用真实环境就要改成True</span>    debug<span class="token operator">=</span><span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># False by default</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 支付宝的网关接口</span>alipay_url<span class="token operator">=</span><span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span><span class="token comment" spellcheck="true"># 生成支付页面</span>order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>    out_trade_no<span class="token operator">=</span><span class="token string">"20161112www4334"</span><span class="token punctuation">,</span>    total_amount<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">,</span>    subject<span class="token operator">=</span><span class="token string">'韩红版充气娃娃'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 商品名称</span>    <span class="token comment" spellcheck="true"># 提交get请求的url</span>    return_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 提交post请求的url</span>    notify_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成支付链接</span><span class="token keyword">print</span><span class="token punctuation">(</span>alipay_url<span class="token operator">+</span>order_string<span class="token punctuation">)</span></code></pre><p>这里内部有很多配置信息，可以把配置信息提取出来放到settings文件中，解耦合</p><h2 id="二、项目中调用支付接口"><a href="#二、项目中调用支付接口" class="headerlink" title="二、项目中调用支付接口"></a>二、项目中调用支付接口</h2><p>前端点击立即购买，把后端所需要的参数发送给后端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayView</span><span class="token punctuation">(</span>GenericViewSet<span class="token punctuation">,</span> CreateModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 登录jwt认证</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span>JSONWebTokenAuthentication<span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 防止游客登录</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAuthenticated<span class="token punctuation">,</span> <span class="token punctuation">]</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> sers<span class="token punctuation">.</span>OrderSerializer    <span class="token comment" spellcheck="true"># 重写create方法</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'request': request&amp;#125;)</span>        <span class="token comment" spellcheck="true"># 通过序列化类去校验数据，保存数据到数据库，生成支付宝链接</span>        <span class="token comment" spellcheck="true"># 主要逻辑都在序列化类中</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 等同于ser.save（）</span>        self<span class="token punctuation">.</span>perform_create<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回支付宝支付链接</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pay_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>序列化类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">OrderSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 前端传什么数据过来&amp;#123;course:[1,2,3],total_amount:100,subject:xx商品,pay_type:1,&amp;#125;</span>    <span class="token comment" spellcheck="true"># user字段需要，但是不是传的，使用了jwt</span>    <span class="token comment" spellcheck="true"># 需要把course:[1,2,3] 处理成 course:[obj1,obj2,obj3]</span>    <span class="token comment" spellcheck="true"># 课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    <span class="token comment" spellcheck="true"># course=serializers.CharField()</span>    <span class="token keyword">from</span> course<span class="token punctuation">.</span>models <span class="token keyword">import</span> Course    <span class="token comment" spellcheck="true"># 这个方法可以让课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    course<span class="token operator">=</span>serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Course<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Order        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'total_amount'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">,</span><span class="token string">'pay_type'</span><span class="token punctuation">,</span><span class="token string">'course'</span><span class="token punctuation">]</span>        extra_kwargs<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>            <span class="token string">'total_amount'</span><span class="token punctuation">:</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'required':True&amp;#125;,</span>            <span class="token string">'pay_type'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'required': True&amp;#125;,</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">def</span> <span class="token function">_check_price</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        total_amount<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'total_amount'</span><span class="token punctuation">)</span>        course_list<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        total_price<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            total_price<span class="token operator">+=</span>course<span class="token punctuation">.</span>price        <span class="token keyword">if</span> total_price<span class="token operator">!=</span>total_amount<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'价格不合法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> total_amount    <span class="token keyword">def</span> <span class="token function">_gen_out_trade_no</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> uuid        <span class="token keyword">return</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 需要request对象(需要视图通过context把reuqest对象传入。重写create方法)</span>        request<span class="token operator">=</span>self<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> request<span class="token punctuation">.</span>user    <span class="token keyword">def</span> <span class="token function">_gen_pay_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>subject<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># total_amout是Decimal类型，识别不了，需要转换成float类型</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay<span class="token punctuation">,</span>gateway        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>            out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">,</span>            total_amount<span class="token operator">=</span>float<span class="token punctuation">(</span>total_amout<span class="token punctuation">)</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span>subject<span class="token punctuation">,</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># get回调，前台地址（最后跳转的支付成功页面）</span>            notify_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>NOTIFY_URL   <span class="token comment" spellcheck="true"># post回调，后台地址（给后端去判断是否支付成功，支付成功返回success）</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span> gateway<span class="token operator">+</span>order_string    <span class="token keyword">def</span> <span class="token function">_before_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token operator">=</span>user        attrs<span class="token punctuation">[</span><span class="token string">'out_trade_no'</span><span class="token punctuation">]</span><span class="token operator">=</span>out_trade_no        self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'pay_url'</span><span class="token punctuation">]</span><span class="token operator">=</span>pay_url    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        # 1）订单总价校验        # 2）生成订单号        # 3）支付用户：request.user        # 4）支付链接生成        # 5）入库(两个表)的信息准备        '''</span>        <span class="token comment" spellcheck="true"># 1）订单总价校验</span>        total_amout <span class="token operator">=</span> self<span class="token punctuation">.</span>_check_price<span class="token punctuation">(</span>attrs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2）生成订单号</span>        out_trade_no<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_out_trade_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3）支付用户：request.user</span>        user<span class="token operator">=</span>self<span class="token punctuation">.</span>_get_user<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 4）支付链接生成</span>        pay_url<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_pay_url<span class="token punctuation">(</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'subject'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5）入库(两个表)的信息准备</span>        self<span class="token punctuation">.</span>_before_create<span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span>        <span class="token keyword">return</span> attrs    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        course_list<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            models<span class="token punctuation">.</span>OrderDetail<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>order<span class="token operator">=</span>order<span class="token punctuation">,</span>course<span class="token operator">=</span>course<span class="token punctuation">,</span>price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">,</span>real_price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        <span class="token keyword">return</span> order</code></pre><p>支付成功后，前端会直接跳转到支付成功的页面，支付宝会向后端发送post请求，让我们验证所有的信息是否正确</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        支付宝回调接口        '''</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>logger <span class="token keyword">import</span> log        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        out_trade_no<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        gmt_payment<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gmt_payment'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        signature <span class="token operator">=</span> data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 验证签名</span>        success <span class="token operator">=</span> alipay<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>data<span class="token punctuation">,</span> signature<span class="token punctuation">)</span>        <span class="token keyword">if</span> success <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"trade_status"</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"TRADE_SUCCESS"</span><span class="token punctuation">,</span> <span class="token string">"TRADE_FINISHED"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>order_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>pay_time<span class="token operator">=</span>gmt_payment<span class="token punctuation">)</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单支付成功'</span><span class="token operator">%</span>out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单有问题'</span> <span class="token operator">%</span> out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span></code></pre><p>前端到了支付成功的页面，其实也不完全是支付成功，因为还没有得到后端的确认，所以可以发送一个get请求去校验一下是否成功</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        out_trade_no<span class="token operator">=</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> order<span class="token punctuation">.</span>order_status<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 第三方接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xpath基本用法</title>
      <link href="/task/2020/04/25/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/task/2020/04/25/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>XPath 是一门在 XML 文档中查找信息的语言，本质上和bs4差不多</p><p>主要选取节点的表达式是<code>/</code>和<code>//</code>组成</p><p>教程：<a href="https://www.runoob.com/xpath/xpath-syntax.html">https://www.runoob.com/xpath/xpath-syntax.html</a></p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">nodename</td><td align="left">选取此节点的所有子节点。</td></tr><tr><td align="left">/</td><td align="left">从根节点选取。</td></tr><tr><td align="left">//</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td align="left">.</td><td align="left">选取当前节点。</td></tr><tr><td align="left">..</td><td align="left">选取当前节点的父节点。</td></tr><tr><td align="left">@</td><td align="left">选取属性。</td></tr></tbody></table><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">bookstore</td><td align="left">选取 bookstore 元素的所有子节点。</td></tr><tr><td align="left">/bookstore</td><td align="left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">bookstore/book</td><td align="left">选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td align="left">//book</td><td align="left">选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="left">bookstore//book</td><td align="left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td align="left">//@lang</td><td align="left">选取名为 lang 的所有属性。</td></tr></tbody></table><pre class=" language-python"><code class="language-python">doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story li">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span></code></pre><p>测试案例：</p><pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 所有节点，列表包含一个个tag对象</span><span class="token comment" spellcheck="true"># a = html.xpath('//*')</span><span class="token comment" spellcheck="true"># 在body下的所有b标签（包含子子孙孙）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//b')</span><span class="token comment" spellcheck="true"># 在bdoy下的子标签中的b标签（只有子标签）</span><span class="token comment" spellcheck="true"># a = html.xpath('body/b')</span><span class="token comment" spellcheck="true"># 属性匹配,只能完全匹配，如果有多个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]')</span><span class="token comment" spellcheck="true"># 属性匹配模糊，只要有就能匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li")]')</span><span class="token comment" spellcheck="true"># 多属性匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li") or @id="my_p"]')</span><span class="token comment" spellcheck="true"># 获取当前标签的文本（不包含其子节点内部的）（列表）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/text()')</span><span class="token comment" spellcheck="true"># 获取标签的属性</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/@id')</span><span class="token comment" spellcheck="true"># 索引取出一个标签（注意第一个就是【1】不是0｝）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[1]/text()')</span><span class="token comment" spellcheck="true"># 取出最后一个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()]/text()')</span><span class="token comment" spellcheck="true"># 取出位置小于3的</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[position()&lt;3]')</span><span class="token comment" spellcheck="true"># 取出倒数第二个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()-2]')</span><span class="token comment" spellcheck="true"># 11 节点轴选择</span><span class="token comment" spellcheck="true"># ancestor：祖先节点</span><span class="token comment" spellcheck="true"># 使用了* 获取所有祖先节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::*')</span><span class="token comment" spellcheck="true"># # 获取祖先节点中的div</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::div')</span><span class="token comment" spellcheck="true"># attribute：属性值</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/attribute::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/@aa')</span><span class="token comment" spellcheck="true"># child：直接子节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::img/@src')</span><span class="token comment" spellcheck="true"># descendant：所有子孙节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::h5/text()')</span><span class="token comment" spellcheck="true"># following:当前节点之后所有节点(兄弟节点和兄弟内部的节点)</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*[1]/@href')</span><span class="token comment" spellcheck="true"># following-sibling:当前节点之后同级节点（只找兄弟）</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::a')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]/@href')</span></code></pre><h3 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文本</span>a <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'body//p[1]/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性值</span>a<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>'<span class="token operator">//</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>@href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 要注意，如果我们是找到一个标签再通过这个标签进行xpath筛选</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示还是从根往下找</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示从当前标签位置为根往下找</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery基础</title>
      <link href="/task/2020/04/25/celery/"/>
      <url>/task/2020/04/25/celery/</url>
      
        <content type="html"><![CDATA[<h2 id="一、celery介绍"><a href="#一、celery介绍" class="headerlink" title="一、celery介绍"></a>一、celery介绍</h2><p>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></p><p>Celery 官方文档英文版：<a href="http://docs.celeryproject.org/en/latest/index.html">http://docs.celeryproject.org/en/latest/index.html</a></p><p>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></p><ul><li>异步任务框架</li><li>执行异步任务</li><li>执行延迟任务</li><li>执行定时任务</li></ul><h2 id="二、celery架构"><a href="#二、celery架构" class="headerlink" title="二、celery架构"></a>二、celery架构</h2><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/007S8ZIlgy1ggqw0f7bltj30q80c174d.jpg" alt="007S8ZIlgy1ggqw0f7bltj30q80c174d" loading="lazy"></p><h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p><h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>异步执行：解决耗时任务,将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p><p>延迟执行：解决延迟任务</p><p>定时执行：解决周期(周期)任务,比如每天数据统计</p><h2 id="三、celery使用"><a href="#三、celery使用" class="headerlink" title="三、celery使用"></a>三、celery使用</h2><p>安装：<code>pip install celery</code></p><p>根据celery架构，我们可以看出，worker就像是一个工人，一直在工作，如果有工作的时候就会从broker（Redist）里去拿过来执行，并放到pakend（redist）中存放结果</p><h3 id="方式一：在一个文件夹内的三个页面"><a href="#方式一：在一个文件夹内的三个页面" class="headerlink" title="方式一：在一个文件夹内的三个页面"></a>方式一：在一个文件夹内的三个页面</h3><p><strong>worker执行页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celery<span class="token comment" spellcheck="true"># broker存储的位置</span>broker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span><span class="token comment" spellcheck="true"># backend存储的位置</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化的celery对象</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要添加的任务</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><p><strong>broker提交任务的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> add<span class="token comment" spellcheck="true"># 执行这个文件，就是把这个任务添加到数据库中，只要worker在工作</span><span class="token comment" spellcheck="true"># 就会把这个任务从数据库1中拿出来执行，并把结果放到数据库2中</span>ret <span class="token operator">=</span> add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ret 是这个任务的uuid，用于获取任务结果</span></code></pre><p><strong>backend获取任务结果的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> app<span class="token keyword">from</span> celery<span class="token punctuation">.</span>result <span class="token keyword">import</span> AsyncResult<span class="token comment" spellcheck="true"># 任务对象的唯一标识：uuid</span>id <span class="token operator">=</span> <span class="token string">'19dc2faa-39f9-47b6-af77-e9d3a4d05d2e'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    async1 <span class="token operator">=</span> AsyncResult<span class="token punctuation">(</span>id<span class="token operator">=</span>id<span class="token punctuation">,</span> app<span class="token operator">=</span>app<span class="token punctuation">)</span>    <span class="token keyword">if</span> async1<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> async1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>failed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务失败'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'PENDING'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务等待中被执行'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'RETRY'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务异常后正在重试'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'STARTED'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务已经开始被执行'</span><span class="token punctuation">)</span></code></pre><h3 id="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"><a href="#方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）" class="headerlink" title="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"></a>方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）</h3><p>创建一个celery项目（包），内部必须含有名字为celery的py文件，在内部创建celery对象</p><p><strong>celery.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task1'</span><span class="token punctuation">,</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>编写需要添加的任务也在这个包内，可创建不同的任务文件，可添加多个</p><p><strong>task1.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><h3 id="执行延迟任务"><a href="#执行延迟任务" class="headerlink" title="执行延迟任务"></a>执行延迟任务</h3><p>添加任务页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 执行延迟任务就是多个一个时间参数</span><span class="token comment" spellcheck="true"># 这里注意，时间参数是根据utc时间，并不是中国时间</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token comment" spellcheck="true"># 时间对象必须和时间对象相加</span>eta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>add<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eta<span class="token operator">=</span>eta<span class="token punctuation">)</span></code></pre><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>celery页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.tasks.low'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A pc_celery -l info</span><span class="token comment" spellcheck="true"># celery -A pc_celery worker -l info -P eventlet</span></code></pre><h2 id="四、django中配置celery"><a href="#四、django中配置celery" class="headerlink" title="四、django中配置celery"></a>四、django中配置celery</h2><p>celery包最好放在根路径下</p><p><strong>添加定时任务</strong></p><p>celery.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 配置django配置</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'luffyapi.settings.dev'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置celery的worker环境</span><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化worker对象app，用include添加定时任务</span>app<span class="token operator">=</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.task2.update_banner'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token comment" spellcheck="true"># 'args': (),</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A celery_task -l info</span></code></pre><p><strong>task定时任务</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token comment" spellcheck="true"># 每三秒跟新一次缓存</span><span class="token comment" spellcheck="true"># 添加一个任务，celery内设定间隔时间3秒</span><span class="token comment" spellcheck="true"># 任务内去cache跟新banner_list，从数据库中拿到banner放到cache中的banner_list中</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>models <span class="token keyword">import</span> Banner<span class="token comment" spellcheck="true"># from luffyapi.settings import const</span><span class="token comment" spellcheck="true"># [OrderedDict(</span><span class="token comment" spellcheck="true">#     [('image', 'http://127.0.0.1:8000/media/banner/banner1.png'), ('link', '/free-courses'), ('name', 'banner1')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner2.png'), ('link', '/light-courses'), ('name', 'banner2')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner3.png'), ('link', '/actual-courses'), ('name', 'banner3')])]</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>sers <span class="token keyword">import</span> BannerSer@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">update_banner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Banner<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>is_delete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    banner_ser <span class="token operator">=</span> BannerSer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> banner <span class="token keyword">in</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">:</span>        banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000'</span> <span class="token operator">+</span> banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>    cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'更新banner成功'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步任务框架 </tag>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis管道，位图，geo，HyperLogLog，发布订阅</title>
      <link href="/task/2020/04/23/Redis%E7%AE%A1%E9%81%93%EF%BC%8C%E4%BD%8D%E5%9B%BE%EF%BC%8Cgeo%EF%BC%8CHyperLogLog%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>/task/2020/04/23/Redis%E7%AE%A1%E9%81%93%EF%BC%8C%E4%BD%8D%E5%9B%BE%EF%BC%8Cgeo%EF%BC%8CHyperLogLog%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<h2 id="一、慢查询"><a href="#一、慢查询" class="headerlink" title="一、慢查询"></a>一、慢查询</h2><p>因为redis是个单线程架构，所以只要有慢查询夯住会非常影响性能，在生产环境中应该避免出现慢查询或者限制慢查询</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis.conf</span>slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than<span class="token operator">=</span><span class="token number">0</span>，记录所有命令slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span>不记录任何命令<span class="token comment" spellcheck="true"># 也可以直接在链接过程中修改配置</span>config get slowlog<span class="token operator">-</span>max<span class="token operator">-</span>len<span class="token operator">=</span><span class="token number">128</span> <span class="token comment" spellcheck="true"># 慢查询最大接收数</span>Config get slowly<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than<span class="token operator">=</span><span class="token number">10000</span> <span class="token comment" spellcheck="true"># 接受小于1毫秒的命令</span></code></pre><p>总结：</p><ol><li>slowlog-max-len 不要设置过大，默认10ms，通常设置1ms</li><li>slowlog-log-slower-than不要设置过小，通常设置1000左右</li><li>理解命令生命周期</li><li>定期持久化慢查询</li></ol><h2 id="二、pipline和watch"><a href="#二、pipline和watch" class="headerlink" title="二、pipline和watch"></a>二、pipline和watch</h2><h3 id="1-pipline"><a href="#1-pipline" class="headerlink" title="1 pipline"></a>1 pipline</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pipline在redis命令中不支持，但是在编程语言中支持</span><span class="token comment" spellcheck="true"># 其实就是批量执行命令的一种方式，redis命令可以用事务来实现这种功能</span><span class="token comment" spellcheck="true"># 客户端实现</span><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'10.211.55.4'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># pipe = r.pipeline(transaction=False)</span><span class="token comment" spellcheck="true">#创建pipeline</span>pipe <span class="token operator">=</span> r<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span>transaction<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#开启事务</span>pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'lqz'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#其他代码，可能出异常</span>pipe<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'role'</span><span class="token punctuation">,</span> <span class="token string">'nb'</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-原生事务"><a href="#2-原生事务" class="headerlink" title="2 原生事务"></a>2 原生事务</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> multi <span class="token comment" spellcheck="true"># 开启事务后所有的命令都会放到Quee中，直到执行exec结束事务才会执行</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">exec</span> </code></pre><h3 id="3-watch"><a href="#3-watch" class="headerlink" title="3 watch"></a>3 watch</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis中可以通过watch实现乐观锁</span><span class="token comment" spellcheck="true"># 演示：watch一个key，在开启事务后可以修改这个key，但是如果在事务外同时有修改这个key的请求，再修改事务中的key就会失败</span></code></pre><h2 id="三、位图"><a href="#三、位图" class="headerlink" title="三、位图"></a>三、位图</h2><p>因为redis可以通过byte进行存储，归属字符类型，所以可以通过bitmap做一些操作：独立用户统计</p><p>需要用户量非常大大概一亿左右的用户量才会和用集合存储有差别</p><pre class=" language-python"><code class="language-python">set hello big <span class="token comment" spellcheck="true">#放入key位hello 值为big的字符串</span>getbit hello <span class="token number">0</span> <span class="token comment" spellcheck="true">#取位图的第0个位置，返回0</span>getbit hello <span class="token number">1</span> <span class="token comment" spellcheck="true">#取位图的第1个位置，返回1 如上图</span><span class="token comment" spellcheck="true">##我们可以直接操纵位</span>setbit key offset value <span class="token comment" spellcheck="true">#给位图指定索引设置值</span>setbit hello <span class="token number">7</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#把hello的第7个位置设为1 这样，big就变成了cig</span>setbit test <span class="token number">50</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#test不存在，在key为test的value的第50位设为1，那其他位都以0补</span>bitcount key <span class="token punctuation">[</span>start end<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#获取位图指定范围(start到end,单位为字节,注意按字节一个字节8个bit为，如果不指定就是获取全部)位值为1的个数</span>bitop op destkey key <span class="token punctuation">[</span>key<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#做多个Bitmap的and(交集)/or(并集)/not(非)/xor(异或)，操作并将结果保存在destkey中 </span>bitop <span class="token operator">and</span> after_lqz lqz lqz2 <span class="token comment" spellcheck="true">#把lqz和lqz2按位与操作，放到after_lqz中</span>bitpos key targetBit start end <span class="token comment" spellcheck="true">#计算位图指定范围(start到end，单位为字节，如果不指定是获取全部)第一个偏移量对应的值等于targetBit的位置</span>bitpos lqz <span class="token number">1</span> <span class="token comment" spellcheck="true">#big 对应位图中第一个1的位置，在第二个位置上，由于从0开始返回1</span>bitpos lqz <span class="token number">0</span> <span class="token comment" spellcheck="true">#big 对应位图中第一个0的位置，在第一个位置上，由于从0开始返回0</span>bitpos lqz <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">#返回9：返回从第一个字节到第二个字节之间 第一个1的位置，看上图，为9</span></code></pre><h2 id="四、HyperLogLog"><a href="#四、HyperLogLog" class="headerlink" title="四、HyperLogLog"></a>四、HyperLogLog</h2><p>本质：布隆过滤器</p><p>存储数据量极小，只有存在和不存在的状态，本身内容无法读取</p><p>百万级独立用户统计，但是可能会出错，可以做日活用户统计</p><p>实际上就三个操作：添加，合并，统计</p><pre class=" language-python"><code class="language-python">pfadd key element <span class="token comment" spellcheck="true">#向hyperloglog添加元素,可以同时添加多个</span>pfcount key <span class="token comment" spellcheck="true">#计算hyperloglog的独立总数</span>pfmerge destroy sourcekey1 sourcekey2<span class="token comment" spellcheck="true">#合并多个hyperloglog，把sourcekey1和sourcekey2合并为destroy</span>pfadd uuids <span class="token string">"uuid1"</span> <span class="token string">"uuid2"</span> <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span> <span class="token comment" spellcheck="true">#向uuids中添加4个uuid</span>pfcount uuids <span class="token comment" spellcheck="true">#返回4</span>pfadd uuids <span class="token string">"uuid1"</span> <span class="token string">"uuid5"</span><span class="token comment" spellcheck="true">#有一个之前存在了，其实只把uuid5添加了</span>pfcount uuids <span class="token comment" spellcheck="true">#返回5</span>pfadd uuids1 <span class="token string">"uuid1"</span> <span class="token string">"uuid2"</span> <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span>pfadd uuids2 <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span> <span class="token string">"uuid5"</span> <span class="token string">"uuid6"</span>pfmerge uuidsall uuids1 uuids2 <span class="token comment" spellcheck="true">#合并</span>pfcount uuidsall <span class="token comment" spellcheck="true">#统计个数 返回6</span></code></pre><h2 id="五、geo"><a href="#五、geo" class="headerlink" title="五、geo"></a>五、geo</h2><p>根据经纬度计算距离，统计范围内的人</p><p>操作：添加，获取（地理位置，两地距离），查看范围内的人</p><pre class=" language-python"><code class="language-python">geoadd key longitude latitude member <span class="token comment" spellcheck="true">#增加地理位置信息</span>geoadd cities<span class="token punctuation">:</span>locations <span class="token number">116.28</span> <span class="token number">39.55</span> beijing <span class="token comment" spellcheck="true">#把北京地理信息天津到cities:locations中</span>geoadd cities<span class="token punctuation">:</span>locations <span class="token number">117.12</span> <span class="token number">39.08</span> tianjingeoadd cities<span class="token punctuation">:</span>locations <span class="token number">114.29</span> <span class="token number">38.02</span> shijiazhuanggeoadd cities<span class="token punctuation">:</span>locations <span class="token number">118.01</span> <span class="token number">39.38</span> tangshangeoadd cities<span class="token punctuation">:</span>locations <span class="token number">115.29</span> <span class="token number">38.51</span> baodinggeopos key member <span class="token comment" spellcheck="true">#获取地理位置信息</span>geopos cities<span class="token punctuation">:</span>locations beijing <span class="token comment" spellcheck="true">#获取北京地理信息</span>geodist key member1 member2 <span class="token punctuation">[</span>unit<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取两个地理位置的距离 unit:m(米) km(千米) mi(英里) ft(尺)</span>geodist cities<span class="token punctuation">:</span>locations beijing tianjin km <span class="token comment" spellcheck="true">#北京到天津的距离，89公里</span>georadius key logitude latitude radiusm<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>withcoord<span class="token punctuation">]</span> <span class="token punctuation">[</span>withdist<span class="token punctuation">]</span> <span class="token punctuation">[</span>withhash<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> <span class="token punctuation">[</span>asc<span class="token operator">|</span>desc<span class="token punctuation">]</span> <span class="token punctuation">[</span>store key<span class="token punctuation">]</span><span class="token punctuation">[</span>storedist key<span class="token punctuation">]</span>georadiusbymember key member radiusm<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>withcoord<span class="token punctuation">]</span> <span class="token punctuation">[</span>withdist<span class="token punctuation">]</span> <span class="token punctuation">[</span>withhash<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> <span class="token punctuation">[</span>asc<span class="token operator">|</span>desc<span class="token punctuation">]</span> <span class="token punctuation">[</span>store key<span class="token punctuation">]</span><span class="token punctuation">[</span>storedist key<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取指定位置范围内的地理位置信息集合</span><span class="token triple-quoted-string string">'''withcoord:返回结果中包含经纬度withdist：返回结果中包含距离中心节点位置withhash：返回解雇中包含geohashCOUNT count：指定返回结果的数量asc|desc：返回结果按照距离中心店的距离做升序/降序排列store key：将返回结果的地理位置信息保存到指定键storedist key：将返回结果距离中心点的距离保存到指定键'''</span>georadiusbymember cities<span class="token punctuation">:</span>locations beijing <span class="token number">150</span> km<span class="token triple-quoted-string string">'''1) "beijing"2) "tianjin"3) "tangshan"4) "baoding"'''</span></code></pre><h2 id="六、发布订阅（基本不用）"><a href="#六、发布订阅（基本不用）" class="headerlink" title="六、发布订阅（基本不用）"></a>六、发布订阅（基本不用）</h2><p>发布者发布了消息，所有订阅者都能接受到，本质是生产者消费者模型</p><pre class=" language-python"><code class="language-python">publish channel message <span class="token comment" spellcheck="true">#发布命令</span>publish souhu<span class="token punctuation">:</span>tv <span class="token string">"hello world"</span> <span class="token comment" spellcheck="true">#在souhu:tv频道发布一条hello world  返回订阅者个数</span>subscribe <span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#订阅命令，可以订阅一个或多个</span>subscribe souhu<span class="token punctuation">:</span>tv  <span class="token comment" spellcheck="true">#订阅sohu:tv频道</span>unsubscribe <span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#取消订阅一个或多个频道</span>unsubscribe sohu<span class="token punctuation">:</span>tv  <span class="token comment" spellcheck="true">#取消订阅sohu:tv频道</span>psubscribe <span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#订阅模式匹配</span>psubscribe c<span class="token operator">*</span>  <span class="token comment" spellcheck="true">#订阅以c开头的频道</span>unpsubscribe <span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#按模式退订指定频道</span>pubsub channels <span class="token comment" spellcheck="true">#列出至少有一个订阅者的频道,列出活跃的频道</span>pubsub numsub <span class="token punctuation">[</span>channel<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#列出给定频道的订阅者数量</span>pubsub numpat <span class="token comment" spellcheck="true">#列出被订阅模式的数量</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> redis高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy框架</title>
      <link href="/task/2020/04/22/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
      <url>/task/2020/04/22/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1 pip3 install scrapy（mac，linux）</span><span class="token comment" spellcheck="true">#2 windows上（80%能成功，少部分人成功不了）</span>    <span class="token number">1</span>、pip3 install wheel <span class="token comment" spellcheck="true">#安装后，便支持通过wheel文件安装软件，wheel文件官网：https://www.lfd.uci.edu/~gohlke/pythonlibs</span>    <span class="token number">3</span>、pip3 install lxml    <span class="token number">4</span>、pip3 install pyopenssl    <span class="token number">5</span>、下载并安装pywin32：https<span class="token punctuation">:</span><span class="token operator">//</span>sourceforge<span class="token punctuation">.</span>net<span class="token operator">/</span>projects<span class="token operator">/</span>pywin32<span class="token operator">/</span>files<span class="token operator">/</span>pywin32<span class="token operator">/</span>    <span class="token number">6</span>、下载twisted的wheel文件：http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>lfd<span class="token punctuation">.</span>uci<span class="token punctuation">.</span>edu<span class="token operator">/</span><span class="token operator">~</span>gohlke<span class="token operator">/</span>pythonlibs<span class="token operator">/</span><span class="token comment" spellcheck="true">#twisted</span>    <span class="token number">7</span>、执行pip3 install 下载目录\Twisted<span class="token number">-17.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>cp36<span class="token operator">-</span>cp36m<span class="token operator">-</span>win_amd64<span class="token punctuation">.</span>whl    <span class="token number">8</span>、pip3 install scrapy<span class="token comment" spellcheck="true"># 3 就有scrapy命令</span>    <span class="token operator">-</span>D<span class="token punctuation">:</span>\Python36\Scripts\scrapy<span class="token punctuation">.</span>exe  用于创建项目</code></pre><h2 id="二、框架简介"><a href="#二、框架简介" class="headerlink" title="二、框架简介"></a>二、框架简介</h2><p><strong>执行流程图</strong></p><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/1036857-20171109221422778-1731419400.png" alt="1036857-20171109221422778-1731419400" loading="lazy"></p><ol><li><p>引擎(EGINE)</p><p>引擎负责控制系统所有组件之间的数据流，并在某些动作发生时触发事件。有关详细信息，请参见上面的数据流部分。</p><p>（scrapy的核心，用于转发数据或请求，如果是数据，转到管道去保存，如果是请求，转到调度器，如果来的是响应对象，转给爬虫）</p></li><li><p><strong>调度器(SCHEDULER)</strong><br>用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL的优先级队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</p><p>（用于处理要爬取的url的顺序，深度优先/表示一条路走到黑，还是广度优先/表示同一层先爬下来，，去重）</p></li><li><p><strong>下载器(DOWLOADER)</strong><br>用于下载网页内容, 并将网页内容返回给EGINE，下载器是建立在twisted这个高效的异步模型上的</p><p>（向外要爬取的地址发送请求）</p></li><li><p><strong>爬虫(SPIDERS)</strong><br>SPIDERS是开发人员自定义的类，用来解析responses，并且提取items，或者发送新的请求</p></li><li><p><strong>项目管道(ITEM PIPLINES)</strong><br>在items被提取后负责处理它们，主要包括清理、验证、持久化（比如存到数据库）等操作</p><p>（需要在settings中配置）</p></li><li><p>下载器中间件(Downloader Middlewares)</p><p>位于Scrapy引擎和下载器之间，主要用来处理从EGINE传到DOWLOADER的请求request，已经从DOWNLOADER传到EGINE的响应response，你可用该中间件做以下几件事</p><ol><li>process a request just before it is sent to the Downloader (i.e. right before Scrapy sends the request to the website);</li><li>change received response before passing it to a spider;</li><li>send a new Request instead of passing received response to a spider;</li><li>pass response to a spider without fetching a web page;</li><li>silently drop some requests.</li></ol></li><li><p><strong>爬虫中间件(Spider Middlewares)</strong><br>位于EGINE和SPIDERS之间，主要工作是处理SPIDERS的输入（即responses）和输出（即requests）</p></li></ol><p>执行顺序：爬虫把要爬的url转发给引擎，引擎再转发给调度器，由调度器决定顺序，返回给引擎，引擎再把要爬取的url通过下载中间件（用于加个头，cookie啥的）向需要爬取的服务端发送请求，响应回来之后也通过下载中间件给引擎，引擎判断是响应数据之后，转发给爬虫，爬虫对数据进行处理，返回一个新的需要爬的地址（就继续上面的流程）或者需要保存的数据，数据部分由引擎转发给管道，保存数据</p><p><strong>目录介绍</strong></p><pre class=" language-python"><code class="language-python">    firstscrapy  <span class="token comment" spellcheck="true"># 项目名字</span>        firstscrapy <span class="token comment" spellcheck="true"># 包</span>            <span class="token operator">-</span>spiders <span class="token comment" spellcheck="true"># 所有的爬虫文件放在里面</span>                <span class="token operator">-</span>baidu<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 一个个的爬虫（以后基本上都在这写东西）</span>                <span class="token operator">-</span>chouti<span class="token punctuation">.</span>py            <span class="token operator">-</span>middlewares<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 中间件（爬虫，下载中间件都写在这）</span>            <span class="token operator">-</span>pipelines<span class="token punctuation">.</span>py   <span class="token comment" spellcheck="true"># 持久化相关写在这（items.py中类的对象）</span>            <span class="token operator">-</span>main<span class="token punctuation">.</span>py        <span class="token comment" spellcheck="true"># 自己加的，执行爬虫</span>            <span class="token operator">-</span>items<span class="token punctuation">.</span>py       <span class="token comment" spellcheck="true"># 一个一个的类，</span>            <span class="token operator">-</span>settings<span class="token punctuation">.</span>py    <span class="token comment" spellcheck="true"># 配置文件</span>        scrapy<span class="token punctuation">.</span>cfg          <span class="token comment" spellcheck="true"># 上线相关</span></code></pre><p><strong>settings参数介绍</strong></p><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 默认情况，scrapy会去遵循爬虫协议<span class="token number">2</span> 修改配置文件参数，强行爬取，不遵循协议    <span class="token operator">-</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token number">3</span> USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'</span><span class="token number">4</span> LOG_LEVEL<span class="token operator">=</span><span class="token string">'ERROR'</span> <span class="token comment" spellcheck="true"># 运行的时候就不会把其他日志展示出来</span></code></pre><h2 id="三、基本使用"><a href="#三、基本使用" class="headerlink" title="三、基本使用"></a>三、基本使用</h2><h3 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1 基本命令"></a>1 基本命令</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建项目</span>scrapy startproject firstscrapy<span class="token comment" spellcheck="true"># 创建爬虫</span>scrapy genspider 爬虫名 爬虫地址scrapy genspider chouti dig<span class="token punctuation">.</span>chouti<span class="token punctuation">.</span>com<span class="token comment" spellcheck="true"># 一执行就会在spider文件夹下创建出一个py文件</span><span class="token comment" spellcheck="true"># 运行爬虫</span>scrapy crawl chouti   <span class="token comment" spellcheck="true"># 带运行日志</span>scrapy crawl chouti <span class="token operator">-</span><span class="token operator">-</span>nolog  <span class="token comment" spellcheck="true"># 不带日志</span><span class="token comment" spellcheck="true"># 支持右键执行爬虫</span><span class="token comment" spellcheck="true"># 在项目路径下新建一个main.py</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>cmdline <span class="token keyword">import</span> executeexecute<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'scrapy'</span><span class="token punctuation">,</span><span class="token string">'crawl'</span><span class="token punctuation">,</span><span class="token string">'chouti'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2-数据解析"><a href="#2-数据解析" class="headerlink" title="2 数据解析"></a>2 数据解析</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#xpath：</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@class,"link-title")]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取文本</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@class,"link-title")]/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#取属性</span><span class="token comment" spellcheck="true">#css</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取文本</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::attr(href)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取属性</span></code></pre><h3 id="3-数据持久化"><a href="#3-数据持久化" class="headerlink" title="3 数据持久化"></a>3 数据持久化</h3><p><strong>items.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 持久化匹配的字段</span><span class="token keyword">class</span> <span class="token class-name">ChoutiItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    laiyuan <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>spiders/chouti.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ChoutiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'chouti'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dig.chouti.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 返回要爬取的页面，或者返回要保存的数据</span>        <span class="token comment" spellcheck="true"># 下面两者效果相同</span>        <span class="token keyword">from</span> pachong<span class="token punctuation">.</span>items <span class="token keyword">import</span> ChoutiItem        item <span class="token operator">=</span> ChoutiItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-con .link-item'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># div_list = response.xpath('//div[contains(@class,"link-item")]')</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> div<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            laiyuan <span class="token operator">=</span> div<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-from::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># title = div.xpath('//a[contains(@class,"link-title")]/text()').extract()</span>            <span class="token keyword">if</span> <span class="token operator">not</span> laiyuan<span class="token punctuation">:</span>                laiyuan <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>laiyuan<span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title            item<span class="token punctuation">[</span><span class="token string">'laiyuan'</span><span class="token punctuation">]</span> <span class="token operator">=</span> laiyuan            <span class="token keyword">yield</span> item</code></pre><p><strong>pipelines.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">PachongPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>                 database<span class="token operator">=</span><span class="token string">'pachong'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">'insert into chouti (title,laiyuan)values(%s,%s)'</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token string">'laiyuan'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>settings.py</strong></p><pre class=" language-python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>   <span class="token string">'pachong.pipelines.PachongPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 配置优先级</span></code></pre><h2 id="四、scrapy高级"><a href="#四、scrapy高级" class="headerlink" title="四、scrapy高级"></a>四、scrapy高级</h2><h3 id="1-提升scrapy爬取数据的效率"><a href="#1-提升scrapy爬取数据的效率" class="headerlink" title="1 提升scrapy爬取数据的效率"></a>1 提升scrapy爬取数据的效率</h3><pre class=" language-python"><code class="language-python"><span class="token operator">-</span> 在配置文件中进行相关的配置即可<span class="token punctuation">:</span><span class="token punctuation">(</span>默认还有一套setting<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1 增加并发：</span>默认scrapy开启的并发线程为<span class="token number">32</span>个，可以适当进行增加。在settings配置文件中修改CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token number">100</span>值为<span class="token number">100</span><span class="token punctuation">,</span>并发设置成了为<span class="token number">100</span>。<span class="token comment" spellcheck="true">#2 降低日志级别：</span>在运行scrapy时，会有大量日志信息的输出，为了减少CPU的使用率。可以设置log输出信息为INFO或者ERROR即可。在配置文件中编写：LOG_LEVEL <span class="token operator">=</span> ‘INFO’<span class="token comment" spellcheck="true"># 3 禁止cookie：</span>如果不是真的需要cookie，则在scrapy爬取数据时可以禁止cookie从而减少CPU的使用率，提升爬取效率。在配置文件中编写：COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 4禁止重试：</span>对失败的HTTP进行重新请求（重试）会减慢爬取速度，因此可以禁止重试。在配置文件中编写：RETRY_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 5 减少下载超时：</span>如果对一个非常慢的链接进行爬取，减少下载超时可以能让卡住的链接快速被放弃，从而提升效率。在配置文件中进行编写：DOWNLOAD_TIMEOUT <span class="token operator">=</span> <span class="token number">10</span> 超时时间为10s</code></pre><h3 id="2-scrapy的中间件（下载中间件）"><a href="#2-scrapy的中间件（下载中间件）" class="headerlink" title="2 scrapy的中间件（下载中间件）"></a>2 scrapy的中间件（下载中间件）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 都写在middlewares.py</span><span class="token comment" spellcheck="true"># 2 爬虫中间件</span><span class="token comment" spellcheck="true"># 3 下载中间件</span><span class="token comment" spellcheck="true"># 4 要生效，一定要配置，配置文件</span><span class="token comment" spellcheck="true"># 下载中间件</span><span class="token operator">-</span>process_request：返回不同的对象，后续处理不同（加代理<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>）          <span class="token comment" spellcheck="true"># 1 更换请求头</span>        <span class="token comment" spellcheck="true"># print(type(request.headers))</span>        <span class="token comment" spellcheck="true"># print(request.headers)</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># from scrapy.http.headers import Headers</span>        <span class="token comment" spellcheck="true"># request.headers['User-Agent']=''</span>        <span class="token comment" spellcheck="true"># 2 加cookie ---cookie池</span>        <span class="token comment" spellcheck="true"># 假设你你已经搭建好cookie 池了，</span>        <span class="token comment" spellcheck="true"># print('00000--',request.cookies)</span>        <span class="token comment" spellcheck="true"># request.cookies=&amp;#123;'username':'asdfasdf'&amp;#125;</span>        <span class="token comment" spellcheck="true"># 3 加代理</span>        <span class="token comment" spellcheck="true"># print(request.meta)</span>        <span class="token comment" spellcheck="true"># request.meta['download_timeout'] = 20</span>        <span class="token comment" spellcheck="true"># request.meta["proxy"] = 'http://27.188.62.3:8060'</span><span class="token operator">-</span>process_response：返回不同的对象，后续处理不同<span class="token operator">-</span> process_exception<span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 不允许直接改url</span>        <span class="token comment" spellcheck="true"># request.url='https://www.baidu.com'</span>        <span class="token keyword">from</span> scrapy <span class="token keyword">import</span> Request        request<span class="token operator">=</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>callback<span class="token operator">=</span>spider<span class="token punctuation">.</span>parser<span class="token punctuation">)</span>        <span class="token keyword">return</span> request</code></pre><h3 id="3-selenium在scrapy中的使用流程"><a href="#3-selenium在scrapy中的使用流程" class="headerlink" title="3 selenium在scrapy中的使用流程"></a>3 selenium在scrapy中的使用流程</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 当前爬虫用的selenium是同一个</span><span class="token comment" spellcheck="true"># 1 在爬虫中初始化webdriver对象</span>    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    <span class="token keyword">class</span> <span class="token class-name">CnblogSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">'cnblog'</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> bro<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'../chromedriver.exe'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 在中间件中使用（process_request）</span>spider<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://dig.chouti.com/'</span><span class="token punctuation">)</span>   response<span class="token operator">=</span>HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://dig.chouti.com/'</span><span class="token punctuation">,</span>body<span class="token operator">=</span>spider<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>page_source<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>request<span class="token operator">=</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token comment" spellcheck="true"># 3 在爬虫中关闭</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我结束了"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-分布式爬虫（scrapy-redis）"><a href="#4-分布式爬虫（scrapy-redis）" class="headerlink" title="4 分布式爬虫（scrapy-redis）"></a>4 分布式爬虫（scrapy-redis）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 pip3 install scrapy-redis</span><span class="token comment" spellcheck="true"># 2 原来继承Spider，现在继承RedisSpider</span><span class="token comment" spellcheck="true"># 3 不能写start_urls = ['https:/www.cnblogs.com/']</span><span class="token comment" spellcheck="true"># 4 需要写redis_key = 'myspider:start_urls'</span><span class="token comment" spellcheck="true"># 5 setting中配置：</span><span class="token comment" spellcheck="true"># redis的连接</span>REDIS_HOST <span class="token operator">=</span> <span class="token string">'localhost'</span>                            <span class="token comment" spellcheck="true"># 主机名</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>                                   <span class="token comment" spellcheck="true"># 端口</span>    <span class="token comment" spellcheck="true"># 使用scrapy-redis的去重</span>DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">"scrapy_redis.dupefilter.RFPDupeFilter"</span><span class="token comment" spellcheck="true"># 使用scrapy-redis的Scheduler</span><span class="token comment" spellcheck="true"># 分布式爬虫的配置</span>SCHEDULER <span class="token operator">=</span> <span class="token string">"scrapy_redis.scheduler.Scheduler"</span><span class="token comment" spellcheck="true"># 持久化的可以配置，也可以不配置</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>   <span class="token string">'scrapy_redis.pipelines.RedisPipeline'</span><span class="token punctuation">:</span> <span class="token number">299</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 9现在要让爬虫运行起来，需要去redis中以myspider:start_urls为key，插入一个起始地址lpush myspider:start_urls https://www.cnblogs.com/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python框架 </tag>
            
            <tag> 爬虫高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化，主从，哨兵，集群</title>
      <link href="/task/2020/04/21/Redis%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%8C%E4%B8%BB%E4%BB%8E%EF%BC%8C%E5%93%A8%E5%85%B5%EF%BC%8C%E9%9B%86%E7%BE%A4/"/>
      <url>/task/2020/04/21/Redis%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%8C%E4%B8%BB%E4%BB%8E%EF%BC%8C%E5%93%A8%E5%85%B5%EF%BC%8C%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、持久化"><a href="#一、持久化" class="headerlink" title="一、持久化"></a>一、持久化</h2><p>持久化表示把数据存储到硬盘的过程</p><p>持久化的两种方式</p><ul><li>快照：某事某刻数据库的完整备份 redis的RDB</li><li>写日志：任何操作都记录下来，要恢复数据就重新走一遍流程即可 redis的AOF</li></ul><h3 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1 RDB"></a>1 RDB</h3><p>RDB的三种触发机制</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''save(同步)1 客户端执行save命令----》redis服务端----》同步创建RDB二进制文件2 会造成redis的阻塞（数据量非常大的时候）3 文件策略：如果老的RDB存在，会替换老的4 复杂度 o(n)'''</span><span class="token triple-quoted-string string">'''bgsave(异步，Backgroud saving started)1 客户端执行save命令----》redis服务端----》异步创建RDB二进制文件（fork函数生成一个子进程（fork会阻塞reids），执行createRDB，执行成功，返回给reids消息）2 此时访问redis，会正常响应客户端3 文件策略：跟save相同，如果老的RDB存在，会替换老的4 复杂度 o(n)'''</span><span class="token triple-quoted-string string">'''自动（通过配置）配置   seconds   changessave   900        1save   300        10save   60         10000如果60s中改变了1w条数据，自动生成rdb如果300s中改变了10条数据，自动生成rdb如果900s中改变了1条数据，自动生成rdb以上三条符合任意一条，就自动生成rdb，内部使用bgsave'''</span><span class="token comment" spellcheck="true">#配置：</span>save <span class="token number">900</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#配置一条</span>save <span class="token number">300</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">#配置一条</span>save <span class="token number">60</span> <span class="token number">10000</span> <span class="token comment" spellcheck="true">#配置一条</span>dbfilename dump<span class="token punctuation">.</span>rdb  <span class="token comment" spellcheck="true">#rdb文件的名字，默认为dump.rdb</span>dir <span class="token punctuation">.</span><span class="token operator">/</span> <span class="token comment" spellcheck="true">#rdb文件存在当前目录</span>stop<span class="token operator">-</span>writes<span class="token operator">-</span>on<span class="token operator">-</span>bgsave<span class="token operator">-</span>error yes <span class="token comment" spellcheck="true">#如果bgsave出现错误，是否停止写入，默认为yes</span>rdbcompression yes <span class="token comment" spellcheck="true">#采用压缩格式</span>rdbchecksum yes <span class="token comment" spellcheck="true">#是否对rdb文件进行校验和检验</span><span class="token comment" spellcheck="true">#最佳配置</span>save <span class="token number">900</span> <span class="token number">1</span> save <span class="token number">300</span> <span class="token number">10</span> save <span class="token number">60</span> <span class="token number">10000</span> dbfilename dump<span class="token operator">-</span>$<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;port&amp;#125;.rdb  #以端口号作为文件名，可能一台机器上很多reids，不会乱</span>dir <span class="token operator">/</span>bigdiskpath <span class="token comment" spellcheck="true">#保存路径放到一个大硬盘位置目录</span>stop<span class="token operator">-</span>writes<span class="token operator">-</span>on<span class="token operator">-</span>bgsave<span class="token operator">-</span>error yes <span class="token comment" spellcheck="true">#出现错误停止</span>rdbcompression yes <span class="token comment" spellcheck="true">#压缩</span>rdbchecksum yes <span class="token comment" spellcheck="true">#校验</span></code></pre><p><strong>触发机制</strong></p><pre><code>1 全量复制 #没有执行save和bgsave没有添加rdb策略，还会生成rdb文件，如果开启主从复制，主会自动生成rdb2 debug reload #debug级别的重启，不会将内存中的数据清空3 shutdown save#关闭会出发rdb的生成</code></pre><p><strong>存在的问题</strong>：耗时，耗性能，不可控，数据可能会丢失</p><h3 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2 AOF"></a>2 AOF</h3><p>原理：客户端每写入一条命令就会记录一条日志，放到日志文件中，如果出现宕机完全可以恢复</p><p><strong>AOF三种保存策略</strong></p><p>日志不是直接写到硬盘上，而是先放在缓冲区，缓冲区根据一些策略，写到硬盘上</p><ul><li><p>always：redis–》写命令刷新的缓冲区—》每条命令fsync到硬盘—》AOF文件</p></li><li><p>everysec（默认值）：redis——》写命令刷新的缓冲区—》每秒把缓冲区fsync到硬盘–》AOF文件</p></li><li><p>no:redis——》写命令刷新的缓冲区—》操作系统决定，缓冲区fsync到硬盘–》AOF文件</p></li></ul><table><thead><tr><th>命令</th><th>always</th><th>everysec</th><th>no</th></tr></thead><tbody><tr><td>优点</td><td>不丢失数据</td><td>每秒一次fsync，丢失1秒数据</td><td>不用管</td></tr><tr><td>缺点</td><td>IO开销大，一般的sata盘只有几百TPS</td><td>丢1秒数据</td><td>不可控</td></tr></tbody></table><h4 id="3-1-AOF重写"><a href="#3-1-AOF重写" class="headerlink" title="3.1 AOF重写"></a>3.1 AOF重写</h4><p>是aof中的一个模式，日志文件越堆越多就会存在很多没用的命令</p><p>比如给hello赋值了10次，实际上只有第10次有意义，所以前面9次都可以删掉，或者是rpush a，rpush b ，rpush c，可以写成rpush a，b，c</p><p>本质就是把过期的，无用的，重复的，可以优化的命令，来优化</p><p>这样可以减少磁盘占用量，加速恢复速度</p><p><strong>实现方式</strong></p><p>bgrewriteaof：</p><p>客户端向服务端发送bgrewriteaof命令，服务端会起一个fork进程，完成AOF重写</p><p><strong>配置方式</strong></p><pre class=" language-python"><code class="language-python">appendonly yes <span class="token comment" spellcheck="true">#将该选项设置为yes，打开</span>appendfilename <span class="token string">"appendonly-$&amp;#123;port&amp;#125;.aof"</span> #文件保存的名字appendfsync everysec <span class="token comment" spellcheck="true">#采用第二种策略</span>dir <span class="token operator">/</span>bigdiskpath <span class="token comment" spellcheck="true">#存放的路径</span>no<span class="token operator">-</span>appendfsync<span class="token operator">-</span>on<span class="token operator">-</span>rewrite yes <span class="token comment" spellcheck="true">#在aof重写的时候，是否要做aof的append操作，因为aof重写消耗性能，磁盘消耗，正常aof写磁盘有一定的冲突，这段期间的数据，允许丢失</span></code></pre><h2 id="二、主从复制"><a href="#二、主从复制" class="headerlink" title="二、主从复制"></a>二、主从复制</h2><p>QPS达到瓶颈就可以做主从复制</p><ul><li><p>一主一从或者一主多从</p></li><li><p>做读写分离，数据副本</p></li><li><p>扩展操作数据的新能</p></li><li><p>一个master（主）可以有多个slave（从）</p></li><li><p>一个从智能属于一个主</p></li><li><p>数据流向是单向的，从主到从</p></li></ul><p><strong>原理</strong></p><pre><code>1 从库通过 slaveof ip 端口连接主库，并发送一个SYNC请求给主库2 主库接受到SYNC，会立即出发bgsave（持久化），后台保存RDB，发送给从库3 从库接收到RDB文件会执行（就是把数据读出来）4 此时主从复制就能正常工作了，主库会将新的操作以命令的形式陆续发给从库5 所有的复制信息都可以从info中查到6 如果发生主从关系断开时,从库数据没有任何损坏,在下次重连之后,从库发送PSYNC给主库7 主库只会将从库缺失部分的数据同步给从库应用,达到快速恢复主从的目的</code></pre><h3 id="1-辅助配置"><a href="#1-辅助配置" class="headerlink" title="1 辅助配置"></a>1 辅助配置</h3><pre class=" language-python"><code class="language-python">min<span class="token operator">-</span>slaves<span class="token operator">-</span>to<span class="token operator">-</span>write <span class="token number">1</span>min<span class="token operator">-</span>slaves<span class="token operator">-</span>max<span class="token operator">-</span>lag <span class="token number">3</span><span class="token comment" spellcheck="true">#那么在从服务器的数量少于1个，或者三个从服务器的延迟（lag）值都大于或等于3秒时，主服务器将拒绝执行写命令</span></code></pre><h3 id="2-复制配置"><a href="#2-复制配置" class="headerlink" title="2 复制配置"></a>2 复制配置</h3><h4 id="2-1-slave命令"><a href="#2-1-slave命令" class="headerlink" title="2.1 slave命令"></a>2.1 slave命令</h4><pre class=" language-python"><code class="language-python"><span class="token number">6380</span>是从，<span class="token number">6379</span>是主在<span class="token number">6380</span>上执行（去从库配置，配置主库）slaveof <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token comment" spellcheck="true">#异步</span>slaveof no one <span class="token comment" spellcheck="true">#取消复制，不会把之前的数据清除</span></code></pre><h4 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h4><pre class=" language-python"><code class="language-python">slaveof ip port <span class="token comment" spellcheck="true">#配置从节点ip和端口</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes <span class="token comment" spellcheck="true">#从节点只读，因为可读可写，数据会乱</span><span class="token triple-quoted-string string">'''mkdir -p redis1/conf redis1/data redis2/conf redis2/data redis3/conf redis3/datavim redis.confdaemonize nopidfile redis.pidbind 0.0.0.0protected-mode noport 6379timeout 0logfile redis.logdbfilename dump.rdbdir /dataslaveof 10.0.0.101 6379slave-read-only yescp redis.conf /home/redis2/conf/docker run -p 6379:6379 --name redis_6379 -v /home/redis1/conf/redis.conf:/etc/redis/redis.conf -v /home/redis1/data:/data -d redis redis-server /etc/redis/redis.confdocker run -p 6378:6379 --name redis_6378 -v /home/redis2/conf/redis.conf:/etc/redis/redis.conf -v /home/redis2/data:/data -d redis redis-server /etc/redis/redis.confdocker run -p 6377:6379 --name redis_6377 -v /home/redis3/conf/redis.conf:/etc/redis/redis.conf -v /home/redis3/data:/data -d redis redis-server /etc/redis/redis.confinfo replication'''</span></code></pre><h4 id="2-3-复制常见的问题"><a href="#2-3-复制常见的问题" class="headerlink" title="2.3 复制常见的问题"></a>2.3 复制常见的问题</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 读写分离读流量分摊到从节点可能遇到问题：复制数据延迟，读到过期数据，从节点故障<span class="token number">2</span> 主从配置不一致maxmemory不一致：丢失数据数据结构优化参数：主节点做了优化，从节点没有设置优化，会出现一些问题<span class="token number">3</span> 规避全量复制第一次全量复制，不可避免：小主节点，低峰<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>节点运行id不匹配：主节点重启<span class="token punctuation">(</span>运行id变化<span class="token punctuation">)</span>复制挤压缓冲区不足：增大复制缓冲区大小，rel_backlog_size<span class="token number">4</span> 规避复制风暴单主节点复制风暴，主节点重启，所有从节点复制</code></pre><h2 id="三、redis-Sentinel（哨兵）"><a href="#三、redis-Sentinel（哨兵）" class="headerlink" title="三、redis-Sentinel（哨兵）"></a>三、redis-Sentinel（哨兵）</h2><p>哨兵就是为了实现主从复制的高可用</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#主从复制存在的问题：</span><span class="token comment" spellcheck="true">#1 主从复制，主节点发生故障，需要做故障转移，可以手动转移：让其中一个slave变成master</span><span class="token comment" spellcheck="true">#2 主从复制，只能主写数据，所以写能力和存储能力有限</span></code></pre><p><strong>架构说明</strong></p><p>1 多个sentinel发现并确认master有问题</p><p>2 选举触一个sentinel作为领导</p><p>3 选取一个slave作为新的master</p><p>4 通知其余slave成为新的master的slave</p><p>5 通知客户端主从变化</p><p>6 等待老的master复活成为新master的slave</p><h3 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1 安装配置"></a>1 安装配置</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#配置开启sentinel监控主节点</span>mkdir <span class="token operator">-</span>p redis4<span class="token operator">/</span>conf redis4<span class="token operator">/</span>data redis5<span class="token operator">/</span>conf redis5<span class="token operator">/</span>data redis6<span class="token operator">/</span>data redis6<span class="token operator">/</span>confvi sentinel<span class="token punctuation">.</span>confport <span class="token number">26379</span>daemonize yesdir dataprotected<span class="token operator">-</span>mode nobind <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span>logfile <span class="token string">"redis_sentinel.log"</span>sentinel monitor mymaster <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token number">2</span>sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds mymaster <span class="token number">30000</span>sentinel parallel<span class="token operator">-</span>syncs mymaster <span class="token number">1</span>sentinel failover<span class="token operator">-</span>timeout mymaster <span class="token number">180000</span>docker run <span class="token operator">-</span>p <span class="token number">26379</span><span class="token punctuation">:</span><span class="token number">26379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_26379 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis4<span class="token operator">/</span>conf<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis4<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>d redis redis<span class="token operator">-</span>sentinel <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>confdocker run <span class="token operator">-</span>p <span class="token number">26378</span><span class="token punctuation">:</span><span class="token number">26379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_26378 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis5<span class="token operator">/</span>conf<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis5<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>d redis redis<span class="token operator">-</span>sentinel <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>confdocker run <span class="token operator">-</span>p <span class="token number">26377</span><span class="token punctuation">:</span><span class="token number">26379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_26377 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis6<span class="token operator">/</span>conf<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis6<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>d redis redis<span class="token operator">-</span>sentinel <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>confredis<span class="token operator">-</span>sentinel sentinel<span class="token punctuation">.</span>confinfo配置会重写，自动发现slave</code></pre><pre class=" language-python"><code class="language-python">sentinel monitor mymaster <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token number">2</span>sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds mymaster <span class="token number">30000</span>sentinel parallel<span class="token operator">-</span>syncs mymaster <span class="token number">1</span>sentinel failover<span class="token operator">-</span>timeout mymaster <span class="token number">180000</span>sentinel monitor <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>ip<span class="token operator">></span> <span class="token operator">&lt;</span>redis<span class="token operator">-</span>port<span class="token operator">></span> <span class="token operator">&lt;</span>quorum<span class="token operator">></span>告诉sentinel去监听地址为ip<span class="token punctuation">:</span>port的一个master，这里的master<span class="token operator">-</span>name可以自定义，quorum是一个数字，指明当有多少个sentinel认为一个master失效时，master才算真正失效sentinel auth<span class="token operator">-</span><span class="token keyword">pass</span> <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>password<span class="token operator">></span>设置连接master和slave时的密码，注意的是sentinel不能分别为master和slave设置不同的密码，因此master和slave的密码应该设置相同。sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>milliseconds<span class="token operator">></span> 这个配置项指定了需要多少失效时间，一个master才会被这个sentinel主观地认为是不可用的。 单位是毫秒，默认为<span class="token number">30</span>秒sentinel parallel<span class="token operator">-</span>syncs <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>numslaves<span class="token operator">></span> 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 <span class="token number">1</span> 来保证每次只有一个slave 处于不能处理命令请求的状态。sentinel failover<span class="token operator">-</span>timeout <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>milliseconds<span class="token operator">></span>failover<span class="token operator">-</span>timeout 可以用在以下这些方面：     <span class="token number">1</span><span class="token punctuation">.</span> 同一个sentinel对同一个master两次failover之间的间隔时间。   <span class="token number">2</span><span class="token punctuation">.</span> 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。    <span class="token number">3</span><span class="token punctuation">.</span>当想要取消一个正在进行的failover所需要的时间。    <span class="token number">4</span><span class="token punctuation">.</span>当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel<span class="token operator">-</span>syncs所配置的规则来了。</code></pre><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 搭一个一主两从<span class="token comment" spellcheck="true">#创建三个配置文件：</span><span class="token comment" spellcheck="true">#第一个是主配置文件</span>daemonize yespidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis<span class="token punctuation">.</span>pidport <span class="token number">6379</span>dir <span class="token string">"/opt/soft/redis/data"</span>logfile “<span class="token number">6379.</span>log”<span class="token comment" spellcheck="true">#第二个是从配置文件</span>daemonize yespidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis2<span class="token punctuation">.</span>pidport <span class="token number">6378</span>dir <span class="token string">"/opt/soft/redis/data2"</span>logfile “<span class="token number">6378.</span>log”slaveof <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes<span class="token comment" spellcheck="true">#第三个是从配置文件</span>daemonize yespidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis3<span class="token punctuation">.</span>pidport <span class="token number">6377</span>dir <span class="token string">"/opt/soft/redis/data3"</span>logfile “<span class="token number">6377.</span>log”slaveof <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes<span class="token comment" spellcheck="true">#把三个redis服务都启动起来</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server redis_6379<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server redis_6378<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server redis_6377<span class="token punctuation">.</span>conf<span class="token number">2</span> 搭建哨兵<span class="token comment" spellcheck="true"># sentinel.conf这个文件</span><span class="token comment" spellcheck="true"># 把哨兵也当成一个redis服务器</span>创建三个配置文件分别叫sentinel_26379<span class="token punctuation">.</span>conf sentinel_26378<span class="token punctuation">.</span>conf  sentinel_26377<span class="token punctuation">.</span>conf<span class="token comment" spellcheck="true"># 当前路径下创建 data1 data2 data3 个文件夹</span><span class="token comment" spellcheck="true">#内容如下(需要修改端口，文件地址日志文件名字)</span>port <span class="token number">26379</span>daemonize yesdir <span class="token punctuation">.</span><span class="token operator">/</span>data3protected<span class="token operator">-</span>mode nobind <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span>logfile <span class="token string">"redis_sentinel3.log"</span>sentinel monitor mymaster <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token number">2</span>sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds mymaster <span class="token number">30000</span>sentinel parallel<span class="token operator">-</span>syncs mymaster <span class="token number">1</span>sentinel failover<span class="token operator">-</span>timeout mymaster <span class="token number">180000</span><span class="token comment" spellcheck="true">#启动三个哨兵</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel_26379<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel_26378<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel_26377<span class="token punctuation">.</span>conf<span class="token comment" spellcheck="true"># 登陆哨兵</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>p <span class="token number">26377</span><span class="token comment" spellcheck="true"># 输入 info</span><span class="token comment" spellcheck="true"># 查看哨兵的配置文件被修改了，自动生成的</span><span class="token comment" spellcheck="true"># 主动停掉主redis 6379，哨兵会自动选择一个从库作为主库</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>p <span class="token number">6379</span>shutdown<span class="token comment" spellcheck="true">#等待原来的主库启动，该主库会变成从库</span></code></pre><h3 id="2-客户端链接"><a href="#2-客户端链接" class="headerlink" title="2 客户端链接"></a>2 客户端链接</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token keyword">from</span> redis<span class="token punctuation">.</span>sentinel <span class="token keyword">import</span> Sentinel<span class="token comment" spellcheck="true"># 连接哨兵服务器(主机名也可以用域名)</span><span class="token comment" spellcheck="true"># 10.0.0.101:26379</span>sentinel <span class="token operator">=</span> Sentinel<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'10.0.0.101'</span><span class="token punctuation">,</span> <span class="token number">26379</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">'10.0.0.101'</span><span class="token punctuation">,</span> <span class="token number">26378</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">'10.0.0.101'</span><span class="token punctuation">,</span> <span class="token number">26377</span><span class="token punctuation">)</span>             <span class="token punctuation">]</span><span class="token punctuation">,</span>                    socket_timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sentinel<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取主服务器地址</span>master <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>discover_master<span class="token punctuation">(</span><span class="token string">'mymaster'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取从服务器地址</span>slave <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>discover_slaves<span class="token punctuation">(</span><span class="token string">'mymaster'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>slave<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##### 读写分离</span><span class="token comment" spellcheck="true"># 获取主服务器进行写入</span><span class="token comment" spellcheck="true"># master = sentinel.master_for('mymaster', socket_timeout=0.5)</span><span class="token comment" spellcheck="true"># w_ret = master.set('foo', 'bar')</span><span class="token comment" spellcheck="true"># slave = sentinel.slave_for('mymaster', socket_timeout=0.5)</span><span class="token comment" spellcheck="true"># r_ret = slave.get('foo')</span><span class="token comment" spellcheck="true"># print(r_ret)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup模块的使用</title>
      <link href="/task/2020/04/21/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/task/2020/04/21/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="BeautifulSoup模块的使用"><a href="#BeautifulSoup模块的使用" class="headerlink" title="BeautifulSoup模块的使用"></a>BeautifulSoup模块的使用</h2><h4 id="1-参数介绍"><a href="#1-参数介绍" class="headerlink" title="1 参数介绍"></a>1 参数介绍</h4><pre class=" language-python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一个参数是要解析的html页面，通常是我们通过请求得到的页面数据</span><span class="token comment" spellcheck="true"># 第二个参数是解析的解析器选择</span><span class="token comment" spellcheck="true"># python内置的html.parser</span><span class="token comment" spellcheck="true"># 其他解释器：lxml（通常使用），xml，html5lib</span></code></pre><p>文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><h4 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 标签查找</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有多个只会找到第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>pres <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token comment" spellcheck="true"># 2 标签属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>attrs<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'id': 'bbb', 'class': ['boldest']&amp;#125;</span><span class="token comment" spellcheck="true"># 3 获取文本内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>string <span class="token comment" spellcheck="true"># 当p下只有文本取到，否则为None</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>strings <span class="token comment" spellcheck="true"># 获取全部文本得到一个生成器对象</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 取到标签下所有的文本内容拼接起来</span><span class="token comment" spellcheck="true"># 4 嵌套选择</span><span class="token comment" spellcheck="true"># 可以让选择更加准确</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>string<span class="token comment" spellcheck="true"># 5 子节点、子孙节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents <span class="token comment" spellcheck="true"># 获得p内所有子节点</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>b <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"boldest"</span> id<span class="token operator">=</span><span class="token string">"bbb"</span><span class="token operator">></span>The Dormouse<span class="token string">'s story&lt;/b>, '</span>\n'<span class="token punctuation">]</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children <span class="token comment" spellcheck="true"># 得到一个迭代器，包含p内所有子节点</span><span class="token triple-quoted-string string">'''子节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>'''</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>descendants <span class="token comment" spellcheck="true"># 得到一个生成器，包含p内所有子孙节点</span><span class="token triple-quoted-string string">'''子孙节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>The Dormouse's story'''</span><span class="token comment" spellcheck="true"># 6 父节点、祖节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parent <span class="token comment" spellcheck="true"># 获得p的父节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parents <span class="token comment" spellcheck="true"># 获得p的父节点，和父节点的父节点。。。的生成器</span><span class="token comment" spellcheck="true"># 7 兄弟节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_sibling <span class="token comment" spellcheck="true"># 下一个兄弟</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_previous_sibling <span class="token comment" spellcheck="true"># 上一个兄弟</span></code></pre><h4 id="3-搜索文档树"><a href="#3-搜索文档树" class="headerlink" title="3 搜索文档树"></a>3 搜索文档树</h4><h5 id="3-1-五种过滤器"><a href="#3-1-五种过滤器" class="headerlink" title="3.1 五种过滤器"></a>3.1 五种过滤器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 字符串</span><span class="token comment" spellcheck="true"># 如果有多个取第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取全部，只有一个也是放在列表中</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 正则表达式</span><span class="token comment" spellcheck="true"># 获得所有以b开头的标签：body，b</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3 列表</span><span class="token comment" spellcheck="true"># a标签，b标签都会取</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4 布尔</span><span class="token comment" spellcheck="true"># 会查找到所有标签，不包括文本节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5 自定义过滤器</span><span class="token comment" spellcheck="true"># 会把整个页面传给tag</span><span class="token keyword">def</span> <span class="token function">has_class_not_id</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>has_class_not_id<span class="token punctuation">)</span></code></pre><h5 id="3-2-find-all"><a href="#3-2-find-all" class="headerlink" title="3.2 find_all()"></a>3.2 find_all()</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># name：可以放任意类型的过滤器</span><span class="token comment" spellcheck="true"># keyword：放键值对</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>id <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^my'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有特殊参数不能通过k，v来表示</span><span class="token comment" spellcheck="true"># 比如data-foo = value</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"data-foo":"value"&amp;#125;)</span><span class="token comment" spellcheck="true"># 按类名的时候，关键字是class_</span><span class="token comment" spellcheck="true"># 查找由sister和sss类的a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'sister sss'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># limit参数</span><span class="token comment" spellcheck="true"># 找前连个a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># recursive = False 会查找tag下的直接的子节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>recursive <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h5 id="3-3-css选择器"><a href="#3-3-css选择器" class="headerlink" title="3.3 css选择器"></a>3.3 css选择器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 选择器</span><span class="token comment" spellcheck="true"># 类</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 含有sister类下的b标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># id</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token comment" spellcheck="true"># 获取内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列</title>
      <link href="/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>消息队列：是一种数据结构</p><p>生产者：把数据放入到队列中的一方</p><p>消费者：把数据从队列中取出的一方</p><h3 id="2-存在的意义"><a href="#2-存在的意义" class="headerlink" title="2 存在的意义"></a>2 存在的意义</h3><h4 id="2-1-解耦"><a href="#2-1-解耦" class="headerlink" title="2.1 解耦"></a>2.1 解耦</h4><p>场景一：</p><p>存在三个系统</p><p>a系统要给b系统发送数据，调用系统b的接口</p><p>a系统要给c系统发送数据，调用系统c的接口</p><p>如果有一天b不需要a的数据了，就需要让a注释掉掉b接口的代码</p><p>如果新增系统d要接受数据，又要增加调用系统d的代码</p><p><strong>这些调用逻辑都是一些重复的不可避免的劳动</strong></p><p>此处的a系统与bcd系统高度耦合了，因为之间的数据交互如果需要修改，或者接受数据的系统出现了问题，那么a系统的调用逻辑还要思考需不需要继续发送数据</p><p>场景二：</p><p>在上述场景加入消息队列，消息队列是生产者（a系统）与消费者（bcd系统）之间的一个数据交互中转站</p><p>a系统发布消息，bcd订阅消息，如果不需要订阅就取消订阅即可，并不需要修改发布消息的代码</p><h4 id="2-2-异步"><a href="#2-2-异步" class="headerlink" title="2.2 异步"></a>2.2 异步</h4><p>消息队列是一个异步任务，如果a系统要完成<strong>产生数据（100ms）</strong>，<strong>发送数据至系统b（300ms）</strong>，<strong>发送数据至系统c（300ms）</strong></p><p>此时a系统完成消息发送是一个同步任务，完成时间是100+300+300=700ms</p><p>如果用了消息队列，a系统只要产生消息，并发送至消息队列，由消息队列异步回调订阅过的系统接口</p><p>此时a系统完成发送消息的时间是100ms</p><h4 id="2-3-削峰-限流"><a href="#2-3-削峰-限流" class="headerlink" title="2.3 削峰/限流"></a>2.3 削峰/限流</h4><p>如果有一个商场网站出了促销活动，此时每秒的请求数是5000，一般的mysql只能处理2000个左右的并发。</p><p>此时在用户与mysql之间加入mq，它可以接受者5000个请求，但是只给mysql发送2000个。</p><p>就像一个喷水的管子，如果突然流水量过大，管子就会裂开，我们通过开关把水流量放小一点就问题不大，但是我们要知道，在这个开关后水压还是这么大，mq做到的只是限制最大量。</p><h4 id="2-4-其他应用场景"><a href="#2-4-其他应用场景" class="headerlink" title="2.4 其他应用场景"></a>2.4 其他应用场景</h4><ul><li><strong>日志处理</strong>：将大量日志存储到消息队列中（一般采用分布式消息队列kafka），解决大量日志传输的问题。其中，消息队列负责日志数据的接收，存储和转发；</li><li><strong>消息通讯</strong>：点对点通讯或聊天室通讯。</li></ul><h3 id="3-使用消息队列会有什么优缺点"><a href="#3-使用消息队列会有什么优缺点" class="headerlink" title="3 使用消息队列会有什么优缺点"></a>3 使用消息队列会有什么优缺点</h3><p>优点其实就是上文中谈到的，在特殊场景下的应用好处，解耦、异步与削峰等。</p><p><strong>系统可用性</strong>：<br> 系统因为依赖与MQ消息队列这个服务，若这个服务崩溃了，那么我们的整个系统将不可用。为此往往我们都是通过集群/分布式部署来实现MQ高可用的。</p><p>高可用：通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性</p><p><strong>系统复杂度</strong>：<br> 我们将数据写到消息队列上，就有可能会存在数据丢失的情况。以及我们如何保证消息没有被重复消费等问题。</p><p><strong>一致性问题</strong>：<br> A系统将请求写入到消息队列后就返回请求成功了，假设在多机部署的时候，系统B、C写库成功，假设D写入失败了，这种情况下就会产生数据不一致的问题。</p><p><a href="https://www.jianshu.com/p/ec7c2503c3ef">https://www.jianshu.com/p/ec7c2503c3ef</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests模块使用</title>
      <link href="/task/2020/03/21/requests%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
      <url>/task/2020/03/21/requests%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-发送请求"><a href="#1-发送请求" class="headerlink" title="1 发送请求"></a>1 发送请求</h4><pre class=" language-python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://images.cnblogs.com/cnblogs_com/xuexianqi/1749514/o_20042405405202.png'</span><span class="token punctuation">)</span></code></pre><h4 id="2-请求地址中携带数据"><a href="#2-请求地址中携带数据" class="headerlink" title="2 请求地址中携带数据"></a>2 请求地址中携带数据</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># url的编码和解码</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token punctuation">,</span>unquoteheader <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>     <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/s'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'wd':'美女'&amp;#125;)</span></code></pre><h4 id="3-请求中带cookie"><a href="#3-请求中带cookie" class="headerlink" title="3 请求中带cookie"></a>3 请求中带cookie</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一：在headers中携带</span>header <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">'cookie'</span><span class="token punctuation">:</span><span class="token string">'name=hz'</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方式二：添加cookies参数</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'hz'&amp;#125;)</span></code></pre><h4 id="4-post请求发送url和json格式数据"><a href="#4-post请求发送url和json格式数据" class="headerlink" title="4 post请求发送url和json格式数据"></a>4 post请求发送url和json格式数据</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># url格式</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'hz'&amp;#125;)</span><span class="token comment" spellcheck="true"># post请求发送json格式数据</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'hz'&amp;#125;)</span></code></pre><h4 id="5-session函数自动处理携带cookie"><a href="#5-session函数自动处理携带cookie" class="headerlink" title="5 session函数自动处理携带cookie"></a>5 session函数自动处理携带cookie</h4><pre class=" language-python"><code class="language-python">session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/login/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>r2 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/order/'</span><span class="token punctuation">)</span></code></pre><h4 id="6-response对象的方法"><a href="#6-response对象的方法" class="headerlink" title="6 response对象的方法"></a>6 response对象的方法</h4><pre class=" language-python"><code class="language-python">respone<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 响应的文本信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应体的二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 响应头</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># cookie</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  把cookie转成字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># key和value</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 请求的url</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>history<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#[]放重定向之前的地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应的编码方式</span>respone<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 图片，视频，大文件，一点一点循环取出来</span></code></pre><h4 id="7-编码问题"><a href="#7-编码问题" class="headerlink" title="7 编码问题"></a>7 编码问题</h4><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.autohome.com/news'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 一旦打印出来出现乱码问题</span><span class="token comment" spellcheck="true"># 方式一：手动设定编码格式</span>res<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'gb2312'</span><span class="token comment" spellcheck="true"># 方式二</span>res<span class="token punctuation">.</span>encoding<span class="token operator">=</span>res<span class="token punctuation">.</span>apparent_encoding<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h4 id="8-json解析"><a href="#8-json解析" class="headerlink" title="8 json解析"></a>8 json解析</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonrespone<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/index/'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'name':'lqz'&amp;#125;)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>respone<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应的文本</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>respone<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 相当于上面那句话</span></code></pre><h4 id="9-使用代理"><a href="#9-使用代理" class="headerlink" title="9 使用代理"></a>9 使用代理</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># respone=requests.get('http://127.0.0.1:8000/index/',proxies=&amp;#123;'http':'代理的地址和端口号',&amp;#125;)</span><span class="token comment" spellcheck="true"># 代理，免费代理，收费代理花钱买</span><span class="token comment" spellcheck="true"># 代理池：列表放了一堆代理ip，每次随机取一个，再发请求就不会封ip了</span><span class="token comment" spellcheck="true"># 高匿和透明代理？如果使用高匿代理，后端无论如何拿不到你的ip，使用透明，后端能够拿到你的ip</span><span class="token comment" spellcheck="true"># 后端如何拿到透明代理的ip，  后端：X-Forwarded-For</span><span class="token comment" spellcheck="true"># respone=requests.get('https://www.baidu.com/',proxies=&amp;#123;'http':'27.46.20.226:8888',&amp;#125;)</span><span class="token comment" spellcheck="true"># print(respone.text)</span></code></pre><h4 id="10-其他操作"><a href="#10-其他操作" class="headerlink" title="10 其他操作"></a>10 其他操作</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 11 超时设置</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># respone=requests.get('https://www.baidu.com',</span><span class="token comment" spellcheck="true">#                      timeout=0.0001)</span><span class="token comment" spellcheck="true"># 12 认证设置（你见不到了）</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># r=requests.get('xxx',auth=('user','password'))</span><span class="token comment" spellcheck="true"># print(r.status_code)</span><span class="token comment" spellcheck="true"># 13 异常处理</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># from requests.exceptions import * #可以查看requests.exceptions获取异常类型</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># try:</span><span class="token comment" spellcheck="true">#     r=requests.get('http://www.baidu.com',timeout=0.00001)</span><span class="token comment" spellcheck="true"># # except ReadTimeout:</span><span class="token comment" spellcheck="true"># #     print('===:')</span><span class="token comment" spellcheck="true"># except Exception as e:</span><span class="token comment" spellcheck="true">#     print(e)</span><span class="token comment" spellcheck="true"># 14 上传文件</span><span class="token comment" spellcheck="true"># res=requests.post('http://127.0.0.1:8000/index/',files=&amp;#123;'myfile':open('a.jpg','rb')&amp;#125;)</span><span class="token comment" spellcheck="true"># print(res.text)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium基本使用</title>
      <link href="/task/2020/03/15/selenium%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/task/2020/03/15/selenium%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ul><li>模块安装：<code>pip install selenium</code></li><li>驱动安装，安装和浏览器适配的驱动exe，放到解释器的script文件夹中（<a href="http://npm.taobao.org/mirrors/chromedriver/%EF%BC%89">http://npm.taobao.org/mirrors/chromedriver/）</a></li></ul><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 案例：打开百度输入搜索海贼王</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 得到一个谷歌浏览器驱动对象</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 隐式等待：页面中查找标签时等待，如果超出时间还没找到就报错</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>input_tag <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'海贼王'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># input_tag.send_keys(Keys.ENTER)</span>commit_tag <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span>commit_tag<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>所有方法</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ##############选择器（find系列）</span><span class="token comment" spellcheck="true"># ===============所有方法===================</span><span class="token comment" spellcheck="true"># 1、find_element_by_id   # 通过id查找控件</span><span class="token comment" spellcheck="true"># 2、find_element_by_link_text  # 通过a标签内容找</span><span class="token comment" spellcheck="true"># 3、find_element_by_partial_link_text  # 通过a标签内容找，模糊匹配</span><span class="token comment" spellcheck="true"># 4、find_element_by_tag_name   # 标签名</span><span class="token comment" spellcheck="true"># 5、find_element_by_class_name  # 类名</span><span class="token comment" spellcheck="true"># 6、find_element_by_name      # name属性</span><span class="token comment" spellcheck="true"># 7、find_element_by_css_selector  # 通过css选择器</span><span class="token comment" spellcheck="true"># 8、find_element_by_xpath       # 通过xpaht选择器</span>css选择中<span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取文本</span><span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::attr(href)'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取标签</span><span class="token comment" spellcheck="true"># 以上全都可以改成find_elements_xxx获取多个</span></code></pre><p><strong>获取属性</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重点</span><span class="token comment" spellcheck="true"># tag.get_attribute('href')  # 找当前控件 的href属性对的值</span><span class="token comment" spellcheck="true"># tag.text   # 获取文本内容</span><span class="token comment" spellcheck="true"># 了解</span><span class="token comment" spellcheck="true"># print(tag.id)   # 当前控件id号</span><span class="token comment" spellcheck="true"># print(tag.location)  # 当前控件在页面位置</span><span class="token comment" spellcheck="true"># print(tag.tag_name)  # 标签名</span><span class="token comment" spellcheck="true"># print(tag.size)      #标签的大小</span></code></pre><p><strong>其他</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">####无界面浏览器（phantomjs）</span><span class="token comment" spellcheck="true">#谷歌浏览器支持不打开页面</span><span class="token comment" spellcheck="true"># from selenium.webdriver.chrome.options import Options</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># chrome_options = Options()</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('window-size=1920x3000') #指定浏览器分辨率</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--disable-gpu') #谷歌文档提到需要加上这个属性来规避bug</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--hide-scrollbars') #隐藏滚动条, 应对一些特殊页面</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('blink-settings=imagesEnabled=false') #不加载图片, 提升速度</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--headless') #浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># bro=webdriver.Chrome(chrome_options=chrome_options,executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># bro.get('https://www.baidu.com/')</span><span class="token comment" spellcheck="true"># print(bro.page_source)</span><span class="token comment" spellcheck="true"># bro.close()</span><span class="token comment" spellcheck="true">######元素交互</span><span class="token comment" spellcheck="true"># tag.send_keys()  # 往里面写内容</span><span class="token comment" spellcheck="true"># tag.click()      # 点击控件</span><span class="token comment" spellcheck="true"># tag.clear()      # 清空控件内容</span><span class="token comment" spellcheck="true">#####执行js(有什么用?)</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># bro=webdriver.Chrome(executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># bro.implicitly_wait(5)  # 隐士等待：找一个控件，如果控件没有加载出来，等待5s中  等待所有，只需要写着一句，以后找所有控件都按这个操作来</span><span class="token comment" spellcheck="true"># bro.get('https://www.baidu.com/')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># bro.execute_script('window.open()')</span><span class="token comment" spellcheck="true"># bro.execute_script('window.open()')</span><span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token comment" spellcheck="true"># bro.close()</span><span class="token comment" spellcheck="true">####模拟浏览器前进后退</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># browser=webdriver.Chrome(executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># browser.get('https://www.baidu.com')</span><span class="token comment" spellcheck="true"># browser.get('https://www.taobao.com')</span><span class="token comment" spellcheck="true"># browser.get('http://www.sina.com.cn/')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># browser.back()</span><span class="token comment" spellcheck="true"># time.sleep(1)</span><span class="token comment" spellcheck="true"># browser.forward()</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># browser.close()</span><span class="token comment" spellcheck="true">#####获取cookie</span><span class="token comment" spellcheck="true"># bro.get_cookies()</span><span class="token comment" spellcheck="true">#### 选项卡管理(了解)</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># browser=webdriver.Chrome()</span><span class="token comment" spellcheck="true"># browser.get('https://www.baidu.com')</span><span class="token comment" spellcheck="true"># browser.execute_script('window.open()')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># print(browser.window_handles) #获取所有的选项卡</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[1])</span><span class="token comment" spellcheck="true"># browser.get('https://www.taobao.com')</span><span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[0])</span><span class="token comment" spellcheck="true"># browser.get('https://www.sina.com.cn')</span><span class="token comment" spellcheck="true"># browser.close()</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql搜索变慢的原因</title>
      <link href="/task/2020/03/15/sql%E6%90%9C%E7%B4%A2%E5%8F%98%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/task/2020/03/15/sql%E6%90%9C%E7%B4%A2%E5%8F%98%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<pre class=" language-mysql"><code class="language-mysql">mysql> CREATE TABLE `t_tweet` (  `id` int(11) NOT NULL,  `tweet_id` varchar(32) DEFAULT NULL,  `user_id` int(11) DEFAULT NULL,  `gmt_create` datetime DEFAULT NULL,  PRIMARY KEY (`id`),  KEY `tweet_id` (`tweet_id`),  KEY `gmt_create` (`gmt_create`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></pre><h5 id="1-用函数处理索引"><a href="#1-用函数处理索引" class="headerlink" title="1 用函数处理索引"></a>1 用函数处理索引</h5><p>Q：为什么条件是<code>where gmt_create=&#39;2018-7-1’</code>的时候可以用上索引，而改成<code>where month(gmt_create)=7</code>的时候就不行了？</p><p>A：sql搜索是根据B+树快速定位的，这种能力来源于同一层兄弟节点的有序性。</p><p>简单来说如果是<code>where gmt_create=&#39;2018-7-1’</code>那么根据节点的有序性，我们可以快速知道所要找的叶子节点的路径</p><p>如果是<code>where month(gmt_create)=7</code>，树在第一层就不知道如何判断子节点的走向，就会放弃树搜索功能，走全文遍历。</p><p>总结：对索引字段进行函数操作，会破坏索引的值的有序性</p><p>但并不是直接遍历主键了，优化器会对比两者之间的索引大小，最后还是会决定索引gmt_create</p><p><strong>优化器在某些问题上确实有“偷懒”行为，即使是对于不改变有序性的函数，也不会考虑使用索 引。</strong></p><p>比如，对于<code>select * from t_tweet where id + 1 = 10000</code>这个SQL语句，这个加1操作并不会改变有序性，但是MySQL优化器还是不能用id索引快速定位到9999这一行。所以，需要你在写 SQL语句的时候，手动改写成 <code>where id = 10000 -1</code>才可以。</p><h5 id="2-索引的数据类型需要类型转化"><a href="#2-索引的数据类型需要类型转化" class="headerlink" title="2 索引的数据类型需要类型转化"></a>2 索引的数据类型需要类型转化</h5><pre class=" language-python"><code class="language-python">select <span class="token operator">*</span> <span class="token keyword">from</span> t_tweet where tweet_id<span class="token operator">=</span><span class="token number">110717</span><span class="token punctuation">;</span></code></pre><p>通过上述索引我们会发现还是进行了全表扫描，可以看到我们传入的值是 110717是整形，但是表中字段需要的数据类型是varchar</p><p>这里有两个问题：</p><p>Q1：数据类型转化的规则是什么？</p><p>Q2：为什么有数据类型转换，就会走全表索引？</p><p>问题1的答案是当数字类型和字符类型比较时会把字符类型转化成整形做<strong>整形比较</strong></p><p>可以通过<code>select &#39;10&#39;&gt;9</code>如果返回1，则是转化成整形，如果返回0则是转化成字符串</p><p>所以问题2的答案也油然而生，这个语句写全了</p><pre class=" language-mysql"><code class="language-mysql">select * from t_tweet where CAST(tweet_id AS tweetId int) = 110717;</code></pre><p>本质上还是对字段做了函数操作，导致优化器放弃走树搜索功能</p><p>转自：<a href="https://juejin.im/post/6860513755000733709#heading-1">https://juejin.im/post/6860513755000733709#heading-1</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题及解决</title>
      <link href="/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
      <url>/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、同源策略"><a href="#一、同源策略" class="headerlink" title="一、同源策略"></a>一、同源策略</h2><p>同源策略：请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同</p><p>比如:我在本地上的域名是127.0.0.1:8000,请求另外一个域名：127.0.0.1:8001一段数据</p><p>浏览器上就会报错，这就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险</p><h2 id="二、CORS（跨域资源共享）简介"><a href="#二、CORS（跨域资源共享）简介" class="headerlink" title="二、CORS（跨域资源共享）简介"></a>二、CORS（跨域资源共享）简介</h2><p><strong>服务端对某个来源的请求开放请求资源的接口，就是cors</strong></p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p><strong>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><h2 id="三、CORS两种请求详解"><a href="#三、CORS两种请求详解" class="headerlink" title="三、CORS两种请求详解"></a>三、CORS两种请求详解</h2><p>只要同时满足以下两大条件，就属于简单请求，只要其中一个不满足就是非简单请求</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""（1) 请求方法是以下三种方法之一：    HEAD    GET    POST"""</span><span class="token triple-quoted-string string">"""（2）HTTP的头信息不超出以下几种字段：    Accept    Accept-Language    Content-Language    Last-Event-ID    Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain"""</span></code></pre><p><strong>两种请求的区别</strong></p><ul><li>简单请求：一次请求</li><li>非简单请求：两次请求，会在数据请求发送之前，先发送一次‘预检’请求，如果通过了则可以发送真正的请求</li></ul><p><strong>预检</strong></p><pre class=" language-python"><code class="language-python"> <span class="token operator">=</span><span class="token operator">></span> 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过        Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Method <span class="token operator">=</span><span class="token operator">></span> 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过        Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Headers</code></pre><p><strong>支持跨域，简单请求</strong></p><p>服务器设置响应头：Access-Control-Allow-Origin = ‘域名’ 或 ‘*’</p><p><strong>支持跨域，复杂请求</strong></p><p>由于复杂请求时，首先会发送“预检”请求，如果“预检”成功，则发送真实数据。</p><ul><li>“预检”请求时，允许请求方式则需服务器设置响应头：Access-Control-Request-Method</li><li>“预检”请求时，允许请求头则需服务器设置响应头：Access-Control-Request-Headers</li></ul><h2 id="四、django中解决跨域的两种方式"><a href="#四、django中解决跨域的两种方式" class="headerlink" title="四、django中解决跨域的两种方式"></a>四、django中解决跨域的两种方式</h2><h3 id="1-自定义中间件"><a href="#1-自定义中间件" class="headerlink" title="1 自定义中间件"></a>1 自定义中间件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定制中间件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">class</span> <span class="token class-name">CorsMiddleWare</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">"OPTIONS"</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#可以加*</span>            response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Content-Type"</span>        response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://localhost:8080"</span>        <span class="token keyword">return</span> response</code></pre><h3 id="2-使用django-cors-headers-解决跨域问题"><a href="#2-使用django-cors-headers-解决跨域问题" class="headerlink" title="2 使用django-cors-headers 解决跨域问题"></a>2 使用django-cors-headers 解决跨域问题</h3><ul><li><p>安装：pip install django-cors-headers</p></li><li><p>注册app：’corsheaders’</p></li><li><p>添加中间件：’corsheaders.middleware.CorsMiddleware’,</p></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 基本配置</span>CORS_ALLOW_CREDENTIALS <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_ALLOW_ALL <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_WHITELIST <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'*'</span><span class="token punctuation">)</span>CORS_ALLOW_METHODS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'DELETE'</span><span class="token punctuation">,</span>    <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token string">'OPTIONS'</span><span class="token punctuation">,</span>    <span class="token string">'PATCH'</span><span class="token punctuation">,</span>    <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token string">'PUT'</span><span class="token punctuation">,</span>    <span class="token string">'VIEW'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>CORS_ALLOW_HEADERS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>    <span class="token string">'X_FILENAME'</span><span class="token punctuation">,</span>    <span class="token string">'accept-encoding'</span><span class="token punctuation">,</span>    <span class="token string">'authorization'</span><span class="token punctuation">,</span>    <span class="token string">'content-type'</span><span class="token punctuation">,</span>    <span class="token string">'dnt'</span><span class="token punctuation">,</span>    <span class="token string">'origin'</span><span class="token punctuation">,</span>    <span class="token string">'user-agent'</span><span class="token punctuation">,</span>    <span class="token string">'x-csrftoken'</span><span class="token punctuation">,</span>    <span class="token string">'x-requested-with'</span><span class="token punctuation">,</span>    <span class="token string">'Pragma'</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 跨域问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf内置排序源码</title>
      <link href="/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/"/>
      <url>/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>如果我们要用排序，那么写的视图类就必须直接或间接继承ListModelMixin，因为其内部有帮我们排序的放方法</p><p>ListModelMixin</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用了视图类对象的filter_queryset方法</span>queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>但是我们视图类本身没有，根据orm查找顺序，我们就要看第一位父类</p><p>最后找到GenericAPIView的filter_queryset方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># filter_backends就是我们在视图类中写的drf内置的排序类</span>    <span class="token keyword">for</span> backend <span class="token keyword">in</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>filter_backends<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 实例化排序类对象，并调用它的filter_queryset方法</span>        queryset <span class="token operator">=</span> backend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token keyword">return</span> queryset<span class="token comment" spellcheck="true"># 视图类中我们是这样设置的</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>OrderingFilter<span class="token punctuation">]</span></code></pre><p>OrderingFilter的filter_queryset方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 调用了自己的get_ordering方法返回值应到是原本的queryset对象</span>    ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>get_ordering<span class="token punctuation">(</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span>    <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 下面是得到ordering的方法，返回的结果是('id', 'price')，直接通过这个排序</span>        <span class="token keyword">return</span> queryset<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token operator">*</span>ordering<span class="token punctuation">)</span>    <span class="token keyword">return</span> queryset</code></pre><p>OrderingFilter的get_ordering方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_ordering</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># ordering_param是在drf的配置文件中的字符串：ordering</span>    <span class="token comment" spellcheck="true"># params就是从url后ordering跟的排序字符串</span>    <span class="token comment" spellcheck="true"># params：‘id，name，price’</span>    params <span class="token operator">=</span> request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ordering_param<span class="token punctuation">)</span>    <span class="token keyword">if</span> params<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 通过一个列表生成式得到['id','name','price']</span>        fields <span class="token operator">=</span> <span class="token punctuation">[</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 通过内部remove_invalid_fields去移除fields中和视图类中设置不匹配的</span>        <span class="token comment" spellcheck="true"># 视图类是这样设置的ordering_fields = ('id', 'price')</span>        <span class="token comment" spellcheck="true"># 所以这里name是无效排序，就会通过这个方法移除</span>           ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>remove_invalid_fields<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> view<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>            <span class="token keyword">return</span> ordering</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> python函数 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf☞jwt自动签发与手动签发</title>
      <link href="/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/"/>
      <url>/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="一、自动签发"><a href="#一、自动签发" class="headerlink" title="一、自动签发"></a>一、自动签发</h2><p><strong>urls</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token<span class="token comment" spellcheck="true"># 使用jwt自带的登录视图</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><strong>settings</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimeJWT_AUTH<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token comment" spellcheck="true"># 配置响应格式，必须和自动签发使用</span>  <span class="token string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span><span class="token punctuation">:</span><span class="token string">'app01.utils.my_jwt_response_payload_handler'</span><span class="token punctuation">,</span>    <span class="token string">'JWT_EXPIRATION_DELTA'</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 过期时间，手动配置</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p><strong>utils</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重写jwt响应格式（需要到settings配置）</span><span class="token comment" spellcheck="true"># 与之配合使用的必须是自动签发</span><span class="token keyword">def</span> <span class="token function">my_jwt_response_payload_handler</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token operator">=</span>None<span class="token punctuation">,</span> request<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 返回什么，前端就能看到什么样子</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>        <span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'登录成功'</span><span class="token punctuation">,</span>        <span class="token string">'status'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>        <span class="token string">'username'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>username    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>然后直接在前端提交post请求发送账号和密码，会返回我们定义好的响应格式</p><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6Imh6IiwiZXhwIjoxNTk1NDE1MTEyLCJlbWFpbCI6IiJ9.BxBdsm6oBz8iPAwSSpo_7IaU4pBp6RjK4c0GJ_FYN1E"</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span>    <span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><p>然后拿出token对测试类发送测试请求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestAPI</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 因为内置的他没有对匿名用户设置拦截，素以匿名用户也能看到ok</span><span class="token comment" spellcheck="true"># 我们用request.user来区分</span><span class="token comment" spellcheck="true"># 这里可能会出现我登录了很多次，用每次不同的token都能登录</span><span class="token comment" spellcheck="true"># 这是因为token校验的是规则，是要加密规则符合且没有超时，那用哪次token都一样的</span></code></pre><h2 id="二、手动签发"><a href="#二、手动签发" class="headerlink" title="二、手动签发"></a>二、手动签发</h2><p><strong>utils</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> BaseJSONWebTokenAuthentication<span class="token punctuation">,</span>jwt_decode_handler<span class="token keyword">import</span> jwt<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> AuthenticationFailed<span class="token keyword">class</span> <span class="token class-name">MyAuthentication</span><span class="token punctuation">(</span>BaseJSONWebTokenAuthentication<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里重写的逻辑和BaseJSONWebTokenAuthentication里的authenticate一模一样</span>    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        jwt_token <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取浏览器传来的token</span>        <span class="token keyword">if</span> jwt_token<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                payload <span class="token operator">=</span> jwt_decode_handler<span class="token punctuation">(</span>jwt_token<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 传入token，拿出第二段用户信息,有内置的校验token功能</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>ExpiredSignature<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'签名过期'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>InvalidTokenError<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'用户非法'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 所有异常都会走到这</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 通过内置的方法把payload转换成用户对象</span>            user <span class="token operator">=</span> self<span class="token punctuation">.</span>authenticate_credentials<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">return</span> user<span class="token punctuation">,</span>None <span class="token comment" spellcheck="true"># ===》request.user,request.auth</span>        <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'您没有携带认证信息'</span><span class="token punctuation">)</span></code></pre><p><strong>sers</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true"># 多方序列化校验登录</span><span class="token keyword">import</span> re<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_encode_handler<span class="token punctuation">,</span>jwt_payload_handler<span class="token keyword">class</span> <span class="token class-name">LoginSer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 我们要提交校验数据的时候，如果直接用下面Meta绑定给模型类的话</span>    <span class="token comment" spellcheck="true"># 关键点2：这里如果不写username的话，序列化器直接用的是模型类的username</span>    <span class="token comment" spellcheck="true"># 这两者的区别在于，如果覆盖写了username，他表示的可以是任何前端传来的数据，如果是模型类绑定，那只能是用户名了</span>    <span class="token comment" spellcheck="true"># 我们这里username用于多方登录的校验数据，必须要重写</span>    <span class="token comment" spellcheck="true"># 而password不用重写，因为password用的就是模型类本身的</span>    username <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>User        fields <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> username<span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^1[3-9][0-9]&amp;#123;9&amp;#125;$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>mobile<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^.+@.+$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 邮箱</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>email<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> user<span class="token punctuation">:</span>                <span class="token keyword">if</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 关键点3：jwt_payload_handler把用户数据对象转化成用户信息的字典</span>                    <span class="token comment" spellcheck="true"># jwt_encode_handler把用户信息的字典转化成token</span>                    payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># print('user:',user,type(user))</span>                    token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># print('payload:',payload,type(payload))</span>                    <span class="token comment" spellcheck="true"># print('token:',token)</span>                    <span class="token comment" spellcheck="true"># 关键点4：如果我们要给序列化器添加数据，让视图函数去使用</span>                    <span class="token comment" spellcheck="true"># 通常都是传给对象的context属性,当然直接赋值也可以，这只是他给我们提供的传值接口</span>                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> token                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> user                    self<span class="token punctuation">.</span>user <span class="token operator">=</span> user                    <span class="token keyword">return</span> attrs                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'不存在用户'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span></code></pre><p><strong>views</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LoginApi</span><span class="token punctuation">(</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在调用序列化类给context传数据，可以直接在序列化类中调用</span>        <span class="token comment" spellcheck="true"># 关键点1：注意区分序列化传值与反序列化</span>        <span class="token comment" spellcheck="true"># 这里只要拿字典取校验数据，那就传给data</span>        <span class="token comment" spellcheck="true"># 如果是要把数据对象转化成字典就传给instance</span>        user_ser <span class="token operator">=</span> sers<span class="token punctuation">.</span>LoginSer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'request': request&amp;#125;)</span>        user_ser<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>user_ser<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'code': 100, 'msg': '登录成功', 'token': token, 'username': user.username&amp;#125;)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔法方法</title>
      <link href="/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-str"><a href="#一、-str" class="headerlink" title="一、__str__"></a>一、<code>__str__</code></h2><p>改变对象的字符串显示，可以理解为print打印对象的显示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token comment" spellcheck="true"># 定义对象的字符串表示</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>names1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 会调用s1的__str__方法</span><span class="token operator">>></span><span class="token operator">></span> 张三</code></pre><h2 id="二、-repr"><a href="#二、-repr" class="headerlink" title="二、__repr__"></a>二、<code>__repr__</code></h2><p>在python解释器环境下，会默认显示对象的repr表示。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s1张三</code></pre><p><strong>总结：</strong></p><p>str函数或者print函数调用的是obj.<strong>str</strong>()<br>repr函数或者交互式解释器调用的是obj.<strong>repr</strong>()</p><p>注意：<br>如果__str__没有被定义，那么就会使用__repr__来代替输出。<br>__str__和__repr__方法的返回值都必须是字符串。</p><h2 id="三、-format"><a href="#三、-format" class="headerlink" title="三、__format__"></a>三、<code>__format__</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    __format_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        <span class="token string">'n-a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&amp;#123;obj.name&amp;#125;-年龄是：&amp;#123;obj.age&amp;#125;'</span><span class="token punctuation">,</span>  # 名字是：lqz<span class="token operator">-</span>年龄是：<span class="token number">18</span>        <span class="token string">'n:a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&amp;#123;obj.name&amp;#125;：年龄是：&amp;#123;obj.age&amp;#125;'</span><span class="token punctuation">,</span>  # 名字是：lqz：年龄是：<span class="token number">18</span>        <span class="token string">'n/a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&amp;#123;obj.name&amp;#125;/年龄是：&amp;#123;obj.age&amp;#125;'</span><span class="token punctuation">,</span>  # 名字是：<span class="token operator">/</span>年龄是：<span class="token number">18</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token keyword">def</span> <span class="token function">__format__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_spec<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> format_spec <span class="token operator">or</span> format_spec <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">:</span>            format_spec <span class="token operator">=</span> <span class="token string">'n-a'</span>        fmt <span class="token operator">=</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">[</span>format_spec<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#&amp;#123;obj.name&amp;#125;:&amp;#123;obj.age&amp;#125;</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span>format<span class="token punctuation">(</span>obj<span class="token operator">=</span>self<span class="token punctuation">)</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'lqz'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> format<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">'n/a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># lqz/24</span></code></pre><h2 id="四、-del"><a href="#四、-del" class="headerlink" title="四、__del__"></a>四、<code>__del__</code></h2><p>当对象的内存被施放的时候执行</p><p>注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除了...'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;__main__.A object at 0x10164fb00></span><span class="token keyword">del</span> a  <span class="token comment" spellcheck="true"># 删除了...</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># NameError: name 'a' is not defined</span></code></pre><h2 id="五、-dict-和-slots"><a href="#五、-dict-和-slots" class="headerlink" title="五、__dict__和__slots__"></a>五、<code>__dict__和__slots__</code></h2><p>Python中的类，都会从object里继承一个__dict__属性，这个属性中存放着类的属性和方法对应的键值对。一个类实例化之后，这个类的实例也具有这么一个__dict__属性。但是二者并不相同。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    some <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> numa <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'num': 10&amp;#125;</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &amp;#123;'num': 10, 'age': 10&amp;#125;</span></code></pre><p>从上面的例子可以看出来，实例只保存实例的属性和方法，类的属性和方法它是不保存的。正是由于类和实例有__dict__属性，所以类和实例可以在运行过程动态添加属性和方法。</p><p>但是由于每实例化一个类都要分配一个__dict__变量，容易浪费内存。因此在Python中有一个内置的__slots__属性。当一个类设置了__slots__属性后，这个类的__dict__属性就不存在了（同理，该类的实例也不存在__dict__属性），如此一来，设置了__slots__属性的类的属性，只能是预先设定好的。</p><p>当你定义__slots__后，__slots__就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的小型数组来构建的，而不是为每个实例都定义一个__dict__字典，在__slots__中列出的属性名在内部被映射到这个数组的特定索引上。使用__slots__带来的副作用是我们没有办法给实例添加任何新的属性了。</p><p>注意：尽管__slots__看起来是个非常有用的特性，但是除非你十分确切的知道要使用它，否则尽量不要使用它。比如定义了__slots__属性的类就不支持多继承。__slots__通常都是作为一种优化工具来使用。–摘自《Python Cookbook》8.4</p><p>注意事项：<br>__slots__的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了__slots__后的类不再 支持一些普通类特性了,比如多继承。大多数情况下,你应该只在那些经常被使用到的用作数据结构的类上定义__slots__，比如在程序中需要创建某个类的几百万个实例对象 。<br>关于__slots__的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用__slots__可以达到这样的目的,但是这个并不是它的初衷。它更多的是用来作为一个内存优化工具。</p><h2 id="六、-item-、-attr-系列"><a href="#六、-item-、-attr-系列" class="headerlink" title="六、__item__、__attr__系列"></a>六、<code>__item__、__attr__系列</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj[key]=lqz赋值时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__delitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj[key]时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__delattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj.key时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.key = value的时候执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.get(key)的时候执行我'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">[</span>item<span class="token punctuation">]</span>f1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token string">'sb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>f1<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">'泡妞'</span><span class="token keyword">del</span> f1<span class="token punctuation">.</span>hobby<span class="token keyword">del</span> f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>f1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'lqz'</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></code></pre><h2 id="七、-init"><a href="#七、-init" class="headerlink" title="七、__init__"></a>七、<code>__init__</code></h2><p>使用Python写面向对象的代码的时候我们都会习惯性写一个 <strong>init</strong> 方法，<strong>init</strong> 方法通常用在初始化一个类实例的时候。例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: &amp;#123;&amp;#125;(&amp;#123;&amp;#125;)>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></code></pre><p>上面是<strong>init__最普通的用法了。但是__init__其实不是实例化一个类的时候第一个被调用的方法。当使用 Persion(name, age) 来实例化一个类时，最先被调用的方法其实是 __new</strong> 方法。</p><h2 id="八、-new"><a href="#八、-new" class="headerlink" title="八、__new__"></a>八、<code>__new__</code></h2><p>其实__init__是在类实例被创建之后调用的，它完成的是类实例的初始化操作，而 __new__方法正是创建这个类实例的方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__new__，创建类实例'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Person<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__init__，初始化实例'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: &amp;#123;&amp;#125;(&amp;#123;&amp;#125;)>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python">调用__new__，创建类实例调用__init__，初始化实例<span class="token operator">&lt;</span>Person<span class="token punctuation">:</span> 张三<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">></span></code></pre><p>__new__方法在类定义中不是必须写的，如果没定义的话默认会调用object.__new__去创建一个对象（因为创建类的时候默认继承的就是object）。</p><p>如果我们在类中定义了__new__方法，就是重写了默认的__new__方法，我们可以借此自定义创建对象的行为。</p><p>举个例子：</p><p>重写类的__new__方法来实现单例模式。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 重写__new__方法，实现每一次实例化的时候，返回同一个instance对象</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> ages1 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这两实例都一样</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h2 id="九、-call"><a href="#九、-call" class="headerlink" title="九、__call__"></a>九、<code>__call__</code></h2><p><strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象()。拥有此方法的对象可以像函数一样被调用。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用对象的__call__方法'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 类Person可调用</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对象a可以调用</span></code></pre><p><strong>注意：</strong> </p><p>__new__、__init__、__call__等方法都不是必须写的。</p><h2 id="十、-doc"><a href="#十、-doc" class="headerlink" title="十、__doc__"></a>十、<code>__doc__</code></h2><p>定义类的描述信息（注释）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""我是A类的描述信息"""</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span></code></pre><h2 id="十一、-iter-和-next"><a href="#十一、-iter-和-next" class="headerlink" title="十一、__iter__和__next__"></a>十一、<code>__iter__和__next__</code></h2><p>如果一个对象拥有了__iter__和__next__方法，那这个对象就是迭代器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> stop<span class="token punctuation">:</span>            start<span class="token punctuation">,</span> stop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start        self<span class="token punctuation">.</span>start <span class="token operator">=</span> start        self<span class="token punctuation">.</span>stop <span class="token operator">=</span> stop    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>start <span class="token operator">>=</span> self<span class="token punctuation">.</span>stop<span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration        n <span class="token operator">=</span> self<span class="token punctuation">.</span>start        self<span class="token punctuation">.</span>start <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> na <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterator<span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>a<span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>aaa<span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#抛异常</span></code></pre><h2 id="十二、-enter-和-exit"><a href="#十二、-enter-和-exit" class="headerlink" title="十二、__enter__和__exit__"></a>十二、<code>__enter__和__exit__</code></h2><p>一个对象如果实现了__enter__和___exit__方法，那么这个对象就支持上下文管理协议，即with语句</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块时执行此方法，此方法如果有返回值会赋值给as声明的变量'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'oo'</span>    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'退出with代码块时执行此方法'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> exc_type<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> exc_val<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token keyword">with</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># with语句中代码块出现异常，则with后的代码都无法执行。</span>    <span class="token comment" spellcheck="true"># raise AttributeError('sb')</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#f打印出oo</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'嘿嘿嘿'</span><span class="token punctuation">)</span></code></pre><h2 id="十三、-len"><a href="#十三、-len" class="headerlink" title="十三、__len__"></a>十三、<code>__len__</code></h2><p>拥有__len__方法的对象支持len(obj)操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十四、-hash"><a href="#十四、-hash" class="headerlink" title="十四、__hash__"></a>十四、<code>__hash__</code></h2><p>拥有__hash__方法的对象支持hash(obj)操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hash<span class="token punctuation">(</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十五、-eq"><a href="#十五、-eq" class="headerlink" title="十五、__eq__"></a>十五、<code>__eq__</code></h2><p>拥有__eq__方法的对象支持相等的比较操作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 打印出比较的第二个对象的x值</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span>self<span class="token punctuation">.</span>y <span class="token operator">==</span> obj<span class="token punctuation">.</span>x<span class="token operator">+</span>obj<span class="token punctuation">.</span>y<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>b <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> python面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker高级</title>
      <link href="/task/2019/09/18/Docker%E9%AB%98%E7%BA%A7/"/>
      <url>/task/2019/09/18/Docker%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、部署应用映射外部目录"><a href="#一、部署应用映射外部目录" class="headerlink" title="一、部署应用映射外部目录"></a>一、部署应用映射外部目录</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 部署redis，把配置文件和数据目录映射出来</span><span class="token comment" spellcheck="true"># 操作步骤</span>    <span class="token comment" spellcheck="true"># 创建需要被映射的目录</span>    <span class="token operator">-</span><span class="token number">1</span> mkdir <span class="token operator">/</span>redis<span class="token operator">/</span>conf <span class="token operator">/</span>redis<span class="token operator">/</span>data    <span class="token operator">-</span><span class="token number">2</span> vim <span class="token operator">/</span>redis<span class="token operator">/</span>conf<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf        <span class="token comment" spellcheck="true"># 配置文件</span>        bind <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span>        daemonize NO        protected<span class="token operator">-</span>mode no        requirepass <span class="token number">123456</span>      <span class="token operator">-</span><span class="token number">3</span> 创建并运行容器    docker run <span class="token operator">-</span>p <span class="token number">6378</span><span class="token punctuation">:</span><span class="token number">6379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_6379 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>hzdir<span class="token operator">/</span>redis<span class="token operator">/</span>conf<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>hzdir<span class="token operator">/</span>redis<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>di redis redis<span class="token operator">-</span>server <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf    <span class="token operator">-</span><span class="token number">4</span> 本地window机器上远程连接到了docker里的redis    <span class="token operator">-</span><span class="token number">5</span> cmd窗口下        redis<span class="token operator">-</span>cli <span class="token operator">-</span>h <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span> <span class="token operator">-</span>p <span class="token number">6378</span>    <span class="token operator">-</span><span class="token number">6</span> 认证        auth <span class="token number">123456</span>    <span class="token operator">-</span><span class="token number">7</span> 写入数据        set name lqz    <span class="token operator">-</span><span class="token number">8</span> 保存数据        save或者是bgsave    <span class="token operator">-</span><span class="token number">9</span> 在宿主机的<span class="token operator">/</span>redis<span class="token operator">/</span>data路径下就能看到一个文件    <span class="token operator">-</span><span class="token number">10</span> 不管多少次重启redis容器，数据都还在    <span class="token operator">-</span><span class="token number">11</span> 原来的redis容器没了，按照第三步再启动一遍，数据都还在</code></pre><h2 id="二、迁移与备份"><a href="#二、迁移与备份" class="headerlink" title="二、迁移与备份"></a>二、迁移与备份</h2><h3 id="2-1-容器保存为镜像"><a href="#2-1-容器保存为镜像" class="headerlink" title="2.1 容器保存为镜像"></a>2.1 容器保存为镜像</h3><pre class=" language-python"><code class="language-python">docker commit 容器名字 镜像名字docker commit <span class="token number">19b</span> mydjangopip install django<span class="token operator">==</span><span class="token number">1.11</span><span class="token punctuation">.</span><span class="token number">11</span> <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>douban<span class="token punctuation">.</span>com<span class="token operator">/</span>simple<span class="token operator">/</span></code></pre><h3 id="2-2-把镜像打包成压缩包"><a href="#2-2-把镜像打包成压缩包" class="headerlink" title="2.2 把镜像打包成压缩包"></a>2.2 把镜像打包成压缩包</h3><pre class=" language-python"><code class="language-python">docker save <span class="token operator">-</span>o mydjango<span class="token punctuation">.</span>tar mydjango</code></pre><h3 id="2-3-把压缩包回复为镜像"><a href="#2-3-把压缩包回复为镜像" class="headerlink" title="2.3 把压缩包回复为镜像"></a>2.3 把压缩包回复为镜像</h3><pre class=" language-python"><code class="language-python">docker load <span class="token operator">-</span>i mydjango<span class="token punctuation">.</span>tar</code></pre><h2 id="三、dockerfile"><a href="#三、dockerfile" class="headerlink" title="三、dockerfile"></a>三、dockerfile</h2><p>通过dockerfile启动多个容器运行django项目通过nginx进行负载均衡</p><p>顺序：</p><ol><li>写一个django项目，写好导入的依赖文件，写好dockerfile镜像配置</li><li>通过dockerfile创建镜像</li><li>运行镜像生成容器，目录映射Django项目（此时已经可以访问）</li><li>通过nginx转发http请求做负载均衡</li></ol><pre class=" language-python"><code class="language-python"><span class="token number">1</span> dockerfile是什么    一个文件，里面一堆指令，通过这个文件可以生成镜像<span class="token number">2</span> dockerfile指令    命令                      作用    FROM image_name<span class="token punctuation">:</span>tag    定义了使用哪个基础镜像启动构建流程    MAINTAINER user_name    声明镜像的创建者    ENV key value    设置环境变量 <span class="token punctuation">(</span>可以写多条<span class="token punctuation">)</span>    RUN command    是Dockerfile的核心部分<span class="token punctuation">(</span>可以写多条<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add 和 copy后面跟的本机路径都必须是相对路径，而且必须是在dockerfile同级下的</span>    ADD source_dir<span class="token operator">/</span>file dest_dir<span class="token operator">/</span>file    将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压    COPY source_dir<span class="token operator">/</span>file dest_dir<span class="token operator">/</span>file    和ADD相似，但是如果有压缩文件并不能解压    WORKDIR path_dir    设置工作目录<span class="token number">3</span> 写一个dockerfile（文件名字必须交dockerfile）vim dockerfileFROM hzpythonMAINTAINER hzEXPOSE <span class="token number">8080</span>ADD <span class="token punctuation">.</span><span class="token operator">/</span>requirement<span class="token punctuation">.</span>txt <span class="token operator">/</span>home<span class="token operator">/</span>RUN pip install <span class="token operator">-</span>r <span class="token operator">/</span>home<span class="token operator">/</span>requirement<span class="token punctuation">.</span>txt <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>douban<span class="token punctuation">.</span>com<span class="token operator">/</span>simple<span class="token operator">/</span> RUN pip install uwsgi <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>douban<span class="token punctuation">.</span>com<span class="token operator">/</span>simple<span class="token operator">/</span>VOLUME <span class="token punctuation">[</span><span class="token string">"/home"</span><span class="token punctuation">]</span>WORKDIR <span class="token operator">/</span>home<span class="token operator">/</span>django_testCMD <span class="token punctuation">[</span><span class="token string">"uwsgi"</span><span class="token punctuation">,</span> <span class="token string">"--ini"</span><span class="token punctuation">,</span> <span class="token string">"/home/django_test/uwsgi.ini"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 或者</span>CMD <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"/home/text/manage.py"</span><span class="token punctuation">,</span> <span class="token string">"runserver"</span><span class="token punctuation">,</span><span class="token string">"0.0.0.0:8080"</span><span class="token punctuation">]</span> <span class="token number">4</span> 通过dockerfile构建出镜像    docker build <span class="token operator">-</span>t<span class="token operator">=</span><span class="token string">'django_1.11.11'</span> <span class="token punctuation">.</span><span class="token number">5</span> 查看镜像    docker images <span class="token number">6</span> 启动容器docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mydjango2 <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>lqz<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>home <span class="token operator">-</span>p <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">8080</span> django_1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token number">7</span> 在外部访问即可<span class="token number">8</span> 配置nginx转发<span class="token comment" spellcheck="true"># 创建文件件</span>mkdir <span class="token operator">-</span>p <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>conf <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>html <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>logs<span class="token comment" spellcheck="true"># 新建配置文件</span>vim nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span class="token comment" spellcheck="true"># 写入</span>worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>events <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>http <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    upstream node    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8082</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  localhost<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          <span class="token comment" spellcheck="true">#proxy_pass http://101.133.225.166:8080;</span>          <span class="token comment" spellcheck="true">#负载均衡配置</span>          proxy_pass http<span class="token punctuation">:</span><span class="token operator">//</span>node<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;  </span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># docker 中运行nginx</span>docker run <span class="token operator">-</span><span class="token operator">-</span>name nginx <span class="token operator">-</span>id <span class="token operator">-</span>p <span class="token number">8888</span><span class="token punctuation">:</span><span class="token number">80</span> <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>html <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>logs<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx nginx<span class="token number">9</span> 配置负载均衡<span class="token comment" spellcheck="true"># 修改nginx配置文件</span>worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>events <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>http <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    upstream node    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8082</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  localhost<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>          <span class="token comment" spellcheck="true">#proxy_pass http://101.133.225.166:8080;</span>          <span class="token comment" spellcheck="true">#负载均衡配置</span>          proxy_pass http<span class="token punctuation">:</span><span class="token operator">//</span>node<span class="token punctuation">;</span>        <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;  </span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token comment" spellcheck="true"># 多启动几个docker容器</span>docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mydjango3 <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>lqz<span class="token operator">/</span>django_test2<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>django_test<span class="token operator">/</span> <span class="token operator">-</span>p <span class="token number">8081</span><span class="token punctuation">:</span><span class="token number">8080</span> django_1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span>docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mydjango3 <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>lqz<span class="token operator">/</span>django_test2<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>django_test<span class="token operator">/</span> <span class="token operator">-</span>p <span class="token number">8082</span><span class="token punctuation">:</span><span class="token number">8080</span> django_1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token comment" spellcheck="true"># 重启nginx</span><span class="token comment" spellcheck="true"># 假设8081的容器挂了，8080的容器挂了，正常提供服务，</span><span class="token comment" spellcheck="true"># 再把docker容器启动起来即可</span></code></pre><h2 id="四、配置私有仓库"><a href="#四、配置私有仓库" class="headerlink" title="四、配置私有仓库"></a>四、配置私有仓库</h2><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 拉取私有仓库镜像    docker pull registry<span class="token number">2</span> 启动容器    docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>registry <span class="token operator">-</span>p <span class="token number">5000</span><span class="token punctuation">:</span><span class="token number">5000</span> registry<span class="token number">3</span> 打开浏览器 输入地址http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span>v2<span class="token operator">/</span>_catalog看到<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"repositories":[]&amp;#125; 表示私有仓库搭建成功并且内容为空</span><span class="token number">4</span> 配置    修改daemon<span class="token punctuation">.</span>json    vi <span class="token operator">/</span>etc<span class="token operator">/</span>docker<span class="token operator">/</span>daemon<span class="token punctuation">.</span>json    添加以下内容，保存退出。    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"insecure-registries":["101.133.225.166:5000"]&amp;#125; </span>    此步用于让 docker信任私有仓库地址<span class="token number">5</span> 重启docker 服务    systemctl restart docker<span class="token number">6</span> 重启容器    docker start registry<span class="token number">7</span> 打标签    docker tag <span class="token number">5452fa6715c0</span> <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span>django1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token number">8</span> 上传到私有仓库docker push <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span>django1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token number">9</span> 从私有仓库拉取镜像docker pull <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span>django1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span></code></pre><h2 id="五、docker-compose"><a href="#五、docker-compose" class="headerlink" title="五、docker-compose"></a>五、docker-compose</h2><pre class=" language-python"><code class="language-python"><span class="token number">1</span> docker<span class="token operator">-</span>compose是一个单机情况下容器编排的工具<span class="token number">2</span> 通过yml文件定义多个容器<span class="token number">3</span> 默认名字docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>yml<span class="token number">4</span> 三个概念，Service  Networks ，Volumes    一个service代表一个container，这个container可以从docker hub的image来创建，或者从本地dockerfile build的image来创建<span class="token number">5</span> version：有<span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>版本，目前都用<span class="token string">"3"</span><span class="token number">6</span> 安装curl <span class="token operator">-</span>L https<span class="token punctuation">:</span><span class="token operator">//</span>get<span class="token punctuation">.</span>daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>docker<span class="token operator">/</span>compose<span class="token operator">/</span>releases<span class="token operator">/</span>download<span class="token operator">/</span><span class="token number">1.25</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token operator">-</span>`uname <span class="token operator">-</span>s`<span class="token operator">-</span>`uname <span class="token operator">-</span>m` <span class="token operator">></span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>docker<span class="token operator">-</span>composechmod <span class="token operator">+</span>x <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token number">7</span> 验证安装成功    docker<span class="token operator">-</span>compose <span class="token operator">-</span>v</code></pre><p><strong>应用部署</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 部署flask redis</span><span class="token number">1</span> 创建Dockerfilevim DockerfileFROM python<span class="token punctuation">:</span><span class="token number">3.6</span>COPY <span class="token punctuation">.</span> <span class="token operator">/</span>appWORKDIR <span class="token operator">/</span>appRUN pip install flask redisEXPOSE <span class="token number">5000</span>CMD <span class="token punctuation">[</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"app.py"</span> <span class="token punctuation">]</span><span class="token number">2</span> 创建docker<span class="token operator">-</span>compose文件vim docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>ymlversion<span class="token punctuation">:</span> <span class="token string">"3"</span>services<span class="token punctuation">:</span>  redis<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> redis  web<span class="token punctuation">:</span>    build<span class="token punctuation">:</span>      context<span class="token punctuation">:</span> <span class="token punctuation">.</span>      dockerfile<span class="token punctuation">:</span> Dockerfile    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">5000</span>    environment<span class="token punctuation">:</span>      REDIS_HOST<span class="token punctuation">:</span> redis<span class="token number">3</span> 创建app<span class="token punctuation">.</span>pyvim app<span class="token punctuation">.</span>py<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> redis <span class="token keyword">import</span> Redis<span class="token keyword">import</span> os<span class="token keyword">import</span> socketapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>redis <span class="token operator">=</span> Redis<span class="token punctuation">(</span>host<span class="token operator">=</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REDIS_HOST'</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    redis<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'hits'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'你好! 查看 %s 次， hostname 是 %s.\n'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'hits'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token number">4</span> 启动<span class="token operator">-</span><span class="token operator">-</span>运行docker<span class="token operator">-</span>compose up</code></pre><h2 id="六、多个容器通信"><a href="#六、多个容器通信" class="headerlink" title="六、多个容器通信"></a>六、多个容器通信</h2><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 端口映射到宿主机，直接访问宿主机<span class="token number">2</span> 通过ip地址访问<span class="token number">3</span> run的时候指定 <span class="token operator">-</span><span class="token operator">-</span>link 容器 docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>centos1 centos<span class="token punctuation">:</span>centos7docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>centos2 <span class="token operator">-</span><span class="token operator">-</span>link centos1 centos<span class="token punctuation">:</span>centos7进入到centos2中 ping centos1 可以ping同<span class="token comment" spellcheck="true"># 跨主机的容器通信</span>    <span class="token operator">-</span>端口映射</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器化 </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用操作</title>
      <link href="/task/2019/08/15/Docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/task/2019/08/15/Docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Docker出现的原因"><a href="#一、Docker出现的原因" class="headerlink" title="一、Docker出现的原因"></a>一、Docker出现的原因</h2><h3 id="1-方便"><a href="#1-方便" class="headerlink" title="1 方便"></a>1 方便</h3><p>在Docker出现之前，要做一个项目需要有 <strong>开发环境</strong> 和 <strong>上线环境</strong>，不同环境之间的配置也不一样，导致开发和运维去上线一个项目就需要一定的成本</p><p>比如说我们需要跑的django项目+环境（mysql,redis,es）这是必不可少的</p><p>但是Docker可以把项目和环境放到一起，也就是环境不再需要重新搭建，在Docker上就可以很快实现</p><h3 id="2-小"><a href="#2-小" class="headerlink" title="2 小"></a>2 小</h3><p>在这之前虚拟化技术的的应用最起码需要一个vm软件+系统镜像，这两个东西不仅非常占用内存，还占用硬盘，普通一个系统镜像就需要十几个g</p><p>而docker是为了实用而生的用的是容器化技术，所以再Docker容器中不会有那么全的整体系统，而是装载了我们需要的环境，不同的Docker镜像只有十几m</p><p><strong>总结docker和虚拟技术的不同</strong></p><ul><li>传统虚拟机，需要虚拟出一套完整的硬件，运行一个完整的操作系统，上面运行软件</li><li>容器化技术，容器内部没有内核只有依赖包和软件，直接运行在宿主机上，容器之间也是相互隔离保证软件的安全，所以快的一批，且安全</li></ul><h3 id="3-Docker在DevOps上的体现"><a href="#3-Docker在DevOps上的体现" class="headerlink" title="3 Docker在DevOps上的体现"></a>3 Docker在DevOps上的体现</h3><blockquote><p>DevOps（开发、运维）</p></blockquote><p><strong>应用更快速的交付和部署</strong></p><ul><li>传统：一堆帮助文档，安装程序</li><li>Docker：打包镜像发布测试，一键上线</li></ul><p><strong>更快捷的升级和扩缩容</strong></p><ul><li>传统：升级运行环境需要一个一个升级，比如redis升级，mysql升级</li><li>Docker：环境是打包好的，可以整体升级</li></ul><p>扩展，做负载均衡</p><ul><li>传统：就是重新在一个服务器上部署一套运行环境</li><li>Docker：直接运行镜像即可</li></ul><p><strong>更简单的系统运维</strong></p><p>开发测试环境高度一致</p><p><strong>更高效的计算机利用资源</strong></p><p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多个容器实例</p><h3 id="4-补充"><a href="#4-补充" class="headerlink" title="4 补充"></a>4 补充</h3><pre><code>0 各种软件用什么语言写的    zabbix（监控软件）：php    ansible（批量管理主机，执行命令,无angent）：python    openstack（云计算，管理虚拟机）：python    jekins（ci/di）：自动化部署，java    salstack(批量管理主机，执行命令，有angent):python    普罗米修斯（Prometheus，监控）：go写的    docker：go    k8s：go1 虚拟化技术有两类很核心的软件，一种是在硬件上虚拟出不同的操作系统，一种是管理这些操作系统    - vmware，kvm，docker 虚拟化操作系统（前两者虚拟的更加真实）    - openstach，k8s，阿里飞天 管理不同的虚拟化出来的操作系统    - k8s主要是管理量比较大的容器    - 虚拟化的核心：打破实体结构间不可分割的障碍2 Docker是一个客户端-服务器（C/S）架构程序（mysql，redis都是cs架构），整套RESTful API</code></pre><h2 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h2><h3 id="1-Docker基本组成"><a href="#1-Docker基本组成" class="headerlink" title="1 Docker基本组成"></a>1 Docker基本组成</h3><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/image-20200828114857826.png" alt="image-20200828114857826" loading="lazy"></p><p><strong>镜像（image）：</strong></p><p>是一个模版，用这个模块去创建容器对象，镜像和容器就想是类和对象的关系一样</p><p>镜像可以实例化出多个容器对象</p><p><strong>容器（container）：</strong></p><p>利用容器技术可以运行一个或一组应用，有启动，停止，删除等基本命令</p><p>这个容器可以理解为一个简易的linux系统</p><p><strong>仓库（repository）：</strong></p><p>就是存放镜像的地方</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 卸载旧版本</span>yum remove docker \                  docker<span class="token operator">-</span>client \                  docker<span class="token operator">-</span>client<span class="token operator">-</span>latest \                  docker<span class="token operator">-</span>common \                  docker<span class="token operator">-</span>latest \                  docker<span class="token operator">-</span>latest<span class="token operator">-</span>logrotate \                  docker<span class="token operator">-</span>logrotate \                  docker<span class="token operator">-</span>engine<span class="token comment" spellcheck="true"># 2 需要的安装包</span>yum install <span class="token operator">-</span>y yum<span class="token operator">-</span>utils<span class="token comment" spellcheck="true"># 3 设置镜像仓库，默认是国外的</span>yum<span class="token operator">-</span>config<span class="token operator">-</span>manager \    <span class="token operator">-</span><span class="token operator">-</span>add<span class="token operator">-</span>repo \    https<span class="token punctuation">:</span><span class="token operator">//</span>download<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repoyum<span class="token operator">-</span>config<span class="token operator">-</span>manager \    <span class="token operator">-</span><span class="token operator">-</span>add<span class="token operator">-</span>repo \    http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo<span class="token comment" spellcheck="true"># 更新yum软件包索引</span>yum makecache fast<span class="token comment" spellcheck="true"># 4 安装docker ce社区，ee企业</span>yum install docker<span class="token operator">-</span>ce docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli containerd<span class="token punctuation">.</span>io<span class="token comment" spellcheck="true"># 5 检查版本</span>docker version<span class="token comment" spellcheck="true"># 6 启动第一个镜像hello-word</span>docker run hello<span class="token operator">-</span>word <span class="token comment" spellcheck="true"># 本地肯定是没有的，所以是去远程仓库拉下来的镜像</span><span class="token comment" spellcheck="true"># 7 启动docker服务</span>systemctl start docker<span class="token comment" spellcheck="true"># 8 停止docker服务，重启docker服务</span>systemctl stop dockersystemctl restart docker<span class="token comment" spellcheck="true"># 9 开机启动    </span>systemctl enable docker<span class="token comment" spellcheck="true"># 10 查看概要信息</span>docker info</code></pre><h3 id="3-远程仓库"><a href="#3-远程仓库" class="headerlink" title="3 远程仓库"></a>3 远程仓库</h3><p>如果感觉拉去镜像非常慢的话，可以配置一下备份镜像</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注册，登录 https://hub.docker.com/</span><span class="token comment" spellcheck="true"># 你可以上传镜像（类似于github），你把你制作的镜像传上去，别人可以下载使用</span><span class="token comment" spellcheck="true"># 配置加速（之前去https://hub.docker.com/），阿里云，清华，做了一个备份，配置好以后，再拉镜像会去国内地址拉取</span>第一步：vi <span class="token operator">/</span>etc<span class="token operator">/</span>docker<span class="token operator">/</span>daemon<span class="token punctuation">.</span>json  第二步：<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span><span class="token string">"registry-mirrors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"https://docker.mirrors.ustc.edu.cn"</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="三、Docker基本操作"><a href="#三、Docker基本操作" class="headerlink" title="三、Docker基本操作"></a>三、Docker基本操作</h2><h3 id="1-镜像操作"><a href="#1-镜像操作" class="headerlink" title="1 镜像操作"></a>1 镜像操作</h3><pre class=" language-python"><code class="language-python"><span class="token number">0</span> 查找镜像    方式一：https<span class="token punctuation">:</span><span class="token operator">//</span>hub<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com<span class="token operator">/</span> 点点点搜索（你用这种）    方式二：docker search <span class="token number">1</span> 拉取镜像     docker pull hello<span class="token operator">-</span>world  最新版本latest    docker pull hello<span class="token operator">-</span>world<span class="token punctuation">:</span>nanoserver<span class="token number">2</span> 查看机器上有哪些镜像     docker images    REPOSITORY  TAG   IMAGE ID   CREATED   SIZE    镜像名字      版本   id号       创建时间   大小<span class="token number">3</span> 删除镜像    docker rmi 镜像名字<span class="token operator">/</span>id号（<span class="token comment" spellcheck="true"># 如果还有基于这个镜像的容器，是不允许删除镜像的，先删除容器，再删除images）</span><span class="token number">4</span> 练习：拉取python3<span class="token number">.6</span>镜像，redis最新镜像，mysql5<span class="token number">.7</span>镜像    docker pull python<span class="token punctuation">:</span><span class="token number">3.6</span>    docker pull redis    docker pull mysql5<span class="token number">.7</span>    docker pull centos<span class="token punctuation">:</span>centos7<span class="token number">5</span> 镜像是什么？    <span class="token operator">-</span>就是一堆文件，这堆文件通过docker跑起来，就是容器，你现在就把他当成，一个操作系统内跑了这个软件（centos<span class="token operator">+</span>redis）    <span class="token operator">-</span>假设centos7的镜像跑起来，容器你就当成在你宿主机上跑了一个centos7的操作系统（虚拟机） <span class="token number">6</span> 补充（了解）    docker image inspect <span class="token number">46ff56815c7c</span>    docker image ls    docker image rm</code></pre><h3 id="2-容器操作"><a href="#2-容器操作" class="headerlink" title="2 容器操作"></a>2 容器操作</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 删除容器 docker rm 容器名字<span class="token operator">/</span>容器id<span class="token number">2</span> 启动并运行容器    <span class="token comment" spellcheck="true"># 通过centos:centos7镜像，创建一个容器名字叫mycentos，并且把它运行起来</span>    docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mycentos centos<span class="token punctuation">:</span>centos7    打印出容器的id号<span class="token number">3</span> 查看机器上正在运行的容器    docker ps<span class="token number">4</span> 查看宿主机上所有的容器（包括停止的）    docker ps <span class="token operator">-</span>a<span class="token number">5</span> 停止容器    docker stop 容器名字<span class="token operator">/</span>id号<span class="token number">6</span> 启动容器    docker start 容器id<span class="token operator">/</span>名字<span class="token number">7</span> 容器的创建和启动（<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>）    <span class="token operator">-</span>创建：docker create <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>xxx 镜像名：镜像版本 启动命令（默认启动bash，如果不是执行会夯住的命令，就会直接结束这个容器）    docker create <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>test<span class="token operator">-</span>container centos<span class="token punctuation">:</span>centos7 ps <span class="token operator">-</span>A    <span class="token operator">-</span>启动    docker start test<span class="token operator">-</span>container    <span class="token operator">-</span>容器一直运行的原因        <span class="token operator">-</span>它有一条前台进程<span class="token punctuation">,</span>一直在运行        <span class="token operator">-</span>以后如果自己制作的镜像，运行起容器，必须有个可以夯住的命令        <span class="token operator">-</span>如果该命令结束，该容器也就结束了    <span class="token operator">-</span>创建并启动（run）    <span class="token operator">-</span>i：表示运行容器    <span class="token operator">-</span>t：表示容器启动后会进入其命令行。    <span class="token operator">-</span>d：在run后面加上<span class="token operator">-</span>d参数<span class="token punctuation">,</span>则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加<span class="token operator">-</span>i <span class="token operator">-</span>t两个参数，创建后就会自动进去容器）。    <span class="token operator">-</span><span class="token operator">-</span>name <span class="token punctuation">:</span>为创建的容器命名。如果不写，会自动分配一个名字（英文人名）    <span class="token operator">-</span>v：表示目录映射关系（前者是宿主机目录，后者是容器目录，映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。    <span class="token operator">-</span>p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个<span class="token operator">-</span>p做多个端口映射    <span class="token operator">-</span>e：指定环境变量添加到容器的环境变量         <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token number">123456</span> 把mysql的密码设置成容器的环境变量    docker run <span class="token operator">-</span>it <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>myredis redis <span class="token comment" spellcheck="true"># 注意，docker run  镜像 如果本地没有，会先pull，再run</span><span class="token number">8</span> 进入容器的几种方式（并不是真进入）    第一种：docker <span class="token keyword">exec</span> <span class="token operator">-</span>it  容器id <span class="token operator">/</span>bin<span class="token operator">/</span>bash        docker <span class="token keyword">exec</span> 容器id ls         <span class="token keyword">exec</span>真正的作用是在容器内执行命令    第二种：ssh连接（容器内部装ssh服务端）<span class="token number">9</span> 退出    exit<span class="token number">10</span> 文件拷贝    <span class="token operator">-</span>从宿主机拷贝到容器内部        docker cp lqz<span class="token punctuation">.</span>txt 容器id<span class="token punctuation">:</span><span class="token operator">/</span>home    <span class="token operator">-</span>从容器内部拷贝到宿主机        docker cp 容器id<span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>lqz<span class="token punctuation">.</span>txt <span class="token operator">/</span>app<span class="token number">11</span> 目录挂载        docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mycentos99 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>lqz<span class="token punctuation">:</span><span class="token operator">/</span>home centos<span class="token punctuation">:</span>centos7    <span class="token comment" spellcheck="true"># 一旦挂载，以后宿主机目录内修改，同样影响容器内部</span><span class="token number">12</span> 端口映射    docker run <span class="token operator">-</span>di <span class="token operator">-</span>p <span class="token number">6377</span><span class="token punctuation">:</span><span class="token number">6379</span> redis<span class="token punctuation">:</span>latest    <span class="token comment" spellcheck="true"># 了解：/usr/local/bin/docker-entrypoint.sh</span><span class="token number">13</span> 查看容器详细信息    docker inspect f81    <span class="token comment" spellcheck="true"># 查看ip地址</span>    docker inspect <span class="token operator">-</span><span class="token operator">-</span>format<span class="token operator">=</span><span class="token string">'&amp;#123;&amp;#123;.NetworkSettings.IPAddress&amp;#125;&amp;#125;'</span> 容器名称（容器ID）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python一些实用的小工具</title>
      <link href="/task/2019/07/25/python%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/task/2019/07/25/python%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、发送邮件"><a href="#一、发送邮件" class="headerlink" title="一、发送邮件"></a>一、发送邮件</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Headermsg_from <span class="token operator">=</span> <span class="token string">'572478035@qq.com'</span>  <span class="token comment" spellcheck="true"># 发送方邮箱</span>passwd <span class="token operator">=</span> <span class="token string">'ffaoofjltdfmbcic'</span>  <span class="token comment" spellcheck="true"># 填入发送方邮箱的授权码(填入自己的授权码，相当于邮箱密码)</span>msg_to <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'798818871@qq.com'</span><span class="token punctuation">,</span><span class="token string">'904925371@qq.com'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 收件人邮箱</span><span class="token comment" spellcheck="true"># msg_to = '616564099@qq.com'  # 收件人邮箱</span>subject <span class="token operator">=</span> <span class="token string">"邮件接口测试"</span>  <span class="token comment" spellcheck="true"># 主题</span>content <span class="token operator">=</span> <span class="token string">"邮件内容，我是邮件内容，哈哈哈"</span><span class="token comment" spellcheck="true"># 生成一个MIMEText对象（还有一些其它参数）</span>msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 放入邮件主题</span>msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject<span class="token comment" spellcheck="true"># 也可以这样传参</span><span class="token comment" spellcheck="true"># msg['Subject'] = Header(subject, 'utf-8')</span><span class="token comment" spellcheck="true"># 放入发件人</span>msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> msg_from<span class="token comment" spellcheck="true"># 放入收件人</span><span class="token comment" spellcheck="true"># msg['To'] = '616564099@qq.com'</span><span class="token comment" spellcheck="true"># msg['To'] = '发给你的邮件啊'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 通过ssl方式发送，服务器地址，端口</span>    s <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span><span class="token string">"smtp.qq.com"</span><span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 登录到邮箱</span>    s<span class="token punctuation">.</span>login<span class="token punctuation">(</span>msg_from<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送邮件：发送方，收件方，要发送的消息</span>    s<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>msg_from<span class="token punctuation">,</span> msg_to<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="二、生成二维码"><a href="#二、生成二维码" class="headerlink" title="二、生成二维码"></a>二、生成二维码</h2><h3 id="1-生成普通二维码"><a href="#1-生成普通二维码" class="headerlink" title="1 生成普通二维码"></a>1 生成普通二维码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> MyQR <span class="token keyword">import</span> myqr  <span class="token comment" spellcheck="true">#注意大小写</span>myqr<span class="token punctuation">.</span>run<span class="token punctuation">(</span>words<span class="token operator">=</span><span class="token string">"网址链接或者字符串，不支持中文"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 会在当前路径生成一个“qrcode.png”文件，扫描二维码就会跳转到指定路径</span></code></pre><h3 id="2-生成带图片的二维码"><a href="#2-生成带图片的二维码" class="headerlink" title="2 生成带图片的二维码"></a>2 生成带图片的二维码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> MyQR <span class="token keyword">import</span> myqrmyqr<span class="token punctuation">.</span>run<span class="token punctuation">(</span>    words<span class="token operator">=</span><span class="token string">'Why can Li Xiaotong be so beautiful'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 扫描二维码后，显示的内容，或是跳转的链接</span>    version<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 设置容错率</span>    level<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 控制纠错水平，范围是L、M、Q、H，从左到右依次升高</span>    picture<span class="token operator">=</span><span class="token string">'a.jpg'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 图片所在目录，可以是动图</span>    colorized<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 黑白(False)还是彩色(True)</span>    contrast<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 用以调节图片的对比度，1.0 表示原始图片。默认为1.0。</span>    brightness<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 用来调节图片的亮度，用法同上。</span>    save_name<span class="token operator">=</span><span class="token string">'二维码.png'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 控制输出文件名，格式可以是 .jpg， .png ，.bmp ，.gif</span><span class="token punctuation">)</span></code></pre><h3 id="3-支持汉字生成二维码"><a href="#3-支持汉字生成二维码" class="headerlink" title="3 支持汉字生成二维码"></a>3 支持汉字生成二维码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> qrcodeqr <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>QRCode<span class="token punctuation">(</span>version<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                          error_correction<span class="token operator">=</span>qrcode<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>ERROR_CORRECT_L<span class="token punctuation">,</span>                          box_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>                          border<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加数据</span>qr<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成二维码</span>qr<span class="token punctuation">.</span>make<span class="token punctuation">(</span>fit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>img <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># image.save(r"C:\Desktop\s.png")</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API规范</title>
      <link href="/task/2019/05/15/RESTful%20API%E8%A7%84%E8%8C%83/"/>
      <url>/task/2019/05/15/RESTful%20API%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>这是一种web api接口的设计风格，比较适用于前后端分离的项目，它的特点就是一切数据都是资源。</p><p>与编程语言无关，任何一个框架都可以使用这种规范。</p><h2 id="一、数据的安全保障"><a href="#一、数据的安全保障" class="headerlink" title="一、数据的安全保障"></a>一、数据的安全保障</h2><p>url链接一般采用https进行传输，相比于http更加安全</p><h2 id="二、接口特征表现"><a href="#二、接口特征表现" class="headerlink" title="二、接口特征表现"></a>二、接口特征表现</h2><p>用api关键字表示接口url：</p><ul><li><a href="https://api.baidu.com/">https://api.baidu.com</a></li><li><a href="https://www.baidu.com/api">https://www.baidu.com/api</a></li></ul><h2 id="三、多数据版本共存"><a href="#三、多数据版本共存" class="headerlink" title="三、多数据版本共存"></a>三、多数据版本共存</h2><p>在url链接中标识数据版本</p><ul><li><a href="https://api.baidu.com/v1">https://api.baidu.com/v1</a></li><li><a href="https://api.baidu.com/v2">https://api.baidu.com/v2</a></li></ul><p>v1，v2就相当于我们不同版本对应同样请求的接口</p><h2 id="四、数据即资源，均使用名词（可复数）"><a href="#四、数据即资源，均使用名词（可复数）" class="headerlink" title="四、数据即资源，均使用名词（可复数）"></a>四、数据即资源，均使用名词（可复数）</h2><ul><li><p>接口一般都是完成前后台数据的交互，交互的数据我们称之为资源</p><ul><li><a href="https://api.baidu.com/users">https://api.baidu.com/users</a></li><li><a href="https://api.baidu.com/books">https://api.baidu.com/books</a></li><li><a href="https://api.baidu.com/book">https://api.baidu.com/book</a></li></ul><p>注：一般提倡用资源的复数形式，在url链接中奖励不要出现操作资源的动词，错误示范：<a href="https://api.baidu.com/delete-user">https://api.baidu.com/delete-user</a></p></li><li><p>特殊的接口可以出现动词，因为这些接口一般没有一个明确的资源，或是动词就是接口的核心含义</p><ul><li><a href="https://api.baidu.com/place/search">https://api.baidu.com/place/search</a></li><li><a href="https://api.baidu.com/login">https://api.baidu.com/login</a></li></ul></li></ul><h2 id="五、资源操作由请求方式决定"><a href="#五、资源操作由请求方式决定" class="headerlink" title="五、资源操作由请求方式决定"></a>五、资源操作由请求方式决定</h2><p>操作资源一般都会涉及到增删改查，我们提供请求方式来标识增删改查动作</p><ul><li><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - get请求：获取所有书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - get请求：获取主键为1的书</li><li><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - post请求：新增一本书书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - put请求：整体修改主键为1的书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - patch请求：局部修改主键为1的书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - delete请求：删除主键为1的书</li></ul><h2 id="六、可以通过url后的参数过滤"><a href="#六、可以通过url后的参数过滤" class="headerlink" title="六、可以通过url后的参数过滤"></a>六、可以通过url后的参数过滤</h2><ul><li><a href="https://api.example.com/v1/zoos?limit=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E6%95%B0%E9%87%8F">https://api.example.com/v1/zoos?limit=10：指定返回记录的数量</a></li><li><a href="https://api.example.com/v1/zoos?offset=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E5%BC%80%E5%A7%8B%E4%BD%8D%E7%BD%AE">https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置</a></li><li><a href="https://api.example.com/v1/zoos?page=2&amp;per_page=100%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E9%A1%B5%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%AF%8F%E9%A1%B5%E7%9A%84%E8%AE%B0%E5%BD%95%E6%95%B0">https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数</a></li><li><a href="https://api.example.com/v1/zoos?sortby=name&amp;order=asc%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%8C%89%E7%85%A7%E5%93%AA%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E9%A1%BA%E5%BA%8F">https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</a></li><li><a href="https://api.example.com/v1/zoos?animal_type_id=1%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6">https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件</a></li></ul><h2 id="七、响应状态码"><a href="#七、响应状态码" class="headerlink" title="七、响应状态码"></a>七、响应状态码</h2><h3 id="1-正常响应"><a href="#1-正常响应" class="headerlink" title="1 正常响应"></a>1 正常响应</h3><ul><li>响应状态码2xx<ul><li>200：常规请求</li><li>201：创建成功</li></ul></li></ul><h3 id="2-重定向响应"><a href="#2-重定向响应" class="headerlink" title="2 重定向响应"></a>2 重定向响应</h3><ul><li>响应状态码3xx<ul><li>301：永久重定向</li><li>302：暂时重定向</li></ul></li></ul><h3 id="3-客户端异常"><a href="#3-客户端异常" class="headerlink" title="3 客户端异常"></a>3 客户端异常</h3><ul><li>响应状态码4xx<ul><li>403：请求无权限</li><li>404：请求路径不存在</li><li>405：请求方法不存在</li></ul></li></ul><h3 id="4-服务器异常"><a href="#4-服务器异常" class="headerlink" title="4 服务器异常"></a>4 服务器异常</h3><ul><li>响应状态码5xx<ul><li>500：服务器异常</li></ul></li></ul><h2 id="八、-错误处理，应返回错误信息，error当做key"><a href="#八、-错误处理，应返回错误信息，error当做key" class="headerlink" title="八、 错误处理，应返回错误信息，error当做key"></a>八、 错误处理，应返回错误信息，error当做key</h2><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    error<span class="token punctuation">:</span> <span class="token string">"无权限操作"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h2 id="九、根据操作的不同，返回不同的数据格式"><a href="#九、根据操作的不同，返回不同的数据格式" class="headerlink" title="九、根据操作的不同，返回不同的数据格式"></a>九、根据操作的不同，返回不同的数据格式</h2><pre class=" language-python"><code class="language-python">GET <span class="token operator">/</span>collection：返回资源对象的列表（数组）GET <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回单个资源对象POST <span class="token operator">/</span>collection：返回新生成的资源对象PUT <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回完整的资源对象PATCH <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回完整的资源对象DELETE <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回一个空文档</code></pre><h2 id="十、可以在数据中携带需要请求资源的url地址"><a href="#十、可以在数据中携带需要请求资源的url地址" class="headerlink" title="十、可以在数据中携带需要请求资源的url地址"></a>十、可以在数据中携带需要请求资源的url地址</h2><pre class=" language-json"><code class="language-json"># Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么&amp;#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>      <span class="token property">"results"</span><span class="token operator">:</span><span class="token punctuation">[</span>        &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"肯德基(罗餐厅)"</span><span class="token punctuation">,</span>            <span class="token property">"img"</span><span class="token operator">:</span> <span class="token string">"https://image.baidu.com/kfc/001.png"</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>          ...        <span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>比较好的接口返回</p><pre class=" language-json"><code class="language-json"># 响应数据要有状态码、状态信息以及数据本身&amp;#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>      <span class="token property">"results"</span><span class="token operator">:</span><span class="token punctuation">[</span>        &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"肯德基(罗餐厅)"</span><span class="token punctuation">,</span>            <span class="token property">"location"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"lat"</span><span class="token operator">:</span><span class="token number">31.415354</span><span class="token punctuation">,</span>                <span class="token property">"lng"</span><span class="token operator">:</span><span class="token number">121.357339</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token property">"address"</span><span class="token operator">:</span><span class="token string">"月罗路2380号"</span><span class="token punctuation">,</span>            <span class="token property">"province"</span><span class="token operator">:</span><span class="token string">"上海市"</span><span class="token punctuation">,</span>            <span class="token property">"city"</span><span class="token operator">:</span><span class="token string">"上海市"</span><span class="token punctuation">,</span>            <span class="token property">"area"</span><span class="token operator">:</span><span class="token string">"宝山区"</span><span class="token punctuation">,</span>            <span class="token property">"street_id"</span><span class="token operator">:</span><span class="token string">"339ed41ae1d6dc320a5cb37c"</span><span class="token punctuation">,</span>            <span class="token property">"telephone"</span><span class="token operator">:</span><span class="token string">"(021)56761006"</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"uid"</span><span class="token operator">:</span><span class="token string">"339ed41ae1d6dc320a5cb37c"</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>          ...        <span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resfulapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python奇闻杂技</title>
      <link href="/task/2019/03/15/python%E5%A5%87%E9%97%BB%E6%9D%82%E6%8A%80/"/>
      <url>/task/2019/03/15/python%E5%A5%87%E9%97%BB%E6%9D%82%E6%8A%80/</url>
      
        <content type="html"><![CDATA[<h2 id="一、eval函数"><a href="#一、eval函数" class="headerlink" title="一、eval函数"></a>一、eval函数</h2><p>eval()可以传三个参数，第一个参数用于计算，后面两个参数用于表达第一个参数的名称空间</p><p>当后两个参数都为空时，很好理解，就是一个string类型的算术表达式，计算出结果即可。等价于eval(expression)。</p><p>当locals参数为空，globals参数不为空时，先查找globals参数中是否存在变量，并计算。</p><p>当两个参数都不为空时，先查找locals参数，再查找globals参数。</p><p>1、简单表达式</p><p>print(eval(‘1+2’))</p><p>输出结果：3</p><p>2、字符串转字典</p><p>print(eval(“{‘name’:’linux’,’age’:18}”)</p><p>输出结果：{‘name’:’linux’,’age’:18}</p><p>3、传递全局变量</p><p>print(eval(“{‘name’:’linux’,’age’:age}”,{“age”:1822}))</p><p>输出结果：{‘name’: ‘linux’, ‘age’: 1822}</p><p>4、传递本地变量</p><p>age=18</p><p>print(eval(“{‘name’:’linux’,’age’:age}”,{“age”:1822},locals()))</p><p>输出结果：{‘name’: ‘linux’, ‘age’: 18}</p><p><strong>总结</strong>：eval最简单的用法就是去掉参数最外层的引号并执行剩下的yu’ju，比如把a=’123’转化成整形，eval也可以传表达式，比如print，input，复杂的甚至可以执行系统命令，删除数据等，所以使用时需要进行限制</p><h2 id="二、保留字（关键字）"><a href="#二、保留字（关键字）" class="headerlink" title="二、保留字（关键字）"></a>二、保留字（关键字）</h2><p>被编程语言内部定义保留使用的标识符</p><p>if elif等。。。</p><h2 id="三、turtle画笔模块"><a href="#三、turtle画笔模块" class="headerlink" title="三、turtle画笔模块"></a>三、turtle画笔模块</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token comment" spellcheck="true"># 窗体生成的宽，高，位置</span>turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 落笔的位置</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画笔大小</span>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画笔颜色</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 线条的角度</span>turtle<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 一次画的角度，长度</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直线长度</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/1.png" alt="1" loading="lazy"></p><h2 id="四、json模块版本问题"><a href="#四、json模块版本问题" class="headerlink" title="四、json模块版本问题"></a>四、json模块版本问题</h2><p>json.loads转化bytes类型，3.6以上可以，3.5不可以</p><h2 id="五、jieba库"><a href="#五、jieba库" class="headerlink" title="五、jieba库"></a>五、jieba库</h2><p>jieba库能对中文分词，有三种分词模式</p><p>精确模式：把文本精确的分开，不存在冗余单词</p><p>全模式：把文本中所有可能的词语都扫描出来，有冗余</p><p>搜索引擎模式：在精确模式基础上，对长词再次切分</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">jieba.lcut(s)</td><td align="center">精确模式，返回一个列表类型的分词结果</td></tr><tr><td align="center">jieba.lcut(s,cut_all=True)</td><td align="center">全模式，返回一个列表模式的分词结果，存在冗余</td></tr><tr><td align="center">jieba.lcut_for_serch(s)</td><td align="center">搜索引擎模式，返回一个列表类型的分词结果，存在冗余</td></tr><tr><td align="center">jieba.add_word(w)</td><td align="center">向分词词典添加新词w</td></tr></tbody></table><pre class=" language-PYTHON"><code class="language-PYTHON">import jiebajieba.lcut("中国是一个伟大的国家")Building prefix dict from the default dictionary ...Loading model from cache /var/folders/mh/krrg51957cqgl0rhgnwyylvc0000gn/T/jieba.cacheLoading model cost 0.979 seconds.Prefix dict has been built succesfully.['中国', '是', '一个', '伟大', '的', '国家']jieba.lcut("中国是一个伟大的国家",cut_all=True)['中国', '国是', '一个', '伟大', '的', '国家']jieba.lcut("中华人民共和国是伟大的")['中华人民共和国', '是', '伟大', '的']jieba.lcut("中华人民共和国是伟大的",cut_all=True)['中华', '中华人民', '中华人民共和国', '华人', '人民', '人民共和国', '共和', '共和国', '国是', '伟大', '的']jieba.lcut_for_search("中华人民共和国是伟大的")['中华', '华人', '人民', '共和', '共和国', '中华人民共和国', '是', '伟大', '的']jieba.add_word("蟒蛇语言")</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask 中间件、蓝图，请求上下文执行流程</title>
      <link href="/task/2018/06/11/Flask%20%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%81%E8%93%9D%E5%9B%BE%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/task/2018/06/11/Flask%20%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%81%E8%93%9D%E5%9B%BE%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、flask中间件"><a href="#一、flask中间件" class="headerlink" title="一、flask中间件"></a>一、flask中间件</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>session<span class="token punctuation">,</span>request<span class="token punctuation">,</span>flash<span class="token punctuation">,</span>get_flashed_messages<span class="token punctuation">,</span>redirectapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Md</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>old_wsgi_app<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>old_wsgi_app <span class="token operator">=</span> old_wsgi_app    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>  environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始之前'</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>old_wsgi_app<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>        <span class="token keyword">import</span> time        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束之后'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'index'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>wsgi_app <span class="token operator">=</span> Md<span class="token punctuation">(</span>app<span class="token punctuation">.</span>wsgi_app<span class="token punctuation">)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># django中间件的功能就是在请求还没到路由之前对请求进行处理，在flask中对应着请求扩展</span>    <span class="token comment" spellcheck="true"># 而flask中间件则是通过对象的实例化去给请求生成过程添加额外功能</span>       <span class="token comment" spellcheck="true"># 在执行app.run方法的时候，最终执行的是run_simple最后执行app()也就是调用了app类的__call__方法内的self.wsgi_app()</span>    <span class="token comment" spellcheck="true"># 所以我们可以在run之前把wsgi_app()放到我们自定义的中间件对象中</span>    <span class="token comment" spellcheck="true"># 把原来的wsgi_app替换成新的，但是也要保证原来的功能执行了</span>    <span class="token comment" spellcheck="true"># ps：基本不用</span></code></pre><h2 id="二、猴子补丁（扩展）"><a href="#二、猴子补丁（扩展）" class="headerlink" title="二、猴子补丁（扩展）"></a>二、猴子补丁（扩展）</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 只是一个概念</span><span class="token comment" spellcheck="true"># 比如我一个项目中用的全是json，如果我想全都换成ujson来增加性能</span><span class="token comment" spellcheck="true"># 可以在每个页面都写</span><span class="token keyword">import</span> ujson <span class="token keyword">as</span> json<span class="token comment" spellcheck="true"># 但是这样太麻烦了</span><span class="token comment" spellcheck="true"># 而猴子补丁就利用了python一切皆对象的理念，在程序运行过程中，动态修改方法</span><span class="token comment" spellcheck="true"># class Monkey():</span><span class="token comment" spellcheck="true">#     def play(self):</span><span class="token comment" spellcheck="true">#         print('猴子在玩')</span><span class="token comment" spellcheck="true"># class Dog():</span><span class="token comment" spellcheck="true">#     def play(self):</span><span class="token comment" spellcheck="true">#         print('狗子在玩')</span><span class="token comment" spellcheck="true"># m=Monkey()</span><span class="token comment" spellcheck="true"># # m.play()</span><span class="token comment" spellcheck="true"># m.play=Dog().play</span><span class="token comment" spellcheck="true"># m.play()</span><span class="token comment" spellcheck="true"># 猴子补丁可以放在项目的入口，用新模块替换原来的模块，名字保持不变</span></code></pre><h2 id="三、蓝图（blueprint）"><a href="#三、蓝图（blueprint）" class="headerlink" title="三、蓝图（blueprint）"></a>三、蓝图（blueprint）</h2><p>为了防止项目大了之后全局app的循环导入问题</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 蓝图使用</span><span class="token comment" spellcheck="true"># 小型项目文件目录</span><span class="token operator">-</span>flask_pro    <span class="token operator">-</span>flask_test        <span class="token operator">-</span>__init__<span class="token punctuation">.</span>py        <span class="token operator">-</span>static        <span class="token operator">-</span>templates        <span class="token operator">-</span>views            <span class="token operator">-</span>order<span class="token punctuation">.</span>py            <span class="token operator">-</span>user<span class="token punctuation">.</span>py     <span class="token operator">-</span>manage<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 1 注册蓝图</span><span class="token comment" spellcheck="true"># 在init中 </span><span class="token keyword">from</span> flask <span class="token keyword">import</span>  Flaskapp<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">from</span> flask_test<span class="token punctuation">.</span>views <span class="token keyword">import</span> user<span class="token keyword">from</span> flask_test<span class="token punctuation">.</span>views <span class="token keyword">import</span> orderapp<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>user<span class="token punctuation">.</span>us<span class="token punctuation">)</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>order<span class="token punctuation">.</span>ord<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 使用蓝图</span><span class="token comment" spellcheck="true"># 在视图页面user</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprintus<span class="token operator">=</span>Blueprint<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span>__name__<span class="token punctuation">)</span>@us<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'login'</span><span class="token comment" spellcheck="true"># 蓝图也可以做路由分发</span><span class="token comment" spellcheck="true"># Blueprint（）中传参url_prefix = '/ooo' 表示该蓝图的根目录是/ooo</span><span class="token comment" spellcheck="true"># 传参 template_foder=‘xxx’ 会在当前目录找template对应的文件当做这个蓝图的模版目录</span></code></pre><h2 id="四、partal偏函数（扩展）"><a href="#四、partal偏函数（扩展）" class="headerlink" title="四、partal偏函数（扩展）"></a>四、partal偏函数（扩展）</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 偏函数的第一个参数可以放一个函数的内存地址</span><span class="token comment" spellcheck="true"># 后续参数为这个函数的参数，如果传的少了，这个偏函数的返回结果是一个新的函数</span><span class="token comment" spellcheck="true"># 这个函数已经通过偏函数为前几个参数传了值，后续只要补上后面的参数即可</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">+</span>dtes<span class="token operator">=</span>partial<span class="token punctuation">(</span>test<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tes<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="五、threading-local"><a href="#五、threading-local" class="headerlink" title="五、threading.local"></a>五、threading.local</h2><p>flask实现每次请求都是不同的request但是这个request是全局变量的原因</p><p>当一个请求来的时候，uwsgi为我们开启了一个线程/协程</p><p>此时request作为全局变量是放在解释器中的，也就是如果多线程去操作这个数据的话必定会发生数据错乱，此时我们要保证数据不乱，同时不能用锁来影响我们的并发</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> greenlet <span class="token keyword">import</span> getcurrent <span class="token keyword">as</span> get_ident<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">from</span> threading <span class="token keyword">import</span> get_ident<span class="token comment" spellcheck="true"># 上面的代码保证了线程和协程都能有独自的id号</span><span class="token comment" spellcheck="true"># 因为如果在线程里开设了多个协程，只获取线程id就是一样的</span><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">Local</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">'storage'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>        ident <span class="token operator">=</span> get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ident <span class="token keyword">in</span> self<span class="token punctuation">.</span>storage<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># storage：｛线程id：app对象，。。｝</span>             self<span class="token punctuation">.</span>storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v         <span class="token keyword">else</span><span class="token punctuation">:</span>             self<span class="token punctuation">.</span>storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;k: v&amp;#125;</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        ident <span class="token operator">=</span> get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>obj <span class="token operator">=</span> Local<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj<span class="token punctuation">.</span>val <span class="token operator">=</span> arg    <span class="token comment" spellcheck="true"># obj.xxx = arg</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="六、请求上下文执行流程"><a href="#六、请求上下文执行流程" class="headerlink" title="六、请求上下文执行流程"></a>六、请求上下文执行流程</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步 app.run 找到核心逻辑代码</span><span class="token comment" spellcheck="true"># 最终调用了werkzeug的run_simple，然后传了一堆配置参数，这个函数会调用执行app</span><span class="token comment" spellcheck="true"># 也就是会执行到Flask类的__call__方法</span><span class="token comment" spellcheck="true"># 这里又调用了wsgi_app方法，这就是整个请求流程的核心代码</span><span class="token comment" spellcheck="true"># 第二步 解析wsgi_app方法</span><span class="token comment" spellcheck="true"># 这一步返回了RequestContext对象，内部封装了本次请求request，session等信息</span>ctx <span class="token operator">=</span> self<span class="token punctuation">.</span>request_context<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 上面已经知道了这个ctx就是RequestContext对象</span>ctx<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这个push的最后为我们设置了真正的session</span><span class="token comment" spellcheck="true"># 在这之上调用了_request_ctx_stack.push</span>_request_ctx_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># _request_ctx_stack是Flask创建出来就产生了的顶级变量，总共有6个</span><span class="token comment" spellcheck="true"># 它是由LocalStack类实例化得到的</span>_request_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 也就是我们上面找的push实际上是LocalStack的函数</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">,</span> <span class="token string">"stack"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># _local是flask自带的local对象</span>            <span class="token comment" spellcheck="true"># 他的特点是不同线程放的值只有自己这次请求能用</span>            self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>stack <span class="token operator">=</span> rv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># obj是ctx对象</span>        rv<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> rv<span class="token comment" spellcheck="true"># 继续解析wsgi_app</span><span class="token comment" spellcheck="true"># 这一步从字面上意思就是把请求对象转化成响应对象，内部应该就是请求流程的整体逻辑了</span>response <span class="token operator">=</span> self<span class="token punctuation">.</span>full_dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">full_dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这是第一次请求时触发的被before_first装饰的函数</span>        <span class="token comment" spellcheck="true"># 内部就是执行了全部的这些函数然后把标志第一次的参数改成True</span>        self<span class="token punctuation">.</span>try_trigger_before_first_request_functions<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 信号相关</span>            request_started<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 被before_request装饰的函数，所以他的返回值已经被限定死了</span>            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>preprocess_request<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 这里真正的根据路由执行视图函数</span>                rv <span class="token operator">=</span> self<span class="token punctuation">.</span>dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>handle_user_exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># rv是我们的响应对象，这里通过make_response处理了保证字符串也能转成response对象</span>        <span class="token comment" spellcheck="true"># 然后它还会调用视图中被after_reuqest装饰的函数，内部规定了传值和接收值，所以我们的请求扩展要那么写</span>        <span class="token comment" spellcheck="true"># 还会把session放到rv中，也就是在请求扩展中是可以拿到session的</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>finalize_request<span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 继续解析wsgi_app</span><span class="token comment" spellcheck="true"># 上面已经拿到响应对象了，也就是其实到这里请求的所有流程已经结束了，在这最后会把我们的ctx对象从local中移除</span>ctx<span class="token punctuation">.</span>auto_pop<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 总结：从run方法开始，调用了run就是调用了werkzeug的run_simple</span><span class="token comment" spellcheck="true"># run_simple配置了很多参数调用了app，也就是调用了Flask类的__call__方法</span><span class="token comment" spellcheck="true"># 内部又调用了wsgi_app方法，这是Flask请求响应的核心逻辑</span><span class="token comment" spellcheck="true"># 先会生成一个ctx对象，这是本次请求的所有信息（request，session，app）通过线程号作为key，信息作为value放到local字典中，所以每次取的时候都是唯一的</span><span class="token comment" spellcheck="true"># 然后去执行了请求扩展的一些函数，比如befor_request</span><span class="token comment" spellcheck="true"># 请求处理完成之后就是获取响应对象，就是执行了视图函数，返回的响应对象需要传给响应扩展函数</span><span class="token comment" spellcheck="true"># 就是那些被after_request装饰的函数，执行完成后获得真正的响应对象，返回给前端</span><span class="token comment" spellcheck="true"># 最后要把ctx对象从原来的字典中移除，因为本次请求已经完成</span></code></pre><p><strong>如何全局拿到唯一的request对象</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># request是视图中的全局变量，但是却唯一</span><span class="token comment" spellcheck="true"># 这里使用偏函数包装起来，此时并没有执行</span><span class="token comment" spellcheck="true"># 我们可以打印request对象的方法，那么LocalProxy内部必定重写了__str__方法</span>request <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印的返回值是obj，这里可以猜测obj就是request对象</span>obj <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_current_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 去找LocalProxy内部的__local</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__local<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里用了封装，所以我们可以在__init__中找到_LocalProxy__local</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> local<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_LocalProxy__local"</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">if</span> callable<span class="token punctuation">(</span>local<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__wrapped__"</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># local是我们在类实例化的时候通过偏函数传进来的</span><span class="token comment" spellcheck="true"># 这时候再看这一句实例化的代码就能理解了，此时实例化的过程中传进来的偏函数内存地址</span><span class="token comment" spellcheck="true"># 在__init__中被调用执行获得了执行的记过，而这个结果返回给了__str__让他去打印</span><span class="token comment" spellcheck="true"># 之前就说了视图中打印的request对象是唯一的，所以现在只要知道_lookup_req_object是什么就ok了</span>LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_lookup_req_object</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 去local中拿到ctx对象（上面就解析过，ctx包含了request，app，session）</span>    top <span class="token operator">=</span> _request_ctx_stack<span class="token punctuation">.</span>top    <span class="token keyword">if</span> top <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>_request_ctx_err_msg<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># name是偏函数传进来的request字符串，通过反射获取了指定ctx对象的request</span>    <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>top<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 至此我们知道了request是如何拿出来唯一的，还有一个小点就是如何拿到request内部的其他对象，request取值都是通过点</span><span class="token comment" spellcheck="true"># 那就必定重写了__getattr__</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"__members__"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> dir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 很清晰，从传过来的name来到request对象中反射</span>        <span class="token comment" spellcheck="true"># 比如request.method</span>        <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 总结：Flask中的request虽然是个全局变量但是每次请求拿到的是唯一的，在Flask启动的时候就会创建LocalProxy对象</span><span class="token comment" spellcheck="true"># 它的实例化需要传一个参数，这里用的是偏函数，先从一个方法中通过request在ctx对象中的反射获取唯一的request对象</span><span class="token comment" spellcheck="true"># 然后在视图中打印的时候就会触发LocalProxy对象的__str__方法</span><span class="token comment" spellcheck="true"># 此时会从init中拿到实例化时被封装传进来的local，并执行，得到的就是唯一的那个request对象了</span><span class="token comment" spellcheck="true"># 然后在点取值，比如request.method的时候会触发__getattr__方法，同样是去拿到request对象从内部反射出结果返回</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
            <tag> python框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask 制定命令，sqlachemy</title>
      <link href="/task/2018/05/22/Flask%20%E5%88%B6%E5%AE%9A%E5%91%BD%E4%BB%A4%EF%BC%8Csqlachemy/"/>
      <url>/task/2018/05/22/Flask%20%E5%88%B6%E5%AE%9A%E5%91%BD%E4%BB%A4%EF%BC%8Csqlachemy/</url>
      
        <content type="html"><![CDATA[<h2 id="一、flask-script（制定命令）"><a href="#一、flask-script（制定命令）" class="headerlink" title="一、flask-script（制定命令）"></a>一、flask-script（制定命令）</h2><p>这是为了模拟类似django在命令行启动项目的方式</p><p>需要安装 <code>pip install flask-script</code></p><p><strong>使用</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Managerapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改启动文件后  就只能在命令行启动这个项目了</span><span class="token comment" spellcheck="true"># python 启动文件名 runserver</span></code></pre><p><strong>自定义命令</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 为函数加上装饰器即可</span><span class="token comment" spellcheck="true"># 启动命令为 python 文件名 方法名 -参数名 参数</span> @manager<span class="token punctuation">.</span>command <span class="token keyword">def</span> <span class="token function">custom</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> @manager<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'-n'</span><span class="token punctuation">,</span> <span class="token string">'--name'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">)</span> @manager<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span> <span class="token string">'--url'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span></code></pre><h2 id="二、sqlachemy"><a href="#二、sqlachemy" class="headerlink" title="二、sqlachemy"></a>二、sqlachemy</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h3><ul><li>是一个第三方orm框架（对象关系映射）</li><li>django中的orm只能在django内部自己使用，这个是可以集成到不同框架中</li><li>orm不是一门语言特有的，每个语言都多多少少有几个orm框架</li><li>sqlachemy本身无法操作数据库，需要pymysql等第三方插件</li></ul><p>flask使用sqlachemy要注意几个事情</p><ol><li>必须做成单例模式，否则数据库连接池就没意义了</li><li>必须做到线程安全，每一个请求来只能使用自己的conn对象</li><li>连接池中的链接用了几次最好杀一下，不然容易造成内存溢出</li></ol><h3 id="2-基本使用（原生sql）"><a href="#2-基本使用（原生sql）" class="headerlink" title="2 基本使用（原生sql）"></a>2 基本使用（原生sql）</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">import</span> sqlalchemy<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>base <span class="token keyword">import</span> Engine<span class="token comment" spellcheck="true"># 第一步生成一个engine对象</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>    <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/flask?charset=utf8"</span><span class="token punctuation">,</span>    max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>    pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>    pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>    pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二步：创建连接（执行原生sql）</span>conn <span class="token operator">=</span> engine<span class="token punctuation">.</span>raw_connection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第三步：获取游标对象</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第四步：具体操作</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from boy'</span><span class="token punctuation">)</span>res<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比pymysql优势在，有数据库连接池</span></code></pre><h3 id="3-orm使用"><a href="#3-orm使用" class="headerlink" title="3 orm使用"></a>3 orm使用</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token comment" spellcheck="true"># 字段和字段属性</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> Index<span class="token comment" spellcheck="true"># 制造了一个类，作为所有模型类的基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>  <span class="token comment" spellcheck="true"># 数据库表名称(固定写法)，如果不写，默认以类名小写作为表的名字</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># id 主键</span>    <span class="token comment" spellcheck="true"># mysql中主键自动建索引：聚簇索引</span>    <span class="token comment" spellcheck="true"># 其他建建的索引叫：辅助索引</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># name列，索引，不可为空</span>    <span class="token comment" spellcheck="true"># email = Column(String(32), unique=True)  # 唯一</span>    <span class="token comment" spellcheck="true"># #datetime.datetime.now不能加括号，加了括号，以后永远是当前时间</span>    <span class="token comment" spellcheck="true"># ctime = Column(DateTime, default=datetime.datetime.now) # default默认值</span>    <span class="token comment" spellcheck="true"># extra = Column(Text, nullable=True)</span>     <span class="token comment" spellcheck="true">#类似于djagno的 Meta</span>    <span class="token comment" spellcheck="true"># __table_args__ = (</span>    <span class="token comment" spellcheck="true">#     UniqueConstraint('id', 'name', name='uix_id_name'), #联合唯一</span>    <span class="token comment" spellcheck="true">#     Index('ix_id_name', 'name', 'email'), #索引</span>    <span class="token comment" spellcheck="true"># )</span><span class="token comment" spellcheck="true"># 创建表</span><span class="token keyword">def</span> <span class="token function">create_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建engine对象</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过engine对象创建表</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除表</span><span class="token keyword">def</span> <span class="token function">drop_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建engine对象</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过engine对象删除所有表</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># create_table()</span>    drop_table<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-线程安全"><a href="#4-线程安全" class="headerlink" title="4 线程安全"></a>4 线程安全</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 基于scoped_session实现线程安全</span><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> models <span class="token keyword">import</span> User  <span class="token comment" spellcheck="true"># pycharm报错，不会影响我们</span><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> scoped_session<span class="token comment" spellcheck="true"># 1 制作engine</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 制造一个 session 类（会话）</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 得到一个类</span><span class="token comment" spellcheck="true"># 3 得到一个session对象（线程安全的session）</span><span class="token comment" spellcheck="true">#现在的session已经不是session对象了</span><span class="token comment" spellcheck="true">#为什么线程安全，还是用的local</span>session <span class="token operator">=</span> scoped_session<span class="token punctuation">(</span>Session<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># session=Session()</span><span class="token comment" spellcheck="true"># 4 创建一个对象</span>obj1 <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"2008"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5 把对象通过add放入</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># session.aaa()</span><span class="token comment" spellcheck="true"># 6 提交</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 类不继承Session类，但是有该类的所有方法（通过反射，一个个放进去）</span><span class="token comment" spellcheck="true"># scoped_session.add------->instrument(name)--->do函数内存地址---》现在假设我要这么用：session.add()--->do()</span><span class="token comment" spellcheck="true"># scoped_session.close----->instrument(name)--->do函数内存地址</span></code></pre><h3 id="5-基本增删改查"><a href="#5-基本增删改查" class="headerlink" title="5 基本增删改查"></a>5 基本增删改查</h3><pre class=" language-PYTHON"><code class="language-PYTHON">from sqlalchemy.orm import sessionmakerfrom sqlalchemy import create_enginefrom models import User,Person,Hobbyfrom sqlalchemy.orm import scoped_sessionfrom sqlalchemy.sql import textengine = create_engine("mysql+pymysql://root:123@127.0.0.1:3306/aaa", max_overflow=0, pool_size=5)Session = sessionmaker(bind=engine)# session = scoped_session(Session)session=Session()####1 新增多个对象# obj=User(name='xxx')# obj2=User(name='yyyy')# obj3=User(name='zzz')#新增同样对象# session.add_all([obj,obj2,obj3])#新增不同对象# session.add_all([Person(name='lqz'),Hobby()])####2 简单删除（查到删除）# res=session.query(User).filter_by(name='2008').delete()# res=session.query(User).filter(User.id>=2).delete()# # 影响1行# print(res)#### 3 修改# res=session.query(User).filter_by(id=1).update(&#123;User.name:'ccc'&#125;)# res=session.query(User).filter_by(id=1).update(&#123;'name':'ccc'&#125;)# session.query(User).filter(User.id > 0).update(&#123;User.name: User.name + "099"&#125;, synchronize_session=False) # 如果要把它转成字符串相加# session.query(User).filter(User.id > 0).update(&#123;"age": User.age + 1&#125;, synchronize_session="evaluate")  ## 如果要把它转成数字相加####4 基本查询操作# res=session.query(User).all()# print(type(res))# res=session.query(User).first()# print(res)#filter传的是表达式，filter_by传的是参数# res=session.query(User).filter(User.id==1).all()# res=session.query(User).filter(User.id>=1).all()# res=session.query(User).filter(User.id<1).all()# res=session.query(User).filter_by(name='ccc099').all()#了解# res = session.query(User).from_statement(text("SELECT * FROM users where name=:name")).params(name='ccc099').all()# print(res)session.commit()# 并没有真正关闭连接，而是放回池中session.close()</code></pre><h3 id="6-高级操作"><a href="#6-高级操作" class="headerlink" title="6 高级操作"></a>6 高级操作</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> models <span class="token keyword">import</span> User<span class="token punctuation">,</span>Person<span class="token punctuation">,</span>Hobby<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> textengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session<span class="token operator">=</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 查询名字为lqz的所有user对象</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter_by(name='ccc099').all()</span><span class="token comment" spellcheck="true"># 2 表达式，and条件连接</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.id > 1, User.name == 'egon').all()</span><span class="token comment" spellcheck="true"># 查找id在1和10之间，并且name=egon的对象</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.id.between(1, 10), User.name == 'egon').all()</span><span class="token comment" spellcheck="true"># in条件(class_,因为这是关键字，不能直接用)</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.id.in_([1,3,4])).all()</span><span class="token comment" spellcheck="true"># 取反 ~</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token operator">~</span>User<span class="token punctuation">.</span>id<span class="token punctuation">.</span>in_<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#二次筛选</span><span class="token comment" spellcheck="true"># select *</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.id.in_(session.query(User.id).filter_by(name='egon'))).all()</span><span class="token comment" spellcheck="true"># # select name，id 。。。。</span><span class="token comment" spellcheck="true"># ret = session.query(User.id,User.name).filter(User.id.in_(session.query(User.id).filter_by(name='egon'))).all()</span><span class="token triple-quoted-string string">'''SELECT users.id AS users_id, users.name AS users_name FROM users WHERE users.id IN (SELECT users.id AS users_id FROM users WHERE users.name = %(name_1)s)'''</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> and_<span class="token punctuation">,</span> or_<span class="token comment" spellcheck="true">#or_包裹的都是or条件，and_包裹的都是and条件</span><span class="token comment" spellcheck="true">#查询id>3并且name=egon的人</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(and_(User.id > 3, User.name == 'egon')).all()</span><span class="token comment" spellcheck="true"># 查询id大于2或者name=ccc099的数据</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(or_(User.id > 2, User.name == 'ccc099')).all()</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(</span><span class="token comment" spellcheck="true">#     or_(</span><span class="token comment" spellcheck="true">#         User.id &lt; 2,</span><span class="token comment" spellcheck="true">#         and_(User.name == 'egon', User.id > 3),</span><span class="token comment" spellcheck="true">#         User.extra != ""</span><span class="token comment" spellcheck="true">#     )).all()</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token triple-quoted-string string">'''select *from user where id&lt;2 or (name=egon and id >3) or extra !='''''</span><span class="token comment" spellcheck="true"># 通配符，以e开头，不以e开头</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.name.like('e%')).all()</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(~User.name.like('e%')).all()</span><span class="token comment" spellcheck="true"># 限制，用于分页，区间 limit</span><span class="token comment" spellcheck="true"># 前闭后开区间，1能取到，3取不到</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''select * from users limit 1,2;'''</span><span class="token comment" spellcheck="true"># 排序，根据name降序排列（从大到小）</span><span class="token comment" spellcheck="true"># ret = session.query(User).order_by(User.name.desc()).all()</span><span class="token comment" spellcheck="true"># ret = session.query(User).order_by(User.name.asc()).all()</span><span class="token comment" spellcheck="true">#第一个条件降序排序后，再按第二个条件升序排</span><span class="token comment" spellcheck="true"># ret = session.query(User).order_by(User.id.asc(),User.name.desc()).all()</span><span class="token comment" spellcheck="true"># ret = session.query(User).order_by(User.name.desc(),User.id.asc()).all()</span><span class="token comment" spellcheck="true"># 分组</span><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> func<span class="token comment" spellcheck="true"># ret = session.query(User).group_by(User.name).all()</span><span class="token comment" spellcheck="true">#分组之后取最大id，id之和，最小id</span><span class="token comment" spellcheck="true"># sql 分组之后，要查询的字段只能有分组字段和聚合函数</span><span class="token comment" spellcheck="true"># ret = session.query(</span><span class="token comment" spellcheck="true">#     func.max(User.id),</span><span class="token comment" spellcheck="true">#     func.sum(User.id),</span><span class="token comment" spellcheck="true">#     func.min(User.id),</span><span class="token comment" spellcheck="true">#     User.name).group_by(User.name).all()</span><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">'''# select max(id),sum(id),min(id) from user group by name;## '''</span><span class="token comment" spellcheck="true"># for obj in ret:</span><span class="token comment" spellcheck="true">#     print(obj[0],'----',obj[1],'-----',obj[2],'-----',obj[3])</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true">#haviing筛选</span><span class="token comment" spellcheck="true"># ret = session.query(</span><span class="token comment" spellcheck="true">#     func.max(User.id),</span><span class="token comment" spellcheck="true">#     func.sum(User.id),</span><span class="token comment" spellcheck="true">#     func.min(User.id)).group_by(User.name).having(func.min(User.id) >2).all()</span><span class="token triple-quoted-string string">'''select max(id),sum(id),min(id) from user group by name having min(id)>2;'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="7-多表操作"><a href="#7-多表操作" class="headerlink" title="7 多表操作"></a>7 多表操作</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> models <span class="token keyword">import</span> User<span class="token punctuation">,</span>Person<span class="token punctuation">,</span>Hobby<span class="token punctuation">,</span>Boy<span class="token punctuation">,</span>Girl<span class="token punctuation">,</span>Boy2Girl<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> textengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session<span class="token operator">=</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###  1 一对多插入数据</span><span class="token comment" spellcheck="true"># obj=Hobby(caption='足球')</span><span class="token comment" spellcheck="true"># session.add(obj)</span><span class="token comment" spellcheck="true"># p=Person(name='张三',hobby_id=2)</span><span class="token comment" spellcheck="true"># session.add(p)</span><span class="token comment" spellcheck="true">### 2 方式二(默认情况传对象有问题)</span><span class="token comment" spellcheck="true">###### Person表中要加 hobby = relationship('Hobby', backref='pers')</span><span class="token comment" spellcheck="true"># p=Person(name='李四',hobby=Hobby(caption='美女'))</span><span class="token comment" spellcheck="true"># 等同于</span><span class="token comment" spellcheck="true"># p=Person(name='李四2')</span><span class="token comment" spellcheck="true"># p.hobby=Hobby(caption='美女2')</span><span class="token comment" spellcheck="true"># session.add(p)</span><span class="token comment" spellcheck="true">## 3 方式三，通过反向操作</span><span class="token comment" spellcheck="true"># hb = Hobby(caption='人妖')</span><span class="token comment" spellcheck="true"># hb.pers = [Person(name='文飞'), Person(name='博雅')]</span><span class="token comment" spellcheck="true"># session.add(hb)</span><span class="token comment" spellcheck="true">#### 4 查询（查询：基于连表的查询，基于对象的跨表查询）</span><span class="token comment" spellcheck="true">### 4.1 基于对象的跨表查询(子查询，两次查询)</span><span class="token comment" spellcheck="true"># 正查</span><span class="token comment" spellcheck="true"># p=session.query(Person).filter_by(name='张三').first()</span><span class="token comment" spellcheck="true"># print(p)</span><span class="token comment" spellcheck="true"># print(p.hobby.caption)</span><span class="token comment" spellcheck="true"># 反查</span><span class="token comment" spellcheck="true"># h=session.query(Hobby).filter_by(caption='人妖').first()</span><span class="token comment" spellcheck="true"># print(h.pers)</span><span class="token comment" spellcheck="true">### 4.2 基于连表的跨表查（查一次）</span><span class="token comment" spellcheck="true"># 默认根据外键连表</span><span class="token comment" spellcheck="true"># isouter=True 左外连，表示Person left join Hobby，没有右连接，反过来即可</span><span class="token comment" spellcheck="true"># 不写 inner join</span><span class="token comment" spellcheck="true"># person_list=session.query(Person,Hobby).join(Hobby,isouter=True).all()</span><span class="token comment" spellcheck="true"># print(person_list)</span><span class="token comment" spellcheck="true"># print(person_list)</span><span class="token comment" spellcheck="true"># for row in person_list:</span><span class="token comment" spellcheck="true">#     print(row[0].name,row[1].caption)</span><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">'''# select * from person left join hobby on person.hobby_id=hobby.id# '''</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ret = session.query(Person, Hobby).filter(Person.hobby_id == Hobby.id)</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">'''# select * from user,hobby where user.id=favor.nid;## '''</span><span class="token comment" spellcheck="true">#join表，默认是inner join</span><span class="token comment" spellcheck="true"># ret = session.query(Person).join(Hobby)</span><span class="token comment" spellcheck="true"># # ret = session.query(Hobby).join(Person,isouter=True)</span><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">'''# SELECT *# FROM person INNER JOIN hobby ON hobby.id = person.hobby_id# '''</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true"># 指定连表字段（从来没用过）</span><span class="token comment" spellcheck="true"># ret = session.query(Person).join(Hobby,Person.nid==Hobby.id, isouter=True)</span><span class="token comment" spellcheck="true"># # ret = session.query(Person).join(Hobby,Person.hobby_id==Hobby.id, isouter=True).all()</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token triple-quoted-string string">'''SELECT *FROM person LEFT OUTER JOIN hobby ON person.nid = hobby.id'''</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true"># 组合（了解）UNION 操作符用于合并两个或多个 SELECT 语句的结果集</span><span class="token comment" spellcheck="true"># union和union all的区别？</span><span class="token comment" spellcheck="true"># q1 = session.query(User.name).filter(User.id > 2)  # 6条数据</span><span class="token comment" spellcheck="true"># q2 = session.query(User.name).filter(User.id &lt; 8) # 2条数据</span><span class="token comment" spellcheck="true"># q1 = session.query(User.id,User.name).filter(User.id > 2)  # 6条数据</span><span class="token comment" spellcheck="true"># q2 = session.query(User.id,User.name).filter(User.id &lt; 8) # 2条数据</span><span class="token comment" spellcheck="true"># ret = q1.union_all(q2).all()</span><span class="token comment" spellcheck="true"># ret1 = q1.union(q2).all()</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true"># print(ret1)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># q1 = session.query(User.name).filter(User.id > 2)</span><span class="token comment" spellcheck="true"># q2 = session.query(Hobby.caption).filter(Hobby.nid &lt; 2)</span><span class="token comment" spellcheck="true"># ret = q1.union_all(q2).all()</span><span class="token comment" spellcheck="true">#### 多对多</span><span class="token comment" spellcheck="true"># session.add_all([</span><span class="token comment" spellcheck="true">#     Boy(hostname='霍建华'),</span><span class="token comment" spellcheck="true">#     Boy(hostname='胡歌'),</span><span class="token comment" spellcheck="true">#     Girl(name='刘亦菲'),</span><span class="token comment" spellcheck="true">#     Girl(name='林心如'),</span><span class="token comment" spellcheck="true"># ])</span><span class="token comment" spellcheck="true"># session.add_all([</span><span class="token comment" spellcheck="true">#     Boy2Girl(girl_id=1, boy_id=1),</span><span class="token comment" spellcheck="true">#     Boy2Girl(girl_id=2, boy_id=1)</span><span class="token comment" spellcheck="true"># ])</span><span class="token comment" spellcheck="true">##### 要有girls = relationship('Girl', secondary='boy2girl', backref='boys')</span><span class="token comment" spellcheck="true"># girl = Girl(name='张娜拉')</span><span class="token comment" spellcheck="true"># girl.boys = [Boy(hostname='张铁林'),Boy(hostname='费玉清')]</span><span class="token comment" spellcheck="true"># session.add(girl)</span><span class="token comment" spellcheck="true"># boy=Boy(hostname='蔡徐坤')</span><span class="token comment" spellcheck="true"># boy.girls=[Girl(name='谢娜'),Girl(name='巧碧螺')]</span><span class="token comment" spellcheck="true"># session.add(boy)</span><span class="token comment" spellcheck="true"># session.commit()</span><span class="token comment" spellcheck="true"># 基于对象的跨表查</span><span class="token comment" spellcheck="true"># girl=session.query(Girl).filter_by(id=3).first()</span><span class="token comment" spellcheck="true"># print(girl.boys)</span><span class="token comment" spellcheck="true">#### 基于连表的跨表查询</span><span class="token comment" spellcheck="true"># 查询蔡徐坤约过的所有妹子</span><span class="token triple-quoted-string string">'''select girl.name from girl,boy,Boy2Girl where boy.id=Boy2Girl.boy_id and girl.id=Boy2Girl.girl_id where boy.name='蔡徐坤''''</span><span class="token comment" spellcheck="true"># ret=session.query(Girl.name).filter(Boy.id==Boy2Girl.boy_id,Girl.id==Boy2Girl.girl_id,Boy.hostname=='蔡徐坤').all()</span><span class="token triple-quoted-string string">'''select girl.name from girl inner join Boy2Girl on girl.id=Boy2Girl.girl_id inner join boy on boy.id=Boy2Girl.boy_id where boy.hostname='蔡徐坤''''</span><span class="token comment" spellcheck="true"># ret=session.query(Girl.name).join(Boy2Girl).join(Boy).filter(Boy.hostname=='蔡徐坤').all()</span>ret<span class="token operator">=</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Girl<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Boy2Girl<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Boy<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>hostname<span class="token operator">=</span><span class="token string">'蔡徐坤'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token comment" spellcheck="true">### 执行原生sql（用的最多的）</span><span class="token comment" spellcheck="true">### django中orm如何执行原生sql</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cursor = session.execute('insert into users(name) values(:value)',params=&amp;#123;"value":'xxx'&amp;#125;)</span><span class="token comment" spellcheck="true"># print(cursor.lastrowid)</span><span class="token comment" spellcheck="true"># session.commit()</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="8-models-py"><a href="#8-models-py" class="headerlink" title="8 models.py"></a>8 models.py</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个个类（继承谁？字段怎么写）</span><span class="token keyword">import</span> datetime<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token comment" spellcheck="true"># 字段和字段属性</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> Index<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship<span class="token comment" spellcheck="true"># 制造了一个类，作为所有模型类的基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>  <span class="token comment" spellcheck="true"># 数据库表名称(固定写法)，如果不写，默认以类名小写作为表的名字</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># id 主键</span>    <span class="token comment" spellcheck="true"># mysql中主键自动建索引：聚簇索引</span>    <span class="token comment" spellcheck="true"># 其他建建的索引叫：辅助索引</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># name列，索引，不可为空</span>    <span class="token comment" spellcheck="true"># email = Column(String(32), unique=True)  # 唯一</span>    <span class="token comment" spellcheck="true"># #datetime.datetime.now不能加括号，加了括号，以后永远是当前时间</span>    <span class="token comment" spellcheck="true"># ctime = Column(DateTime, default=datetime.datetime.now) # default默认值</span>    <span class="token comment" spellcheck="true"># extra = Column(Text, nullable=True)</span>    <span class="token comment" spellcheck="true">#类似于djagno的 Meta</span>    <span class="token comment" spellcheck="true"># __table_args__ = (</span>    <span class="token comment" spellcheck="true">#     UniqueConstraint('id', 'name', name='uix_id_name'), #联合唯一</span>    <span class="token comment" spellcheck="true">#     Index('ix_id_name', 'name', 'email'), #索引</span>    <span class="token comment" spellcheck="true"># )</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># python是强类型语言</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token operator">+</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 一对多关系</span><span class="token comment" spellcheck="true"># 一个Hobby可以有很多人喜欢</span><span class="token comment" spellcheck="true"># 一个人只能由一个Hobby</span><span class="token keyword">class</span> <span class="token class-name">Hobby</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'hobby'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    caption <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'篮球'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'person'</span>    nid <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># hobby指的是tablename而不是类名，uselist=False</span>    <span class="token comment" spellcheck="true"># 一对多的关系，关联字段写在多的一方</span>    hobby_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">"hobby.id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 默认可以为空</span>    <span class="token comment" spellcheck="true"># 跟数据库无关，不会新增字段，只用于快速链表操作</span>    <span class="token comment" spellcheck="true"># 类名，backref用于反向查询</span>    hobby <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Hobby'</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'pers'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 多对多关系</span><span class="token comment" spellcheck="true"># 实实在在存在的表</span><span class="token keyword">class</span> <span class="token class-name">Boy2Girl</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'boy2girl'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># autoincrement自增，默认是True</span>    girl_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'girl.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    boy_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'boy.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'girl'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'boy'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    hostname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 与生成表结构无关，仅用于查询方便,放在哪个单表中都可以</span>    <span class="token comment" spellcheck="true"># secondary 通过哪个表建关联，跟django中的through一模一样</span>    girls <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Girl'</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span><span class="token string">'boy2girl'</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'boys'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span><span class="token keyword">def</span> <span class="token function">create_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建engine对象</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过engine对象创建表</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除表</span><span class="token keyword">def</span> <span class="token function">drop_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建engine对象</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过engine对象删除所有表</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    create_table<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 原来已经存在user表，再执行一次不会有问题</span>    <span class="token comment" spellcheck="true"># drop_table()</span><span class="token comment" spellcheck="true"># 创建库？手动创建库</span><span class="token comment" spellcheck="true"># 问题，sqlachemy支持修改字段吗？不支持</span></code></pre><h3 id="9-flask-sqlachemy"><a href="#9-flask-sqlachemy" class="headerlink" title="9 flask-sqlachemy"></a>9 flask-sqlachemy</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> Flask<span class="token operator">-</span>SQLAlchemy<span class="token number">2</span> flask<span class="token operator">-</span>migrate    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db init 初始化：只执行一次    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db migrate 等同于 makemigartions    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db upgrade 等同于migrate<span class="token number">3</span> 看代码<span class="token number">4</span> Flask<span class="token operator">-</span>SQLAlchemy如何使用    <span class="token number">1</span> <span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy    <span class="token number">2</span> db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token number">3</span> db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    <span class="token number">4</span> 以后在视图函数中使用        <span class="token operator">-</span>db<span class="token punctuation">.</span>session 就是咱们讲的session<span class="token number">5</span> flask<span class="token operator">-</span>migrate的使用（表创建，字段修改）    <span class="token number">1</span> <span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> Migrate<span class="token punctuation">,</span>MigrateCommand    <span class="token number">2</span> Migrate<span class="token punctuation">(</span>app<span class="token punctuation">,</span>db<span class="token punctuation">)</span>    <span class="token number">3</span> manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">,</span> MigrateCommand<span class="token punctuation">)</span><span class="token number">6</span> 直接使用    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db init 初始化：只执行一次，创建migrations文件夹    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db migrate 等同于 makemigartions    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db upgrade 等同于migrate</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
            <tag> python框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
