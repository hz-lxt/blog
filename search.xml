<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis持久化rdb与aof</title>
      <link href="/task/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E6%8C%81%E4%B9%85%E5%8C%96rdb%E4%B8%8Eaof/"/>
      <url>/task/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E6%8C%81%E4%B9%85%E5%8C%96rdb%E4%B8%8Eaof/</url>
      
        <content type="html"><![CDATA[<h3 id="redis持久化rdb与aof"><a href="#redis持久化rdb与aof" class="headerlink" title="redis持久化rdb与aof"></a>redis持久化rdb与aof</h3><h4 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h4><p>rdb最简单的描述就是内存快照，执行命令的时候把redis的数据copy成一份二进制数据</p><p>命令</p><ul><li>save  阻塞redis 主线程</li><li>bgsave 执行过程不会阻塞redis主线程</li></ul><p>通常使用的都是bgsave进行rdb操作，但是不阻塞只是在生成rdb文件的时候不阻塞</p><p>bgsave的流程</p><ul><li>执行bgsave命令 。</li><li>redis 主线程会fork 出 bgsave 子进程。</li><li>bgsave子进程 会读取redis 的内存数据，生成RDB 文件。</li></ul><p>redis 主线程会把数据复制给bgsave子进程,这个过程中redis是阻塞的,完成数据复制后子进程和主线程指向的都是相同的内存空间的数据,子进程读取copy来的内存数据生成二进制文件,当阻塞的同时如果出现了写操作,并不会破坏这份内存快照</p><p>这里用到的是redis的写时复制技术（CopyOnWrite，缩写COW）,具体实现就是在key被操作的时候先在当前内存中开辟一个新的空间,修改完毕后,原来的key指向新的内存地址</p><p>缺点:rdb文件在生成的时候,数据修改是不会复制到rdb中的,也就是生成消耗了几秒就会丢失几秒的数据</p><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><p>aof开启后,在redis执行命令完后,会把当前执行的命令压缩到aof文件中</p><h5 id="aof三种策略"><a href="#aof三种策略" class="headerlink" title="aof三种策略"></a>aof三种策略</h5><table><thead><tr><th>策略</th><th>何时写盘</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>Aways</td><td>同步写入</td><td>基本不丢失，增加延迟</td><td>io 忙的情况下，会增加线程返回结果的延迟时间，断电的时候会丢失还来的急写入的命令</td></tr><tr><td>EverySecond</td><td>每秒写入</td><td>性能好，不会增加太大延迟</td><td>断电会丢失一秒的数据</td></tr><tr><td>No</td><td>操作系统写入</td><td>性能好，不会增加太大延迟</td><td>丢失数据多少，由操作系统写磁盘频率决定</td></tr></tbody></table><h5 id="aof重写"><a href="#aof重写" class="headerlink" title="aof重写"></a>aof重写</h5><p>实际情况aof文件中会存在很多没用的数据,比如我修改了a字段10次,实际上前9次对我数据备份的恢复是没有意义的,因为实际产生效果的是第十次修改.</p><p>aof的重写全过程和rdb生成规则几乎一模一样,都是复制数据到内存然后进行写入</p><p>当然生成aof重写文件的时候执行的redis命令也会存储到原aof中,防止aof重写失败</p><h4 id="RDB-AOF混合"><a href="#RDB-AOF混合" class="headerlink" title="RDB AOF混合"></a>RDB AOF混合</h4><p>其实在reids 4 之后，redis 还提供了AOF 和RDB 混合使用的方式，就是在每次生成RDB之间增加AOF，这样AOF的文件也不会很大，同时也弥补了每次生成RDB之间会丢失数据的缺点。</p><p>混合持久化本质是通过 AOF 后台重写（bgrewriteaof 命令）完成的，不同的是当开启混合持久化时，fork 出的子进程先将当前全量数据以 RDB 方式写入新的 AOF 文件，然后再将 AOF 重写缓冲区（aof_rewrite_buf_blocks）的增量命令以 AOF 方式写入到文件，写入完成后通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的的 AOF 文件。</p><p>开启：混合持久化的配置参数为 aof-use-rdb-preamble，配置为 yes 时开启混合持久化，在 redis 4 刚引入时，默认是关闭混合持久化的，但是在 redis 5 中默认已经打开了。<br> 关闭：使用 aof-use-rdb-preamble no 配置即可关闭混合持久化。</p><p>优点：结合 RDB 和 AOF 的优点, 更快的重写和恢复。<br> 缺点：AOF 文件里面的 RDB 部分不再是 AOF 格式，可读性差。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis </tag>
            
            <tag> 持久化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis为什么这么快-解决hash冲突的门道</title>
      <link href="/task/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-%E8%A7%A3%E5%86%B3hash%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%A8%E9%81%93/"/>
      <url>/task/2021/07/14/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%99%E4%B9%88%E5%BF%AB-%E8%A7%A3%E5%86%B3hash%E5%86%B2%E7%AA%81%E7%9A%84%E9%97%A8%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h3 id="redis为什么这么快-解决hash冲突的门道"><a href="#redis为什么这么快-解决hash冲突的门道" class="headerlink" title="redis为什么这么快-解决hash冲突的门道"></a>redis为什么这么快-解决hash冲突的门道</h3><p>redis中的全局哈希表和java中的hashmap一样都是使用链地址法解决hash冲突</p><p>链地址法:就是哈希桶算法,本身是一个数组,数组中的每一个元素是key和value的指针,value可以是任何类型,当出现hash冲突的时候,相同的kv在redis中指向同一个地址时,新插入的kv的next就会指向原来的kv,形成一个单向链表</p><blockquote><p>解决hash冲突的散列算法主要有<strong>链地址法</strong>，<strong>开放定址法</strong>，<strong>再哈希法</strong>，<strong>建立一个公共溢出区</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsg9p8bu4lj312a0hgabn.jpg" alt="image-20210714102609638" loading="lazy"></p><p>出现hash冲突后</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gsgaiiw7q9j31kk0o0q6q.jpg" alt="image-20210714105441495" loading="lazy"></p><p>当这个链表越来越长，搜索指定的key的速度就会下降，当到达临界值时（redis规定的范围，类似于hashmap的加载因子）redis就会进行rehash（重新建表）</p><p>通俗的讲就是原来的a容器已经快要满了，就把新建一个b容器，容量是a容器的2倍</p><p>然后通过一些特殊的方法把a容器的数据全都放入b容器中，直到b容器完全覆盖a容器，则不再对a容器读写</p><p>redis采用的rehash是渐进式的，并不是一下子全部复制过去</p><ul><li>每次增删改查的时候都会把这些数据放在b中</li><li>会启动定时任务把a中的冷key复制到b中</li></ul><p>tips：redis中只要采用了hash表的结构的数据格式都会rehash</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis底层数据结构解析</title>
      <link href="/task/2021/07/07/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2021-07-07-redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/"/>
      <url>/task/2021/07/07/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2021-07-07-redis%E5%BA%95%E5%B1%82%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="redis底层数据结构解析"><a href="#redis底层数据结构解析" class="headerlink" title="redis底层数据结构解析"></a>redis底层数据结构解析</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gs8e92nvhkj318w0gqn0z.jpg" alt="image-20210707145917303" loading="lazy"></p><h3 id="sds（简单动态字符串）"><a href="#sds（简单动态字符串）" class="headerlink" title="sds（简单动态字符串）"></a>sds（简单动态字符串）</h3><p>redis并没有使用c语言中的字符串而是使用的自定义的sds，以解决一些c语言字符串会出现的问题以及进行性能优化</p><p>结构如下：</p><p>len：当前字符串长度</p><p>free：分配的空间所剩余的长度</p><p>buf：字符串的实体（不包含结束符）</p><h5 id="问题1：c的字符串本身不记录字符串长度，如果要获取字符串长度，时间复杂度为O-n"><a href="#问题1：c的字符串本身不记录字符串长度，如果要获取字符串长度，时间复杂度为O-n" class="headerlink" title="问题1：c的字符串本身不记录字符串长度，如果要获取字符串长度，时间复杂度为O(n)"></a>问题1：c的字符串本身不记录字符串长度，如果要获取字符串长度，时间复杂度为O(n)</h5><p>sds：数据结构中带有字符串的长度，和预留空间的长度</p><h5 id="问题2：c中的字符串不记录自身长度容易造成缓冲区溢出"><a href="#问题2：c中的字符串不记录自身长度容易造成缓冲区溢出" class="headerlink" title="问题2：c中的字符串不记录自身长度容易造成缓冲区溢出"></a>问题2：c中的字符串不记录自身长度容易造成缓冲区溢出</h5><p>sds：当数据修改时，先判断内部的free是否满足容纳新字符串，如果不够就先进行扩容，扩容规则为：若数据长度小于1m就翻倍，大于1m就每次+1m</p><h5 id="问题3：经常修改字符串会频繁修改字符串的空间分配，影响性能"><a href="#问题3：经常修改字符串会频繁修改字符串的空间分配，影响性能" class="headerlink" title="问题3：经常修改字符串会频繁修改字符串的空间分配，影响性能"></a>问题3：经常修改字符串会频繁修改字符串的空间分配，影响性能</h5><p>sds：</p><ul><li>空间预分配<ul><li>就是指sds进行空间扩容时的规则，并不会只扩容所需的内存，通常情况会剩余一些额外的内存以便下次扩容使用</li></ul></li><li>惰性空间释放<ul><li>若修改sds减少时，并不会像想象中的减少对其所分配的内存，而是先将不用的内存放入free中，以便下次扩容，当然也有对应的主动释放空间的api</li></ul></li></ul><p>问题4：特殊字符保存</p><p>sds：sds是对二进制安全的，不会对数据做任何限制，也可以保存特殊字符，因为读取数据的判断是根据len，而不是结束符</p><h3 id="双向链表（listnode）"><a href="#双向链表（listnode）" class="headerlink" title="双向链表（listnode）"></a>双向链表（listnode）</h3><ul><li>双端：链表节点带有pre 和 next 指针，获取某个节点的前置节点和后置节点的复杂度为O(n)</li><li>无环：表头的节点 head 的prev指针和 表尾节点 next 都指向了Null，说明链表的访问结束了</li><li>获取链表长度：list 的len 属性，可以直接获取链表的长度，复杂度O(1)</li><li>多态：链表节点使用void* 指针来保存节点值，可以保存各种不同类型的值。</li><li>获取表头和表尾数据负责度O(1)</li></ul><h3 id="压缩列表（ziplist）"><a href="#压缩列表（ziplist）" class="headerlink" title="压缩列表（ziplist）"></a>压缩列表（ziplist）</h3><p>是一种特殊的双向链表</p><p>压缩链表与经典双端链表最大的区别在于，双端链表的节点是分散在内存中并不是连续的，压缩链表中所有的数据都是存储在一段连续的内存之中的,时间换空间。</p><p>具体内部参数：<a href="https://juejin.cn/post/6974706255138914341#heading-6">https://juejin.cn/post/6974706255138914341#heading-6</a></p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>本质是一个列表，列表内部的元素是一个链表，链表的每一个结点存着键值对</p><p>这种方式叫做<strong>链地址法</strong>，用于解决hash冲突，在数组桶位相同的情况下将插入的结点插入到链表表头，所以hash在插入寻址的时间复杂度是o1</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dictht<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 哈希表数组</span>    dictEntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 哈希表大小</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 哈希表大小掩码，用于计算索引值</span>    <span class="token comment" spellcheck="true">// 总是等于 size-1</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 该哈希表已有节点数量</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span><span class="token punctuation">}</span> dictht</code></pre><p>结点</p><pre class=" language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> dictEntry <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 键</span>    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 值</span>    <span class="token keyword">union</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>        unit64_t u64<span class="token punctuation">;</span>        nit64_t s64<span class="token punctuation">;</span>    <span class="token punctuation">}</span> v<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指向下一个哈希表节点，形成链表</span>    <span class="token keyword">struct</span> dictEntry <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span> dictEntry<span class="token punctuation">;</span></code></pre><h3 id="整数集合"><a href="#整数集合" class="headerlink" title="整数集合"></a>整数集合</h3><p>是redis中set的底层实现之一，使用场景比较少</p><p>它的特点有：</p><p><strong>元素类型只能为数字。<br>元素有三种类型：int16_t、int32_t、int64_t。<br>元素有序，不可重复。<br>内存连续，来节省内存空间。</strong></p><h3 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h3><p>个人总结</p><p>跳表是一种特殊的数据结构，存在多层次链表，每上一层链表都是下一层链表的子集，每一层可以看做是索引层</p><p><a href="https://juejin.cn/post/6974706255138914341#heading-4">https://juejin.cn/post/6974706255138914341#heading-4</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis</title>
      <link href="/task/2021/07/03/java/%E6%A1%86%E6%9E%B6/mybatis/"/>
      <url>/task/2021/07/03/java/%E6%A1%86%E6%9E%B6/mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><h3 id="1-引子"><a href="#1-引子" class="headerlink" title="1 引子"></a>1 引子</h3><p><strong>mybatis功能架构：</strong></p><ol><li>API接口层：提供给外部使用的接口API，开发人员通过这些本地API来操纵数据库。接口层一接收到调用请求就会调用数据处理层来完成具体的数据处理。</li><li>数据处理层：负责具体的SQL查找、SQL解析、SQL执行和执行结果映射处理等。它主要的目的是根据调用的请求完成一次数据库操作。</li><li>基础支撑层：负责最基础的功能支撑，包括连接管理、事务管理、配置加载和缓存处理，这些都是共用的东西，将他们抽取出来作为最基础的组件。为上层的数据处理层提供最基础的支撑。</li></ol><p><strong>优点：</strong></p><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql基本上可以实现我们不使用数据访问框架可以实现的所有功能，或许更多。</li><li>解除sql与程序代码的耦合：通过提供DAL层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li></ul><p><strong>缺点：</strong></p><ul><li>编写SQL语句时工作量很大，尤其是字段多、关联表多时，更是如此。</li><li>SQL语句依赖于数据库，导致数据库移植性差，不能更换数据库。</li><li>框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。</li><li>二级缓存机制不佳</li></ul><h3 id="2-采坑记录"><a href="#2-采坑记录" class="headerlink" title="2 采坑记录"></a>2 采坑记录</h3><h4 id="采坑1-maven读取不到java路径下的xml文件，需要在pom内配置读取"><a href="#采坑1-maven读取不到java路径下的xml文件，需要在pom内配置读取" class="headerlink" title="采坑1 maven读取不到java路径下的xml文件，需要在pom内配置读取"></a>采坑1 maven读取不到java路径下的xml文件，需要在pom内配置读取</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre><h4 id="采坑2-jdbc连接在mac上需要屏蔽ssl证书验证，否则会报错（待研究）"><a href="#采坑2-jdbc连接在mac上需要屏蔽ssl证书验证，否则会报错（待研究）" class="headerlink" title="采坑2 jdbc连接在mac上需要屏蔽ssl证书验证，否则会报错（待研究）"></a>采坑2 jdbc连接在mac上需要屏蔽ssl证书验证，否则会报错（待研究）</h4><p>可能出现的报错信息，注意此处容易误解为找不到xml文件，实际上是数据库报错</p><pre class=" language-python"><code class="language-python">Caused by<span class="token punctuation">:</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>PersistenceException<span class="token punctuation">:</span> <span class="token comment" spellcheck="true">### Error building SqlSession.</span><span class="token comment" spellcheck="true">### The error may exist in com/zhaohuang/mapper/StudentMapper.xml</span></code></pre><p>解决方案</p><pre class=" language-xml"><code class="language-xml">jdbc:mysql://127.0.0.1:3306/java?characterEncoding=utf8<span class="token entity" title="&amp;">&amp;amp;</span>zeroDateTimeBehavior=convertToNull<span class="token entity" title="&amp;">&amp;amp;</span>useSSL=false</code></pre><h4 id="采坑3-mybatis-需要在config-xml中配置mapper路径否则找不到mapper文件"><a href="#采坑3-mybatis-需要在config-xml中配置mapper路径否则找不到mapper文件" class="headerlink" title="采坑3 mybatis 需要在config.xml中配置mapper路径否则找不到mapper文件"></a>采坑3 mybatis 需要在config.xml中配置mapper路径否则找不到mapper文件</h4><p>注意路径为斜杠</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/zhaohuang/mapper/StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span></code></pre><h4 id="采坑4-typeAliases配置别名时必须在environments标签前"><a href="#采坑4-typeAliases配置别名时必须在environments标签前" class="headerlink" title="采坑4 typeAliases配置别名时必须在environments标签前"></a>采坑4 typeAliases配置别名时必须在environments标签前</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Student<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zhaohuang.pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--                &lt;property name="url" value="jdbc:mysql://localhost:3306/java?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=UTF-8"/>--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://127.0.0.1:3306/java?characterEncoding<span class="token punctuation">=</span>utf8&amp;amp;zeroDateTimeBehavior<span class="token punctuation">=</span>convertToNull&amp;amp;useSSL<span class="token punctuation">=</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com/zhaohuang/mapper/StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--        &lt;mapper resource="resources/StudentMapper.xml"/>--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h3 id="3-实践"><a href="#3-实践" class="headerlink" title="3 实践"></a>3 实践</h3><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><p>建造者模式</p><p>这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。 因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 SqlSessionFactoryBuilder 来创建多个 SqlSessionFactory 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p>工厂模式</p><p>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建 SqlSessionFactory 被视为一种代码“坏习惯”。因此 SqlSessionFactory 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><p>单例模式</p><p>每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// sqlSession 可以理解为数据库连接对象，他提供我们方法去操作数据库，使用完毕必须关闭和python中pymysql的链接类似</span>        SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 传递一个接口的StudentMapper.class 来调用下面对象的数据库操作</span>        StudentMapper mapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> studentList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">getStudentList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Student student <span class="token operator">:</span> studentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java日常记录学习</title>
      <link href="/task/2021/07/03/java/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/java%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/"/>
      <url>/task/2021/07/03/java/%E6%97%A5%E5%B8%B8%E5%AD%A6%E4%B9%A0/java%E7%90%90%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="java琐碎知识点学习"><a href="#java琐碎知识点学习" class="headerlink" title="java琐碎知识点学习"></a>java琐碎知识点学习</h2><p>开发规范:</p><ul><li>post请求写json格式请求示例包括header</li><li>修改操作暴露的字段只有允许修改的字段，其他字段不允许暴露</li><li>接口层面传输不应该暴露id，但是底层逻辑要存id，哪怕需要多查询一次</li><li>数据库在第一版上线后，所有的变化都需要记录sql语句，后面版本迭代后直接上线sql语句即可</li><li>post请求都需要用新的vo去接收，不能用实体类映射的vo去接收</li><li>接口文档只暴露在页面上需要的接口</li><li>所有业务逻辑必须考虑所有可能存在的特殊情况</li><li>所有数据库中的敏感字段在响应中必须修改一下，比如数据库存的status，就改成type：xxx</li><li>考虑所有接口参数都不规范的前提下去判断参数</li><li>不使用多表查询</li><li>分页接口pageNum，pageSize设定默认值</li><li>消息队列发送后，在消息消费过程中出现异常处理：第一次执行，报错，捕获，重试，第二次执行，报错，捕获记录错误日志到数据库，确认消费</li><li>增删改牵扯到多表关系或者关键表操作需要增加事务注解</li><li>直接操作数据库修改数据时，要么把关联的数据全清了，要么就在接口层面操作，否则脏数据问题很难排查</li><li>接口层面传输能不用id不用id</li><li>方法层面传输能用id就用id</li><li>非主要服务类方法可以加@Async变成异步<ul><li>在springboot中可能会出现循环依赖的问题，在出现问题的注入类上加上@Lazy即可</li></ul></li><li>django中的CBV或者springboot的service尽量遵循单一职责</li><li>代码可读性的体现在于注释，在于细节，减少没必要的查询，规范命名</li><li>数据库设计中，随机性很高的字段用</li></ul><h3 id="1-Controller和-RestController的区别？"><a href="#1-Controller和-RestController的区别？" class="headerlink" title="1 @Controller和@RestController的区别？"></a>1 @Controller和@RestController的区别？</h3><p>@RestController = @Controller + @ResponseBody</p><h4 id="1-1-Controller"><a href="#1-1-Controller" class="headerlink" title="1.1 @Controller"></a>1.1 @Controller</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Component<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在控制器类前添加这个注解后，返回的信息必须配合模板语言来使用</p><p>类似Django的rander</p><h4 id="1-2-RestController"><a href="#1-2-RestController" class="headerlink" title="1.2 @RestController"></a>1.2 @RestController</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>        annotation <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span>    <span class="token punctuation">)</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用**@RestController<strong>注解后可以让一个类内的所有方法的返回的对象通过适当的转换器转为指定的格式之后放入</strong>response.body**中，他的效果等同于通过response对象输出指定格式的数据。</p><p>问题列表：</p><ul><li>什么是AOP和IOC</li><li>springboot框架的请求上下文全流程</li></ul><h3 id="2-控制器报错"><a href="#2-控制器报错" class="headerlink" title="2 控制器报错"></a>2 控制器报错</h3><p>在对应的impl类上加上注解@Service</p><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gov2gkbny9j30p80ko0wm.jpg" alt="image-20210312145103696" loading="lazy"></p><h3 id="3-java连接redis"><a href="#3-java连接redis" class="headerlink" title="3 java连接redis"></a>3 java连接redis</h3><p>在spring中包含了redisTemplate（对redis操作）</p><p>配置方式：</p><h4 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h4><pre class=" language-xml"><code class="language-xml">        <span class="token comment" spellcheck="true">&lt;!-- spring boot 配置 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h4><pre class=" language-ini"><code class="language-ini"># Redis数据库索引（默认为0）<span class="token constant">spring.redis.database</span><span class="token attr-value"><span class="token punctuation">=</span>0  </span># Redis服务器地址<span class="token constant">spring.redis.host</span><span class="token attr-value"><span class="token punctuation">=</span>127.0.0.1</span># Redis服务器连接端口<span class="token constant">spring.redis.port</span><span class="token attr-value"><span class="token punctuation">=</span>6379  </span># Redis服务器连接密码（默认为空）<span class="token constant">spring.redis.password</span><span class="token attr-value"><span class="token punctuation">=</span></span># 连接池最大连接数（使用负值表示没有限制）<span class="token constant">spring.redis.pool.max-active</span><span class="token attr-value"><span class="token punctuation">=</span>8  </span># 连接池最大阻塞等待时间（使用负值表示没有限制）<span class="token constant">spring.redis.pool.max-wait</span><span class="token attr-value"><span class="token punctuation">=</span>-1  </span># 连接池中的最大空闲连接<span class="token constant">spring.redis.pool.max-idle</span><span class="token attr-value"><span class="token punctuation">=</span>8  </span># 连接池中的最小空闲连接<span class="token constant">spring.redis.pool.min-idle</span><span class="token attr-value"><span class="token punctuation">=</span>0  </span># 连接超时时间（毫秒）<span class="token constant">spring.redis.timeout</span><span class="token attr-value"><span class="token punctuation">=</span>0  </span></code></pre><p>创建一个redis配置</p><p>创建redis工具类</p><p><a href="https://www.cnblogs.com/superfj/p/9232482.html">https://www.cnblogs.com/superfj/p/9232482.html</a></p><h3 id="4-transient关键字"><a href="#4-transient关键字" class="headerlink" title="4 transient关键字"></a>4 transient关键字</h3><p>java的serialization提供了一个非常棒的存储对象状态的机制，说白了serialization就是把对象的状态存储到硬盘上 去，等需要的时候就可以再把它读出来使用。有些时候像银行卡号这些字段是不希望在网络上传输的，transient的作用就是把这个字段的生命周期仅存于调用者的内存中而不会写到磁盘里持久化，意思是transient修饰的age字段，他的生命周期仅仅在内存中，不会被写到磁盘中。</p><p>使用场景</p><p>（1）类中的字段值可以根据其它字段推导出来，如一个长方形类有三个属性长度、宽度、面积，面积不需要序列化。</p><p>（2）一些安全性的信息，一般情况下是不能离开JVM的。</p><p>（3）如果类中使用了Logger实例，那么Logger实例也是不需要序列化的</p><h3 id="5-lombok"><a href="#5-lombok" class="headerlink" title="5 lombok"></a>5 lombok</h3><p><a href="https://www.jianshu.com/p/422f151fccd3">https://www.jianshu.com/p/422f151fccd3</a></p><p>使用：idea中安装lombok插件，maven</p><p>常用注解</p><h4 id="Accessors-chain-true"><a href="#Accessors-chain-true" class="headerlink" title="@Accessors(chain = true)"></a>@Accessors(chain = true)</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 通常加在javabean上，可以链式调用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User hz <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPwd</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>源码</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">,</span> ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 作用场景：类，接口，枚举，字段</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>SOURCE<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Accessors</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">fluent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">chain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// chain = true 即可开启链式调用</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">prefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a>@Cleanup</h4><p>可以自动释放资源，比如在redis连接报错后，需要捕获异常并关闭连接，就可以用到</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jedisExample</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Cleanup</span> Jedis jedis <span class="token operator">=</span>   redisService<span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>“Jedis异常<span class="token operator">:</span>”<span class="token punctuation">,</span>ex<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果相当于</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jedisExample</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Jedis jedis<span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        jedis <span class="token operator">=</span> redisService<span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>“Jedis异常<span class="token operator">:</span>”<span class="token punctuation">,</span>ex<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter/@Setter"></a>@Getter/@Setter</h4><p>注解可以针对类的属性字段自动生成Get/Set方法</p><h4 id="ToString"><a href="#ToString" class="headerlink" title="@ToString"></a>@ToString</h4><p>为该注解下的类自动创建toString方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>exclude<span class="token operator">=</span><span class="token string">"someExcludedField"</span><span class="token punctuation">)</span><span class="token keyword">public</span>   <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> someBoolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String someStringField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> someExcludedField<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//上面代码相当于如下：</span><span class="token keyword">public</span>   <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token keyword">extends</span> <span class="token class-name">Bar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> someBoolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String someStringField<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> someExcludedField<span class="token punctuation">;</span>    @ Override    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Foo(super="</span> <span class="token operator">+</span>   <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>            <span class="token string">", someBoolean="</span> <span class="token operator">+</span>   someBoolean <span class="token operator">+</span>            <span class="token string">", someStringField="</span> <span class="token operator">+</span>   someStringField <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Data"><a href="#Data" class="headerlink" title="@Data"></a>@Data</h4><p>@Data最常用的注解之一。注解在类上，提供该类所有属性的getter/setter方法，还提供了equals、canEqual、hashCode、toString方法。</p><p>编译后效果</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String remark<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remark<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRemark</span><span class="token punctuation">(</span><span class="token keyword">final</span> String remark<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>remark <span class="token operator">=</span> remark<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Demo</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            Demo other <span class="token operator">=</span> <span class="token punctuation">(</span>Demo<span class="token punctuation">)</span>o<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>other<span class="token punctuation">.</span><span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> other<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                Object <span class="token keyword">this</span>$remark <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object other$remark <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span>$remark <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>other$remark <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$remark<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$remark<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">final</span> Object other<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">Demo</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> PRIME <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object $remark <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$remark <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> $remark<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Demo(id="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", remark="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getRemark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="AllArgsConstructor"><a href="#AllArgsConstructor" class="headerlink" title="@AllArgsConstructor"></a>@AllArgsConstructor</h4><p>为一个类体统包含全部属性为参数的构造器</p><h3 id="6-类型转换"><a href="#6-类型转换" class="headerlink" title="6 类型转换"></a>6 类型转换</h3><p>String与jsonobject</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Hashmap -> json</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> data <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String x <span class="token operator">=</span>JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>String与map</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">;</span>String str<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// String -> map</span><span class="token comment" spellcheck="true">// 方式1</span>HashMap hashMap <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> HashMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式2</span>Map maps <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// String -> 自定义对象</span>Product product <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// map -> Json String</span>String data <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> data <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String x <span class="token operator">=</span>JSONObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>string与list</p><pre class=" language-java"><code class="language-java">String str1 <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a,b,c</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[a, b, c]</span><span class="token comment" spellcheck="true">// json -> list</span>List<span class="token operator">&lt;</span>ExamListInVO<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>ExamListInVO<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list <span class="token operator">=</span> JSONObject<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>strResult<span class="token punctuation">,</span> ExamListInVO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>map与jsonobject</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object <span class="token function">parse</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把JSON文本parse为JSONObject或者JSONArray </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> JSONObject <span class="token function">parseObject</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span>； <span class="token comment" spellcheck="true">// 把JSON文本parse成JSONObject    </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  T <span class="token function">parseObject</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> Class <span class="token class-name">clazz</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把JSON文本parse为JavaBean </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> JSONArray <span class="token function">parseArray</span><span class="token punctuation">(</span>String text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把JSON文本parse成JSONArray </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  List <span class="token function">parseArray</span><span class="token punctuation">(</span>String text<span class="token punctuation">,</span> Class <span class="token class-name">clazz</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把JSON文本parse成JavaBean集合 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String <span class="token function">toJSONString</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将JavaBean序列化为JSON文本 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String <span class="token function">toJSONString</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prettyFormat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将JavaBean序列化为带格式的JSON文本 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Object <span class="token function">toJSON</span><span class="token punctuation">(</span>Object javaObject<span class="token punctuation">)</span><span class="token punctuation">;</span> 将JavaBean转换为JSONObject或者JSONArray。</code></pre><h3 id="7-queryWrapper常用方法"><a href="#7-queryWrapper常用方法" class="headerlink" title="7 queryWrapper常用方法"></a>7 queryWrapper常用方法</h3><p><img src="https://img-blog.csdnimg.cn/20200813105229605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pjeGJk,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" loading="lazy"></p><h3 id="8-订单支付超时自动取消订单解决方案（延时队列）"><a href="#8-订单支付超时自动取消订单解决方案（延时队列）" class="headerlink" title="8 订单支付超时自动取消订单解决方案（延时队列）"></a>8 订单支付超时自动取消订单解决方案（延时队列）</h3><p><a href="http://www.dockone.io/article/10139">http://www.dockone.io/article/10139</a></p><ul><li>jdk中的DelayQueue</li><li>Quartz定时任务</li><li>redis sorted set</li><li>redis过期回调</li><li>rabbitmq延时队列</li><li>kafka，netty的时间轮</li></ul><h3 id="9-时间模块"><a href="#9-时间模块" class="headerlink" title="9 时间模块"></a>9 时间模块</h3><p>获取当前时间戳</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方法 一</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法 二 效率最慢</span>Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTimeInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法 三</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取今天时间</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取昨天时间</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取当前格式化时间</p><pre class=" language-java"><code class="language-java">SimpleDateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置日期格式</span>String date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// new Date()为获取当前系统时间，也可使用当前时间戳</span>Date date1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1618456775789</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Thu Apr 15 11:19:35 CST 2021</span>SimpleDateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置日期格式</span>String date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2021-04-15 11:19:35</span></code></pre><h3 id="10-rabbitmq"><a href="#10-rabbitmq" class="headerlink" title="10 rabbitmq"></a>10 rabbitmq</h3><h4 id="AMQP和JMS"><a href="#AMQP和JMS" class="headerlink" title="AMQP和JMS"></a>AMQP和JMS</h4><p>MQ是消息通信的模型，并发具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li></ul><ul><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li></ul><ul><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><p>常见MQ产品</p><ul><li><p>ActiveMQ：基于JMS</p></li><li><p>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</p></li></ul><ul><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li></ul><ul><li>Kafka：分布式消息系统，高吞吐量</li></ul><p>基本使用</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p><img src="https://img-blog.csdnimg.cn/20190610225910220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2thdml0bw==,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><p>组成部分说明：</p><p>Broker：消息队列服务进程，此进程包括两个部分：Exchange和Queue<br>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过虑。<br>Queue：消息队列，存储消息的队列，消息到达队列并转发给指定的<br>Producer：消息生产者，即生产方客户端，生产方客户端将消息发送<br>Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。<br>生产者发送消息流程：</p><p>1、生产者和Broker建立TCP连接。</p><p>2、生产者和Broker建立通道。</p><p>3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。</p><p>4、Exchange将消息转发到指定的Queue（队列）</p><p>消费者接收消息流程：</p><p>1、消费者和Broker建立TCP连接</p><p>2、消费者和Broker建立通道</p><p>3、消费者监听指定的Queue（队列）</p><p>4、当有消息到达Queue时Broker默认将消息推送给消费者。</p><p>5、消费者接收到消息。</p><p>6、ack回复</p><p><strong>写demo的时候注意点</strong></p><ul><li>连接时所需的用户需提前创建</li><li>连接虚拟机时需给用户对这个虚拟机的权限</li><li>connection error; protocol method: #method&lt;connection.close&gt;(reply-code=530, reply-text=NOT_ALLOWED   当出现这个报错就是这个用户没有对这个虚拟机的权限</li></ul><pre class=" language-python"><code class="language-python"><span class="token number">1</span>、安装brew install rabbitmq<span class="token number">2</span>、启动及关闭RabbitMQ服务前台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server    或sudo su<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>Cellar<span class="token operator">/</span>rabbitmq<span class="token operator">/</span><span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">/</span>sbin<span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detacted后台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detached后台关闭 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmqctl stop<span class="token number">3</span> 、登录http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">15672</span>    guest\guest<span class="token number">4</span>、创建用户与虚拟机并授权rabbitmqctl add_user USER PASSWORD <span class="token comment" spellcheck="true">##创建用户</span>rabbitmqctl change_password USER PASSWORD <span class="token comment" spellcheck="true">##修改密码</span>rabbitmqctl set_user_tags USER administrator  <span class="token comment" spellcheck="true">##设置为管理员</span>rabbitmqctl add_vhost VHOST <span class="token comment" spellcheck="true">##添加虚拟机</span>rabbitmqctl set_permissions <span class="token operator">-</span>p VHOST USER <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>  <span class="token comment" spellcheck="true">##给用户分配虚拟主机权限</span></code></pre><p>创建连接</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">rabbitmqUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 建立与RabbitMQ的连接     *     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义连接工厂</span>        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//端口</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置账号信息，用户名、密码、vhost</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"mqv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置虚拟机，一个mq服务可以设置多个虚拟机，每个虚拟机就相当于一个独立的mq</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过工厂获取连接</span>        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生产者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、从连接中创建通道，使用通道才能完成消息相关的操作</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、声明（创建）队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、消息内容</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向指定的队列中发送消息</span>        <span class="token comment" spellcheck="true">//参数：String exchange, String routingKey, BasicProperties props, byte[] body</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、exchange，交换机，如果不指定将使用mq的默认交换机（设置为""）         * 2、routingKey，路由key，交换机根据路由key来将消息转发到指定的队列，如果使用默认交换机，routingKey设置为队列的名称         * 3、props，消息的属性         * 4、body，消息内容         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> QUEUE_NAME<span class="token punctuation">,</span> null<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] Sent '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭通道和连接(资源关闭最好用try-catch-finally语句处理)</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建会话通道,生产者和mq服务所有通信都在channel通道中完成</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声明队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实现消费方法</span>        DefaultConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>            <span class="token comment" spellcheck="true">/**             * 当接收到消息后此方法将被调用             * @param consumerTag  消费者标签，用来标识消费者的，在监听队列时设置channel.basicConsume             * @param envelope 信封，通过envelope             * @param properties 消息属性             * @param body 消息内容             * @throws IOException             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//交换机</span>                String exchange <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//消息id，mq在channel中用来标识消息的id，可用于确认消息已接收</span>                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// body 即消息体</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] received : "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听队列，第二个参数：是否自动进行消息确认。</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean autoAck, Consumer callback</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、queue 队列名称         * 2、autoAck 自动回复，当消费者接收到消息后要告诉mq消息已接收，如果将此参数设置为tru表示会自动回复mq，如果设置为false要通过编程实现回复         * 3、callback，消费方法，当消费者接收到消息要执行的方法         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ack确认机制"><a href="#ack确认机制" class="headerlink" title="ack确认机制"></a>ack确认机制</h4><p>自动ack会在处理消息过程中即使出现异常，也会消息确认</p><p>在消息重要的情况下切换手动ack，手动ack后要主动发送ack，否在消息状态为未确认（unacked），在关闭消费者后，状态会回退到ready</p><p>消息队列发送后，在消息消费过程中出现异常处理：第一次执行，报错，捕获，重试，第二次执行，报错，捕获记录错误日志到数据库，确认消费</p><p>配置direct交换机（直连交换机）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dq<span class="token punctuation">.</span>config<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CachingConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 定义队列名和交换机 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectMqConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 交换机名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DIRECT_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_exchange"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 绑定key，交换机绑定队列时需要指定     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST1 <span class="token operator">=</span> <span class="token string">"direct_key1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST2 <span class="token operator">=</span> <span class="token string">"direct_key2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST3 <span class="token operator">=</span> <span class="token string">"direct_key3"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队列名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST1 <span class="token operator">=</span> <span class="token string">"addProductUsderBid"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST2 <span class="token operator">=</span> <span class="token string">"updateProduct1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST3 <span class="token operator">=</span> <span class="token string">"updateStateProduct1"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构建DirectExchange交换机     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化，长期不用补删除</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DIRECT_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构建序列     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST1<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST2<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST3<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绑定交交换机和     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test1Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test2Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test3Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实例化操作模板     *     * @param connectionFactory     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">rabbitTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须为true,否则无法触发returnedMessage回调，消息丢失</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="消息分发与能者多劳"><a href="#消息分发与能者多劳" class="headerlink" title="消息分发与能者多劳"></a>消息分发与能者多劳</h4><p>当出现两个消费者时，消费者2处理消息的速度远小于消费者1的情况下，他们会受到同样数量的消息</p><p>此时消费者1有大量时间处于空闲状态，可以通过 BasicQos 方法设置prefetchCount = 1</p><p>这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理1个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。相反，它会将其分派给不是仍然忙碌的下一个Consumer。</p><p>值得注意的是：prefetchCount在手动ack的情况下才生效，自动ack不生效。</p><h4 id="订阅模式"><a href="#订阅模式" class="headerlink" title="订阅模式"></a>订阅模式</h4><p>。。。</p><h3 id="11-分布式id设计模式"><a href="#11-分布式id设计模式" class="headerlink" title="11 分布式id设计模式"></a>11 分布式id设计模式</h3><h4 id="基于数据库的号段模式"><a href="#基于数据库的号段模式" class="headerlink" title="基于数据库的号段模式"></a>基于数据库的号段模式</h4><h3 id="12-quartz定时任务时间"><a href="#12-quartz定时任务时间" class="headerlink" title="12 quartz定时任务时间"></a>12 quartz定时任务时间</h3><table><thead><tr><th align="left">表达式</th><th align="left">允许值</th></tr></thead><tbody><tr><td align="left">“0 0 12 * * ?”</td><td align="left">每天中午12点触发</td></tr><tr><td align="left">“0 15 10 ? * *”</td><td align="left">每天上午10:15触发</td></tr><tr><td align="left">“0 15 10 * * ?”</td><td align="left">每天上午10:15触发</td></tr><tr><td align="left">“0 15 10 * * ? *”</td><td align="left">每天上午10:15触发</td></tr><tr><td align="left">“0 15 10 * * ? 2005”</td><td align="left">2005年的每天上午10:15触发</td></tr><tr><td align="left">“0 * 14 * * ?”</td><td align="left">在每天下午2点到下午2:59期间的每1分钟触发</td></tr><tr><td align="left">“0 0/5 14 * * ?”</td><td align="left">在每天下午2点到下午2:55期间的每5分钟触发</td></tr><tr><td align="left">“0 0/5 14,18 * * ?”</td><td align="left">在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</td></tr><tr><td align="left">“0 0-5 14 * * ?”</td><td align="left">在每天下午2点到下午2:05期间的每1分钟触发</td></tr><tr><td align="left">“0 10,44 14 ? 3 WED”</td><td align="left">每年三月的星期三的下午2:10和2:44触发</td></tr><tr><td align="left">“0 15 10 ? * MON-FRI”</td><td align="left">周一至周五的上午10:15触发</td></tr><tr><td align="left">“0 15 10 15 * ?”</td><td align="left">每月15日上午10:15触发</td></tr><tr><td align="left">“0 15 10 L * ?”</td><td align="left">每月最后一日的上午10:15触发</td></tr><tr><td align="left">“0 15 10 ? * 6L”</td><td align="left">每月的最后一个星期五上午10:15触发</td></tr><tr><td align="left">“0 15 10 ? * 6L 2002-2005”</td><td align="left">2002年至2005年的每月的最后一个星期五上午10:15触发</td></tr><tr><td align="left">“0 15 10 ? * 6#3”</td><td align="left">每月的第三个星期五上午10:15触发</td></tr><tr><td align="left">0 6 * * *</td><td align="left">每天早上6点</td></tr><tr><td align="left">0 /2 * *</td><td align="left">每两个小时</td></tr><tr><td align="left">0 23-7/2，8 * * *</td><td align="left">晚上11点到早上8点之间每两个小时，早上八点</td></tr><tr><td align="left">0 11 4 * 1-3</td><td align="left">每个月的4号和每个礼拜的礼拜一到礼拜三的早上11点</td></tr><tr><td align="left">0 4 1 1 *</td><td align="left">1月1日早上4点</td></tr></tbody></table><h3 id="13-mysql设置默认更新时间"><a href="#13-mysql设置默认更新时间" class="headerlink" title="13 mysql设置默认更新时间"></a>13 mysql设置默认更新时间</h3><p>可以用下面的ALTER语句来修改create_time默认为当前时间、update_time更新时间为当前修改更新的时间</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> create_time <span class="token keyword">datetime</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span><span class="token keyword">user</span><span class="token punctuation">`</span><span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'更新时间'</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现分布式锁</title>
      <link href="/task/2021/07/02/python/%E5%AD%A6%E4%B9%A0/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/task/2021/07/02/python/%E5%AD%A6%E4%B9%A0/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="加锁操作非原子性"><a href="#加锁操作非原子性" class="headerlink" title="加锁操作非原子性"></a>加锁操作非原子性</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token punctuation">,</span> redis<span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token comment" spellcheck="true"># 方式一：加锁操作非原子性</span><span class="token comment" spellcheck="true"># 失败案例</span><span class="token keyword">class</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> redis_conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>redis_conn <span class="token operator">=</span> redis_conn    <span class="token keyword">def</span> <span class="token function">get_lock_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> <span class="token string">'lock_%s'</span> <span class="token operator">%</span> key        <span class="token keyword">return</span> lock_key    <span class="token keyword">def</span> <span class="token function">get_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key: 分布式锁key        :return: True 表示获取到了锁        get_lock会循环获取锁，只有得到锁的人才能退出循环        获取锁的原理：所有需要进行a操作的线程都要先获取redis中一个规定的key，若一个线程获取key为空，则获取成功，并设置key=1，进行a操作，其他线程都会获取失败以至再次获取到key为空        获取到key的线程进行操作a结束后，需要释放锁，就要删除key=1，以便下一个线程获取锁        但是本方式存在漏洞：第一个线程获取到key之后，还没来得及放入key=1，就被第二个线程获取到了        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> value<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">del_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">increase_data</span><span class="token punctuation">(</span>redis_conn<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    lock_value <span class="token operator">=</span> lock<span class="token punctuation">.</span>get_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取锁</span>    value <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取数据</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> value<span class="token punctuation">:</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token number">0</span>    redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token keyword">print</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>del_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 释放锁</span><span class="token comment" spellcheck="true">##主程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>    lock <span class="token operator">=</span> RedisLock<span class="token punctuation">(</span>redis<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'test_key'</span>    thread_count <span class="token operator">=</span> <span class="token number">10</span>    redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>thread_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 启动10个线程调用increase_data</span>        <span class="token comment" spellcheck="true"># 传入的lock相当于是一个锁工具，所有人都可以通过锁工具去redis中获取锁，但是锁的数量唯一</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>increase_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>redis<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    实际输出结果    Thread-1 0    Thread-8 1    Thread-6 Thread-7 1    1    Thread-9 1    Thread-2Thread-4 2     2Thread-3 2    Thread-10 2    Thread-5 2    """</span></code></pre><h4 id="使用setnx原子性加锁"><a href="#使用setnx原子性加锁" class="headerlink" title="使用setnx原子性加锁"></a>使用setnx原子性加锁</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token punctuation">,</span> redis<span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token keyword">class</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> redis_conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>redis_conn <span class="token operator">=</span> redis_conn    <span class="token keyword">def</span> <span class="token function">get_lock_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> <span class="token string">'lock_%s'</span> <span class="token operator">%</span> key        <span class="token keyword">return</span> lock_key    <span class="token keyword">def</span> <span class="token function">get_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key:        :return:        鉴于上面版本是由于命令不是原子性操作造成两个或多个线程同时获得锁的问题，这个版本改成使用 redis 的 setnx 命令来进行锁的查询和设置操作            setnx 即 set if not exists，顾名思义就是当key不存在的时候才设置 value，并返回 1，如果 key 已经存在，则不进行任何操作，返回 0。        和之前get+set的区别就是  setnx只需要一步操作即可完成获取锁和设置锁的两步操作        这种原子性是成功的关键        操作是成功了，但是还是有问题，若某个线程在a操作时抛出异常，那么其他所有等待获取锁的线程将陷入死循环，造成死锁        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>setnx<span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.01</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">del_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">increase_data</span><span class="token punctuation">(</span>redis_conn<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    lock_value <span class="token operator">=</span> lock<span class="token punctuation">.</span>get_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取锁</span>    value <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取数据</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> value<span class="token punctuation">:</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token number">0</span>    redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token keyword">print</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 模拟死锁</span>    <span class="token comment" spellcheck="true"># if thread_name == "Thread-2":</span>    <span class="token comment" spellcheck="true">#     print("thread-2 crash ....")</span>    <span class="token comment" spellcheck="true">#     import sys</span>    <span class="token comment" spellcheck="true">#     sys.exit(1)</span>    lock<span class="token punctuation">.</span>del_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 释放锁</span><span class="token comment" spellcheck="true">##主程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>    lock <span class="token operator">=</span> RedisLock<span class="token punctuation">(</span>redis<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'test_key'</span>    thread_count <span class="token operator">=</span> <span class="token number">10</span>    redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>thread_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>increase_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>redis<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="解决死锁"><a href="#解决死锁" class="headerlink" title="解决死锁"></a>解决死锁</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token punctuation">,</span> redis<span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token keyword">class</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> redis_conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>redis_conn <span class="token operator">=</span> redis_conn    <span class="token keyword">def</span> <span class="token function">get_lock_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> <span class="token string">'lock_%s'</span> <span class="token operator">%</span> key        <span class="token keyword">return</span> lock_key    <span class="token keyword">def</span> <span class="token function">get_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key:        :param timeout:        :return:        根据redis的ttl机制            扩展资料：redis的是两种失效机制                1 被动失效：当客户端主动获取时，判断是否失效（超时）                2 主动失效：redis中有一个定时任务，每秒执行10次，随机从设定有失效机制的key中获取20个，删除过期的key，判断下是否超过1/4的key已经失效了，如果没有执行步骤第一步再次获取20个。        在锁之前先设定超时实现，避免死锁现象        解决了死锁现象但是锁机制还是存在问题：线程1退出死锁后，线程2立刻获取到了锁，但是线程1还有一步删除锁的操作，就会吧线程2刚放进去的锁删掉，以至于数据混乱        这里很容易想到flask源码中关于上下文request ctx对象唯一性的处理，通过线程id作为标识，也可以加上进程pid，机器ip，或者时间戳，就可以绝对确立唯一性了        然后在删除锁的操作中设置设置锁和删除锁必须在同一个线程中执行        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ex<span class="token operator">=</span>timeout<span class="token punctuation">)</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>                <span class="token keyword">break</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">del_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">increase_data</span><span class="token punctuation">(</span>redis_conn<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    lock_value <span class="token operator">=</span> lock<span class="token punctuation">.</span>get_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取锁</span>    value <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 获取数据</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 模拟实际情况下进行的某些耗时操作, 且执行时间大于锁过期的时间</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> value<span class="token punctuation">:</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token number">0</span>    redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token keyword">print</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 模拟死锁</span>    <span class="token keyword">if</span> thread_name <span class="token operator">==</span> <span class="token string">"Thread-2"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thread-2 crash ...."</span><span class="token punctuation">)</span>        <span class="token keyword">import</span> sys        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>del_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 释放锁</span><span class="token comment" spellcheck="true">##主程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>    lock <span class="token operator">=</span> RedisLock<span class="token punctuation">(</span>redis<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'test_key'</span>    thread_count <span class="token operator">=</span> <span class="token number">10</span>    redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>thread_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>increase_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>redis<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="通过线程唯一性解决误删锁"><a href="#通过线程唯一性解决误删锁" class="headerlink" title="通过线程唯一性解决误删锁"></a>通过线程唯一性解决误删锁</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token punctuation">,</span> time<span class="token punctuation">,</span> redis<span class="token keyword">from</span> redis <span class="token keyword">import</span> StrictRedis<span class="token keyword">class</span> <span class="token class-name">RedisLock</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> redis_conn<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>redis_conn <span class="token operator">=</span> redis_conn        <span class="token comment" spellcheck="true"># 获取机器ip</span>        self<span class="token punctuation">.</span>ip <span class="token operator">=</span> socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取进程pid</span>        self<span class="token punctuation">.</span>pid <span class="token operator">=</span> os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_lock_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        lock_key <span class="token operator">=</span> <span class="token string">'lock_%s'</span> <span class="token operator">%</span> key        <span class="token keyword">return</span> lock_key    <span class="token keyword">def</span> <span class="token function">gen_unique_value</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name        time_now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 机器ip 线程pid 进程名 时间戳， 确立唯一性</span>        unique_value <span class="token operator">=</span> <span class="token string">"{0}-{1}-{2}-{3}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ip<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pid<span class="token punctuation">,</span> thread_name<span class="token punctuation">,</span> time_now<span class="token punctuation">)</span>        <span class="token keyword">return</span> unique_value    <span class="token keyword">def</span> <span class="token function">get_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key:        :param timeout:        :return:        获取锁后会返回唯一标识（gen_unique_value），删除锁的时候通过判断唯一标识是否相等进行删除        这里执行并没有成功，甚至相比之前误差更大        原因是我们虽然解决了a线程只能删a线程放入的锁，但是当a线程判断通过后，正要进行删除key操作的时候，a线程的key过期了，此时b线程抢到了锁，并写入，然后a线程就删除了b线程写入的锁        简单来说就是 删除操作并非原子性，中途有缝可以插 虽然这种情况可以通过给锁设置合理的超时时间来避免，比如设置一个超时时间大于线程执行时间的锁        以上的方案中，我们是假设 redis 服务端是单集群且高可用的，忽视了以下的问题：            如果某一时刻 redis master 节点发生了故障，集群中的某个 slave 节点变成 master 节点，            这时候就可能出现原 master 节点上的锁没有及时同步到 slave 节点，导致其他线程同时获得锁。            对于这个问题，可以参考 redis 官方推出的 redlock 算法，但是比较遗憾的是，该算法也没有很好地解决锁过期的问题。        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        unique_value <span class="token operator">=</span> self<span class="token punctuation">.</span>gen_unique_value<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"unique value %s"</span> <span class="token operator">%</span> unique_value<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>lock_key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nx<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> ex<span class="token operator">=</span>timeout<span class="token punctuation">)</span>            <span class="token keyword">if</span> value<span class="token punctuation">:</span>                <span class="token keyword">return</span> unique_value            <span class="token keyword">else</span><span class="token punctuation">:</span>                thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">del_lock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param key: 锁        :param value: 进程信息        :return:        """</span>        lock_key <span class="token operator">=</span> self<span class="token punctuation">.</span>get_lock_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        old_lock_value <span class="token operator">=</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span>        <span class="token keyword">if</span> old_lock_value <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>redis_conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lock_key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">increase_data</span><span class="token punctuation">(</span>redis_conn<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    lock_value <span class="token operator">=</span> lock<span class="token punctuation">.</span>get_lock<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取锁</span>    value <span class="token operator">=</span> redis_conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#获取数据</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#模拟实际情况下进行的某些耗时操作, 且执行时间大于锁过期的时间</span>    <span class="token keyword">if</span> value<span class="token punctuation">:</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> <span class="token number">0</span>    redis_conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    thread_name <span class="token operator">=</span> threading<span class="token punctuation">.</span>current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name    <span class="token keyword">print</span><span class="token punctuation">(</span>thread_name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token keyword">if</span> thread_name <span class="token operator">==</span> <span class="token string">"Thread-2"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"thread-2 crash ...."</span><span class="token punctuation">)</span>        <span class="token keyword">import</span> sys        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>del_lock<span class="token punctuation">(</span>key<span class="token punctuation">,</span> lock_value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#释放锁</span><span class="token comment" spellcheck="true">##主程序</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">,</span> db<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>    redis <span class="token operator">=</span> StrictRedis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>    lock <span class="token operator">=</span> RedisLock<span class="token punctuation">(</span>redis<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'test_key'</span>    thread_count <span class="token operator">=</span> <span class="token number">10</span>    redis<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>thread_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        thread <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>increase_data<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>redis<span class="token punctuation">,</span> lock<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>        thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token triple-quoted-string string">"""    unique value 10.0.0.13-52504-Thread-1-1621907713.510258    unique value 10.0.0.13-52504-Thread-2-1621907713.510459    unique value 10.0.0.13-52504-Thread-3-1621907713.510732    unique value 10.0.0.13-52504-Thread-4-1621907713.511075    unique value 10.0.0.13-52504-Thread-5-1621907713.511213    unique value 10.0.0.13-52504-Thread-6-1621907713.511355    unique value 10.0.0.13-52504-Thread-7-1621907713.511531    unique value 10.0.0.13-52504-Thread-8-1621907713.5118861    unique value 10.0.0.13-52504-Thread-9-1621907713.512355    unique value 10.0.0.13-52504-Thread-10-1621907713.512751    Thread-1 0    Thread-6 0    Thread-3 0    Thread-4 1    Thread-9 1    Thread-7 1    Thread-8 2    Thread-10 2    Thread-2 2    thread-2 crash ....    Thread-5 3    """</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastapi中间件</title>
      <link href="/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h3><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>middleware<span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">add_process_time_header</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> call_next<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 请求前</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> <span class="token keyword">await</span> call_next<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 响应后</span>    process_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time    response<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"X-Process-Time"</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>process_time<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>process_time<span class="token punctuation">)</span>    <span class="token keyword">return</span> response</code></pre><h3 id="fastapi内置中间件"><a href="#fastapi内置中间件" class="headerlink" title="fastapi内置中间件"></a>fastapi内置中间件</h3><p>除了自定义中间件，我们也可以直接使用其他的中间件。</p><p>FastAPI通过 <em><code>app.add_middleware()</code></em> 操作来引入已定义的中间件。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> unicorn <span class="token keyword">import</span> UnicornMiddlewareapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_middleware<span class="token punctuation">(</span>UnicornMiddleware<span class="token punctuation">,</span> some_config<span class="token operator">=</span><span class="token string">"rainbow"</span><span class="token punctuation">)</span></code></pre><p>*<code>app.add_middleware()</code>*第一个参数是中间件类，同时还支持中间件的其他附加信息。</p><p>FastAPI提供了一些常用的中间件。</p><h3 id="一、HTTPSRedirectMiddleware"><a href="#一、HTTPSRedirectMiddleware" class="headerlink" title="一、HTTPSRedirectMiddleware"></a>一、<code>HTTPSRedirectMiddleware</code></h3><pre class=" language-python"><code class="language-python">HTTPSRedirectMiddleware强制发来的请求协议必须是https或者wss。<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>httpsredirect <span class="token keyword">import</span> HTTPSRedirectMiddlewareapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_middleware<span class="token punctuation">(</span>HTTPSRedirectMiddleware<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">}</span></code></pre><h3 id="二、TrustedHostMiddleware"><a href="#二、TrustedHostMiddleware" class="headerlink" title="二、TrustedHostMiddleware"></a>二、<code>TrustedHostMiddleware</code></h3><pre class=" language-python"><code class="language-python">TrustedHostMiddleware强制发来的请求必须在Header信息中设置了Host选项，为了避免HTTP Host Header攻击。<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>trustedhost <span class="token keyword">import</span> TrustedHostMiddlewareapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_middleware<span class="token punctuation">(</span>    TrustedHostMiddleware<span class="token punctuation">,</span> allowed_hosts<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"example.com"</span><span class="token punctuation">,</span> <span class="token string">"*.example.com"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World"</span><span class="token punctuation">}</span></code></pre><h3 id="三、GZipMiddleware"><a href="#三、GZipMiddleware" class="headerlink" title="三、GZipMiddleware"></a>三、<code>GZipMiddleware</code></h3><p>当请求的头信息 <em><code>Accept-Encoding</code></em> 字段带有”gzip”时，<code>GZipMiddleware负责</code>完成相应的返回结果处理。</p><pre class=" language-python"><code class="language-python">GZipMiddleware 支持 <span class="token operator">*</span>`minimum_size`<span class="token operator">*</span> 参数：当返回结果大小小于指定值时不启用压缩。<span class="token punctuation">(</span>单位为字节，默认值为<span class="token number">500</span><span class="token punctuation">)</span><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>gzip <span class="token keyword">import</span> GZipMiddlewareapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span>add_middleware<span class="token punctuation">(</span>GZipMiddleware<span class="token punctuation">,</span> minimum_size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"somebigcontent"</span></code></pre><p>参考资料：<a href="https://www.starlette.io/middleware/">https://www.starlette.io/middleware/</a></p><p>cors中间件参考资料：<a href="https://www.cnblogs.com/mazhiyong/p/12987619.html">https://www.cnblogs.com/mazhiyong/p/12987619.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 框架 </tag>
            
            <tag> fastapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastapi依赖注入</title>
      <link href="/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h2><p>本质就是把一段需要复用的代码作为依赖项，注入到需要操作的函数中</p><p>看起来和装饰器没什么区别，在python中依赖项只要是能调用的即可，那么及时是类也能注入了</p><p>“依赖注入”非常适用于以下使用场景：</p><p>1、业务逻辑复用</p><p>2、共享数据库连接</p><p>3、安全机制、权限校验、角色管理等等</p><p>4、后台任务注入</p><p>所有上述使用场景，借助于”依赖注入”可以明确的提高代码复用，减少代码重复</p><h3 id="fastapi简单示例"><a href="#fastapi简单示例" class="headerlink" title="fastapi简单示例"></a>fastapi简单示例</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">common</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/item"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_common</span><span class="token punctuation">(</span>commons<span class="token punctuation">:</span>dict <span class="token operator">=</span> Depends<span class="token punctuation">(</span>common<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 依赖项common注入到read_common中，执行结果作为参数返回给commons</span>    <span class="token keyword">return</span> commons</code></pre><p>tips：Depends和body，path属于同一类，具有相似的属性操作</p><p><strong>执行流程</strong></p><ul><li>调用依赖函数</li><li>依赖函数的结果作为参数传入到被依赖函数中</li></ul><h3 id="利用依赖注入实现简易分页器"><a href="#利用依赖注入实现简易分页器" class="headerlink" title="利用依赖注入实现简易分页器"></a>利用依赖注入实现简易分页器</h3><pre class=" language-python"><code class="language-python">fake_items_db <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item_name"</span><span class="token punctuation">:</span> <span class="token string">"Baz"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">CommonQueryParams</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> None<span class="token punctuation">,</span> skip<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">:</span> int <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>q <span class="token operator">=</span> q        self<span class="token punctuation">.</span>skip <span class="token operator">=</span> skip        self<span class="token punctuation">.</span>limit <span class="token operator">=</span> limit@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>commons<span class="token punctuation">:</span> CommonQueryParams <span class="token operator">=</span> Depends<span class="token punctuation">(</span>CommonQueryParams<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> commons<span class="token punctuation">.</span>q<span class="token punctuation">:</span>        response<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> commons<span class="token punctuation">.</span>q<span class="token punctuation">}</span><span class="token punctuation">)</span>    items <span class="token operator">=</span> fake_items_db<span class="token punctuation">[</span>commons<span class="token punctuation">.</span>skip <span class="token punctuation">:</span> commons<span class="token punctuation">.</span>skip <span class="token operator">+</span> commons<span class="token punctuation">.</span>limit<span class="token punctuation">]</span>    response<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"items"</span><span class="token punctuation">:</span> items<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response</code></pre><h3 id="依赖子项（依赖套娃）"><a href="#依赖子项（依赖套娃）" class="headerlink" title="依赖子项（依赖套娃）"></a>依赖子项（依赖套娃）</h3><p>依赖项也可以被注入，具体层级不做限制，若一个依赖项被多次注入到同一个请求中，fastapi默认只会执行一次来缓存这个函数的结果，再次调用从缓存中拿，若我们还是需要调用，可以用Depends的参数*<code>use_cache=False</code>*来禁止依赖项的缓存</p><p>示例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">query_extractor</span><span class="token punctuation">(</span>q11<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q12<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> q11 <span class="token operator">+</span> q12<span class="token keyword">def</span> <span class="token function">query_or_cookie_extractor</span><span class="token punctuation">(</span>q2<span class="token punctuation">:</span> str <span class="token operator">=</span> Depends<span class="token punctuation">(</span>query_extractor<span class="token punctuation">)</span><span class="token punctuation">,</span> last_query<span class="token punctuation">:</span> str <span class="token operator">=</span> Cookie<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> q2<span class="token punctuation">:</span>        <span class="token keyword">return</span> last_query    <span class="token keyword">return</span> q2@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_query</span><span class="token punctuation">(</span>query_or_default<span class="token punctuation">:</span> str <span class="token operator">=</span> Depends<span class="token punctuation">(</span>query_or_cookie_extractor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"q_or_cookie"</span><span class="token punctuation">:</span> query_or_default<span class="token punctuation">}</span></code></pre><h3 id="基于路径装饰器的依赖项"><a href="#基于路径装饰器的依赖项" class="headerlink" title="基于路径装饰器的依赖项"></a>基于路径装饰器的依赖项</h3><p>路径装饰器有一个dependencies参数，当我们需要依赖注入但是不需要返回结果的时候即可在这里使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">verify_token</span><span class="token punctuation">(</span>x_token<span class="token punctuation">:</span> str <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x_token <span class="token operator">!=</span> <span class="token string">"token"</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string">"X-Token header invalid"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">verify_key</span><span class="token punctuation">(</span>x_key<span class="token punctuation">:</span> str <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x_key <span class="token operator">!=</span> <span class="token string">"key"</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code<span class="token operator">=</span><span class="token number">400</span><span class="token punctuation">,</span> detail<span class="token operator">=</span><span class="token string">"X-Key header invalid"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x_key@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">,</span> dependencies<span class="token operator">=</span><span class="token punctuation">[</span>Depends<span class="token punctuation">(</span>verify_token<span class="token punctuation">)</span><span class="token punctuation">,</span> Depends<span class="token punctuation">(</span>verify_key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>依赖项的参数的顺序是固定的</p><h3 id="基于上下文管理器和依赖注入实现数据库资源管理"><a href="#基于上下文管理器和依赖注入实现数据库资源管理" class="headerlink" title="基于上下文管理器和依赖注入实现数据库资源管理"></a>基于上下文管理器和依赖注入实现数据库资源管理</h3><p>示例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">DBSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">MySuperContextManager</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"创建数据库对象"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> DBSession<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用数据库对象"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>db    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_value<span class="token punctuation">,</span> traceback<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"关闭数据库对象"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> MySuperContextManager<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> db<span class="token punctuation">:</span>        <span class="token keyword">yield</span> db@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>db<span class="token punctuation">:</span>MySuperContextManager <span class="token operator">=</span> Depends<span class="token punctuation">(</span>get_db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token string">"Bar"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h3 id="可参数化的依赖项"><a href="#可参数化的依赖项" class="headerlink" title="可参数化的依赖项"></a>可参数化的依赖项</h3><p>示例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FixedContentQueryChecker</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fixed_content<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>fixed_content <span class="token operator">=</span> fixed_content    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 这里的q是通过查询参数调用进来的</span>        <span class="token keyword">if</span> q<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>fixed_content <span class="token keyword">in</span> q        <span class="token keyword">return</span> <span class="token boolean">False</span>checker <span class="token operator">=</span> FixedContentQueryChecker<span class="token punctuation">(</span><span class="token string">"bar"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/query-checker/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_query_check</span><span class="token punctuation">(</span>fixed_content_included<span class="token punctuation">:</span> bool <span class="token operator">=</span> Depends<span class="token punctuation">(</span>checker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"fixed_content_in_query"</span><span class="token punctuation">:</span> fixed_content_included<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 框架 </tag>
            
            <tag> fastapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastapi后台任务</title>
      <link href="/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/"/>
      <url>/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="backgroundTask"><a href="#backgroundTask" class="headerlink" title="backgroundTask"></a>backgroundTask</h3><p>fastapi内置的后台执行任务的方法</p><ul><li>需要一定等待时间，比如发送邮件</li><li>对响应的没有影响，比如处理文件</li></ul><p>使用案例：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">write_notification</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> str<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"log.txt"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> email_file<span class="token punctuation">:</span>        content <span class="token operator">=</span> f<span class="token string">"notification for {email}: {message}"</span>        email_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/send-notification/{email}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">send_notification</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> str<span class="token punctuation">,</span> background_tasks<span class="token punctuation">:</span> BackgroundTasks<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 添加的任务，极其参数</span>    background_tasks<span class="token punctuation">.</span>add_task<span class="token punctuation">(</span>write_notification<span class="token punctuation">,</span> email<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"some notification"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"信息已经在后台任务中处理"</span><span class="token punctuation">}</span></code></pre><h3 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> BackgroundTasks<span class="token punctuation">,</span> Depends<span class="token punctuation">,</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write_log</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"log.txt"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> log<span class="token punctuation">:</span>        log<span class="token punctuation">.</span>write<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_query</span><span class="token punctuation">(</span>background_tasks<span class="token punctuation">:</span> BackgroundTasks<span class="token punctuation">,</span> q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> q<span class="token punctuation">:</span>　　message <span class="token operator">=</span> f<span class="token string">"found query: {q}\n"</span> background_tasks<span class="token punctuation">.</span>add_task<span class="token punctuation">(</span>write_log<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">return</span> q@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/send-notification/{email}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">send_notification</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> str<span class="token punctuation">,</span> background_tasks<span class="token punctuation">:</span> BackgroundTasks<span class="token punctuation">,</span> q<span class="token punctuation">:</span> str <span class="token operator">=</span> Depends<span class="token punctuation">(</span>get_query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> f<span class="token string">"message to {email}\n"</span> background_tasks<span class="token punctuation">.</span>add_task<span class="token punctuation">(</span>write_log<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Message sent"</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 框架 </tag>
            
            <tag> fastapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastapi基础</title>
      <link href="/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%20%E5%9F%BA%E7%A1%80/"/>
      <url>/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><h5 id="安装基础依赖"><a href="#安装基础依赖" class="headerlink" title="安装基础依赖"></a>安装基础依赖</h5><pre><code>pip install fastapi</code></pre><p>并且安装<code>uvicorn</code>来作为服务器：</p><pre><code>pip install uvicorn[standard]</code></pre><p>然后对你想使用的每个可选依赖项也执行相同的操作</p><h5 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h5><pre><code>uvicorn main:app --reload</code></pre><p><code>uvicorn main:app</code> 命令含义如下:</p><ul><li><code>main</code>：<code>main.py</code> 文件（一个 Python「模块」）。</li><li><code>app</code>：在 <code>main.py</code> 文件中通过 <code>app = FastAPI()</code> 创建的对象。</li><li><code>--reload</code>：让服务器在更新代码后重新启动。仅在开发时使用该选项。</li></ul><h5 id="交互式api文档"><a href="#交互式api文档" class="headerlink" title="交互式api文档"></a>交互式api文档</h5><p><a href="http://127.0.0.1:8000/docs">http://127.0.0.1:8000/docs</a></p><p>备选api文档：<a href="http://127.0.0.1:8000/redoc">http://127.0.0.1:8000/redoc</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str      <span class="token comment" spellcheck="true"># field中的example会覆盖docs上的示例，也会被config覆盖</span>    description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span>        None<span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">"The description of the item"</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> example<span class="token operator">=</span><span class="token string">"描述"</span>    <span class="token punctuation">)</span>    price<span class="token punctuation">:</span> float <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> gt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"The price must be greater than zero"</span><span class="token punctuation">)</span>    tax<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> None    <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 会自动覆盖展示在docs上的示例</span>        schema_extra <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"example"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>                    <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"A very nice Item"</span><span class="token punctuation">,</span>                    <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">35.4</span><span class="token punctuation">,</span>                    <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span>    item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>        example<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>            <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"A very nice Item"</span><span class="token punctuation">,</span>            <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">35.4</span><span class="token punctuation">,</span>            <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results</code></pre><h3 id="fastapi的异步处理"><a href="#fastapi的异步处理" class="headerlink" title="fastapi的异步处理"></a>fastapi的异步处理</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">import</span> osapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/async_slowest"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_slowest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"async mode but use sync sleep"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/async_sleep_in_thread"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_sleep_in_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">await</span> loop<span class="token punctuation">.</span>run_in_executor<span class="token punctuation">(</span>None<span class="token punctuation">,</span> time<span class="token punctuation">.</span>sleep<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"sleep run in thread pool"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/async_sleep"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">async_sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"async mode sleep"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/sync"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sync_sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"sync, but run in thread pool"</span><span class="token punctuation">}</span></code></pre><p>我们用ab工具，总量100，并发100进行测试。</p><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><p>这4个函数，最慢的就是第一个async_slowest。<br>我们可以看到，它几乎是一个接一个的串联输出。<br>原因是：<br>fastapi框架会将async函数会放到event loop中运行。<br>如果函数没有运行或有await，则其他函数无法运行。<br>所以这里是一个串联的效果，总时间需要100s</p><h4 id="async-loop-run-in-executor"><a href="#async-loop-run-in-executor" class="headerlink" title="async+loop.run_in_executor"></a>async+loop.run_in_executor</h4><p>为了解决这个问题，第二个函数引入了loop.run_in_executor<br>loop = asyncio.get_event_loop()<br>可以获取当前的event loop<br>loop.run_in_executor(None, time.sleep, 1)<br>是将time.sleep(1)放到一个线程池中去运行，所以不会出现阻塞。<br>这个函数，1秒可以全部运行完。</p><h4 id="async-await"><a href="#async-await" class="headerlink" title="async+await"></a>async+await</h4><p>第三个函数是最正宗的实现。<br>它使用异步的sleep取代了原版同步的sleep。<br>这也是最快的实现。<br>1秒可以运行完</p><h4 id="def"><a href="#def" class="headerlink" title="def"></a>def</h4><p>第四个函数是唯一一个不是async的普通函数。<br>它的运行时间是多少呢？<br>我的电脑是3秒运行完！<br>为什么？<br>这就是fastapi精彩的地方。<br>前面提到，async函数会放到event loop中执行。<br>那么，普通的函数会放到哪里呢？<br>答案是，放到thread pool中。<br>那么为什么是3秒呢。<br>这是因为我的电脑是逻辑8核。线程池的默认配置是核数*5，所以是40线程。<br>我的测试是100个并发，所以一共是3秒完成。<br>40-&gt;40-&gt;20</p><p>总结：简单的说，就像官方所说，如果你不清楚你函数里的调用是否异步，那就定义为普通函数。因为它可以采用多线程的方式解决。<br>反之，定义了async函数，里面却是同步的调用（第一个函数），那么这将慢的是灾难！</p><h3 id="数据格式校验"><a href="#数据格式校验" class="headerlink" title="数据格式校验"></a>数据格式校验</h3><p> <a href="https://pydantic-docs.helpmanual.io/">Pydantic</a> </p><p>额外的数据类型 <a href="https://fastapi.tiangolo.com/zh/tutorial/extra-data-types/">https://fastapi.tiangolo.com/zh/tutorial/extra-data-types/</a>   日期，uuid，byte</p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>注意若前缀相同，可选参数应在默认路径之下，如下顺序不能互换</p><p>否则，<code>/users/&#123;user_id&#125;</code> 的路径还将与 <code>/users/me</code> 相匹配，”认为”自己正在接收一个值为 <code>&quot;me&quot;</code> 的 <code>user_id</code> 参数。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/me"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_me</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> <span class="token string">"the current user"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/{user_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user</span><span class="token punctuation">(</span>user_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"user_id"</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span></code></pre><p>:path作为参数的类型表示可以接受任意参数，可用于404页面，用于文件路径</p><p>由于OpenApi不支持在路径参数中携带斜杠，因为这样会导致歧义，所以可以用Starlette 的一个内部工具在 <strong>FastAPI</strong> 中实现它</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/{path:path}"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">not_found</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">123</span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="可选参数及默认值"><a href="#可选参数及默认值" class="headerlink" title="可选参数及默认值"></a>可选参数及默认值</h4><p>Optional表示这个参数是某个类型的可选参数，后面可以携带默认值</p><pre class=" language-Python"><code class="language-Python">q: Optional[str] = None</code></pre><h4 id="布尔值参数"><a href="#布尔值参数" class="headerlink" title="布尔值参数"></a>布尔值参数</h4><p>0,false,False,no 都是false</p><p>1,true,True,yes都是true</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span>short<span class="token punctuation">:</span>bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">,</span><span class="token string">"short"</span><span class="token punctuation">:</span>short<span class="token punctuation">}</span></code></pre><h4 id="多路径和参数"><a href="#多路径和参数" class="headerlink" title="多路径和参数"></a>多路径和参数</h4><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/users/{user_id}/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_user_item</span><span class="token punctuation">(</span>    user_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span> short<span class="token punctuation">:</span> bool <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"owner_id"</span><span class="token punctuation">:</span> user_id<span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> short<span class="token punctuation">:</span>        item<span class="token punctuation">.</span>update<span class="token punctuation">(</span>            <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"This is an amazing item that has a long description"</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> item</code></pre><h4 id="请求体-路径参数-查询参数"><a href="#请求体-路径参数-查询参数" class="headerlink" title="请求体+路径参数+查询参数"></a>请求体+路径参数+查询参数</h4><p>路径参数在路径后</p><p>请求体为一个json</p><p>查询参数为一个query</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token operator">**</span>item<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> q<span class="token punctuation">:</span>        result<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"q"</span><span class="token punctuation">:</span> q<span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result</code></pre><h4 id="多请求体参数"><a href="#多请求体参数" class="headerlink" title="多请求体参数"></a>多请求体参数</h4><p>注意和单请求体区分，多请求体的中一个请求体的key会显示出来</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float <span class="token operator">=</span> None    is_offer<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>bool<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    full_name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> user<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token comment" spellcheck="true"># 请求体参数</span><span class="token punctuation">{</span>  <span class="token string">"item_id"</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span>  <span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>    <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token string">"is_offer"</span><span class="token punctuation">:</span> true  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">,</span>    <span class="token string">"full_name"</span><span class="token punctuation">:</span> null  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="如果想要在多请求体参数后加单一参数"><a href="#如果想要在多请求体参数后加单一参数" class="headerlink" title="如果想要在多请求体参数后加单一参数"></a>如果想要在多请求体参数后加单一参数</h4><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>    item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">,</span> user<span class="token punctuation">:</span> User<span class="token punctuation">,</span> importance<span class="token punctuation">:</span> int <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">:</span> user<span class="token punctuation">,</span> <span class="token string">"importance"</span><span class="token punctuation">:</span> importance<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token comment" spellcheck="true"># 请求体参数</span><span class="token punctuation">{</span>    <span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>        <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>        <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"user"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"dave"</span><span class="token punctuation">,</span>        <span class="token string">"full_name"</span><span class="token punctuation">:</span> <span class="token string">"Dave Grohl"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"importance"</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">}</span></code></pre><h4 id="嵌入单个请求体参数"><a href="#嵌入单个请求体参数" class="headerlink" title="嵌入单个请求体参数"></a>嵌入单个请求体参数</h4><p>单个请求体参数是没有key的，如果我们非要给他加上key，Body提供一个可处理的参数</p><pre class=" language-python"><code class="language-python">item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> embed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>例子</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item <span class="token operator">=</span> Body<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> embed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token comment" spellcheck="true">#请求体参数</span><span class="token punctuation">{</span>    <span class="token string">"item"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>        <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>        <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>        <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="嵌套参数"><a href="#嵌套参数" class="headerlink" title="嵌套参数"></a>嵌套参数</h4><p>可以嵌套任意深度的模型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token punctuation">,</span> Optional<span class="token punctuation">,</span> Set<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> HttpUrlapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Image</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token punctuation">:</span> HttpUrl    name<span class="token punctuation">:</span> str<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None    price<span class="token punctuation">:</span> float    tax<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>float<span class="token punctuation">]</span> <span class="token operator">=</span> None    tags<span class="token punctuation">:</span> Set<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    images<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>List<span class="token punctuation">[</span>Image<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> None@app<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"/items/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">update_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> int<span class="token punctuation">,</span> item<span class="token punctuation">:</span> Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    results <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"item_id"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">,</span> <span class="token string">"item"</span><span class="token punctuation">:</span> item<span class="token punctuation">}</span>    <span class="token keyword">return</span> results<span class="token comment" spellcheck="true"># 请求体</span><span class="token punctuation">{</span>    <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"Foo"</span><span class="token punctuation">,</span>    <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The pretender"</span><span class="token punctuation">,</span>    <span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">42.0</span><span class="token punctuation">,</span>    <span class="token string">"tax"</span><span class="token punctuation">:</span> <span class="token number">3.2</span><span class="token punctuation">,</span>    <span class="token string">"tags"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token string">"rock"</span><span class="token punctuation">,</span>        <span class="token string">"metal"</span><span class="token punctuation">,</span>        <span class="token string">"bar"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"images"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://example.com/baz.jpg"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"The Foo live"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://example.com/dave.jpg"</span><span class="token punctuation">,</span>            <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"The Baz"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="任意-dict-构成的请求体"><a href="#任意-dict-构成的请求体" class="headerlink" title="任意 dict 构成的请求体"></a>任意 <code>dict</code> 构成的请求体</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Dict<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/index-weights/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_index_weights</span><span class="token punctuation">(</span>weights<span class="token punctuation">:</span> Dict<span class="token punctuation">[</span>int<span class="token punctuation">,</span> float<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> weights</code></pre><p>tips</p><p>请记住 JSON 仅支持将 <code>str</code> 作为键。</p><p>但是 Pydantic 具有自动转换数据的功能。</p><p>这意味着，即使你的 API 客户端只能将字符串作为键发送，只要这些字符串内容仅包含整数，Pydantic 就会对其进行转换并校验。</p><p>然后你接收的名为 <code>weights</code> 的 <code>dict</code> 实际上将具有 <code>int</code> 类型的键和 <code>float</code> 类型的值。</p><h3 id="校验规则"><a href="#校验规则" class="headerlink" title="校验规则"></a>校验规则</h3><p>实际上，<code>Query</code>、<code>Path</code> 和其他你将在之后看到的类，创建的是由一个共同的 <code>Params</code> 类派生的子类的对象，该共同类本身又是 Pydantic 的 <code>FieldInfo</code> 类的子类。</p><p>Pydantic 的 <code>Field</code> 也会返回一个 <code>FieldInfo</code> 的实例。</p><p><code>Body</code> 也直接返回 <code>FieldInfo</code> 的一个子类的对象。还有其他一些你之后会看到的类是 <code>Body</code> 类的子类。</p><p>请记住当你从 <code>fastapi</code> 导入 <code>Query</code>、<code>Path</code> 等对象时，他们实际上是返回特殊类的函数。</p><h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p>校验在？后的参数</p><p>通用的校验和元数据：</p><ul><li><code>alias</code> 别名</li><li><code>title</code></li><li><code>description</code></li><li><code>deprecated</code>  是否显示弃用（默认false）</li></ul><p>特定于字符串的校验：</p><ul><li><code>min_length</code></li><li><code>max_length</code></li><li><code>regex </code>  正则匹配</li></ul><p>完整实例用法</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>        None<span class="token punctuation">,</span>        title<span class="token operator">=</span><span class="token string">"参数q"</span><span class="token punctuation">,</span>        description<span class="token operator">=</span><span class="token string">"参数q的描述"</span><span class="token punctuation">,</span>        min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>        max_length<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>        alias<span class="token operator">=</span><span class="token string">"items-q"</span><span class="token punctuation">,</span>        regex<span class="token operator">=</span><span class="token string">"^f"</span><span class="token punctuation">,</span>        deprecated<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> q</code></pre><p>fastapi自带有参数格式校验规则，暂时只校验参数的格式，但是返回格式不是我们自定义的</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"loc"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"body"</span><span class="token punctuation">,</span>                <span class="token string">"price"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"value is not a valid float"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"type_error.float"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>如果想要校验例如参数的最大长度等可以使用fastapi自带的Query</p><p>Query的第一个参数可用于设定默认值，当使用query设定默认值后，这个参数也会变成可选参数，所以optional实际上就没有用了</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Query<span class="token punctuation">(</span>None<span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token string">"^fixedquery$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> q</code></pre><p>这个指定的正则表达式通过以下规则检查接收到的参数值：</p><ul><li><code>^</code>：以该符号之后的字符开头，符号之前没有字符。</li><li><code>fixedquery</code>: 值精确地等于 <code>fixedquery</code>。</li><li><code>$</code>: 到此结束，在 <code>fixedquery</code> 之后没有更多字符。</li></ul><p>如果我们又要使用query又要让这个参数为<strong>必填参数</strong>可以使用三个点作为query的第一个参数</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_item</span><span class="token punctuation">(</span>q<span class="token punctuation">:</span>str <span class="token operator">=</span> Query<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> min_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token string">"^fixedquery$"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> q</code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"loc"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"query"</span><span class="token punctuation">,</span>                <span class="token string">"q"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"ensure this value has at most 10 characters"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"value_error.any_str.max_length"</span><span class="token punctuation">,</span>            <span class="token property">"ctx"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"limit_value"</span><span class="token operator">:</span> <span class="token number">10</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h4 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h4><p>校验路径参数</p><p>对元数据扩展，和参数校验比query更多</p><ul><li>ge大于等于   gt大于   le 小于等于   lt 小于（适用于int和float）</li></ul><h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>和path的校验参数相同，校验的是body体中的数据</p><h4 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h4><p>字段校验，校验规则和Body，Path相同</p><p>field不仅可以校验对象中的类型，也可以用于参数校验</p><p>注意，<code>Field</code> 是直接从 <code>pydantic</code> 导入的，而不是像其他的（<code>Query</code>，<code>Path</code>，<code>Body</code> 等）都从 <code>fastapi</code> 导入。</p><p>例子</p><pre class=" language-Python"><code class="language-Python">class Item(BaseModel):    name: str    description: Optional[str] = Field(        None, title="The description of the item", max_length=300    )    price: float = Field(..., gt=0, description="The price must be greater than zero")    tax: Optional[float] = None@app.put("/items/{item_id}")async def update_item(item_id: int, item: Item = Body(..., embed=True)):    results = {"item_id": item_id, "item": item}    return results</code></pre><h4 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h4><p>cookie的校验和上述校验规则都相同</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>ads_id<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Cookie<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"ads_id"</span><span class="token punctuation">:</span> ads_id<span class="token punctuation">}</span></code></pre><h4 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h4><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>user_agent<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> user_agent<span class="token punctuation">}</span></code></pre><p>请求头中会有一些参数是用减号-来连接的比如u-a，Python会自动转化这些参数</p><p>如果出于某些原因，你需要禁用下划线到连字符的自动转换，设置<code>Header</code>的参数 <code>convert_underscores</code> 为 <code>False</code>:</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>    strange_header<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>None<span class="token punctuation">,</span> convert_underscores<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"strange_header"</span><span class="token punctuation">:</span> strange_header<span class="token punctuation">}</span></code></pre><p>重复的请求头key</p><p>若存在多个x-token的请求头，在Python中可以通过list来接受</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_items</span><span class="token punctuation">(</span>x_token<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>List<span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"X-Token values"</span><span class="token punctuation">:</span> x_token<span class="token punctuation">}</span></code></pre><h4 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h4><p>用于表单校验</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Formapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/login/"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> str <span class="token operator">=</span> Form<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> str <span class="token operator">=</span> Form<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"username"</span><span class="token punctuation">:</span> username<span class="token punctuation">}</span></code></pre><h3 id="响应模型"><a href="#响应模型" class="headerlink" title="响应模型"></a>响应模型</h3><p>请求类型装饰器参数</p><p>tips  set不是必须，只是规范，使用其他类型也会被转成set，不影响</p><ul><li><h6 id="response-model-include-set-包含需要展示的字段"><a href="#response-model-include-set-包含需要展示的字段" class="headerlink" title="response_model_include   set 包含需要展示的字段"></a>response_model_include   set 包含需要展示的字段</h6></li><li><h6 id="response-model-exclude-set-包含需要去除展示的字段"><a href="#response-model-exclude-set-包含需要去除展示的字段" class="headerlink" title="response_model_exclude  set 包含需要去除展示的字段"></a>response_model_exclude  set 包含需要去除展示的字段</h6></li><li><p>response_model_exclude_unset=True  来仅返回显式设定的值</p></li></ul><p>这里非常类似java中关于po，vo，dto等类似概念，传输数据和响应数据及时是同样的数据结构，也应该有不同的数据校验规则，所以应该有多种数据库映射类</p><p>比如用户传入用户名，密码，都是明文，我们返回给用户必须是密文，而数据库保存的数据字段可能会更多，如上三种不同的数据类型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token punctuation">,</span> EmailStrapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">UserIn</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    password<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">UserOut</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token punctuation">:</span> str    email<span class="token punctuation">:</span> EmailStr    full_name<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/user/"</span><span class="token punctuation">,</span> response_model<span class="token operator">=</span>UserOut<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span>user<span class="token punctuation">:</span> UserIn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> user</code></pre><p>如果一张表中有很多字段，而我们只想返回有值的字段，可以使用参数response_model_exclude_unset=True</p><p>这样可以适用于某些场景，并不与上面这种响应模式冲突</p><pre class=" language-Python"><code class="language-Python">from typing import List, Optionalfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()class Item(BaseModel):    name: str    description: Optional[str] = None    price: float    tax: float = 10.5    tags: List[str] = []items = {    "foo": {"name": "Foo", "price": 50.2},    "bar": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},    "baz": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []},}@app.get("/items/{item_id}", response_model=Item, response_model_exclude_unset=True)async def read_item(item_id: str):    return items[item_id]</code></pre><h4 id="Union-或者-anyOf"><a href="#Union-或者-anyOf" class="headerlink" title="Union 或者 anyOf"></a>Union 或者 anyOf</h4><p>你可以将一个响应声明为两种类型的 <code>Union</code>，这意味着该响应将是两种类型中的任何一种。</p><p>定义一个 <a href="https://pydantic-docs.helpmanual.io/usage/types/#unions"><code>Union</code></a> 类型时，首先包括最详细的类型，然后是不太详细的类型。在下面的示例中，更详细的 <code>PlaneItem</code> 位于 <code>Union[PlaneItem，CarItem]</code> 中的 <code>CarItem</code> 之前。</p><pre class=" language-Python"><code class="language-Python">from typing import Unionfrom fastapi import FastAPIfrom pydantic import BaseModelapp = FastAPI()class BaseItem(BaseModel):    description: str    type: strclass CarItem(BaseItem):    type = "car"class PlaneItem(BaseItem):    type = "plane"    size: intitems = {    "item1": {"description": "All my friends drive a low rider", "type": "car"},    "item2": {        "description": "Music is my aeroplane, it's my aeroplane",        "type": "plane",        "size": 5,    },}@app.get("/items/{item_id}", response_model=Union[PlaneItem, CarItem])async def read_item(item_id: str):    return items[item_id]</code></pre><p>常见的response对象，一般也就用JSONResponse</p><p><a href="https://www.cnblogs.com/mazhiyong/p/13279543.html">https://www.cnblogs.com/mazhiyong/p/13279543.html</a></p><h4 id="合并预定response"><a href="#合并预定response" class="headerlink" title="合并预定response"></a>合并预定response</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Optional<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>responses <span class="token keyword">import</span> FileResponse<span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    id<span class="token punctuation">:</span> str    value<span class="token punctuation">:</span> strresponses <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token number">404</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"Item not found"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token number">302</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"The item was moved"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token number">403</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"Not enough privileges"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span>    <span class="token string">"/items/{item_id}"</span><span class="token punctuation">,</span>    response_model<span class="token operator">=</span>Item<span class="token punctuation">,</span>    responses<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">**</span>responses<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"image/png"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">,</span> img<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>bool<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> img<span class="token punctuation">:</span>        <span class="token keyword">return</span> FileResponse<span class="token punctuation">(</span><span class="token string">"image.png"</span><span class="token punctuation">,</span> media_type<span class="token operator">=</span><span class="token string">"image/png"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token string">"there goes my hero"</span><span class="token punctuation">}</span></code></pre><h3 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h3><p>在请求装饰器中带status_code参数表示该次请求的响应状态码</p><p><code>status_code</code> 也能够接收一个 <code>IntEnum</code> 类型，比如 Python 的 <a href="https://docs.python.org/3/library/http.html#http.HTTPStatus"><code>http.HTTPStatus</code></a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status">https://developer.mozilla.org/en-US/docs/Web/HTTP/Status</a></p><p>你可以使用来自 <code>fastapi.status</code> 的便捷变量。</p><h3 id="内置的Json解析"><a href="#内置的Json解析" class="headerlink" title="内置的Json解析"></a>内置的Json解析</h3><pre class=" language-Python"><code class="language-Python">from datetime import datetimefrom fastapi import FastAPIfrom fastapi.encoders import jsonable_encoderfrom pydantic import BaseModelclass Item(BaseModel):    title: str    timestamp: datetime    description: str = Noneapp = FastAPI()@app.put("/items/{id}")def update_item(id: str, item: Item):    json_compatible_item_data = jsonable_encoder(item)print(json_compatible_item_data)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 框架 </tag>
            
            <tag> fastapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastapi子应用与事件</title>
      <link href="/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E5%AD%90%E5%BA%94%E7%94%A8%E4%B8%8E%E4%BA%8B%E4%BB%B6/"/>
      <url>/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E5%AD%90%E5%BA%94%E7%94%A8%E4%B8%8E%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="子应用"><a href="#子应用" class="headerlink" title="子应用"></a>子应用</h3><p>概念类似于django中的app，flask中的蓝图，主要功能现在看来是作为路由分发</p><p>示例</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPIapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/app"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World from main app"</span><span class="token punctuation">}</span>subapi <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@subapi<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/sub"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"Hello World from sub API"</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span>mount<span class="token punctuation">(</span><span class="token string">"/subapi"</span><span class="token punctuation">,</span> subapi<span class="token punctuation">)</span></code></pre><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li>startup  app（主应用）启动时运行，运行结束后才能接受请求</li><li>shutdown   app（主应用）关闭时运行，执行结束后才杀死进程</li></ul><p>示例</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>on_event<span class="token punctuation">(</span><span class="token string">"startup"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">startup_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"app start"</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>on_event<span class="token punctuation">(</span><span class="token string">"shutdown"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">startup_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"app end"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 框架 </tag>
            
            <tag> fastapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastapi错误处理</title>
      <link href="/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/task/2021/07/02/python/%E6%A1%86%E6%9E%B6/fast-api/fastapi%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="HTTPException"><a href="#HTTPException" class="headerlink" title="HTTPException"></a>HTTPException</h3><p>fastapi内置的异常模块，可以自定义响应头</p><pre class=" language-python"><code class="language-python">items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"foo"</span><span class="token punctuation">:</span> <span class="token string">"The Foo Wrestlers"</span><span class="token punctuation">}</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/items-header/{item_id}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item_header</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> item_id <span class="token operator">not</span> <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>            status_code<span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">,</span>            detail<span class="token operator">=</span><span class="token string">"Item not found"</span><span class="token punctuation">,</span>            headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"X-Error"</span><span class="token punctuation">:</span> <span class="token string">"There goes my error"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"item"</span><span class="token punctuation">:</span> items<span class="token punctuation">[</span>item_id<span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><p>自己抛自己接</p><p>exception_handler可以接受全局我们抛出的指定异常类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token punctuation">,</span> Request<span class="token keyword">from</span> fastapi<span class="token punctuation">.</span>responses <span class="token keyword">import</span> JSONResponse<span class="token keyword">class</span> <span class="token class-name">UnicornException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> nameapp <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>exception_handler<span class="token punctuation">(</span>UnicornException<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">unicorn_exception_handler</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> Request<span class="token punctuation">,</span> exc<span class="token punctuation">:</span> UnicornException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> JSONResponse<span class="token punctuation">(</span>        status_code<span class="token operator">=</span><span class="token number">418</span><span class="token punctuation">,</span>        content<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"message"</span><span class="token punctuation">:</span> f<span class="token string">"Oops! {exc.name} did something. There goes a rainbow..."</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span>@app<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"/unicorns/{name}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_unicorn</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"yolo"</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> UnicornException<span class="token punctuation">(</span>name<span class="token operator">=</span>name<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"unicorn_name"</span><span class="token punctuation">:</span> name<span class="token punctuation">}</span></code></pre><h3 id="重写内置异常捕获"><a href="#重写内置异常捕获" class="headerlink" title="重写内置异常捕获"></a>重写内置异常捕获</h3><p>参数校验不通过的时候，fastapi会默认报422的错，且错误格式固定，如果想修改这种错误格式，就可以通过全局异常捕获参数校验类来重写</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>exception_handler<span class="token punctuation">(</span>RequestValidationError<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">validation_exception_handler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> exc<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> JSONResponse<span class="token punctuation">(</span>        status_code<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_422_UNPROCESSABLE_ENTITY<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># body是放在响应体重，exc.body是源数据</span>        content<span class="token operator">=</span>jsonable_encoder<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"detail"</span><span class="token punctuation">:</span> exc<span class="token punctuation">.</span>errors<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"body"</span><span class="token punctuation">:</span> exc<span class="token punctuation">.</span>body<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    id<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>gt<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">)</span>    username<span class="token punctuation">:</span> str <span class="token operator">=</span> Field<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>min_length<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    sex<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None    login_time<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> None    <span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">:</span>        orm_mode <span class="token operator">=</span> <span class="token boolean">True</span>@app<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/items}"</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">read_item</span><span class="token punctuation">(</span>item_id<span class="token punctuation">:</span> User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span> item_id<span class="token punctuation">}</span></code></pre><h3 id="FastAPI与Starlette的HTTPException"><a href="#FastAPI与Starlette的HTTPException" class="headerlink" title="FastAPI与Starlette的HTTPException"></a>FastAPI与Starlette的<code>HTTPException</code></h3><p>FastAPI <code>HTTPException</code> 继承自 Starlette’s <code>HTTPException</code>。</p><p>唯一的区别是，FastAPI <code>HTTPException</code>允许你在response添加头信息。主要在内部用于OAuth 2.0以及一些安全相关的功能。</p><p><strong>因此，通常我们在代码中抛出FastAPI <code>HTTPException</code>异常。</strong></p><p><strong>但是，当我们注册异常处理器的时候，我们应该注册为Starlette <code>HTTPException</code>。</strong></p><p>这样，当Starlette的内部代码或者Starlette扩展插件抛出Starlette <code>HTTPException</code>时，我们的处理器才能正常捕获和处理这个异常。</p><p>如果我们要在代码中同时使用这两个类，为了避免命名冲突，我们可以重命名其中一个类。</p><pre><code>from fastapi import HTTPExceptionfrom starlette.exceptions import HTTPException as StarletteHTTPException</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 框架 </tag>
            
            <tag> fastapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq使用</title>
      <link href="/task/2021/07/01/%E5%85%B6%E4%BB%96/rabbitmq/"/>
      <url>/task/2021/07/01/%E5%85%B6%E4%BB%96/rabbitmq/</url>
      
        <content type="html"><![CDATA[<h3 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h3><p>tips：mac安装rabbitmq报错解决</p><ul><li><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 替换brew.git</span><span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git<span class="token comment" spellcheck="true"># 替换homebrew-core.git</span><span class="token function">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git<span class="token comment" spellcheck="true"># 刷新源</span>brew update</code></pre></li><li><p>如果还报错先检查网络问题，是否翻墙等</p></li><li><p>再检查依赖是否全部安装</p></li></ul><h4 id="AMQP和JMS"><a href="#AMQP和JMS" class="headerlink" title="AMQP和JMS"></a>AMQP和JMS</h4><p>MQ是消息通信的模型，并发具体实现。现在实现MQ的有两种主流方式：AMQP、JMS。</p><p>两者间的区别和联系：</p><ul><li>JMS是定义了统一的接口，来对消息操作进行统一；AMQP是通过规定协议来统一数据交互的格式</li></ul><ul><li>JMS限定了必须使用Java语言；AMQP只是协议，不规定实现方式，因此是跨语言的。</li></ul><ul><li>JMS规定了两种消息模型；而AMQP的消息模型更加丰富</li></ul><p>常见MQ产品</p><ul><li><p>ActiveMQ：基于JMS</p></li><li><p>RabbitMQ：基于AMQP协议，erlang语言开发，稳定性好</p></li></ul><ul><li>RocketMQ：基于JMS，阿里巴巴产品，目前交由Apache基金会</li></ul><ul><li>Kafka：分布式消息系统，高吞吐量</li></ul><p>基本使用</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p><img src="https://img-blog.csdnimg.cn/20190610225910220.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2thdml0bw==,size_16,color_FFFFFF,t_70" alt="img" loading="lazy"></p><p>组成部分说明：</p><ul><li><p>Broker（Server）：消息队列服务进程（接受服务端的链接），实现AMQP实体服务</p></li><li><p>Connection：链接，应用程序与Broker的网络连接TCP/IP3次握手 4次挥手</p></li><li><p>Channel：网络信道，所有操作凑是基于信道操作的，信道是连接内的，客户端可以建立多个信道，每一个信道代表一个会话任务</p></li><li><p>Message：消息，服务于应用程序之间传送的数据，由Properties和Body组成，Properties是对消息的修饰，比如消息的优先级，延迟等高级特性，Body是消息体的内容</p></li><li><p>Virtual Host：虚拟地址，类似文件夹，数据库的概念，为了区分管理交换机和队列，同一个虚拟地址内不能出现同名队列和交换机</p></li><li><p>Exchange：消息队列交换机，按一定的规则将消息路由转发到某个队列（根据路由key发送消息绑定的队列），对消息进行过虑（如果一个队列没有指定绑定的交换机的名字，就会绑定一个默认的交换机）。</p></li><li><p>Bindings：交换机和队列的虚拟连接</p></li><li><p>Routing key：是一个路由规则，虚拟机可以通过他确定由什么路由一个消息</p></li><li><p>Queue：消息队列，存储消息的队列，生产者把消息发送给交换机，交换机通过队列转发给消费者</p></li><li><p>Producer：消息生产者，即生产方客户端，生产方客户端将消息发送</p></li><li><p>Consumer：消息消费者，即消费方客户端，接收MQ转发的消息。</p></li></ul><p>生产者发送消息流程：</p><p>1、生产者和Broker建立TCP连接。</p><p>2、生产者和Broker建立通道。</p><p>3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。</p><p>4、Exchange将消息转发到指定的Queue（队列）</p><p>消费者接收消息流程：</p><p>1、消费者和Broker建立TCP连接</p><p>2、消费者和Broker建立通道</p><p>3、消费者监听指定的Queue（队列）</p><p>4、当有消息到达Queue时Broker默认将消息推送给消费者。</p><p>5、消费者接收到消息。</p><p>6、ack回复</p><p><strong>写demo的时候注意点</strong></p><ul><li>连接时所需的用户需提前创建</li><li>连接虚拟机时需给用户对这个虚拟机的权限</li><li>connection error; protocol method: #method&lt;connection.close&gt;(reply-code=530, reply-text=NOT_ALLOWED   当出现这个报错就是这个用户没有对这个虚拟机的权限</li></ul><h4 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span>、安装brew install rabbitmq<span class="token number">2</span>、启动及关闭RabbitMQ服务前台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server    或sudo su<span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>Cellar<span class="token operator">/</span>rabbitmq<span class="token operator">/</span><span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">/</span>sbin<span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detacted后台启动 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmq<span class="token operator">-</span>server <span class="token operator">-</span>detached后台关闭 sudo <span class="token punctuation">.</span><span class="token operator">/</span>rabbitmqctl stop<span class="token number">3</span> 、登录http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">15672</span>    guest\guest<span class="token number">4</span>、创建用户与虚拟机并授权rabbitmqctl add_user USER PASSWORD <span class="token comment" spellcheck="true">##创建用户</span>rabbitmqctl change_password USER PASSWORD <span class="token comment" spellcheck="true">##修改密码</span>rabbitmqctl set_user_tags USER administrator  <span class="token comment" spellcheck="true">##设置为管理员</span>rabbitmqctl add_vhost VHOST <span class="token comment" spellcheck="true">##添加虚拟机</span>rabbitmqctl set_permissions <span class="token operator">-</span>p VHOST USER <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span>  <span class="token comment" spellcheck="true">##给用户分配虚拟主机权限</span></code></pre><p>创建连接</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">rabbitmqUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 建立与RabbitMQ的连接     *     * @return     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//定义连接工厂</span>        ConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置服务地址</span>        factory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//端口</span>        factory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置账号信息，用户名、密码、vhost</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"mqv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置虚拟机，一个mq服务可以设置多个虚拟机，每个虚拟机就相当于一个独立的mq</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过工厂获取连接</span>        Connection connection <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生产者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Channel<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqProducer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1、获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2、从连接中创建通道，使用通道才能完成消息相关的操作</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3、声明（创建）队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4、消息内容</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向指定的队列中发送消息</span>        <span class="token comment" spellcheck="true">//参数：String exchange, String routingKey, BasicProperties props, byte[] body</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、exchange，交换机，如果不指定将使用mq的默认交换机（设置为""）         * 2、routingKey，路由key，交换机根据路由key来将消息转发到指定的队列，如果使用默认交换机，routingKey设置为队列的名称         * 3、props，消息的属性         * 4、body，消息内容         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> QUEUE_NAME<span class="token punctuation">,</span> null<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] Sent '"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关闭通道和连接(资源关闭最好用try-catch-finally语句处理)</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>hz<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MqConsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> String QUEUE_NAME <span class="token operator">=</span> <span class="token string">"simple_queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> argv<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取到连接</span>        Connection connection <span class="token operator">=</span> rabbitmqUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建会话通道,生产者和mq服务所有通信都在channel通道中完成</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 声明队列</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object> arguments</span>        <span class="token comment" spellcheck="true">/**         * 参数明细         * 1、queue 队列名称         * 2、durable 是否持久化，如果持久化，mq重启后队列还在         * 3、exclusive 是否独占连接，队列只允许在该连接中访问，如果connection连接关闭队列则自动删除,如果将此参数设置true可用于临时队列的创建         * 4、autoDelete 自动删除，队列不再使用时是否自动删除此队列，如果将此参数和exclusive参数设置为true就可以实现临时队列（队列不用了就自动删除）         * 5、arguments 参数，可以设置一个队列的扩展参数，比如：可设置存活时间         */</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//实现消费方法</span>        DefaultConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取消息，并且处理，这个方法类似事件监听，如果有消息的时候，会被自动调用</span>            <span class="token comment" spellcheck="true">/**             * 当接收到消息后此方法将被调用             * @param consumerTag  消费者标签，用来标识消费者的，在监听队列时设置channel.basicConsume             * @param envelope 信封，通过envelope             * @param properties 消息属性             * @param body 消息内容             * @throws IOException             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span> Envelope envelope<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//交换机</span>                String exchange <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//消息id，mq在channel中用来标识消息的id，可用于确认消息已接收</span>                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// body 即消息体</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" [x] received : "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 监听队列，第二个参数：是否自动进行消息确认。</span>        <span class="token comment" spellcheck="true">//参数：String queue, boolean autoAck, Consumer callback</span>        <span class="token comment" spellcheck="true">/**         * 参数明细：         * 1、queue 队列名称         * 2、autoAck 自动回复，当消费者接收到消息后要告诉mq消息已接收，如果将此参数设置为tru表示会自动回复mq，如果设置为false要通过编程实现回复         * 3、callback，消费方法，当消费者接收到消息要执行的方法         */</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>QUEUE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="ack确认机制"><a href="#ack确认机制" class="headerlink" title="ack确认机制"></a>ack确认机制</h4><p>自动ack会在处理消息过程中即使出现异常，也会消息确认</p><p>在消息重要的情况下切换手动ack，手动ack后要主动发送ack，否在消息状态为未确认（unacked），在关闭消费者后，状态会回退到ready</p><p>消息队列发送后，在消息消费过程中出现异常处理：第一次执行，报错，捕获，重试，第二次执行，报错，捕获记录错误日志到数据库，确认消费</p><p>配置direct交换机（直连交换机）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dq<span class="token punctuation">.</span>config<span class="token punctuation">.</span>mq<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Binding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>BindingBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>DirectExchange<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>core<span class="token punctuation">.</span>Queue<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>CachingConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RabbitTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 定义队列名和交换机 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DirectMqConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 交换机名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DIRECT_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"direct_exchange"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 绑定key，交换机绑定队列时需要指定     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST1 <span class="token operator">=</span> <span class="token string">"direct_key1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST2 <span class="token operator">=</span> <span class="token string">"direct_key2"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BINGDING_KEY_TEST3 <span class="token operator">=</span> <span class="token string">"direct_key3"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 队列名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST1 <span class="token operator">=</span> <span class="token string">"addProductUsderBid"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST2 <span class="token operator">=</span> <span class="token string">"updateProduct1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUEUE_TEST3 <span class="token operator">=</span> <span class="token string">"updateStateProduct1"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构建DirectExchange交换机     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化，长期不用补删除</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DIRECT_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 构建序列     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST1<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST2<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 支持持久化</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>QUEUE_TEST3<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 绑定交交换机和     *     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test1Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test1Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test2Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test2Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">test3Binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">test3Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>BINGDING_KEY_TEST3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 实例化操作模板     *     * @param connectionFactory     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">rabbitTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//必须为true,否则无法触发returnedMessage回调，消息丢失</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="消息分发与能者多劳"><a href="#消息分发与能者多劳" class="headerlink" title="消息分发与能者多劳"></a>消息分发与能者多劳</h4><p>当出现两个消费者时，消费者2处理消息的速度远小于消费者1的情况下，他们会受到同样数量的消息</p><p>此时消费者1有大量时间处于空闲状态，可以通过 BasicQos 方法设置prefetchCount = 1</p><p>这样RabbitMQ就会使得每个Consumer在同一个时间点最多处理1个Message。换句话说，在接收到该Consumer的ack前，他它不会将新的Message分发给它。相反，它会将其分派给不是仍然忙碌的下一个Consumer。</p><p>值得注意的是：prefetchCount在手动ack的情况下才生效，自动ack不生效。</p><h4 id="订阅（fanout）模式"><a href="#订阅（fanout）模式" class="headerlink" title="订阅（fanout）模式"></a>订阅（fanout）模式</h4><h4 id="路由匹配（DIrect）模式"><a href="#路由匹配（DIrect）模式" class="headerlink" title="路由匹配（DIrect）模式"></a>路由匹配（DIrect）模式</h4><h4 id="模糊模糊匹配（Topic）模式"><a href="#模糊模糊匹配（Topic）模式" class="headerlink" title="模糊模糊匹配（Topic）模式"></a>模糊模糊匹配（Topic）模式</h4><h4 id="携带信息匹配（Headers）模式"><a href="#携带信息匹配（Headers）模式" class="headerlink" title="携带信息匹配（Headers）模式"></a>携带信息匹配（Headers）模式</h4><h4 id="死信队列"><a href="#死信队列" class="headerlink" title="死信队列"></a>死信队列</h4><h4 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h4>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
            <tag> 中间件 </tag>
            
            <tag> mq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web服务器与协议</title>
      <link href="/task/2021/07/01/%E5%85%B6%E4%BB%96/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%8D%8F%E8%AE%AE/"/>
      <url>/task/2021/07/01/%E5%85%B6%E4%BB%96/web%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8E%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="web服务器与协议"><a href="#web服务器与协议" class="headerlink" title="web服务器与协议"></a>web服务器与协议</h2><p><a href="http://liuqingzheng.top/article/1/05-CGI,FastCGI,WSGI,uWSGI,uwsgi%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82/">http://liuqingzheng.top/article/1/05-CGI,FastCGI,WSGI,uWSGI,uwsgi%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82/</a></p><h4 id="1-WSGI-Web-Server-Gateway-Interface-服务器网关接口"><a href="#1-WSGI-Web-Server-Gateway-Interface-服务器网关接口" class="headerlink" title="1 WSGI(Web Server Gateway Interface)服务器网关接口"></a>1 WSGI(Web Server Gateway Interface)服务器网关接口</h4><p>是一种python程序或者框架和web服务器之间通信的一种接口</p><p>由于官方没有实现，WSGI更像是一种协议，一种标准，大部分框架和web服务器都遵循这种协议规范</p><h4 id="2-CGI-FastCGI"><a href="#2-CGI-FastCGI" class="headerlink" title="2 CGI FastCGI"></a>2 CGI FastCGI</h4><p>CGI是通用网关接口，和WSGI是一个东西，只不过支持的语言不同，CGI支持php，FastCGI是CGI的升级版，支持任意语言</p><h4 id="3-uWSGI-uwsgi"><a href="#3-uWSGI-uwsgi" class="headerlink" title="3 uWSGI uwsgi"></a>3 uWSGI uwsgi</h4><p>uWSGI是一个web服务器，用来处理和python的web框架之间通信，他们之间的通信规范是WSGI</p><p>uwsgi是uWSGI自有的协议，是用于uWSGI与前端服务器通行规范</p><p>总结：协议本身其实都是一个东西，只是他们支持的语言不通，使用场景不通</p><p>一个请求从前端来，到了nginx，nginx会吧静态文件直接返回，动态内容就会反向代理到web服务器上，这中间就会通过对应的web服务器的协议，如fastcgi，http，uwsgi，web服务器又要通过和对应web框架的协议，如wsgi通过socket发送给web框架</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web服务器 </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/task/2021/07/01/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/task/2021/07/01/%E5%85%B6%E4%BB%96/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h2><h3 id="工厂模式（Factory-Method）"><a href="#工厂模式（Factory-Method）" class="headerlink" title="工厂模式（Factory Method）"></a>工厂模式（Factory Method）</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqvnqhkwn4j31340b4wft.jpg" alt="image-20210526111500187" loading="lazy"></p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""    通过方法控制对不同类的实例化"""</span><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{self.name}teacher age {self.age}"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>People<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">say</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{self.name}student age {self.age}"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_people</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> age<span class="token operator">></span><span class="token number">22</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Teacher<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Student<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>user <span class="token operator">=</span> create_people<span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>say<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="建造者模式（Bulider）"><a href="#建造者模式（Bulider）" class="headerlink" title="建造者模式（Bulider）"></a>建造者模式（Bulider）</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqwrdcue2fj317r0u0qcc.jpg" alt="image-20210527100607813" loading="lazy"></p><pre><code>建造者模式包含以下四种角色产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个零部件。抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()。具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。个人理解建造者模式主要用于构建复杂的对象，当对象创建过程非常复杂，且参数众多，使用者不需要知道其中构建过程即可使用这种模式一个复杂的实体类  就是ProductBuilder包含创建Product这个复杂实体的接口Concrete Builder 是Builder的实现类，完成复杂组件创建的各种方法Director调用Builder不同属性装配，完成实体类创建例子：Product人类    属性：各种可选可不选参数        -学校        -家庭        -工作Builder接口规定了创建各种属性的方法Concrete Builder 实现了这些方法Director创建对象时即可不需要知道这些调用方法的具体逻辑，只要传入对应的参数即可创建需要的对象和工厂模式的异同    都是为了创建对象    工厂模式一般用于创建简单的固定的对象    建造者模式用于创建复杂的丰富的对象</code></pre><p>python代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">orderDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    order_builder<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>order_builder<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>order_builder<span class="token operator">=</span>order_builder    <span class="token keyword">def</span> <span class="token function">createOrder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>burger<span class="token punctuation">,</span>snack<span class="token punctuation">,</span>beverage<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>addBurger<span class="token punctuation">(</span>burger<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>addSnack<span class="token punctuation">(</span>snack<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>addBeverage<span class="token punctuation">(</span>beverage<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>order_builder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>java代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Builder<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParlourDecorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Decorator d<span class="token punctuation">;</span>            d <span class="token operator">=</span> <span class="token punctuation">(</span>Decorator<span class="token punctuation">)</span> ReadXML<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ProjectManager m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProjectManager</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            Parlour p <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//产品：客厅</span><span class="token keyword">class</span> <span class="token class-name">Parlour</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String wall<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//墙</span>    <span class="token keyword">private</span> String TV<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//电视</span>    <span class="token keyword">private</span> String sofa<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//沙发 </span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWall</span><span class="token punctuation">(</span>String wall<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>wall <span class="token operator">=</span> wall<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTV</span><span class="token punctuation">(</span>String TV<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>TV <span class="token operator">=</span> TV<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSofa</span><span class="token punctuation">(</span>String sofa<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sofa <span class="token operator">=</span> sofa<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        JFrame jf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"建造者模式测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Container contentPane <span class="token operator">=</span> jf<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JPanel p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JScrollPane sp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JScrollPane</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        String parlour <span class="token operator">=</span> wall <span class="token operator">+</span> TV <span class="token operator">+</span> sofa<span class="token punctuation">;</span>        JLabel l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span><span class="token string">"src/"</span> <span class="token operator">+</span> parlour <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">setBorder</span><span class="token punctuation">(</span>BorderFactory<span class="token punctuation">.</span><span class="token function">createTitledBorder</span><span class="token punctuation">(</span><span class="token string">"客厅"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        contentPane<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sp<span class="token punctuation">,</span> BorderLayout<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jf<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//抽象建造者：装修工人</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建产品对象</span>    <span class="token keyword">protected</span> Parlour product <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parlour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//返回产品对象</span>    <span class="token keyword">public</span> Parlour <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体建造者：具体装修工人1</span><span class="token keyword">class</span> <span class="token class-name">ConcreteDecorator1</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setWall</span><span class="token punctuation">(</span><span class="token string">"w1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setTV</span><span class="token punctuation">(</span><span class="token string">"TV1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setSofa</span><span class="token punctuation">(</span><span class="token string">"sf1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//具体建造者：具体装修工人2</span><span class="token keyword">class</span> <span class="token class-name">ConcreteDecorator2</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setWall</span><span class="token punctuation">(</span><span class="token string">"w2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setTV</span><span class="token punctuation">(</span><span class="token string">"TV2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        product<span class="token punctuation">.</span><span class="token function">setSofa</span><span class="token punctuation">(</span><span class="token string">"sf2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指挥者：项目经理</span><span class="token keyword">class</span> <span class="token class-name">ProjectManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Decorator builder<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProjectManager</span><span class="token punctuation">(</span>Decorator builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>builder <span class="token operator">=</span> builder<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//产品构建与组装方法</span>    <span class="token keyword">public</span> Parlour <span class="token function">decorate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">buildWall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">buildSofa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> Builder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Node<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ReadXML</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DocumentBuilderFactory dFactory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DocumentBuilder builder <span class="token operator">=</span> dFactory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Document doc<span class="token punctuation">;</span>            doc <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"src/Builder/config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NodeList nl <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"className"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Node classNode <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirstChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String cName <span class="token operator">=</span> <span class="token string">"Builder."</span> <span class="token operator">+</span> classNode<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新类名："</span> <span class="token operator">+</span> cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> c <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Object obj <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqwt2yvnf5j316v0u0agu.jpg" alt="image-20210527110533091" loading="lazy"></p><p>个人理解</p><pre><code>实际上原型模式在python中不需要这么复杂的操作，当然这种操作的具有可扩展性    例如我已有原型是一个复杂的对象，但是我需要复制出来的是一个只带部分属性的简单对象，这里甚至可以通过原型模式和建造者模式结合，复制出具有特殊意义的新的对象，而不用重复去创建    但是实际的代码中，很少使用复制原型的操作，一是部分编程语言对复制原型的支持性，二是部分复制并来的那么高效    如果是数据库对象的原型复制，那就有意义了，因为复制可以少走数据库    python中可以直接通过deepcopy复制，是最简单的原型模式</code></pre><p>python代码</p><pre class=" language-Python"><code class="language-Python"># 示例import copyfrom collections import OrderedDictclass Book:    def __init__(self, name, authors, price, **rest):        '''rest的例子有：出版商、长度、标签、出版日期'''        self.name = name        self.authors = authors        self.price = price        self.__dict__.update(rest)      # 添加其他额外属性    def __str__(self):        mylist = []        ordered = OrderedDict(sorted(self.__dict__.items()))        for i in ordered.keys():            mylist.append('{}: {}'.format(i, ordered[i]))            if i == 'price':                mylist.append('$')            mylist.append('\n')        return ''.join(mylist)class Prototype:    def __init__(self):        self.objects = dict()    # 初始化一个原型列表    def register(self, identifier, obj):        # 在原型列表中注册原型对象        self.objects[identifier] = obj    def unregister(self, identifier):        # 从原型列表中删除原型对象        del self.objects[identifier]    def clone(self, identifier, **attr):        # 根据 identifier 在原型列表中查找原型对象并克隆        found = self.objects.get(identifier)        if not found:            raise ValueError('Incorrect object identifier: {}'.format(identifier))        obj = copy.deepcopy(found)        obj.__dict__.update(attr)   # 用新的属性值替换原型对象中的对应属性        return objdef main():    b1 = Book('The C Programming Language', ('Brian W. Kernighan', 'Dennis M.Ritchie'),    price=118, publisher='Prentice Hall', length=228, publication_date='1978-02-22',    tags=('C', 'programming', 'algorithms', 'data structures'))    prototype = Prototype()    cid = 'k&r-first'    prototype.register(cid, b1)    b2 = prototype.clone(cid, name='The C Programming Language(ANSI)', price=48.99, length=274, publication_date='1988-04-01', edition=2)    for i in (b1, b2):        print(i)    print("ID b1 : {} != ID b2 : {}".format(id(b1), id(b2)))if __name__ == '__main__':    main()</code></pre><h2 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqvno10gt9j30rw0940ti.jpg" alt="image-20210526111211393" loading="lazy"></p><h4 id="方式一：通过类的实例化控制"><a href="#方式一：通过类的实例化控制" class="headerlink" title="方式一：通过类的实例化控制"></a>方式一：通过类的实例化控制</h4><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">""" 单例模式实现1：通过类实例化调用元类的__call__方式实例化同一个对象        解析：实例化Singleton本质是调用了type.__call__方法，call中调用了new            __new__方法在内存中开辟了一块空间存放实例化的对象，返回值是一个空对象            然后会调用__init__来对对象初始化            此处第一次实例化获取的是正常实例化得到的Singleton对象，            此时在实例化结束后为类中的_instance赋值为type.__call__，            以至于第二次实例化还是走的同一个type.__call__，形成单例"""</span><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    _instance <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>_instance <span class="token keyword">is</span> None<span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance</code></pre><h4 id="方式二：导入对象"><a href="#方式二：导入对象" class="headerlink" title="方式二：导入对象"></a>方式二：导入对象</h4><h4 id="方式三：装饰器"><a href="#方式三：装饰器" class="headerlink" title="方式三：装饰器"></a>方式三：装饰器</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 实现3：装饰器储存第一次实例化的对象</span><span class="token keyword">def</span> <span class="token function">singleton</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>    _instance <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">_singleton</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls <span class="token operator">not</span> <span class="token keyword">in</span> _instance<span class="token punctuation">:</span>            _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span> <span class="token operator">=</span> cls<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> _instance<span class="token punctuation">[</span>cls<span class="token punctuation">]</span>    <span class="token keyword">return</span> _singleton@singleton<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>a <span class="token operator">=</span> a        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chean code读书笔记</title>
      <link href="/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/clean%20code/"/>
      <url>/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/clean%20code/</url>
      
        <content type="html"><![CDATA[<h1 id="clean-code"><a href="#clean-code" class="headerlink" title="clean code"></a>clean code</h1><h2 id="1-命名的意义"><a href="#1-命名的意义" class="headerlink" title="1 命名的意义"></a>1 命名的意义</h2><h3 id="1-1-名副其实"><a href="#1-1-名副其实" class="headerlink" title="1.1 名副其实"></a>1.1 名副其实</h3><p>一段代码若中间出现太多不可预知的变量，常量，类型，我们就必须去其他地方找到他们的出处</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> d <span class="token comment" spellcheck="true">//今天</span><span class="token keyword">int</span> today</code></pre><p>d和today都代表今天，但是today在后续的程序中会更容易让人理解，而d就显得不那么名副其实，会浪费我们很多时间去翻看以前的代码。</p><p>不仅仅是变量命名</p><p>例如：</p><p>![image-20210202120312436](/Users/apple/Library/Application Support/typora-user-images/image-20210202120312436.png)</p><p>虽然上述代码逻辑很简单，但是我们弄不清楚其中的含义，list1是什么类型，i的0索引代表着什么，4又代表什么</p><p>大部分的人对于变量命名可能会有规范，但是没有习惯对值和常量做规范</p><p>![image-20210202120232380](/Users/apple/Library/Application Support/typora-user-images/image-20210202120232380.png)</p><h3 id="1-2-做有意义的区分"><a href="#1-2-做有意义的区分" class="headerlink" title="1.2 做有意义的区分"></a>1.2 做有意义的区分</h3><p>类似的名称就应该有具体的名称区别</p><p>例如 user与user_info两个对象，我们在获取用户手机的时候，这个变量可能会出现上述两个对象中的任意一个，也可能不出现，应该加以有意义的区分，不然很多类似的区别反而会造成误导，只是在定义的时候偷了懒，后续使用就需要花更多的时间去变量的源头</p><h3 id="1-3-类与方法"><a href="#1-3-类与方法" class="headerlink" title="1.3 类与方法"></a>1.3 类与方法</h3><p>类名应当是名词或者名词短语，方法名应当是动词或者动词短语</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql深入学习</title>
      <link href="/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Mysql%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/task/2021/07/01/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/Mysql%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql深入学习"><a href="#Mysql深入学习" class="headerlink" title="Mysql深入学习"></a>Mysql深入学习</h1><p>MySQL简介</p><ul><li>关于MySQL发音的官方答案：<br>The official way to pronounce “MySQL” is “My Ess Que Ell” (not “my sequel”), but we do not mind if you pronounce it as “my sequel” or in some other localized way.</li></ul><p>​        MySQL 可以分为 Server 层和存储引擎层两部分</p><p>​        <strong>Server层包括连接器、查询缓存、分析器、优化器、执行器等</strong>，涵盖MySQL的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</p><p>​        <strong>存储引擎层负责数据的存储和提取。</strong>其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了默认存储引擎。<strong>create table 语句中使用 engine=memory，来指定使用内存引擎创建表。</strong></p><p>​        现在最常用的存储引擎是InnoDB，它从MySQL 5.5.5版本开始成为了默认存储引擎。create table 语句中使用 engine=memory, 来指定使用内存引擎创建表。</p><h2 id="查询语句执行过程"><a href="#查询语句执行过程" class="headerlink" title="查询语句执行过程"></a>查询语句执行过程</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugu76st2j313y0u0arb.jpg" alt="image-20210525103044520" loading="lazy"></p><h4 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h4><p>​        第一步，连接器连接到数据库，连接器负责跟客户端建立连接、获取权限、维持和管理连接。</p><blockquote><p>连接命令一般是这么写的：mysql -h$ip -P$port -u$user -p$password</p><p>账号密码错误会报错：Access denied for user</p></blockquote><p>​        连接完成后，如果没有后续的动作，这个连接就处于空闲状态，可以在<strong>show processlist</strong>命令中看到它。文本中这个图是show processlist的结果，其中的Command列显示为”Sleep”的这一行，就表示现在系统里面有一个空闲连接。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugulh05cj31aw08ijwn.jpg" alt="image-20210525103108004" loading="lazy"></p><p>​        客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数<strong>wait timeout</strong>控制的，默认值是8小时。</p><blockquote><p>断开后再执行sql会报错：Lost connection to MySQL server during query</p></blockquote><p>​        建立连接的过程通常是比较复杂的，所以建议在使用中要尽量减少建立连接的动作，也就是<strong>尽量使用长连接。</strong></p><p>​        但是 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启。</p><p>​        怎么解决这个问题呢？可以考虑以下两种方案。</p><ol><li>定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。</li><li><strong>如果用的是MySQL 5.7或更新版本，可以在每次执行一个比较大的操作后，通过执行mysql reset connection来重新初始化连接资源。这个过程不需要重连和重新做权限验证但是会将连接恢复到刚刚创建完时的状态。</strong></li></ol><h4 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h4><p>​        第二步，查询语句会先查询缓存，之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。</p><p>​        但是<strong>查询缓存利大于弊</strong>，因为查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。</p><p>​        除非是静态配置表才适合用查询缓存。<strong>可以将参数 query_cache_type 设置成DEMAND，这样对于默认的 SQL 语句都不使用查询缓存。SQL_CACHE 显式指定使用查询缓存。</strong></p><blockquote><p>select SQL_CACHE * from T where ID=10；</p></blockquote><p>​        但是，<strong>MySQL 8.0版本彻底删除了查询缓存功能。</strong></p><h4 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h4><p>​        第三步，分析语句，先是词法分析，找出select，表名，列名等关键字；然后是语法分析，判断语法是否正确。<strong>表名列名不对的sql，会在语法分析时报错。</strong></p><blockquote><p>语法错误：ERROR 1064 (42000): You have an error in your SQL syntax;</p></blockquote><h4 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h4><p>​        第四步，<strong>决定使用哪个索引，join的时候决定各个表的连接顺序。</strong></p><h4 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h4><p>​        第五步，<strong>先判断对当前表是否有权限（如果命中查询缓存，会在返回结果时验证权限）。</strong></p><blockquote><p>ERROR 1142 (42000): SELECT command denied to user ‘b’@’localhost’ for table ‘T’</p></blockquote><p>​        如：select * from T where ID=10; 执行过程</p><ol><li>调用 InnoDB 引擎接口取这个表的第一行，判断 ID 值是不是 10，如果不是则跳过，如果是则将这行存在结果集中；</li><li>调用引擎接口取“下一行”，重复相同的判断逻辑，直到取到这个表的最后一行。</li><li>执行器将上述遍历过程中所有满足条件的行组成的记录集作为结果集返回给客户端。</li></ol><p>​        慢查询日志中有一行 rows_examined 字段，表示这个语句执行过程中扫描了多少行。这个值就是在执行器每次调用引擎获取数据行的时候累加的。但是引擎扫描行数跟 rows_examined 并不是完全相同的。</p><h4 id="查询的数据如何返回"><a href="#查询的数据如何返回" class="headerlink" title="查询的数据如何返回"></a>查询的数据如何返回</h4><ul><li>对一个200G的大表做全表扫描，而内存只有16G，会不会把数据库主机的内存用光了？<br>实际上，MySQL不是取到全部数据再返回客户端。取数据和发数据的流程是这样的：</li></ul><ol><li><ol><li>获取一行，写到 net_buffer 中。这块内存的大小是由参数 net_buffer_length 定义的，默认是 16k。</li><li>重复获取行，直到 net_buffer 写满，调用网络接口发出去。</li><li>如果发送成功，就清空 net_buffer，然后继续取下一行，并写入 net_buffer。</li><li>如果发送函数返回 EAGAIN 或 WSAEWOULDBLOCK，就表示本地网络栈（socket send buffer）写满了，进入等待。直到网络栈重新可写，再继续发送。</li></ol></li></ol><ul><li>MySQL 客户端发送请求后，接收服务端返回结果的方式有两种：</li></ul><ol><li><ol><li>一种是本地缓存，也就是在本地开一片内存，先把结果存起来。如果用 API 开发，对应的就是 mysql_store_result 方法。</li><li>另一种是不缓存，读一个处理一个。如果用 API 开发，对应的就是 mysql_use_result 方法。</li></ol></li></ol><blockquote><p><strong>MySQL 客户端默认采用第一种方式，而如果加上–quick 参数，就会使用第二种不缓存的方式。</strong></p><p>采用不缓存的方式时，如果本地处理得慢，就会导致服务端发送结果被阻塞，因此会让服务端变慢。</p></blockquote><p>​        <strong>MySQL 是“边读边发的”。这就意味着，如果客户端接收得慢，会导致 MySQL 服务端由于结果发不出去，这个事务的执行时间变长。</strong></p><p>​        <strong>对于正常的线上业务来说，如果一个查询的返回结果不会很多的话，都建议使用 mysql_store_result 这个接口，直接把查询结果保存到本地内存。</strong></p><h2 id="更新语句执行过程"><a href="#更新语句执行过程" class="headerlink" title="更新语句执行过程"></a>更新语句执行过程</h2><p>​        更新语句同样会走连接器，查询缓存（清空该表缓存），分析器，优化器这一套流程，与查询流程不一样的是，更新流程还涉及两个重要的日志模块，redo log（重做日志）和 binlog（归档日志）。</p><h4 id="重做日志：redo-log"><a href="#重做日志：redo-log" class="headerlink" title="重做日志：redo log"></a>重做日志：redo log</h4><p>​        如果每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。</p><p>​        MySQL采用了WAL技术，全称是 Write-Ahead Logging，的关键点就是<strong>先写日志，再写磁盘。</strong></p><p>​        具体来说，当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 redo log里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。</p><p>​        但是如果 InnoDB 的 redo log 写满了。这时候系统会停止所有更新操作，把 checkpoint 往前推进(对应的所有脏页都 flush 到磁盘上)，redo log 留出空间可以继续写。</p><p>​        一旦一个查询请求需要在执行过程中先 flush 掉一个脏页时，这个查询就可能要比平时慢了。由于刷脏页的逻辑会占用 IO 资源并可能影响到了更新语句，要尽量避免这种情况，就要合理地设置 innodb_io_capacity 的值，<strong>并且平时要多关注脏页比例，不要让它经常接近 75%。</strong>脏页比例是通过 Innodb_buffer_pool_pages_dirty/Innodb_buffer_pool_pages_total 得到的，具体的命令参考下面代码：</p><blockquote><p>mysql&gt; select VARIABLE_VALUE into @a from global_status where VARIABLE_NAME = ‘Innodb_buffer_pool_pages_dirty’;</p><p>select VARIABLE_VALUE into @b from global_status where VARIABLE_NAME = ‘Innodb_buffer_pool_pages_total’;</p><p>select @a/@b;</p><p>在 InnoDB 中，innodb_flush_neighbors 参数就是用来控制这个行为的，值为 1 的时候会有“连坐”机制，值为 0 时表示不找邻居，自己刷自己的。固态硬盘建议设置为0。</p></blockquote><p>​        InnoDB 的 redo log 是可以配置的固定大小，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写，如下面这个图所示。<strong>如果redo log 设置的太小，磁盘压力很小，但是数据库出现间歇性的性能下跌。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugv0kg57j313x0u0qac.jpg" alt="image-20210525103131637" loading="lazy"></p><p>​        write pos 是当前记录的位置，一边写一边后移，写到第 3 号文件末尾后就回到 0 号文件开头。checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件。</p><p>​        write pos 和 checkpoint 之间的是还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoint，这时候就得停下来先擦掉一些记录，把 checkpoint 推进一下。</p><p>​        <strong>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。</strong></p><p>​        <strong>redo log buffer</strong> ：插入数据的过程中，生成的日志都得先保存起来，但又不能在还没 commit 的时候就直接写到 redo log 文件里。所以，redo log buffer 就是一块内存，用来先存 redo 日志的。也就是说，在执行第一个 insert 的时候，数据的内存被修改了，在执行 commit 的时候 redo log buffer 才写入了日志。</p><p>​        为了控制 redo log 的写入策略，innodb_flush_log_at_trx_commit 参数，它有三种可能取值：</p><ol><li>设置为 0 的时候，表示每次事务提交时都只是把 redo log 留在 redo log buffer 中 ;</li><li>设置为 1 的时候，表示每次事务提交时都将 redo log 直接持久化到磁盘；</li><li>设置为 2 的时候，表示每次事务提交时都只是把 redo log 写到 page cache。</li></ol><p>​        InnoDB 有一个后台线程，每隔 1 秒，就会把 redo log buffer 中的日志，调用 write 写到文件系统的 page cache，然后调用 fsync 持久化到磁盘。也就是说，<strong>一个没有提交的事务的 redo log，也是可能已经持久化到磁盘的。</strong></p><p>​        还有两种场景也会把没有提交的redo log 写到硬盘。</p><ol><li><strong>redo log buffer 占用的空间即将达到 innodb_log_buffer_size 一半的时候，后台线程会主动写盘。</strong>注意，由于这个事务并没有提交，所以这个写盘动作只是 write，而没有调用 fsync，也就是只留在了文件系统的 page cache。</li><li><strong>并行的事务提交的时候，顺带将这个事务的 redo log buffer 持久化到磁盘。</strong>假设一个事务 A 执行到一半，另一个事务B提交，事务B要把 redo log buffer 里的日志全部持久化到磁盘。</li></ol><h4 id="归档日志：binlog"><a href="#归档日志：binlog" class="headerlink" title="归档日志：binlog"></a>归档日志：binlog</h4><p>​        redo log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。</p><p>​        binlog 的三种格式对比：</p><p>​                <strong>statement：记录到 binlog 里的是语句原文，最后会有 COMMIT；可能会导致主备不一致，因为limit 、等sql 执行时可能主备优化器选择的索引不一样，排序也不一样。now()执行的结果也不一样。</strong></p><p>​                <strong>row ：记录了操作的事件每一条数据的变化情况，最后会有一个 XID event。缺点是太占空间。</strong></p><p>​                <strong>mixed：同时使用两种格式，由数据库判断具体某条sql使用哪种格式。但是有选择错误的情况。</strong></p><p>这两种日志有以下三点不同。</p><ol><li><strong>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</strong></li><li><strong>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID=2 这一行的 c 字段加 1 ”。</strong></li><li><strong>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</strong></li></ol><p>redo log 和 binlog 是怎么关联起来的?</p><p>它们有一个共同的数据字段，叫 XID。崩溃恢复的时候，会按顺序扫描 redo log：</p><ul><li>如果碰到既有 prepare、又有 commit 的 redo log，就直接提交；</li><li>如果碰到只有 parepare、而没有 commit 的 redo log，就拿着 XID 去 binlog 找对应的事务。</li></ul><p>​        处于 prepare 阶段的 redo log 加上完整 binlog，重启也能恢复，因为 binlog 完整了，那么从库就同步过去了，为了保证主从一致，有完整的 binlog 就算成功。</p><p>​        <strong>事务执行过程中，先把日志写到 binlog cache，事务提交的时候，再把 binlog cache 写到 binlog 文件中。</strong></p><p>​        write 和 fsync 的时机，是由参数 sync_binlog 控制的：</p><ol><li>sync_binlog=0 的时候，表示每次提交事务都只 write，不 fsync；</li><li>sync_binlog=1 的时候，表示每次提交务都会执行 fsync；</li><li>sync_binlog=N(N&gt;1) 的时候，表示每次提交事务都 write，但累积 N 个事务后才 fsync。</li></ol><blockquote><p>比较常见的是将其设置为 100~1000 中的某个数值。对应的风险是：如果主机发生异常重启，会丢失最近 N 个事务的 binlog 日志。</p></blockquote><h4 id="更新语句执行过程-1"><a href="#更新语句执行过程-1" class="headerlink" title="更新语句执行过程"></a>更新语句执行过程</h4><p>比如：update T set c=c+1 where ID=2;</p><ol><li>执行器先找引擎取 ID=2 这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。</li><li>执行器拿到引擎给的行数据，把这个值加上 1，得到新的一行数据，再调用引擎接口写入这行新数据。</li><li><strong>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。</strong></li><li><strong>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。</strong></li><li><strong>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。</strong></li></ol><p>​        这里给出这个 update 语句的执行流程图，图中浅色框表示是在 InnoDB 内部执行的，深色框表示是在执行器中执行的。<strong>其实就是把redo log 和binlog 做两阶段提交，为了让两份日志之间的逻辑一致。</strong></p><h4 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h4><p>​        <strong>保存一定时间的binlog，同时系统会定期做整库备份。</strong></p><p>​        当需要恢复到指定的某一秒时，</p><ol><li>首先，找到最近的一次全量备份，如果运气好，可能就是昨天晚上的一个备份，从这个备份恢复到临时库</li><li>然后，从备份的时间点开始，将备份的 binlog 依次取出来，重放到指定的那个时刻。</li></ol><p>​        <strong>redo log 用于保证 crash-safe 能力。innodb_flush_log_at_trx_commit 这个参数设置成 1 的时候，表示每次事务的 redo log 都直接持久化到磁盘。</strong>这个参数建议设置成 1，这样可以保证 MySQL 异常重启之后数据不丢失。</p><p>​        <strong>binlog用于备份恢复和从库同步。sync_binlog 这个参数设置成 1 的时候，表示每次事务的 binlog 都持久化到磁盘。</strong>这个参数也建议设置成 1，这样可以保证 MySQL 异常重启之后 binlog 不丢失。</p><h4 id="主备同步"><a href="#主备同步" class="headerlink" title="主备同步"></a>主备同步</h4><ol><li>在备库 B 上通过 change master 命令，设置主库 A 的 IP、端口、用户名、密码，以及要从哪个位置开始请求 binlog，这个位置包含文件名和日志偏移量。</li><li>在备库 B 上执行 start slave 命令，这时候备库会启动两个线程，就是图中的 io_thread 和 sql_thread。其中 io_thread 负责与主库建立连接。</li><li>主库 A 校验完用户名、密码后，开始按照备库 B 传过来的位置，从本地读取 binlog，发给 B。</li><li>备库 B 拿到 binlog 后，写到本地文件，称为中转日志（relay log）。</li><li>sql_thread 读取中转日志，解析出日志里的命令，并执行。</li></ol><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugvfag12j313v0u015g.jpg" alt="image-20210525103157119" loading="lazy"></p><p>​        一主一备结构，需要注意主备切换，备库设置只读，避免切换bug造成双写不一致问题（设置 readonly 对超级用户是无效的，同步更新的线程有超级权限，所以还能写入同步数据）。</p><p>​        双主结构，要避免循环更新问题，因为MySQL 在 binlog 中记录了这个命令第一次执行时所在实例的 server id。所以可以规定两个库的 server id 必须不同，每个库在收到从自己的主库发过来的日志后，先判断 server id，如果跟自己的相同，表示这个日志是自己生成的，就直接丢弃这个日志。</p><h4 id="主备延迟"><a href="#主备延迟" class="headerlink" title="主备延迟"></a>主备延迟</h4><p>​        <strong>可以在备库上执行 show slave status 命令，它的返回结果里面会显示 seconds_behind_master，用于表示当前备库延迟了多少秒。</strong>每个事务的 binlog 里面都有一个时间字段，用于记录主库上写入的时间； 备库取出当前正在执行的事务的时间字段的值，计算它与当前系统时间的差值，得到 seconds_behind_master。</p><p>​        主备延迟最直接的表现是，备库消费中转日志（relay log）的速度，比主库生产 binlog 的速度要慢。</p><p>​        主备延迟的来源</p><ol><li>有些部署条件下，备库所在机器的性能要比主库所在的机器性能差。</li><li>考虑到主备切换，主备机器一般都一样了，但是还可能备库读的压力太大，</li></ol><blockquote><p>一主多从，或者通过binlog输出到外部系统(比如Hadoop)，让外部系统提供部分统计查询能力。</p></blockquote><ol><li><strong>大事务，如果事务执行十分钟，那就会导致主从延迟十分钟。</strong></li></ol><h4 id="主备复制策略"><a href="#主备复制策略" class="headerlink" title="主备复制策略"></a>主备复制策略</h4><p>​        <strong>在官方的 5.6 版本之前，MySQL 只支持单线程复制</strong>，由此在主库并发高、TPS 高时就会出现严重的主备延迟问题。</p><p>​        并行复制策略有按表并行分发策略，按行并行分发策略，但是按行分发在决定线程分发的时候，需要消耗更多的计算资源。这两个方案其实都有一些约束条件：</p><ol><li>要能够从 binlog 里面解析出表名、主键值和唯一索引的值。也就是说，主库的 binlog 格式必须是 row；</li><li>表必须有主键；</li><li>不能有外键。表上如果有外键，级联更新的行不会记录在 binlog 中，这样冲突检测就不准确。</li></ol><p>​        <strong>官方 MySQL5.6 版本，支持了并行复制，只是支持的粒度是按库并行。</strong>相比于按表和按行分发，这个策略有两个优势：</p><ol><li>构造 hash 值的时候很快，只需要库名；而且一个实例上 DB 数也不会很多，不会出现需要构造 100 万个项这种情况。</li><li>不要求 binlog 的格式。因为 statement 格式的 binlog 也可以很容易拿到库名。</li></ol><p>​        <strong>MariaDB 的并行复制策略，伪模拟主库并发度</strong>，主库 redo log 组提交 (group commit) 优化，同一组提交会记录commit_id，备库把同一个commit_id分发到多个worker执行。</p><p>​        官方的 MySQL5.7 版本，由参数 slave-parallel-type 来控制并行复制策略：</p><ol><li>配置为 DATABASE，表示使用 MySQL 5.6 版本的按库并行策略；</li><li>配置为 LOGICAL_CLOCK，表示的就是类似 MariaDB 的策略。不过，MySQL 5.7 这个策略，针对并行度做了优化。</li></ol><p>​        <strong>MySQL 5.7.22 版本里，MySQL 增加了一个新的并行复制策略，基于 WRITESET 的并行复制。</strong>对于事务涉及更新的每一行，计算出这一行的 hash 值，组成集合 writeset。如果两个事务没有操作相同的行，也就是说它们的 writeset 没有交集，就可以并行。</p><h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>​        读写分离有两种方案：</p><ol><li>客户端直连方案，因为少了一层 proxy 转发，所以查询性能稍微好一点儿，并且整体架构简单，排查问题更方便。但是这种方案，由于要了解后端部署细节，所以在出现主备切换、库迁移等作的时候，客户端都会感知到，并且需要调整数据库连接信息。 可能会觉得这样客户端也太麻烦了，信息大量冗余，架构很丑。其实也未必，一般采用这样的架构，一定会伴随一个负责管理后端的组件，比如 Zookeeper，尽量让业务端只专注于业务逻辑开发。</li><li>带 proxy 的架构，对客户端比较友好。客户端不需要关注后端细节，连接维护、后端信息维护等工作，都是由 proxy 完成的。但这样的话，对后端维护团队的要求会更高。而且，proxy 也需要有高可用架构。因此，带 proxy 架构的整体就相对比较复杂。</li></ol><p>​        <strong>主从延迟的情况下怎么办？</strong></p><ol><li><p>强制走主库方案；对于必须要拿到最新结果的请求，强制将其发到主库上。</p></li><li><p>sleep 方案；主库更新后，读从库之前先 sleep 一下。因为大多数情况下主备延迟在 1 秒之内。</p></li><li><p>判断主备无延迟方案； 每次从库执行查询请求前，先判断 seconds_behind_master 是否已经等于 0。如果还不等于 0 ，那就必须等到这个参数变为 0 才能执行查询请求。</p></li><li><p>配合 semi-sync 方案；半同步复制：</p></li><li><ol><li>事务提交的时候，主库把 binlog 发给从库；</li><li>从库收到 binlog 以后，发回给主库一个 ack，表示收到了；</li><li>主库收到这个 ack 以后，才能给客户端客户端返回“事务完成”的确认。</li></ol></li><li><p>等主库位点方案；</p></li><li><p>等 GTID 方案。</p></li></ol><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><h4 id="数据库特性"><a href="#数据库特性" class="headerlink" title="数据库特性"></a>数据库特性</h4><p>​        <strong>ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、、隔离性、持久性）。</strong></p><p>​        当数据库上有多个事务同时执行的时候，就可能出现<strong>脏读（dirty read）、不可重复读（non-repeatable read）、幻读（phantom read）</strong>的问题，为了解决这些问题，就有了“隔离级别”的概念。</p><ul><li>脏读：指的是一个事务的读操作读到了另一个未提交的事务修改的值。</li><li>不可重复读：指的是一个事务读了同一个值两次，但是两次的值不同，因为中间另一个事务修改了这个值。</li><li>幻读：仍然指的是一个事务中读了两次，结果不同，但是与不可重复读不同的是，这里不同是因为别的事物做了插入操作，而是读的条件是一个范围的条件，这样第二次会多读到一条数据。</li></ul><blockquote><p>不可重复读重点在于update和delete，而幻读的重点在于insert。</p></blockquote><h4 id="幻读问题——间隙锁"><a href="#幻读问题——间隙锁" class="headerlink" title="幻读问题——间隙锁"></a>幻读问题——间隙锁</h4><p>​        即使把所有的记录都加上锁，还是阻止不了新插入的记录，也就是说行锁解决不了幻读问题，行锁只能锁住行，但是新插入记录这个动作，要更新的是记录之间的“间隙”。因此，为了解决幻读问题，InnoDB 只好引入新的锁，也就是间隙锁 (Gap Lock)。</p><p>​        当执行 select * from t where d=5 for update 的时候，就不止是给数据库中已有的 6 个记录加上了行锁，还同时加了 7 个间隙锁。这样就确保了无法再插入新的记录。</p><p>​        间隙锁和行锁合称 next-key lock，每个 next-key lock 是前开后闭区间。也就是说，表 t 初始化以后，如果用 select * from t for update 要把整个表所有记录锁起来，就形成了 7 个 next-key lock，分别是(-∞,0]、(0,5]、(5,10]、(10,15]、(15,20]、(20, 25]、(25, +supremum]。</p><p>​        <strong>间隙锁和 next-key lock 的引入，解决了幻读的问题，但同时也带来了一些“困扰”。间隙锁的引入，可能会导致同样的语句锁住更大的范围，这其实是影响了并发度的。</strong></p><h4 id="隔离级别-1"><a href="#隔离级别-1" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>​        SQL 标准的事务隔离级别包括：读未提交read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（serializable ）。<strong>隔离级别越高，效率越低。</strong></p><ul><li>读未提交是指，一个事务还没提交时，它做的变更就能被别的事务看到。</li><li>读提交是指，一个事务提交之后，它做的变更才会被其他事务看到。</li><li>可重复读是指，一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。</li><li>串行化，顾名思义是对于同一行记录，“写”会加“写锁”，“读” 会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。</li></ul><p>​        <strong>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准。</strong></p><ol><li>“可重复读”隔离级别下：这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。</li><li>“读提交”隔离级别下：这个视图是在每个 SQL 语句开始执行的时候创建的。</li><li>“读未提交”隔离级别下：直接返回记录上的最新值，没有视图概念</li><li>“串行化”隔离级别下：直接用加锁的方式来避免并行访问。<pre><code>在 MySQL 里，有两个“视图”的概念：</code></pre></li></ol><ul><li>一个是 view。它是一个用查询语句定义的虚拟表，在调用的时候执行查询语句并生成结果。创建视图的语法是 create view … ，而它的查询方法与表一样。</li><li>另一个是 InnoDB 在实现 MVCC 时用到的一致性读视图，即 consistent read view，用于支持 RC（Read Committed，读提交）和 RR（Repeatable Read，可重复读）隔离级别的实现。</li></ul><p>​        <strong>MySQL 默认隔离级别是可重复读，Oracle 默认隔离级别是“读提交”。</strong></p><p>​        将启动参数 <strong>transaction-isolation</strong> 的值设置成 READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ 、SERIALIZABLE。</p><p>​        可以用 show variables 来查看当前的值。</p><h4 id="事务隔离的实现——undo-log"><a href="#事务隔离的实现——undo-log" class="headerlink" title="事务隔离的实现——undo log"></a>事务隔离的实现——undo log</h4><p>​        每条记录在更新的时候都会同时记录一条回滚操作。同一条记录在系统中可以存在多个版本，这就是数据库的（MVCC）。</p><p>​        <strong>MVCC的全称是“多版本并发控制”。</strong>为了查询一些正在被另一个事务更新的行，并且可以看到它们被更新之前的值，不用等待另一个事务释放锁。</p><p>​        <strong>InnoDB会给数据库中的每一行增加三个字段，它们分别是DB_TRX_ID（事务版本号）、DB_ROLL_PTR（创建时间）、DB_ROW_ID（唯一id）。</strong></p><p>​        <strong>InnoDB 里面每个事务有一个唯一的事务 ID，叫作 transaction id。它是在事务开始的时候向 InnoDB 的事务系统申请的，是按申请顺序严格递增的。</strong></p><p>​        <strong>InnoDB 利用了“所有数据都有多个版本”的这个特性，实现了“秒级创建快照”的能力。</strong></p><p>​        B+Tree叶结点上，始终存储的是最新的数据（可能是还未提交的数据）。而旧版本数据，通过UNDO记录存储在回滚段（Rollback Segment）里。每一条记录都会维护一个ROW HEADER元信息，存储有创建这条记录的事务ID，一个指向UNDO记录的指针。<strong>通过最新记录和UNDO信息，可以还原出旧版本的记录。</strong></p><p>​        假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugvsu9u9j31af0u07bx.jpg" alt="image-20210525103218808" loading="lazy"></p><p>​        当前值是 4，但是在查询这条记录的时候，不同时刻启动的事务会有不同的 read-view。同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）。对于 read-view A，要得到 1，就必须将当前值依次执行图中所有的回滚操作得到。这些回滚信息记录在undo log 里。</p><p>​        当系统里没有比这个回滚日志更早的 read-view 的时候会删除老的undo log。</p><h4 id="避免长事务"><a href="#避免长事务" class="headerlink" title="避免长事务"></a>避免长事务</h4><p>​        <strong>尽量不要使用长事务，长事务意味着系统里面会存在很老的事务视图。会有很大的undo log日志占用空间。而且长事务还会占据锁资源，也可能拖垮整个库。</strong></p><p>​        可以在 <strong>information_schema 库的innodb_trx</strong> 这个表中查询长事务，比如下面这个语句，用于查找持续时间超过 60s 的事务。可以监控这个表，设置长事务阈值报警或者直接kill。</p><blockquote><p>select * from information_schema.innodb_trx where TIME_TO_SEC(timediff(now(),trx_started))&gt;60</p></blockquote><p>​        可以通过 SET MAX_EXECUTION_TIME 命令来控制每个语句执行的最长时间，避免单个语句意外执行太长时间。</p><p>​        确认是否有不必要的只读事务。</p><p>​        如果使用的是 MySQL 5.6 或者更新版本，把 innodb_undo_tablespaces 设置成 2或更大的值）。如果真的出现大事务导致undo log过大，这样设置后清理起来更方便。</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h4 id="常见索引模型"><a href="#常见索引模型" class="headerlink" title="常见索引模型"></a>常见索引模型</h4><p>​        Hash表 + 链表，查询新增都很快，但是只适用于只有等值查询的场景，不能区间查询， Memcached 及其他一些 NoSQL 引擎在用。</p><p>​        有序数组，等值查询和范围查询场景中的性能就都非常优秀，二分查找O(log(N))，但是更新的效率很低，所以只适用于静态存储引擎。</p><p>​        平衡二叉树，更新和查询都比较快。</p><p>​        还有跳跃表，LSM树等。</p><h4 id="B-树"><a href="#B-树" class="headerlink" title="B+ 树"></a>B+ 树</h4><p>​        为了让一个查询尽量少地读磁盘，就需要使用多叉树。MySQL采用的是B+树，由于索引不止存在内存中，还要写到磁盘上。二叉树的树高太高，100万数据，就有20层，在机械硬盘时代，从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。就要花费200ms的寻址时间，就太慢了。MySQL  B+树 的一层节点数量在1200左右，只需要1-3次磁盘IO就可以了，因为InnoDB存储引擎的最小储存单元页（Page），一个页的大小是16K。一般来说主键id为bigint类型，长度8字节，指针6字节，那么16284/14 = 1170。所以一次IO最多读取1170个节点。</p><p>​        相对于B树，B+树把所有的数据都放在了叶子节点上，这样虽然每次都需要查询叶子节点，但也不过两三层，如果干节点也放数据，那干节点就变大了，一次就读取不了1200节点了，层高会变大很多。</p><p>​        并且MySQL把B+树的所有叶子节点的数据用指针连起来了，这样做区间查询是非常快的。</p><h4 id="主键索引和非主键索引"><a href="#主键索引和非主键索引" class="headerlink" title="主键索引和非主键索引"></a>主键索引和非主键索引</h4><p>​        <strong>主键索引的叶子节点存的是整行数据。</strong>在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。</p><p>​        <strong>非主键索引的叶子节点内容是主键的值。</strong>在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</p><p>​        <strong>查询语句，如果走主键索引，会直接得到数据，如果走非主键索引，查到主键后，还需要回主键索引再查一次数据。这个过程称为回表。（覆盖索引不需要回表）</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugw4o0iej313v0u0thn.jpg" alt="image-20210525103238211" loading="lazy"></p><p>​        分为聚簇索引和非聚簇索引的原因：更新数据的时候，由于数据的地址变了，需要更改索引，但是由于数据只跟主键索引绑定，索引只需要更新聚簇索引，当然还有被更新列涉及到的索引也要更新。如果所有所有都跟数据绑定，虽然省掉了回表的过程，但是每次更新，需要更新所有的索引，得不偿失。</p><h4 id="索引维护"><a href="#索引维护" class="headerlink" title="索引维护"></a>索引维护</h4><p>​        B+ 树为了维护索引有序性，在插入新值的时候需要做必要的维护。</p><p>​        比如按顺序插入1-499,501-1000，索引都在一页，再插入一个500，根据 B+ 树的算法，这时候需要申请一个新的数据页，然后挪动部分数据(501到1000的数据)过去。这个过程称为<strong>页分裂</strong>。在这种情况下，性能自然会受影响。</p><p>​        <strong>除了影响性能外，页分裂操作还影响数据页的利用率。原本放在一个页的数据，现在分到两个页中，整体空间利用率降低大约 50%。</strong></p><p>​        当然有分裂就有合并。当相邻两个页由于删除了数据，利用率很低之后，会将数据页做合并。合并的过程，可以认为是分裂过程的逆过程。</p><p>​        所以一般建表规范都要求用自增主键，避免页分裂，当然也有特殊情况，使用别的字段当做主键。</p><p>​        并且索引可能因为删除，或者页分裂等原因，导致数据页有空洞，<strong>重建索引</strong>的过程会创建一个新的索引，把数据按顺序插入，这样页面的利用率最高，也就是索引更紧凑、更省空间。</p><blockquote><p>alter table T drop index k;</p><p>alter table T add index(k);</p></blockquote><p>​        但是<strong>不能重建主键索引</strong>，不论是删除主键还是创建主键，都会将整个表重建。可以使用 alter table T engine=InnoDB 重建表。</p><h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>​        如果执行的语句是 select ID from T where k between 3 and 5，这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”查询需求，称为覆盖索引。</p><p>​        由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p><p>​        如果有根据身份证号查询市民信息的需求，只要在身份证号字段上建立索引就够了。如果现在有一个高频请求，要根据市民的身份证号查询他的姓名，再建立一个（身份证号、姓名）的联合索引就是覆盖索引，省去了回表环节。</p><h4 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h4><p>​        如果为每一种查询都设计一个索引，索引是不是太多了。</p><p>​        B+ 树这种索引结构，可以利用索引的“最左前缀”，来定位记录。</p><p>​        为了直观地说明这个概念，用（name，age）这个联合索引来分析。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugwgmmmtj315x0u016n.jpg" alt="image-20210525103258069" loading="lazy"></p><p>​        可以看到，索引项是按照索引定义里面出现的字段顺序排序的。</p><p>​        当逻辑需求是查到所有名字是“张三”的人时，可以快速定位到 ID4，然后向后遍历得到所有需要的结果。</p><p>​        如果要查的是所有名字第一个字是“张”的人，SQL 语句的条件是”where name like ‘张 %’”。这时，也能够用上这个索引，查找到第一个符合条件的记录是 ID3，然后向后遍历，直到不满足条件为止。</p><p>​        可以看到，不只是索引的全部定义，只要满足最左前缀，就可以利用索引来加速检索。这个<strong>最左前缀可以是联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符。</strong></p><h4 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h4><p>​        <strong>使用前缀索引，定义好长度，就可以做到既节省空间，又不用额外增加太多的查询成本。</strong></p><p>​        在建立索引时关注的是区分度，区分度越高越好。因为区分度越高，意味着重复的键值越少。因此，可以通过统计索引上有多少个不同的值来判断要使用多长的前缀。</p><p>​        可以使用下面这个语句，算出这个列上有多少个不同的值：</p><blockquote><p>select count(distinct email) as L from SUser;</p></blockquote><p>​        使用前缀索引就用不上覆盖索引对查询性能的优化了，这是在选择是否使用前缀索引时需要考虑的一个因素。</p><p>​        那么对于身份证号，一共 18 位，其中前 6 位是地址码，所以同一个县的人的身份证号前 6 位一般会是相同的。该怎么存储，怎么设计索引呢？</p><ol><li>第一种方式是使用倒序存储。身份证号的最后 6 位没有地址码这样的重复逻辑。</li></ol><blockquote><p>select field_list from t where id_card = reverse(‘input_id_card_string’);</p><p>select field_list from t where id_card = reverse(‘input_id_card_string’);</p></blockquote><ol><li>第二种方式是使用 hash 字段。在表上再创建一个整数字段，来保存身份证的校验码，同时在这个字段上创建索引。</li></ol><blockquote><p>alter table t add id_card_crc int unsigned, add index(id_card_crc);</p><p>然后每次插入新记录的时候，都同时用 crc32() 这个函数得到校验码填到这个新字段。由于校验码可能存在冲突，所以查询语句 where 部分要判断 id_card 的值是否精确相同。</p><p>select field_list from t where id_card_crc=crc32(‘input_id_card_string’) and id_card=’input_id_card_string’</p></blockquote><h4 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h4><p>​        最左前缀的时候，那些不符合最左前缀的部分，会怎么样呢？</p><p>​        如果现在有一个需求：检索出表中“名字第一个字是张，而且年龄是 10 岁的所有男孩”。那么，SQL 语句是这么写的：</p><blockquote><p>mysql&gt; select * from tuser where name like ‘张 %’ and age=10 and ismale=1;</p></blockquote><p>​        这个语句在搜索索引树的时候，只能用 “张”，找到第一个满足条件的记录 ID3。</p><p>​        然后需要判断其他条件是否满足。</p><p>​        在 MySQL 5.6 之前，只能从 ID3 开始一个个回表。到主键索引上找出数据行，再对比字段值。</p><p>​        <strong>而 MySQL 5.6 引入的索引下推优化（index condition pushdown)，可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugwq4mrgj313y0u07im.jpg" alt="image-20210525103313205" loading="lazy"></p><h4 id="change-buffer"><a href="#change-buffer" class="headerlink" title="change buffer"></a>change buffer</h4><p>​        当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InooDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。<strong>虽然是只更新内存，但是在事务提交的时候，把 change buffer 的操作也记录到 redo log 里了，所以崩溃恢复的时候，change buffer 也能找回来。</strong></p><p>​        需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p><p>​        将 change buffer 中的操作应用到原数据页，得到最新结果的过程称为 merge。除了访问这个数据页会触发 merge 外，系统有后台线程会定期 merge。在数据库正常关闭（shutdown）的过程中，也会执行 merge 操作。</p><p>​        显然，如果能够将更新操作先记录在 change buffer，减少读磁盘，语句的执行速度会得到明显的提升。而且，数据读入内存是需要占用 buffer pool 的，所以这种方式能够避免占用内存，提高内存利用率。</p><p>​        <strong>唯一索引的更新就不能使用 change buffer，实际上也只有普通索引可以使用。</strong></p><p>​        change buffer 用的是 buffer pool 里的内存，因此不能无限增大。change buffer 的大小，可以通过参数 innodb_change_buffer_max_size 来动态设置。这个参数设置为 50 的时候，表示 change buffer 的大小最多只能占用 buffer pool 的 50%。</p><p>​        如果要在这张表中插入一个新记录 (4,400) 的话，InnoDB 的处理流程是怎样的。</p><p>​        第一种情况是，这个记录要更新的目标页在内存中。这时，InnoDB 的处理流程如下：</p><ul><li>对于唯一索引来说，找到 3 和 5 之间的位置，判断到没有冲突，插入这个值，语句执行结束；</li><li>对于普通索引来说，找到 3 和 5 之间的位置，插入这个值，语句执行结束。</li></ul><blockquote><p>这个判断只会耗费微小的 CPU 时间。不是重点</p></blockquote><ul><li>第二种情况是，这个记录要更新的目标页不在内存中。这时，InnoDB 的处理流程如下：</li><li>对于唯一索引来说，需要将数据页读入内存，判断到没有冲突，插入这个值，语句执行结束；</li><li><strong>对于普通索引来说，则是将更新记录在 change buffer，语句执行就结束了。</strong></li></ul><p>​    将数据从磁盘读入内存涉及随机 IO 的访问，是数据库里面成本最高的操作之一。change buffer 因为减少了随机磁盘访问，所以对更新性能的提升是会很明显的。</p><p>​        <strong>change buffer 适用于写多读少的业务，比如账单类、日志类的系统。因为会记录很多change buffer（写的时候） 才会merge（读的时候）</strong></p><p>​        反过来，读多写少的业务，几乎每次把更新记录在change buffer 后，就会立即出发merge，这样随机访问 IO 的次数不会减少，反而增加了change buffer 的维护代价。</p><p>​        所以，对于身份证号这类字段，如果业务已经保证不会写入重复数据，不需要数据库做约束，加普通索引比加主键索引要好，如果所有的更新后面，都马上伴随着对这个记录的查询，那么应该关闭 change buffer。而在其他情况下，change buffer 都能提升更新性能。</p><p>​        在实际使用中，可以发现，<strong>普通索引和 change buffer 的配合使用，对于数据量大的表的更新优化还是很明显的，特别是在使用机械硬盘时。</strong></p><p><strong>change buffer 和 redo log 对比</strong></p><blockquote><p>insert into t(id,k) values(id1,k1),(id2,k2);</p></blockquote><p>这条更新语句做了如下操作：</p><ol><li>Page 在内存中，直接更新内存；</li><li>Page 没有在内存中，就在内存的 change buffer 区域，记录下“要往 Page 插入一行”这个信。</li><li>将上述两个动作记入 redo log 中。</li></ol><p>后续的更新操作</p><ol><li>Page 在内存中，会直接从内存返回。</li><li>Page 不在内容中，需要把 Page 从磁盘读入内存中，然后应用 change buffer 里面的操作日志，生成一个正确的版本并返回结果。</li></ol><p>所以，如果要简单地对比这两个机制在提升更新性能上的收益的话，<strong>redo log 主要节省的是随机写磁盘的 IO 消耗（转成顺序写），而 change buffer 主要节省的则是随机读磁盘的 IO 消耗。</strong></p><h4 id="优化器如何选择索引"><a href="#优化器如何选择索引" class="headerlink" title="优化器如何选择索引"></a>优化器如何选择索引</h4><p>​        优化器结合是否扫描行数、是否使用临时表、是否排序等因素进行综合判断。</p><p>​        MySQL 在真正开始执行语句之前，并不能精确地知道满足条件的记录有多少条，而只能根据统计信息来估算记录数。</p><p>​        这个统计信息就是索引的“区分度”。显然，一个索引上不同的值越多，这个索引的区分度就越好。而一个索引上不同的值的个数，称之为“基数”（cardinality）。也就是说，这个基数越大，索引的区分度越好。</p><p>​        <strong>可以使用 show index 方法，看到一个索引的基数。</strong></p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugx8xlsuj31b405aado.jpg" alt="image-20210525103329731" loading="lazy"></p><p>​        MySQL 采样统计的方法获得基数，InnoDB 默认会选择 N 个数据页，统计这些页面上的不同值，得到一个平均值，然后乘以这个索引的页面数，就得到了这个索引的基数。当变更的数据行数超过 1/M 的时候，会自动触发重新做一次索引统计。<strong>analyze table t 命令，可以用来重新统计索引信息。</strong></p><p>​        在 MySQL 中，有两种存储索引统计的方式，可以通过设置参数 innodb_stats_persistent 的值来选择：</p><ul><li>设置为 on 的时候，表示统计信息会持久化存储。这时，默认的 N 是 20，M 是 10。</li><li>设置为 off 的时候，表示统计信息只存储在内存中。这时，默认的 N 是 8，M 是 16。<br>其实索引统计只是一个输入，对于一个具体的语句来说，优化器还要判断，执行这个语句本身要扫描多少行。</li></ul><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugx9egufj31b60bedr0.jpg" alt="image-20210525103343554" loading="lazy"></p><p>​        rows 这个字段表示的是预计扫描行数。</p><p>​        少数情况下优化器会选错索引，<strong>第一种方法可以采用 force index 强行选择一个索引。</strong></p><p>​        但其实使用 force index 最主要的问题还是变更的及时性。因为选错索引的情况还是比较少出现的，所以开发的时候通常不会先写上 force index。而是等到线上出现问题的时候，才会再去修改 SQL 语句、加上 force index。但是修改之后还要测试和发布，对于生产系统来说，这个过程不够敏捷。</p><p>​        所以，数据库的问题最好还是在数据库内部来解决。既然优化器放弃了使用索引 a，说明 a 还不够合适，所以<strong>第二种方法就是，可以考虑修改语句，引导 MySQL 使用期望的索引</strong>。比如，在这个例子里，显然把“order by b limit 1” 改成 “order by b,a limit 1” ，语义的逻辑是相同的。</p><p>​        之前优化器选择使用索引 b，是因为它认为使用索引 b 可以避免排序（b 本身是索引，已经是有序的了，如果选择索引 b 的话，不需要再做排序，只需要遍历），所以即使扫描行数多，也判定为代价更小。</p><p>​        现在 order by b,a 这种写法，要求按照 b,a 排序，就意味着使用这两个索引都需要排序。因此，扫描行数成了影响决策的主要条件，于是此时优化器选了只需要扫描 1000 行的索引 a。</p><p>​        当然，这种修改并不是通用的优化手段，可能修改语义这件事儿不太好，可以用 limit 100 让优化器意识到，使用 b 索引代价是很高的。其实是根据数据特征诱导了一下优化器，也不具备通用性。</p><blockquote><p>select  <em>from  (select</em>  from t where (a between 1 and 1000)  and (b between 50000 and 100000) order by b limit 100)alias limit 1;</p></blockquote><p>​        <strong>第三种方法是：在有些场景下，可以新建一个更合适的索引，来提供给优化器做选择，或删掉误用的索引。</strong></p><p>​        <strong>对索引字段做函数操作，可能会破坏索引值的有序性，因此优化器就决定放弃走树搜索功能。</strong></p><ol><li>条件字段函数操作</li></ol><blockquote><p>select count(*) from tradelog where month(t_modified)=7;</p><p>同理 where id+1=1000  也不会用索引，改成 where id =1000 - 1 会用索引。</p></blockquote><ol><li>隐式类型转换</li></ol><blockquote><p>select * from tradelog where tradeid=110717;  （tradeid 是varchar）</p><p>等同于 select * from tradelog where  CAST(tradid AS signed int) = 110717;</p></blockquote><ol><li>隐式字符编码转换</li></ol><blockquote><p>select * from trade_detail where tradeid=$L2.tradeid.value;</p><p>$L2.tradeid.value 的字符集是 utf8mb4。字符集 utf8mb4 是 utf8 的超集，所以当这两个类型的字符串在做比较的时候，MySQL 内部的操作是，先把 utf8 字符串转成 utf8mb4 字符集，再做比较。</p><p>相当于 select * from trade_detail  where CONVERT(traideid USING utf8mb4)=$L2.tradeid.value;</p></blockquote><h2 id="全局锁和表锁"><a href="#全局锁和表锁" class="headerlink" title="全局锁和表锁"></a>全局锁和表锁</h2><h4 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h4><p>​        <strong>顾名思义，全局锁就是对整个数据库实例加锁。</strong>MySQL 提供了一个加全局读锁的方法，命令是 Flush tables with read lock (FTWRL)。当需要<strong>让整个库处于只读状态的时候</strong>，可以使用可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。</p><p>​        <strong>全局锁的典型使用场景是，做全库逻辑备份。</strong>也就是把整库每个表都 select 出来存成文本。</p><p>​        通过 FTWRL 确保不会有其他线程对数据库做更新，然后对整个库做备份。在备份过程中整个库完全处于只读状，这是很危险的。但是不加锁，备份的数据会有不一致的问题。</p><p>​        <strong>可以拿到一个一致性视图来备份，官方自带的逻辑备份工具是 mysqldump。当 mysqldump 使用参数–single-transaction 的时候，导数据之前就会启动一个事务，来确保拿到一致性视图。</strong>而由于 MVCC 的支持，这个过程中数据是可以正常更新的。</p><p>​        那为什么还需要FTWRL呢，因为一致性读是好，<strong>但前提是引擎要支持这个隔离级别</strong>。对于 MyISAM 这种不支持事务的引擎，就需要使用 FTWRL 命令了。</p><p>​        既然要全库只读，为什么不使用 set global readonly=true 的方式呢？确实 readonly 方式也可以让全库进入只读状态，但还是建议用 FTWRL 方式，主要有两个原因：</p><ul><li>在有些系统中，readonly 的值会被用来做其他逻辑，比如用来判断一个库是主库还是备库。因此，修改 global 变量的方式影响面更大，不建议使用。</li><li><strong>在异常处理机制上有差异。如果执行 FTWRL 命令之后由于客户端发生异常断开，那么 MySQL 会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为 readonly 之后，如果客户端发生异常，则数据库就会一直保持 readonly 状态，这样会导致整个库长时间处于不可写状态，风险较高。</strong></li></ul><h4 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h4><p>​        MySQL 里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock，MDL)。</p><p>​        <strong>表锁的语法是 lock tables … read/write。</strong>与 FTWRL 类似，<strong>可以用 unlock tables 主动释放锁，也可以在客户端断开的时候自动释放。</strong>需要注意，lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象。</p><p>​        对于 InnoDB 这种支持行锁的引擎，一般不使用 lock tables 命令来控制并发，毕竟锁住整个表的影响面还是太大。</p><p>​        <strong>另一类表级的锁是 MDL（metadata lock)。</strong>MDL 不需要显式使用，在访问一个表的时候会被自动加上。MDL 的作用是，保证读写的正确性。可以想象一下，如果一个查询正在遍历一个表中的数据，而执行期间另一个线程对这个表结构做变更，删了一列，那么查询线程拿到的结果跟表结构对不上，肯定是不行的。</p><p>​        因此，在 MySQL 5.5 版本中引入了 MDL，<strong>当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。</strong></p><ul><li>读锁之间不互斥，因此可以有多个线程同时对一张表增删改查。</li><li>读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。</li></ul><h4 id="安全的给表增加字段"><a href="#安全的给表增加字段" class="headerlink" title="安全的给表增加字段"></a>安全的给表增加字段</h4><p>​        有几个请求在读写表，会加上MDL读锁，然后修改表字段的请求会被blocked，请求MDL写锁，这个时候，后面的全部读写请求都会被MDL写锁 blocked，如果查询语句频繁，而且客户端有重试机制，也就是说超时后会再起一个新 session 再请求的话，这个库的线程很快就会爆满。</p><p>​        那么如何安全的给表加字段呢？</p><p>​        首先要解决长事务，事务不提交，就会一直占着 MDL 锁。在 MySQL 的 information_schema 库的 innodb_trx 表中，可以查到当前执行中的事务。如果要做 DDL 变更的表刚好有长事务在执行，要考虑先暂停 DDL，或者 kill 掉这个长事务。</p><p>​        其次，在 alter table 语句里面设定等待时间，如果在这个指定的等待时间里面能够拿到 MDL 写锁最好，拿不到也不要阻塞后面的业务语句，先放弃。之后开发人员或者 DBA 再通过重试命令重复这个过程。</p><blockquote><p>ALTER TABLE tbl_name NOWAIT add column …</p><p>ALTER TABLE tbl_name WAIT N add column …</p></blockquote><h4 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h4><p>​        <strong>MyISAM 引擎就不支持行锁。</strong>不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。</p><p>​        <strong>在 InnoDB 事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放。这个就是两阶段锁协议。</strong></p><p>​        <strong>如果事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。</strong></p><h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>​        当并发系统中不同线程出现循环资源依赖，涉及的线程都在等待别的线程释放资源时，就会导致这几个线程都进入无限等待的状态，称为死锁。这里用数据库中的行锁举个例子。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugxnetw4j31430u0k6s.jpg" alt="image-20210525103402197" loading="lazy"></p><p>​        这时候，事务 A 在等待事务 B 释放 id=2 的行锁，而事务 B 在等待事务 A 释放 id=1 的行锁。 事务 A 和事务 B 在互相等待对方的资源释放，就是进入了死锁状态。当出现死锁以后，有两种策略：</p><ul><li>一种策略是，直接进入等待，直到超时。这个超时时间可以通过参数 innodb_lock_wait_timeout 来设置。</li></ul><blockquote><p>设置时间长，等待时间太长；设置时间短，有的长事务，不是死锁的也会结束。</p></blockquote><ul><li>另一种策略是，发起死锁检测，发现死锁后，主动回滚死锁链条中的某一个事务，让其他事务得以继续执行。将参数 innodb_deadlock_detect 设置为 on，表示开启这个逻辑。</li></ul><blockquote><p>每个新来的被堵住的线程，都要判断会不会由于自己的加入导致了死锁，这是一个时间复杂度是 O(n) 的操作。会耗费大量的CPU资源。</p></blockquote><h4 id="慢SQL问题排查"><a href="#慢SQL问题排查" class="headerlink" title="慢SQL问题排查"></a>慢SQL问题排查</h4><p>​        使用 show processlist 命令查看 Waiting for table metadata lock 的示意图。</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugxuzztlj31b007m42t.jpg" alt="image-20210525103418827" loading="lazy"></p><p>这个状态表示的是，现在有一个线程正在表 t 上请求或者持有 MDL 写锁，把 select 语句堵住了。</p><p>​        通过查询 sys.schema_table_lock_waits 这张表，就可以直接找出造成阻塞的 process id，把这个连接用 kill 命令断开即可。</p><p>​        通过 sys.innodb_lock_waits 查行锁</p><blockquote><p>select * from t sys.innodb_lock_waits where locked_table=<code>&#39;test&#39;.&#39;t&#39;</code>\G</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugy6bwf9j312t0u01df.jpg" alt="image-20210525103436523" loading="lazy"></p><p>这个信息很全，4 号线程是造成堵塞的罪魁祸首。而干掉这个罪魁祸首的方式，就是 KILL QUERY 4 或 KILL 4。实际上，这里 KILL 4 才有效。</p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="count-语句分析"><a href="#count-语句分析" class="headerlink" title="count(*) 语句分析"></a>count(*) 语句分析</h4><p>​        MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count(*) 的时候会直接返回这个数，效率很高；</p><p>​        InnoDB 引擎就麻烦了，执行 count(*) 的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。因为多版本并发控制（MVCC）的原因，InnoDB 表“应该返回多少行”也是不确定的。</p><p>​        count() 是一个聚合函数，对于返回的结果集，一行行地判断，如果 count 函数的参数不是 NULL，累计值就加 1，否则不加。最后返回累计值。</p><p>​        所以，count(*)、count(主键 id) 和 count(1) 都表示返回满足条件的结果集的总行数；而 count(字段），则表示返回满足条件的数据行里面，参数“字段”不为 NULL 的总个数。</p><p>​        <strong>按照效率排序的话，count(字段) &lt; count(主键id) &lt; count(1) &lt; count(*)，所以建议，尽量使用count(*)。</strong></p><h4 id="order-by-语句分析"><a href="#order-by-语句分析" class="headerlink" title="order by 语句分析"></a>order by 语句分析</h4><p>​        MySQL 会给每个线程分配一块内存用于<strong>快速排序</strong>，称为 <strong>sort_buffer</strong>。</p><p>​        explain 结果里的 Extra 这个字段中的“Using filesort”表示的就是需要排序。</p><p>​        sort_buffer_size，就是 MySQL 为排序开辟的内存（sort_buffer）的大小。如果要排序的数据量小于 sort_buffer_size，排序就在内存中完成。但如果排序数据量太大，内存放不下，则不得不利用磁盘临时文件辅助排序。</p><p>​        <strong>建立联合索引，甚至覆盖索引，可以避免排序过程。</strong></p><h4 id="join-语句分析"><a href="#join-语句分析" class="headerlink" title="join 语句分析"></a>join 语句分析</h4><p>​        直接使用 join 语句，MySQL 优化器可能会选择表 t1 或 t2 作为驱动表，改用 straight_join 让 MySQL 使用固定的连接方式执行查询，这样优化器只会按照指定的方式去 join。</p><blockquote><p>select * from t1 straight_join t2 on (t1.a=t2.a);</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugyez02rj31b005adjj.jpg" alt="image-20210525103450579" loading="lazy"></p><p>​        在这条语句里，<strong>被驱动表 t2 的字段 a 上有索引，join 过程用上了这个索引，因此效率是很高的。称之为“Index Nested-Loop Join”，简称 NLJ。</strong></p><p>​        <strong>如果被驱动表 t2 的字段 a 上没有索引，那每次到 t2 去匹配的时候，就要做一次全表扫描。这个效率很低。这个算法叫做“Simple Nested-Loop Join”的算法，简称 BNL。</strong></p><p>​        所以在判断要不要使用 join 语句时，就是看 explain 结果里面，Extra 字段里面有没有出现“Block Nested Loop”字样。</p><p>​        在决定哪个表做驱动表的时候，应该是两个表按照各自的条件过滤，过滤完成之后，计算参与 join 的各个字段的总数据量，数据量小的那个表，就是“小表”，应该作为驱动表。</p><p>​        <strong>Multi-Range Read 优化，这个优化的主要目的是尽量使用顺序读盘。因为大多数的数据都是按照主键递增顺序插入得到的，所以可以认为，如果按照主键的递增顺序查询的话，对磁盘的读比较接近顺序读，能够提升读性能。</strong></p><blockquote><p>select * from t1 where a&gt;=1 and a&lt;=100;</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugyp2ntij31as04c0wa.jpg" alt="image-20210525103506464" loading="lazy"></p><p>​        <strong>Batched Key Access(BKA) 算法。这个 BKA 算法，其实就是对 NLJ 算法的优化。</strong></p><p>​        NLJ 算法执行的逻辑是：从驱动表 t1，一行行地取出 a 的值，再到被驱动表 t2 去做 join。也就是说，对于表 t2 来说，每次都是匹配一个值。这时，MRR 的优势就用不上了。</p><p>​        既然如此，就把表 t1 的数据取出来一部分，先放到一个临时内存。这个临时内存就是 join_buffer。</p><h4 id="自增主键"><a href="#自增主键" class="headerlink" title="自增主键"></a>自增主键</h4><p><img src="https://tva1.sinaimg.cn/large/008i3skNly1gqugyxvutej31aw0hs4ix.jpg" alt="image-20210525103520405" loading="lazy"></p><p>​        表定义里面出现了一个 AUTO_INCREMENT=2，表示下一次插入数据时，如果需要自动生成自增值，会生成 id=2。</p><p>​        实际上，表的结构定义存放在后缀名为.frm 的文件中，但是并不会保存自增值。</p><ul><li><p>MyISAM 引擎的自增值保存在数据文件中。</p></li><li><p>InnoDB 引擎的自增值，其实是保存在了内存里，MySQL 8.0 版本后，才有了“自增值持久化”的能力。</p></li><li><p>MySQL 5.7 及之前的版本，自增值保存在内存里，并没有持久化。每次重启后，第一次打开表的时候，都会去找自增值的最大值 max(id)，然后将 max(id)+1  作为这个表当前的自增值。</p></li><li><ul><li>MySQL 8.0 版本，将自增值的变更记录在了 redo log 中，重启的时候依靠 redo log 恢复重启之前的值。</li></ul></li></ul><p>​        <strong>自增值修改机制</strong></p><ul><li><p>如果插入数据时 id 字段指定为 0、null 或未指定值，那么就把这个表当前的 AUTO_INCREMENT 值填到自增字段；</p></li><li><p>如果插入数据时 id 字段指定了具体的值 X ，就直接使用语句里指定的值 Y。</p></li><li><ul><li>如果 X &lt; Y，那么这个表的自增值不变；</li><li>如果 X≥Y，就需要把当前自增值修改为新的自增值。</li></ul></li></ul><p>​        <strong>新的自增值生成算法是：从 auto_increment_offset 开始，以 auto_increment_increment 为步长，持续叠加，直到找到第一个大于 X 的值，作为新的自增值。</strong></p><p>​        <strong>自增值的修改时机</strong></p><ol><li>执行器调用 InnoDB 引擎接口写入一行，传入的这一行的值(0,1,1);</li><li>InnoDB 发现用户没有指定自增 id 的值，获取表 t 当前的自增值 2；</li><li>将传入的行的值改成 (2,1,1);</li><li>将表的自增值改成 3；</li><li>继续执行插入数据操作，由于已经存在 c=1 的记录，所以报 Duplicate key error，语句返回。</li></ol><p>所以，sql执行报错了，自增值已经改变了，<strong>唯一键冲突是导致自增主键 id 不连续的第一种原因。同样地，事务回滚也会产生类似的现象，这就是第二种原因。</strong></p><p>​        <strong>批量插入的时候，由于系统预先不知道要申请多少个自增 id，所以就先申请一个，然后两个，然后四个，直到够用。这是主键 id 出现自增 id 不连续的第三种原因。</strong></p><h4 id="自增id用完怎么办"><a href="#自增id用完怎么办" class="headerlink" title="自增id用完怎么办"></a>自增id用完怎么办</h4><ol><li><strong>主键id</strong><pre><code>    **再申请下一个 id 时，得到的值保持不变。**所以到最大值之后，再申请id，由于id不变，所以插入会报主键冲突，如果数据量比较大，主键id应该用 bigint unsigned。默认是无符号整型 (unsigned int) ，4 个字节232-1（4294967295）。</code></pre></li><li><strong>系统row_id</strong><pre><code>    **如果创建的 InnoDB 表没有指定主键，那么 InnoDB 会创建一个不可见的，长度为 6 个字节的 row_id。**InnoDB 维护了一个全局的 dict_sys.row_id 值，所有无主键的 InnoDB 表，每插入一行数据，都把当前的 dict_sys.row_id 值作为要插入数据的 row_id，然后把 dict_sys.row_id 的值加 1。    实际上，在代码实现时 row_id 是一个长度为 8 字节的无符号长整型 (bigint unsigned)。但是，InnoDB 在设计时，给 row_id 留的只是 6 个节的长度，这样写到数据表中时只放了最后 6 个字节，所以 row_id 能写到数据表中的值，就有两个特征：    **248-1到 264 之间，row_id 会是0，264 之后会从0开始。**    **在 InnoDB 逻辑里，申请到 row_id=N 后，就将这行数据写入表中；如果表中已经存在 row_id=N 的行，新写入的行就会覆盖原有的行。**    **覆盖数据，就意味着数据丢失，影响的是数据可靠性；报主键冲突，是插入失败，影响的是可用性。而一般情况下，可靠性优先于可用性。**</code></pre></li><li><strong>Xid</strong><pre><code>    redo log 和 binlog 相配合的时候，提到了有一个共同的字段叫作 Xid。它在 MySQL 中是用来对应事务的。    MySQL 内部维护了一个全局变量 global_query_id，每次执行语句的时候将它赋值给 Query_id，然后给这个变量加 1。如果当前语句是这个事务执行的第一条语句，那么 MySQL 还会同时把 Query_id 赋值给这个事务的 Xid。    **而 global_query_id 是一个纯内存变量，重启之后就清零了。所以就知道了，在同一个数据库实例中，不同事务的 Xid 也是有可能相同的。**    **但是 MySQL 重启之后会重新生成新的 binlog 文件，这就保证了，同一个 binlog 文件里，Xid 一定是惟一的。**    **但是 global_query_id 定义的长度是 8 个字节，这个自增值的上限是 264-1。理论上也是可能重复的。**</code></pre></li><li><strong>trx_id</strong><pre><code>    **Xid 是由 server 层维护的。InnoDB 内部使用 Xid，就是为了能够在 InnoDB 事务和 server 之间做关联。但是，InnoDB 自己的 trx_id，是另外维护的。**    InnoDB 内部维护了一个 max_trx_id 全局变量，每次需要申请一个新的 trx_id 时，就获得 max_trx_id 的当前值，然后并将 max_trx_id 加 1。    **InnoDB 数据可见性的核心思想是：每一行数据都记录了更新它的 trx_id，当一个事务读到一行数据的时候，判断这个数据是否可见的方法，就是通过事务的一致性视图与这行数据的 trx_id 做对比。**    **对于正在执行的事务，可以从 information_schema.innodb_trx 表中看到事务的 trx_id。**</code></pre></li></ol><blockquote><p>​        update 和 delete 语句除了事务本身，还涉及到标记删除旧数据，也就是要把数据放到 purge 队列里等待后续物理删除，这个操作也会把 max_trx_id+1， 因此在一个事务中至少加 2；</p><p>​        InnoDB 的后台操作，比如表的索引信息统计这类操作，也是会启动内部事务的，因此你可能看到，trx_id 值并不是按照加 1 递增的。</p></blockquote><ol><li><pre><code>    **只读事务会分配一个特殊的，比较大的id，**把当前事务的 trx 变量的指针地址转成整数，再加上 248，使用这个算法，就可以保证以下两点：</code></pre></li><li><ol><li>因为同一个只读事务在执行期间，它的指针地址是不会变的，所以不论是在 innodb_trx 还是在 innodb_locks 表里，同一个只读事务查出来的 trx_id 就会是一样的。</li><li>如果有并行的多个只读事务，每个事务的 trx 变量的指针地址肯定不同。这样，不同的并发只读事务，查出来的 trx_id 就是不同的。</li></ol></li></ol><p>​        加上248是为了保证只读事务显示的 trx_id 值比较大，正常情况下就会区别于读写事务的 id。理论情况下也可能只读事务与读写事务相等，但是没有影响。</p><p>​        max_trx_id 会持久化存储，重启也不会重置为 0，那么从理论上讲，只要一个 MySQL 服务跑得足够久，就<strong>可能出现 max_trx_id 达到 248-1 的上限，然后从 0 开始的情况。当达到这个状态后，MySQL 就会持续出现一个脏读的 bug。因为后续的trx_id肯定比末尾那些trx_id大，能看到这些数据。</strong></p><ol><li><strong>thread_id</strong><pre><code>    系统保存了一个全局变量 thread_id_counter，每新建一个连接，就将 thread_id_counter 赋值给这个新连接的线程变量。定义的大小是 4 个字节，因此达到 232-1 后，它就会重置为 0，然后继续增加。但是，在 show processlist 里不会看到两个相同的 thread_id。因为 MySQL 设计了一个唯一数组的逻辑，给新线程分配 thread_id 的时候，逻辑代码是这样的：</code></pre></li></ol><blockquote><p>do {</p><p>new_id= thread_id_counter++;</p><p>} while (!thread_ids.insert_unique(new_id).second);</p></blockquote><h4 id="误删数据怎么办"><a href="#误删数据怎么办" class="headerlink" title="误删数据怎么办"></a>误删数据怎么办</h4><ol><li>delete 语句误删数据行：Flashback工具过闪回把数据恢复回来。 原理是修改 binlog 的内容，拿回原库重放。而能够使用这个方案的前提是，需要确保 binlog_format=row 和 binlog_row_image=FULL。</li></ol><blockquote><p>如何预防：把 sql_safe_updates 参数设置为 on。，delete 或者 update 语句必须有where条件，否则执行会报错。</p></blockquote><ol><li><p>误删库 / 表：全量备份，加增量日志，在应用日志的时候，需要跳过 12 点误操作的那个语句的 binlog：</p></li><li><ol><li>如果原实例没有使用 GTID 模式，只能在应用到包含 12 点的 binlog 文件的时候，先用–stop-position 参数执行到误操作之前的日志，然后再用–start-position 从误操作之后的日志继续执行；</li><li>如果实例使用了 GTID 模式，就方便多了。假设误操作命令的 GTID 是 gtid1，那么只需要执行 set gtid_next=gtid1;begin;commit; 先把这个 GTID 加到临时实例的 GTID 集合，之后按顺序执行 binlog 的时候，就会自动跳过误操作的语句。</li></ol></li></ol><blockquote><p>如何加速恢复：使用 mysqlbinlog 命令时，加上一个–database 参数，用来指定误删表所在的库。</p><p>在 start slave 之前，先通过执行﻿ ﻿change replication filter replicate_do_table = (tbl_name) 命令，就可以让临时库只同步误操作的表；</p></blockquote><p>​        <strong>延迟复制备库</strong>，一般的主备复制结构存在的问题是，如果主库上有个表被误删了，这个命令很快也会被发给所有从库，进而导致所有从库的数据表也都一起被误删了。延迟复制的备库是一种特殊的备库，通过 CHANGE MASTER TO MASTER_DELAY = N 命令，可以指定这个备库持续保持跟主库有 N 秒的延迟。</p><p>​        比如把 N 设置为 3600，这就代表了如果主库上有数据被误删了，并且在 1 小时内发现了这个误操作命令，这个命令就还没有在这个延迟复制的备库执行。这时候到这个备库上执行 stop slave，再通过之前介绍的方法，跳过误操作命令，就可以恢复出需要的数据。</p><p>​        预防误删库 / 表的方法，制定操作规范。这样做的目的，是避免写错要删除的表名。</p><ol><li>在删除数据表之前，必须先对表做改名操作。然后，观察一段时间，确保对业务无影响以后再删除这张表。</li><li>改表名的时候，要求给表名加固定的后缀（比如加_to_be_deleted)，然后删除表的动作必须通过管理系统执行。并且，管理系删除表的时候，只能删除固定后缀的表。</li></ol><h4 id="删除数据，表文件大小不变"><a href="#删除数据，表文件大小不变" class="headerlink" title="删除数据，表文件大小不变"></a>删除数据，表文件大小不变</h4><p>​        <strong>delete 命令其实只是把记录的位置，或者数据页标记为了“可复用”，但磁盘文件的大小是不会变的。</strong>也就是说，通过 delete 命令是不能回收表空间的。这些可以复用，而没有被使用的空间，看起来就像是“空洞”。</p><p>​        实际上，不止是删除数据会造成空洞，插入数据也会。如果数据是随机插入的，就可能造成索引的数据页分裂。更新索引上的值，可以理解为删除一个旧的值，再插入一个新值。不难理解，这也是会造成空洞的。</p><p>​        也就是说，<strong>经过大量增删改的表，都是可能是存在空洞的。所以，如果能够把这些空洞去掉，就能达到收缩表空间的目的。而重建表，就可以达到这样的目的。</strong></p><p>​        <strong>使用 alter table A engine=InnoDB 命令来重建表。MySQL 会自动完成转存数据、交换表名、删除旧表的操作。</strong></p><p>​        重建表的时候，InnoDB 不会把整张表占满，每个页留了 1/16 给后续的更新用。也就是说，其实重建表之后不是“最”紧凑的。</p><h4 id="怎么复制一张表"><a href="#怎么复制一张表" class="headerlink" title="怎么复制一张表"></a>怎么复制一张表</h4><ol><li>mysqldump 方法</li></ol><p>​        使用 mysqldump 命令将数据导出成一组 INSERT 语句。你可以使用下面的命令：</p><blockquote><p>mysqldump -h$host -P$port -u$user –add-locks=0 –no-create-info –single-transaction  –set-gtid-purged=OFF db1 t –where=”a&gt;900” –result-file=/client_tmp/t.sql</p></blockquote><p>​        然后可以通过下面这条命令，将这些 INSERT 语句放到 db2 库里去执行。</p><blockquote><p>mysql -h127.0.0.1 -P13000  -uroot db2 -e “source /client_tmp/t.sql”</p></blockquote><ol><li>导出 CSV 文件</li></ol><p>​        直接将结果导出成.csv 文件。MySQL 提供了下面的语法，用来将查询结果导出到服务端本地目录：</p><blockquote><p>select * from db1.t where a&gt;900 into outfile ‘/server_tmp/t.csv’;</p></blockquote><p>​        然后用下面的 load data 命令将数据导入到目标表 db2.t 中。</p><blockquote><p>load data infile ‘/server_tmp/t.csv’ into table db2.t;</p></blockquote><ol><li>物理拷贝方法</li></ol><p>​        直接拷贝文件是不行的，需要在数据字典中注册。</p><p>​        MySQL 5.6 版本引入了可传输表空间(transportable tablespace) 的方法，，可以通过导出 + 导入表空间的方式，实现物理拷贝表的功能。</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql事务的四种隔离级别</title>
      <link href="/task/2021/07/01/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/task/2021/07/01/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="1-事务的基本要素"><a href="#1-事务的基本要素" class="headerlink" title="1 事务的基本要素"></a>1 事务的基本要素</h3><ul><li><p>原子性（Atomicity）：事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。也就是说事务是一个不可分割的整体，就像化学中学过的原子，是物质构成的基本单位。</p><p>原子性强调的是事务不可分隔的状态，只要存在间隙，就不是原子性，各种锁的机制也是基于原子性产生，锁的目的就是为了保证在sql执行的过程中阻止其他线程的sql影响形成脏数据</p></li><li><p>一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</p><p>一致性强调的是事务前后的状态，任务只有成功和失败，不存在第三种情况。</p></li><li><p>隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</p><p>隔离性强调的是多个事务互不影响，开启一个事务相当于开启了一片独立的空间，多个独立的空间互不影响，但是最后会把结束的结果汇总到数据库上</p></li><li><p>持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</p><p>持久性强调的是事务执行完毕后，事务本身就不存在了，留下的只有事务执行的结果，不可回滚</p></li></ul><h3 id="2-事务的并发问题"><a href="#2-事务的并发问题" class="headerlink" title="2 事务的并发问题"></a>2 事务的并发问题</h3><ul><li>脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li></ul><ul><li>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</li><li>幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li></ul><p>　　小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</p><p>![image-20210616164055048](/Users/apple/Library/Application Support/typora-user-images/image-20210616164055048.png)</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流畅的python学习记录</title>
      <link href="/task/2021/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/task/2021/06/27/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%B5%81%E7%95%85%E7%9A%84python%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="5f490eafc869853318af09391d8180ceca0d1aec510a4c024236d0409c06e31f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/task/lib/hbe.js"></script><link href="/task/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/task/2021/06/27/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis/"/>
      <url>/task/2021/06/27/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>[TOC]</p><h2 id="一、redis简介"><a href="#一、redis简介" class="headerlink" title="一、redis简介"></a>一、redis简介</h2><p>介绍：</p><p>redis是一个<strong>key-value</strong>存储系统。和Memcached类似，它支持存储的value类型相对更多，包括<strong>string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）</strong>。这些数据类型都支持<strong>push/pop、add/remove</strong>及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)<strong>同步</strong></p><p>Q：为什么redis这么快</p><p>A：用了io多路复用减少了io操作对资源的消耗，在内存中使用，单线程单进程，避免了线程之前数据交互的资源消耗</p><h3 id="1-使用redis的好处"><a href="#1-使用redis的好处" class="headerlink" title="1 使用redis的好处"></a>1 使用redis的好处</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> 速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比mysql这种关系型数据库速度更快，原因是查找方式和存储方式</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 支持丰富数据类型，支持string，list，set，sorted set，hash<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行<span class="token comment" spellcheck="true"># 事务性支持也没那么好，如果需要事务严格遵守的流程，比如转账功能，必定用的还是mysql等</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</code></pre><h3 id="2-redis相比于memcached的优势"><a href="#2-redis相比于memcached的优势" class="headerlink" title="2 redis相比于memcached的优势"></a>2 redis相比于memcached的优势</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> redis的速度比memcached快很多（其实差不多，分具体场景）<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> redis可以持久化其数据</code></pre><h3 id="3-redis常见的性能问题和解决方案"><a href="#3-redis常见的性能问题和解决方案" class="headerlink" title="3 redis常见的性能问题和解决方案"></a>3 redis常见的性能问题和解决方案</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> 如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> 尽量避免在压力很大的主库上增加从库<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> 主从复制不要用图状结构，用单向链表结构更为稳定，即：Master <span class="token operator">&lt;</span><span class="token operator">-</span> Slave1 <span class="token operator">&lt;</span><span class="token operator">-</span> Slave2 <span class="token operator">&lt;</span><span class="token operator">-</span> Slave3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</code></pre><h3 id="4-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"><a href="#4-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据" class="headerlink" title="4 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据"></a>4 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h3><pre class=" language-python"><code class="language-python"> 相关知识：redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。redis 提供 <span class="token number">6</span>种数据淘汰策略：voltile<span class="token operator">-</span>lru：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中挑选最近最少使用的数据淘汰volatile<span class="token operator">-</span>ttl：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中挑选将要过期的数据淘汰volatile<span class="token operator">-</span>random：从已设置过期时间的数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>expires）中任意选择数据淘汰allkeys<span class="token operator">-</span>lru：从数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dict）中挑选最近最少使用的数据淘汰allkeys<span class="token operator">-</span>random：从数据集（server<span class="token punctuation">.</span>db<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dict）中任意选择数据淘汰no<span class="token operator">-</span>enviction（驱逐）：禁止驱逐数据</code></pre><h3 id="5-redis-最适合的场景"><a href="#5-redis-最适合的场景" class="headerlink" title="5 redis 最适合的场景"></a>5 redis 最适合的场景</h3><pre class=" language-python"><code class="language-python">Redis最适合所有数据<span class="token keyword">in</span><span class="token operator">-</span>momory的场景，虽然Redis也提供持久化功能，但实际更多的是一个disk<span class="token operator">-</span>backed的功能，跟传统意义上的持久化有比较大的差别，那么可能大家就会有疑问，似乎Redis更像一个加强版的Memcached，那么何时使用Memcached<span class="token punctuation">,</span>何时使用Redis呢?       如果简单地比较Redis与Memcached的区别，大多数都会得到以下观点：     <span class="token number">1</span> 、Redis不仅仅支持简单的k<span class="token operator">/</span>v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。     <span class="token number">2</span> 、Redis支持数据的备份，即master<span class="token operator">-</span>slave模式的数据备份。     <span class="token number">3</span> 、Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。（<span class="token number">1</span>）、会话缓存（Session Cache）最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？幸运的是，随着 Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。（<span class="token number">2</span>）、全页缓存（FPC）除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。此外，对WordPress的用户来说，Pantheon有一个非常好的插件  wp<span class="token operator">-</span>redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。（<span class="token number">3</span>）、队列Reids在内存存储引擎领域的一大优点是提供 list 和 set 操作，这使得Redis能作为一个很好的消息队列平台来使用。Redis作为队列使用的操作，就类似于本地程序语言（如Python）对 list 的 push<span class="token operator">/</span>pop 操作。如果你快速的在Google中搜索“Redis queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。（<span class="token number">4</span>），排行榜<span class="token operator">/</span>计数器Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。所以，我们要从排序集合中获取到排名最靠前的<span class="token number">10</span>个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：ZRANGE user_scores <span class="token number">0</span> <span class="token number">10</span> WITHSCORESAgora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。（<span class="token number">5</span>）、发布<span class="token operator">/</span>订阅最后（但肯定不是最不重要的）是Redis的发布<span class="token operator">/</span>订阅功能。发布<span class="token operator">/</span>订阅的使用场景确实非常多。我已看见人们在社交网络连接中使用，还可作为基于发布<span class="token operator">/</span>订阅的脚本触发器，甚至用Redis的发布<span class="token operator">/</span>订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。Redis提供的所有特性中，我感觉这个是喜欢的人最少的一个，虽然它为用户提供如果此多功能。</code></pre><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>安装好redis后，顺便可以安装一个Another Redis Desktop Manager，这是redis版的navicat</p><ul><li><code>redis-server</code>启动服务端（通常会自动设成自启服务，不需要手动开）</li><li><code>redis-cli</code>启动客户端</li><li>python中安装操作redis的模块  <code>pip install redis</code></li></ul><h3 id="1-python操作redis之普通链接"><a href="#1-python操作redis之普通链接" class="headerlink" title="1 python操作redis之普通链接"></a>1 python操作redis之普通链接</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token comment" spellcheck="true"># Redis实例化有很多可以设定的参数，其中decode_responses=True是把拿到的二进制数据转换成字符串</span>conn <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>decode_responses<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'hz'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="2-python操作redis之连接池"><a href="#2-python操作redis之连接池" class="headerlink" title="2 python操作redis之连接池"></a>2 python操作redis之连接池</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用连接池来管理链接对象，如果每一次请求都要建立链接，当请求量很大时会造成内存堵塞</span><span class="token comment" spellcheck="true"># 连接池的连接数量是固定的，超过这个最大链接数的其他链接只能在外面等着</span><span class="token comment" spellcheck="true"># 这里注意连接池要做成单例模式，不然每次链接进来都要实例化一个连接池，那限定的意义就没了</span><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span>r<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token string">'Bar'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="三、redis字符串操作"><a href="#三、redis字符串操作" class="headerlink" title="三、redis字符串操作"></a>三、redis字符串操作</h2><p><strong>set(name, value, ex=None, px=None, nx=False, xx=False)</strong></p><pre><code>在Redis中设置值，默认，不存在则创建，存在则修改参数：     ex，过期时间（秒）     px，过期时间（毫秒）     nx，如果设置为True，则只有name不存在时，当前set操作才执行,值存在，就修改不了，执行没效果     xx，如果设置为True，则只有name存在时，当前set操作才执行，值存在才能修改，值不存在，不会设置新值</code></pre><p><strong>setnx(name, value)</strong></p><pre><code>设置值，只有name不存在时，执行设置操作（添加）,如果存在，不会修改</code></pre><p><strong>setex(name, value, time)</strong></p><pre><code># 设置值# 参数：    # time，过期时间（数字秒 或 timedelta对象）</code></pre><p><strong>psetex(name, time_ms, value)</strong></p><pre><code># 设置值# 参数：    # time_ms，过期时间（数字毫秒 或 timedelta对象</code></pre><p><strong>mset(*args, \</strong>kwargs)**</p><pre><code>批量设置值如：    mset(k1=&#39;v1&#39;, k2=&#39;v2&#39;)    或    mget(&#123;&#39;k1&#39;: &#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;)</code></pre><p><strong>get(name)</strong></p><pre><code>获取值</code></pre><p><strong>mget(keys, *args)</strong></p><pre><code>批量获取如：    mget(&#39;k1&#39;, &#39;k2&#39;)    或    r.mget([&#39;k3&#39;, &#39;k4&#39;])</code></pre><p><strong>getset(name, value)</strong></p><pre><code>设置新值并获取原来的值</code></pre><p><strong>getrange(key, start, end)</strong></p><pre><code># 获取子序列（根据字节获取，非字符）# 参数：    # name，Redis 的 name    # start，起始位置（字节）    # end，结束位置（字节）# 如： &quot;刘清政&quot; ，0-3表示 &quot;刘&quot;</code></pre><p><strong>setrange(name, offset, value)</strong></p><pre><code># 修改字符串内容，从指定字符串索引开始向后替换（新值太长时，则向后添加）# 参数：    # offset，字符串的索引，字节（一个汉字三个字节）    # value，要设置的值</code></pre><p><strong>setbit(name, offset, value)</strong></p><pre><code># 对name对应值的二进制表示的位进行操作# 参数：    # name，redis的name    # offset，位的索引（将值变换成二进制后再进行索引）    # value，值只能是 1 或 0# 注：如果在Redis中有一个对应： n1 = &quot;foo&quot;，        那么字符串foo的二进制表示为：01100110 01101111 01101111    所以，如果执行 setbit(&#39;n1&#39;, 7, 1)，则就会将第7位设置为1，        那么最终二进制则变成 01100111 01101111 01101111，即：&quot;goo&quot;</code></pre><p><strong>getbit(name, offset)</strong></p><pre><code># 获取name对应的值的二进制表示中的某位的值 （0或1）</code></pre><p><strong>bitcount(key, start=None, end=None)</strong></p><pre><code># 获取name对应的值的二进制表示中 1 的个数# 参数：    # key，Redis的name    # start，位起始位置    # end，位结束位置</code></pre><p><strong>bitop(operation, dest, *keys)</strong></p><pre><code># 获取多个值，并将值做位运算，将最后的结果保存至新的name对应的值# 参数：    # operation,AND（并） 、 OR（或） 、 NOT（非） 、 XOR（异或）    # dest, 新的Redis的name    # *keys,要查找的Redis的name# 如：    bitop(&quot;AND&quot;, &#39;new_name&#39;, &#39;n1&#39;, &#39;n2&#39;, &#39;n3&#39;)    # 获取Redis中n1,n2,n3对应的值，然后讲所有的值做位运算（求并集），然后将结果保存 new_name 对应的值中</code></pre><p><strong>strlen(name)</strong></p><pre><code># 返回name对应值的字节长度（一个汉字3个字节）</code></pre><p><strong>incr(self, name, amount=1)</strong></p><pre><code># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。# 参数：    # name,Redis的name    # amount,自增数（必须是整数）# 注：同incrby</code></pre><p><strong>incrbyfloat(self, name, amount=1.0)</strong></p><pre><code># 自增 name对应的值，当name不存在时，则创建name＝amount，否则，则自增。# 参数：    # name,Redis的name    # amount,自增数（浮点型）</code></pre><p><strong>decr(self, name, amount=1)</strong></p><pre><code># 自减 name对应的值，当name不存在时，则创建name＝amount，否则，则自减。# 参数：    # name,Redis的name    # amount,自减数（整数）</code></pre><p><strong>append(key, value)</strong></p><pre><code># 在redis name对应的值后面追加内容# 参数：    key, redis的name    value, 要追加的字符串</code></pre><p><strong>总结</strong>：</p><p>需要注意的操作：</p><ul><li>set  存值，有很多可以修改的参数，主要是可以设置超时时间</li><li>get  获取值，没有返回None</li><li>mset 批量存值，可以传一个字典，也可直接传关键字参数</li><li>mget 批量取值</li><li>incr name存在就自增，没有就新增，并设置自增最小值</li><li>decr 自减，本质上和上面一样，甚至incr设置为负数也能完成一样的操作</li><li>append 对指定的key的value拼接字符串</li></ul><h2 id="四、redis哈希类型操作"><a href="#四、redis哈希类型操作" class="headerlink" title="四、redis哈希类型操作"></a>四、redis哈希类型操作</h2><p><strong>hset(name, key, value)</strong></p><pre><code># name对应的hash中设置一个键值对（不存在，则创建；否则，修改）# 参数：    # name，redis的name    # key，name对应的hash中的key    # value，name对应的hash中的value# 注：    # hsetnx(name, key, value),当name对应的hash中不存在当前key时则创建（相当于添加）</code></pre><p><strong>hmset(name, mapping)</strong></p><pre><code># 在name对应的hash中批量设置键值对# 参数：    # name，redis的name    # mapping，字典，如：&#123;&#39;k1&#39;:&#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;# 如：    # r.hmset(&#39;xx&#39;, &#123;&#39;k1&#39;:&#39;v1&#39;, &#39;k2&#39;: &#39;v2&#39;&#125;)</code></pre><p><strong>hget(name,key)</strong></p><pre><code># 在name对应的hash中获取根据key获取value</code></pre><p><strong>hmget(name, keys, *args)</strong></p><pre><code># 在name对应的hash中获取多个key的值# 参数：    # name，reids对应的name    # keys，要获取key集合，如：[&#39;k1&#39;, &#39;k2&#39;, &#39;k3&#39;]    # *args，要获取的key，如：k1,k2,k3# 如：    # r.mget(&#39;xx&#39;, [&#39;k1&#39;, &#39;k2&#39;])    # 或    # print r.hmget(&#39;xx&#39;, &#39;k1&#39;, &#39;k2&#39;)</code></pre><p><strong>hgetall(name)</strong></p><pre><code># 获取name对应hash的所有键值print(re.hgetall(&#39;xxx&#39;).get(b&#39;name&#39;))</code></pre><p><strong>hlen(name)</strong></p><pre><code># 获取name对应的hash中键值对的个数</code></pre><p><strong>hkeys(name)</strong></p><pre><code># 获取name对应的hash中所有的key的值</code></pre><p><strong>hvals(name)</strong></p><pre><code># 获取name对应的hash中所有的value的值</code></pre><p><strong>hexists(name, key)</strong></p><pre><code># 检查name对应的hash是否存在当前传入的key</code></pre><p><strong>hdel(name,*keys)</strong></p><pre><code># 将name对应的hash中指定key的键值对删除print(re.hdel(&#39;xxx&#39;,&#39;sex&#39;,&#39;name&#39;))</code></pre><p><strong>hincrby(name, key, amount=1)</strong></p><pre><code># 自增name对应的hash中的指定key的值，不存在则创建key=amount# 参数：    # name，redis中的name    # key， hash对应的key    # amount，自增数（整数）</code></pre><p><strong>hincrbyfloat(name, key, amount=1.0)</strong></p><pre><code># 自增name对应的hash中的指定key的值，不存在则创建key=amount# 参数：    # name，redis中的name    # key， hash对应的key    # amount，自增数（浮点数）# 自增name对应的hash中的指定key的值，不存在则创建key=amount</code></pre><p><strong>hscan(name, cursor=0, match=None, count=None)</strong></p><pre><code># 增量式迭代获取，对于数据大的数据非常有用，hscan可以实现分片的获取数据，并非一次性将数据全部获取完，从而放置内存被撑爆# 参数：    # name，redis的name    # cursor，游标（基于游标分批取获取数据）    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # 第一次：cursor1, data1 = r.hscan(&#39;xx&#39;, cursor=0, match=None, count=None)    # 第二次：cursor2, data1 = r.hscan(&#39;xx&#39;, cursor=cursor1, match=None, count=None)    # ...    # 直到返回值cursor的值为0时，表示数据已经通过分片获取完毕</code></pre><p><strong>hscan_iter(name, match=None, count=None)</strong></p><pre><code># 利用yield封装hscan创建生成器，实现分批去redis中获取数据# 参数：    # match，匹配指定key，默认None 表示所有的key    # count，每次分片最少获取个数，默认None表示采用Redis的默认分片个数# 如：    # for item in r.hscan_iter(&#39;xx&#39;):    #     print item</code></pre><p><strong>总结：</strong></p><p>需要注意的操作：</p><ul><li>hset 给name的value设置{key,value}的值，存在就修改</li><li>hget 获取值</li><li>hmset 批量设置，mapping参数放一个字典</li><li>hmget 批量获取</li><li>hincrby 自增name对应的key值，不存在则创建key：amout（自增数），只能自增value是数字的类型</li><li>hgetall 获取name对于的hash的所有键值</li><li>hscan_iter  利用yield创建生成器，分批去redis中取值</li></ul><h2 id="五、redis链表类型操作"><a href="#五、redis链表类型操作" class="headerlink" title="五、redis链表类型操作"></a>五、redis链表类型操作</h2><p><strong>lpush(name,values)</strong></p><pre><code># 在name对应的list中添加元素，每个新的元素都添加到列表的最左边# 如：    # r.lpush(&#39;oo&#39;, 11,22,33)    # 保存顺序为: 33,22,11# 扩展：    # rpush(name, values) 表示从右向左操作</code></pre><p><strong>lpushx(name,value)</strong></p><pre><code># 在name对应的list中添加元素，只有name已经存在时，值添加到列表的最左边# 更多：    # rpushx(name, value) 表示从右向左操作</code></pre><p><strong>llen(name)</strong></p><pre><code># name对应的list元素的个数</code></pre><p><strong>linsert(name, where, refvalue, value))</strong></p><pre><code># 在name对应的列表的某一个值前或后插入一个新值# 参数：    # name，redis的name    # where，BEFORE或AFTER(小写也可以)    # refvalue，标杆值，即：在它前后插入数据（如果存在多个标杆值，以找到的第一个为准）    # value，要插入的数据</code></pre><p><strong>r.lset(name, index, value)</strong></p><pre><code># 对name对应的list中的某一个索引位置重新赋值# 参数：    # name，redis的name    # index，list的索引位置    # value，要设置的值</code></pre><p><strong>r.lrem(name, value, num)</strong></p><pre><code># 在name对应的list中删除指定的值# 参数：    # name，redis的name    # value，要删除的值    # num，  num=0，删除列表中所有的指定值；           # num=2,从前到后，删除2个；           # num=-2,从后向前，删除2个</code></pre><p><strong>lpop(name)</strong></p><pre><code># 在name对应的列表的左侧获取第一个元素并在列表中移除，返回值则是第一个元素# 更多：    # rpop(name) 表示从右向左操作</code></pre><p><strong>lindex(name, index)</strong></p><pre><code>在name对应的列表中根据索引获取列表元素</code></pre><p><strong>lrange(name, start, end)</strong></p><pre><code># 在name对应的列表分片获取数据# 参数：    # name，redis的name    # start，索引的起始位置    # end，索引结束位置  print(re.lrange(&#39;aa&#39;,0,re.llen(&#39;aa&#39;)))</code></pre><p><strong>ltrim(name, start, end)</strong></p><pre><code># 在name对应的列表中移除没有在start-end索引之间的值# 参数：    # name，redis的name    # start，索引的起始位置    # end，索引结束位置（大于列表长度，则代表不移除任何）</code></pre><p><strong>rpoplpush(src, dst)</strong></p><pre><code># 从一个列表取出最右边的元素，同时将其添加至另一个列表的最左边# 参数：    # src，要取数据的列表的name    # dst，要添加数据的列表的name</code></pre><p><strong>blpop(keys, timeout)</strong></p><pre><code># 将多个列表排列，按照从左到右去pop对应列表的元素# 参数：    # keys，redis的name的集合    # timeout，超时时间，当元素所有列表的元素获取完之后，阻塞等待列表内有数据的时间（秒）, 0 表示永远阻塞# 更多：    # r.brpop(keys, timeout)，从右向左获取数据爬虫实现简单分布式：多个url放到列表里，往里不停放URL，程序循环取值，但是只能一台机器运行取值，可以把url放到redis中，多台机器从redis中取值，爬取数据，实现简单分布式</code></pre><p><strong>brpoplpush(src, dst, timeout=0)</strong></p><pre><code># 从一个列表的右侧移除一个元素并将其添加到另一个列表的左侧# 参数：    # src，取出并要移除元素的列表对应的name    # dst，要插入元素的列表对应的name    # timeout，当src对应的列表中没有数据时，阻塞等待其有数据的超时时间（秒），0 表示永远阻塞</code></pre><p><strong>自定义增量迭代</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 由于redis类库中没有提供对列表元素的增量迭代，如果想要循环name对应的列表的所有元素，那么就需要：</span>    <span class="token comment" spellcheck="true"># 1、获取name对应的所有列表</span>    <span class="token comment" spellcheck="true"># 2、循环列表</span><span class="token comment" spellcheck="true"># 但是，如果列表非常大，那么就有可能在第一步时就将程序的内容撑爆，所有有必要自定义一个增量迭代的功能：</span><span class="token keyword">import</span> redisconn<span class="token operator">=</span>redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># conn.lpush('test',*[1,2,3,4,45,5,6,7,7,8,43,5,6,768,89,9,65,4,23,54,6757,8,68])</span><span class="token comment" spellcheck="true"># conn.flushall()</span><span class="token keyword">def</span> <span class="token function">scan_list</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>count<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    index<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        data_list<span class="token operator">=</span>conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span>name<span class="token punctuation">,</span>index<span class="token punctuation">,</span>count<span class="token operator">+</span>index<span class="token number">-1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data_list<span class="token punctuation">:</span>            <span class="token keyword">return</span>        index<span class="token operator">+=</span>count        <span class="token keyword">for</span> item <span class="token keyword">in</span> data_list<span class="token punctuation">:</span>            <span class="token keyword">yield</span> item<span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> scan_list<span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span></code></pre><p><strong>总结</strong>：</p><p>需要注意的操作：</p><ul><li>lpush 每个新元素都添加到列表的最左边，最早来的在最后，rpush与之相反</li><li>lpop 删除name对应列表的左侧的第一个值，并返回，rpop与之相反</li><li>blpop 将多个列表排列从左到右pop对于列表的元素阻塞时间内如果还有新增数据，就会继续pop</li><li>lrange 切片start开始，end结束，闭区间</li><li>llen 统计元素个数</li></ul><h2 id="六、其他操作"><a href="#六、其他操作" class="headerlink" title="六、其他操作"></a>六、其他操作</h2><p><strong>delete(*names)</strong></p><pre><code># 根据删除redis中的任意数据类型</code></pre><p><strong>exists(name)</strong></p><pre><code># 检测redis的name是否存在</code></pre><p><strong>keys(pattern=’*‘)</strong></p><pre><code># 根据模型获取redis的name（其实就是通过正则匹配）# 更多：    # KEYS * 匹配数据库中所有 key 。    # KEYS h?llo 匹配 hello ， hallo 和 hxllo 等。    # KEYS h*llo 匹配 hllo 和 heeeeello 等。    # KEYS h[ae]llo 匹配 hello 和 hallo ，但不匹配 hillo </code></pre><p><strong>expire(name ,time)</strong></p><pre><code># 为某个redis的某个name设置超时时间</code></pre><p><strong>rename(src, dst)</strong></p><pre><code># 对redis的name重命名为</code></pre><p><strong>move(name, db))</strong></p><pre><code># 将redis的某个值移动到指定的db下（换数据库）</code></pre><p><strong>randomkey()</strong></p><pre><code># 随机获取一个redis的name（不删除）（抽奖）</code></pre><p><strong>type(name)</strong></p><pre><code># 获取name对应值的类型</code></pre><p><strong>scan(cursor=0, match=None, count=None)</strong><br><strong>scan_iter(match=None, count=None)</strong></p><pre><code># 同字符串操作，用于增量迭代获取key</code></pre><h2 id="七、管道"><a href="#七、管道" class="headerlink" title="七、管道"></a>七、管道</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis支持事务</span><span class="token comment" spellcheck="true"># 管道实现事务</span><span class="token comment" spellcheck="true"># import redis</span><span class="token comment" spellcheck="true"># pool = redis.ConnectionPool(host='127.0.0.1', port=6379)</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># conn = redis.Redis(connection_pool=pool)</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># # pipe = r.pipeline(transaction=False)</span><span class="token comment" spellcheck="true"># pipe = conn.pipeline(transaction=True)</span><span class="token comment" spellcheck="true"># pipe.multi() # 开启管道，开启事务</span><span class="token comment" spellcheck="true"># pipe.set('name', 'alex')</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># pipe.set('role', 'sb')</span><span class="token comment" spellcheck="true"># </span><span class="token comment" spellcheck="true"># pipe.execute()  # 这句话，才真正的去执行，结束管道</span></code></pre><h2 id="八、django中使用redis"><a href="#八、django中使用redis" class="headerlink" title="八、django中使用redis"></a>八、django中使用redis</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一（通用方式）</span><span class="token comment" spellcheck="true"># 方式二：django-redis</span>    <span class="token operator">-</span>pip install django<span class="token operator">-</span>redis    <span class="token operator">-</span>setting中配置        CACHES <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">"default"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"BACKEND"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.cache.RedisCache"</span><span class="token punctuation">,</span>                    <span class="token string">"LOCATION"</span><span class="token punctuation">:</span> <span class="token string">"redis://127.0.0.1:6379"</span><span class="token punctuation">,</span>                    <span class="token string">"OPTIONS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"CLIENT_CLASS"</span><span class="token punctuation">:</span> <span class="token string">"django_redis.client.DefaultClient"</span><span class="token punctuation">,</span>                        <span class="token string">"CONNECTION_POOL_KWARGS"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"max_connections"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true"># "PASSWORD": "123",</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>       <span class="token operator">-</span>使用两种方式        <span class="token number">1</span> 使用cache        <span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache        cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>         <span class="token number">2</span> 直接使用conn对象        <span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connection        conn <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="九、接口缓存"><a href="#九、接口缓存" class="headerlink" title="九、接口缓存"></a>九、接口缓存</h2><p>接口缓存简单来说就是把需要经常从mysql数据查的数据放到redis等内存数据库（快速读取）</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 首页轮播图数据缓存到redis中</span><span class="token keyword">def</span> <span class="token function">list</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># response=super().list(request, *args, **kwargs)</span>    <span class="token comment" spellcheck="true"># 把data的数据加缓存</span>    <span class="token comment" spellcheck="true"># 1 先去缓存拿数据</span>    banner_list<span class="token operator">=</span>cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> banner_list<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'走数据库了'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 缓存中没有，去数据库拿</span>        response <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>list<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 加到缓存</span>        cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>data<span class="token operator">=</span>banner_list<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%20%E5%9F%BA%E7%A1%80/"/>
      <url>/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%20%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="java-基础"><a href="#java-基础" class="headerlink" title="java 基础"></a>java 基础</h2><h3 id="引"><a href="#引" class="headerlink" title="引"></a>引</h3><ul><li>所有标识符都应该以字母，$，下划线开头</li><li>java是强类型语言，变量使用必须和服规定且先定义后使用</li></ul><h3 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h3><h4 id="1-基本类型（8个）"><a href="#1-基本类型（8个）" class="headerlink" title="1 基本类型（8个）"></a>1 基本类型（8个）</h4><p>注意点：</p><ul><li>定义的时候不能超过范围</li><li>定义long的最后需要加L，定义float的最后需要加F，使用的时候照常（不加问题不大）</li><li>字符用char，单引号，字符串用String，双引号</li><li>String是类，不是基本数据类型</li></ul><p>数值类型：</p><ul><li>byte占一个字节，范围：-128-127</li><li>short占2个字节，范围：-32768-32767</li><li>int占4个字节，范围：-21亿-21亿</li><li>long占8个字节，范围-19位-19位</li><li>float占4个字节</li><li>double占8个字节</li></ul><p>布尔类型：boolean，占一位（bit）</p><p>字符类型：char，占两个字节（byte）</p><p><strong>整数扩展</strong></p><p>进制</p><ul><li>二进制 0b开头</li><li>十进制</li><li>八进制 0开头</li><li>十六进制 0x开头</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">0b10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num3 <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">10</span><span class="token number">16</span><span class="token number">2</span><span class="token number">8</span></code></pre><p>数字写法</p><p>jdk7新特性，数字可以用下划线间隔，且不影响数字本身的使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> 10_0000_0000</code></pre><p><strong>浮点数扩展</strong></p><p>浮点数的特点：有限长，离散，舍入误差，大约，接近但是不等于</p><p><strong>最好完全避免用浮点数进行比较</strong></p><p>在必要用到浮点数的情况下，用数学工具类：BigDecimal</p><p><strong>扩展1</strong></p><p>原因：浮点数有误差</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">float</span> num <span class="token operator">=</span> <span class="token number">0.1f</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> num1 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">==</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">0.1</span><span class="token number">0.1</span><span class="token boolean">false</span></code></pre><p><strong>扩展2</strong></p><p>原因：超出了浮点数的范围</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">float</span> num <span class="token operator">=</span> <span class="token number">213123213123123f</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> num1 <span class="token operator">=</span> num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">==</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token boolean">true</span><span class="token number">2.13123206E14</span><span class="token number">2.13123206E14</span></code></pre><p><strong>字符扩展</strong></p><p>所有字符本质都是数字</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// unicode编码表中a=97</span>        <span class="token keyword">char</span> word <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> word1 <span class="token operator">=</span> <span class="token string">'啊'</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 强制类型转换</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>word1<span class="token punctuation">)</span><span class="token punctuation">;</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'\u0061'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>a啊<span class="token number">97</span><span class="token number">21834</span>a</code></pre><p>转义字符</p><ul><li>\n换行</li><li>\t制表符</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String a <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    String b <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>    String c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token boolean">true</span><span class="token boolean">false</span><span class="token boolean">false</span></code></pre><h4 id="2-引用类型"><a href="#2-引用类型" class="headerlink" title="2 引用类型"></a>2 引用类型</h4><p>类，接口，数组</p><h4 id="3-类型转换"><a href="#3-类型转换" class="headerlink" title="3 类型转换"></a>3 类型转换</h4><ul><li>在数据运算中，不同类型的数据先转换成相同类型的才能进行操作</li><li>在转换的过程中需要注意内存溢出，即转换的类型不够容纳原来的数据长度</li><li>强制类型转化：高容量数据类型-低容量数据类型</li><li>自动类型转化：低容量数据类型-高容量数据类型</li><li>转换时可能会存在精度丢失</li></ul><blockquote><p>从低到高</p><p>byte short char int long float double</p></blockquote><pre class=" language-java"><code class="language-java">强制类型转化格式<span class="token punctuation">(</span>类型<span class="token punctuation">)</span>变量<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span><span class="token number">122</span></code></pre><p>内存溢出</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// byte内存溢出了，byte容量：-128-127</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token number">128</span><span class="token operator">-</span><span class="token number">128</span></code></pre><p>自动类型转换</p><pre class=" language-java"><code class="language-java">从低到高直接转换<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token keyword">long</span> b <span class="token operator">=</span> a </code></pre><p>计算时超出限制</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> 10_0000_0000<span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> y <span class="token operator">=</span> b<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以在计算过程中转型</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><ul><li>java中变量是最基本的存储单元，其中包括变量名，类型，作用域</li><li>类型可以是基本数据类型，也可以是引用类型</li><li>实例变量是类的对象的变量，类变量是类本身的变量</li><li>实例变量和类变量可以不初始化，这样使用就是默认值，局部变量必须初始化</li><li>整数类型：0，浮点数：0.0 字符类型：’’，布尔类型：false，除了基本类型都是null</li><li>除了第一个单词，后面单词首字母大写</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类变量</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例变量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部变量</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>不同作用域变量的使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类变量</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实例变量 必须实例化类后才能使用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">33</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 局部变量</span>        Hello hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="三、常量"><a href="#三、常量" class="headerlink" title="三、常量"></a>三、常量</h3><p>通常大写字母下划线分割</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> 类型 名字 <span class="token operator">=</span> 值</code></pre><h3 id="四、运算符"><a href="#四、运算符" class="headerlink" title="四、运算符"></a>四、运算符</h3><ul><li>算数运算符 + - * / %（取余） ++ –</li><li>赋值运算符 =</li><li>关系运算符 &gt; &lt; &gt;= &lt;= == !=  instanceof类似python中的isinstance，判断类和对象的关系</li><li>逻辑运算符：&amp;&amp; || !</li><li>条件运算符：？：</li><li>扩展赋值运算符：+= -= *= /=</li><li>位运算：&amp; | ！ &gt;&gt; &lt;&lt;</li><li>如果运算过程中出现了long类型，结果就是long，否则整数类型做运算结果都是int类型</li></ul><pre class=" language-java"><code class="language-java">a<span class="token operator">++</span> 和 <span class="token operator">++</span>ab <span class="token operator">=</span> a<span class="token operator">++</span>   <span class="token comment" spellcheck="true">// 先赋值在自增</span>c <span class="token operator">=</span> <span class="token operator">++</span>a        <span class="token comment" spellcheck="true">// 先自增再赋值</span><span class="token comment" spellcheck="true">// 幂运算 用工具类</span><span class="token keyword">double</span> pw <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>短路运算</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> d <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 由于c&lt;4已经得出false，所以后面c++根本不会执行，</span></code></pre><p>位运算</p><pre class=" language-java"><code class="language-java"><span class="token number">2</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token number">2</span><span class="token operator">>></span> <span class="token operator">/</span><span class="token number">2</span>  <span class="token number">8</span></code></pre><p>字符串拼接</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 字符串在前，先拼接，字符串在后，先运算，括号优先级最高</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">9911</span><span class="token number">110</span></code></pre><p>三元运算符</p><pre class=" language-java"><code class="language-java">变量名<span class="token operator">?</span>为<span class="token boolean">true</span>的结果<span class="token operator">:</span>为<span class="token boolean">false</span>的结果</code></pre><h3 id="五、包机制"><a href="#五、包机制" class="headerlink" title="五、包机制"></a>五、包机制</h3><p>包名规范：一般用公司域名倒置作为包名com.baidu.www</p><h3 id="六、DOC注释"><a href="#六、DOC注释" class="headerlink" title="六、DOC注释"></a>六、DOC注释</h3><ul><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明需要最早使用的jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ul><p>自动生成java文档页面</p><pre class=" language-java"><code class="language-java">javadoc <span class="token operator">-</span>encoding UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>charset UTF<span class="token operator">-</span><span class="token number">8</span> java文件</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java方法</title>
      <link href="/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%96%B9%E6%B3%95/"/>
      <url>/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="java方法"><a href="#java方法" class="headerlink" title="java方法"></a>java方法</h2><ul><li>方法是功能语句的集合</li><li>方法包含于类或者对象中</li><li>方法在程序中被创建，在其他地方被引用</li><li>void表示这个方法的返回值为空</li></ul><p>调用方法的两种方式：</p><p><strong>1 实例化类去调用</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Hello hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>2 在类中直接调用static修饰的方法</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="1-方法的重载"><a href="#1-方法的重载" class="headerlink" title="1 方法的重载"></a>1 方法的重载</h3><p>重载：在一个类中，相同的方法名称但是传参不同</p><p>所以方法在类中的唯一性是根据方法的名称和方法的传参的，若一个类中的方法名和传参类型都相同是不合法的</p><h3 id="2-命令行传参"><a href="#2-命令行传参" class="headerlink" title="2 命令行传参"></a>2 命令行传参</h3><p>当需要编译一个java文件时，除非这个文件在src路径下，其他情况都需要编译src下的完整路径</p><p>运行class文件时可以在后面添加若干个参数，这些参数会被main方法中的args捕获</p><h3 id="3-可变参数"><a href="#3-可变参数" class="headerlink" title="3 可变参数"></a>3 可变参数</h3><p>一个方法中只能有一个可变参数，且必须在最后</p><p>通过三个点表示这个类型的参数长度不固定，统一被后面的名字所接收</p><p>可变参数的长度可以是0</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java数组</title>
      <link href="/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%95%B0%E7%BB%84/"/>
      <url>/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="java数组"><a href="#java数组" class="headerlink" title="java数组"></a>java数组</h2><ul><li>数组时相同数据类型的有序集合</li><li>数组本身是对象，java中的对象都是保存在堆中的</li></ul><p>数组定义的两种方式</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 方式1 静态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式2 动态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明一个数组，但是还没有给他分配空间</span>num2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个长度为4类型为int的数组</span>num2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// 赋值</span><span class="token comment" spellcheck="true">// 索引1，2，3都没有赋值，此时的值为0</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span></code></pre><p>翻转数组并打印</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>arrays<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rtnAttays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rtnAttays<span class="token punctuation">[</span>arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rtnAttays<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>方式二</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rtnAttays <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span>arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rtnAttays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rtnAttays<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Array数组类"><a href="#Array数组类" class="headerlink" title="Array数组类"></a>Array数组类</h3><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印数组，看了源码后toString实际上就是前后加一个中括号打印出来的是字符串</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//排序</span></code></pre><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mp2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arrays<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span>arrays<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    temp <span class="token operator">=</span> arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arrays<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arrays<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arrays<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arrays<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><p>当一个二维数组中只有少部分是有效数据，其他都是0的时候，可以记录通过稀疏数组来压缩数组</p><p>步骤：获取数组大小，获取有效值，获取所有有效值xy地址和有效值本身</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java核心类</title>
      <link href="/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%A0%B8%E5%BF%83%E7%B1%BB/"/>
      <url>/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%A0%B8%E5%BF%83%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="java核心类"><a href="#java核心类" class="headerlink" title="java核心类"></a>java核心类</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>早期jdkstring用的是char[]方式存储，后期用的byte[]方式存储</p><p>两个String类型进行比较时需要使用equals而不是==，实际上基本的引用类型都需要用equals</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>huangzhao<span class="token punctuation">.</span>mapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> <span class="token string">"hz"</span><span class="token punctuation">;</span>        String name2 <span class="token operator">=</span> <span class="token string">"Hz"</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 把name2变为小写</span>        name2 <span class="token operator">=</span> name2<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">==</span> name2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token boolean">false</span><span class="token boolean">true</span>  </code></pre><p>字符串搜索</p><pre class=" language-java"><code class="language-java"><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"He"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"lo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "llo"</span><span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token string">"ll"</span></code></pre><p>其他操作</p><pre class=" language-java"><code class="language-java"><span class="token string">"  \tHello\r\n "</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "Hello" 去除首尾空格</span>String s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "hewwo"，所有字符'l'被替换为'w'</span>s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"ll"</span><span class="token punctuation">,</span> <span class="token string">"~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "he~~o"，所有子串"ll"被替换为"~~"</span>String s <span class="token operator">=</span> <span class="token string">"A,B,C,D"</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\,"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {"A", "B", "C", "D"}</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"A"</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"***"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "A***B***C"</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s <span class="token operator">=</span> <span class="token string">"Hi %s, your score is %d!"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">formatted</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Hi %s, your score is %.2f!"</span><span class="token punctuation">,</span> <span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">59.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 类型转化</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "123"</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">45.67</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "45.67"</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "true"</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类似java.lang.Object@636be97c</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 123</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"ff"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按十六进制转换，255</span><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> Boolean<span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span><span class="token string">"FALSE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>要特别注意，Integer有个<span class="token function">getInteger</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span>方法，它不是将字符串转换为<span class="token keyword">int</span>，而是把该字符串对应的系统变量转换为Integer：  Integer<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"java.version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 版本号，11</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// String -> char[]</span>String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// char[] -> String</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按系统默认编码转换，不推荐</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按UTF-8编码转换</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按GBK编码转换</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b3 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按UTF-8编码转换</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>String s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按GBK转换</span>String s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> StandardCharsets<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 按UTF-8转换</span></code></pre><p>总结：</p><ul><li>Java字符串<code>String</code>是不可变对象；</li><li>字符串操作不改变原字符串内容，而是返回新字符串；</li><li>常用的字符串操作：提取子串、查找、替换、大小写转换等；</li><li>Java使用Unicode编码表示<code>String</code>和<code>char</code>；</li><li>转换编码就是将<code>String</code>和<code>byte[]</code>转换，需要指定编码；</li><li>转换为<code>byte[]</code>时，始终优先考虑<code>UTF-8</code>编码。</li></ul><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>虽然可以直接拼接字符串，但是，在循环中，每次循环都会创建新的字符串对象，然后扔掉旧的字符串。这样，绝大部分字符串都是临时对象，不但浪费内存，还会影响GC效率。</p><p>为了能高效拼接字符串，Java标准库提供了<code>StringBuilder</code>，它是一个可变对象，可以预分配缓冲区，这样，往<code>StringBuilder</code>中新增字符时，不会创建新的临时对象：</p><p>注意：对于普通的字符串<code>+</code>操作，并不需要我们将其改写为<code>StringBuilder</code>，因为Java编译器在编译时就自动把多个连续的<code>+</code>操作编码为<code>StringConcatFactory</code>的操作。在运行期，<code>StringConcatFactory</code>会自动把字符串连接操作优化为数组复制或者<code>StringBuilder</code>操作。</p><p>你可能还听说过<code>StringBuffer</code>，这是Java早期的一个<code>StringBuilder</code>的线程安全版本，它通过同步来保证多个线程操作<code>StringBuffer</code>也是安全的，但是同步会带来执行速度的下降。</p><p><code>StringBuilder</code>和<code>StringBuffer</code>接口完全相同，现在完全没有必要使用<code>StringBuffer</code>。</p><p>总结：</p><ul><li><code>StringBuilder</code>是可变对象，用来高效拼接字符串；</li><li><code>StringBuilder</code>可以支持链式操作，实现链式操作的关键是返回实例本身</li><li><code>StringBuffer</code>是<code>StringBuilder</code>的线程安全版本，现在很少使用。</li></ul><h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><p>一个基本数据类型的引用类型称为这个基本数据类型的包装类</p><p>基本数据类型转引用类型：自动装箱，反过来自动拆箱</p><p>但是装箱和拆箱操作都会影响代码的执行效率，因为编译后的<code>class</code>代码是严格区分基本类型和引用类型的。并且，自动拆箱执行时可能会报<code>NullPointerException</code>：</p><pre class=" language-java"><code class="language-java">Integer n <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译器自动使用Integer.valueOf(int)</span><span class="token keyword">int</span> x <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译器自动使用Integer.intValue()</span></code></pre><p>在python中类似小整数池的概念，小于128的整数类型id都相同</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer x <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        Integer y <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        Integer m <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>        Integer n <span class="token operator">=</span> <span class="token number">99999</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x == y: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m == n: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>m<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"x.equals(y): "</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m.equals(n): "</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>因为<code>Integer.valueOf()</code>可能始终返回同一个<code>Integer</code>实例，因此，在我们自己创建<code>Integer</code>的时候，以下两种方法：</p><ul><li>方法1：<code>Integer n = new Integer(100);</code></li><li>方法2：<code>Integer n = Integer.valueOf(100);</code></li></ul><p>方法2更好，因为方法1总是创建新的<code>Integer</code>实例，方法2把内部优化留给<code>Integer</code>的实现者去做，即使在当前版本没有优化，也有可能在下一个版本进行优化。</p><p>我们把能创建“新”对象的静态方法称为静态工厂方法。<code>Integer.valueOf()</code>就是静态工厂方法，它尽可能地返回缓存的实例以节省内存。</p><p> 创建新对象时，优先选用静态工厂方法而不是new操作符。</p><p>如下是javaInteger源码中如何定义小整数池的代码，与python的区别是java中小整数池的范围是可变的，但能变的只是最大值，且最大值不能低于127，不能高于Integer.MAX_VALUE - (-low) -1，否则就使用限定最大值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// high value may be configured by property</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        String integerCacheHighPropValue <span class="token operator">=</span>            sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Maximum array size is Integer.MAX_VALUE</span>                h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If the property cannot be parsed into an int, ignore it.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        high <span class="token operator">=</span> h<span class="token punctuation">;</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// range [-128, 127] must be interned (JLS7 5.1.7)</span>        <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>进制转化</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> x1 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100</span><span class="token keyword">int</span> x2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 256,因为按16进制解析</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "100",表示为10进制</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "2s",表示为36进制</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "64",表示为16进制</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toOctalString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "144",表示为8进制</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "1100100",表示为2进制</span></code></pre><p>静态变量</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// boolean只有两个值true/false，其包装类型只需要引用Boolean提供的静态字段:</span>Boolean t <span class="token operator">=</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">;</span>Boolean f <span class="token operator">=</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// int可表示的最大/最小值:</span><span class="token keyword">int</span> max <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2147483647</span><span class="token keyword">int</span> min <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -2147483648</span><span class="token comment" spellcheck="true">// long类型占用的bit和byte数量:</span><span class="token keyword">int</span> sizeOfLong <span class="token operator">=</span> Long<span class="token punctuation">.</span>SIZE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 64 (bits)</span><span class="token keyword">int</span> bytesOfLong <span class="token operator">=</span> Long<span class="token punctuation">.</span>BYTES<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 8 (bytes)</span></code></pre><p>类型转化</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 向上转型为Number:</span>Number num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取byte, int, long, float, double:</span><span class="token keyword">byte</span> b <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">byteValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> ln <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> f <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> d <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>总结：</p><ul><li>Java核心库提供的包装类型可以把基本类型包装为<code>class</code>；</li><li>自动装箱和自动拆箱都是在编译期完成的（JDK&gt;=1.5）；</li><li>装箱和拆箱会影响执行效率，且拆箱时可能发生<code>NullPointerException</code>；</li><li>包装类型的比较必须使用<code>equals()</code>；</li><li>整数和浮点数的包装类型都继承自<code>Number</code>；</li><li>包装类型提供了大量实用方法。</li></ul><h3 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h3><ul><li><p>JavaBean是一种符合命名规范的<code>class</code>，它通过<code>getter</code>和<code>setter</code>来定义属性；</p></li><li><p>属性是一种通用的叫法，并非Java语法规定；</p></li><li><p>可以利用IDE快速生成<code>getter</code>和<code>setter</code>；</p></li><li><p>使用<code>Introspector.getBeanInfo()</code>可以获取属性列表。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java泛型</title>
      <link href="/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%B3%9B%E5%9E%8B/"/>
      <url>/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="java泛型"><a href="#java泛型" class="headerlink" title="java泛型"></a>java泛型</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h3><p>泛型相当于类型占位符，可以是任意类型，但是第一个类型传入之后，这个泛型就会转换成对应的类型</p><pre class=" language-java"><code class="language-java">ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>泛型可以向上转型，因为ArrayList继承了List（但只能转同内部类型）</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h3><p>编译器看到泛型类型<code>List&lt;Number&gt;</code>就可以自动推断出后面的<code>ArrayList&lt;T&gt;</code>的泛型类型必须是<code>ArrayList&lt;Number&gt;</code>，因此，可以把代码简写为：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 可以省略后面的Number，编译器可以自动推断泛型类型：</span>List<span class="token operator">&lt;</span>Number<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>泛型接口</strong></p><p>实现了该泛型接口的类就可以使用Array.sort()来排序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回负数: 当前实例比参数o小     * 返回0: 当前实例与参数o相等     * 返回正数: 当前实例比参数o大     */</span>    <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>T o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>栗子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Person<span class="token operator">></span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>score <span class="token operator">=</span> score<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Person other<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 此处是调用了String的compareTo方法，</span>          <span class="token comment" spellcheck="true">// 实际上所有基本数据类型及其实现类都可以用这个方法</span>          <span class="token comment" spellcheck="true">// 所以若需要让对象中某个字段可以被Array.sout进行排序即可使用这种方式</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>score<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person<span class="token punctuation">[</span><span class="token punctuation">]</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>Comparable接口与Comparator接口</p><p>Comparable定义了compareTo方法，用于对象之间的比较</p><p>Comparator定义了compare方法，可以用于比较没有实现Comparable的类的对象</p></blockquote><p><a href="https://blog.csdn.net/lenfranky/article/details/84674694">https://blog.csdn.net/lenfranky/article/details/84674694</a></p><p>总结：</p><ul><li><p>使用泛型时，把泛型参数<code>&lt;T&gt;</code>替换为需要的class类型，例如：<code>ArrayList&lt;String&gt;</code>，<code>ArrayList&lt;Number&gt;</code>等；</p></li><li><p>可以省略编译器能自动推断出的类型，例如：<code>List&lt;String&gt; list = new ArrayList&lt;&gt;();</code>；</p></li><li><p>不指定泛型参数类型时，编译器会给出警告，且只能将<code>&lt;T&gt;</code>视为<code>Object</code>类型；</p></li><li><p>可以在接口中定义泛型类型，实现此接口的类必须实现正确的泛型类型。</p></li></ul><h3 id="3-擦拭法"><a href="#3-擦拭法" class="headerlink" title="3 擦拭法"></a>3 擦拭法</h3><p>局限一：<code>&lt;T&gt;</code>不能是基本类型，例如<code>int</code>，因为实际类型是<code>Object</code>，<code>Object</code>类型无法持有基本类型：</p><p>局限二：无法取得带泛型的<code>Class</code>。观察以下代码：</p><p>因为<code>T</code>是<code>Object</code>，我们对<code>Pair&lt;String&gt;</code>和<code>Pair&lt;Integer&gt;</code>类型获取<code>Class</code>时，获取到的是同一个<code>Class</code>，也就是<code>Pair</code>类的<code>Class</code>。</p><p>换句话说，所有泛型实例，无论<code>T</code>的类型是什么，<code>getClass()</code>返回同一个<code>Class</code>实例，因为编译后它们全部都是<code>Pair&lt;Object&gt;</code>。</p><pre class=" language-java"><code class="language-java">Pair<span class="token operator">&lt;</span>String<span class="token operator">></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Pair<span class="token operator">&lt;</span>Integer<span class="token operator">></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c1</span> <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">c2</span> <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token operator">==</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token operator">==</span>Pair<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">class</span> <span class="token class-name">Pair</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T first<span class="token punctuation">;</span>    <span class="token keyword">private</span> T last<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Pair</span><span class="token punctuation">(</span>T first<span class="token punctuation">,</span> T last<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>first <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>last <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> T <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> last<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>局限三：无法判断带泛型的类型</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java流程控制</title>
      <link href="/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
      <url>/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="java流程控制"><a href="#java流程控制" class="headerlink" title="java流程控制"></a>java流程控制</h2><p>tips：在java文件编译后会得到一个class字节码文件，如果要看字节码文件源码是什么，可以通过反编译，直接把class文件拖入idea中会自动反编译为java代码</p><h3 id="一、用户交互Scanner"><a href="#一、用户交互Scanner" class="headerlink" title="一、用户交互Scanner"></a>一、用户交互Scanner</h3><p>类似python的input的功能，只是java中做成了一个类</p><p>方法：</p><ul><li>next() 监控用户输入的有效字符，有效字符之前的空白会自动去除，后续空白为结束符</li><li>hasNext() 是否存在输入</li><li>nextLine() 空白符不作为结束符，也不会去除前面的空白，已回车为结束符</li><li>nextInt()</li><li>hasNextInt() 同理</li></ul><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 监控输入</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// hasNext来判断是否输入内容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// next()方法会让用户等待输入</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 只输出了第一个空格前的数据</span>aaaa sadajsido asdjiosadaaaa</code></pre><p>练习</p><p>输入数字就加起来，输入非数字就退出</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">+=</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//字符串.equals("被比较的字符串") 用于判断字符串是否相等</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="二、if"><a href="#二、if" class="headerlink" title="二、if"></a>二、if</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">else</span></code></pre><h3 id="三、switch"><a href="#三、switch" class="headerlink" title="三、switch"></a>三、switch</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// jdk7之后case才能写字符串，之前只能写数字</span><span class="token comment" spellcheck="true">// 字符的本质是数字</span><span class="token keyword">switch</span><span class="token punctuation">(</span>需要判断的变量<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"asdad"</span><span class="token operator">:</span>        执行代码    <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可选，不再进行后续判断</span>    <span class="token keyword">case</span> <span class="token string">"anvx"</span><span class="token operator">:</span>        执行代码    <span class="token keyword">default</span><span class="token operator">:</span>        若上面条件都不成立执行的代码<span class="token punctuation">}</span></code></pre><h3 id="四、while循环"><a href="#四、while循环" class="headerlink" title="四、while循环"></a>四、while循环</h3><p>do while先执行一次再判断，while先判断再执行代码</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>do while</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span><span class="token punctuation">{</span>        sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="五、for循环"><a href="#五、for循环" class="headerlink" title="五、for循环"></a>五、for循环</h3><p>0-100奇偶总数</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">101</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                count1<span class="token operator">+=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                count2<span class="token operator">+=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>0-1000 5整除，三个一换行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1001</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// print 不会默认输出换行符</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">15</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>99乘法表</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>x<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>y<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>y<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>x<span class="token operator">*</span>y<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>增强for循环</strong></p><ul><li>jdk5引入</li><li>针对数组和结构对象</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token operator">:</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="六、break-continue"><a href="#六、break-continue" class="headerlink" title="六、break,continue"></a>六、break,continue</h3><p>和python一样</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面向对象</title>
      <link href="/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="java面向对象"><a href="#java面向对象" class="headerlink" title="java面向对象"></a>java面向对象</h2><ul><li>栈：放main函数和一些变量的引用</li><li>堆：放变量实际的内容，方法区中放一些类的模板和这些类的静态方法，静态变量</li></ul><p>java中权限修饰符</p><table><thead><tr><th>修饰词</th><th>本类</th><th>同一个包的类</th><th>继承类</th><th>其他类</th></tr></thead><tbody><tr><td>private（私有的）</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>default（默认）</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>protected（受保护的）</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>public（公共）</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p><strong>protected细节</strong></p><p>在a文件中写的父类father只能在a文件中使用父类的protected方法</p><p>在其他文件中只有一种情况下能使用父类的protected方法，那就是在其他文件的子类中实例化子类再使用父类的protected</p><h3 id="1-构造器"><a href="#1-构造器" class="headerlink" title="1 构造器"></a>1 构造器</h3><p>类似于python中类的init方法，在实例化对象的时候会先调用</p><p>使用new关键字本质上是调用构造器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> sex<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 可有参可无参</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        sex <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token boolean">true</span><span class="token number">0</span>null</code></pre><h3 id="2-static关键字用途"><a href="#2-static关键字用途" class="headerlink" title="2 static关键字用途"></a>2 static关键字用途</h3><blockquote><p>static方法就是没有this的方法。在static方法内部不能调用非静态方法，反过来是可以的。而且可以在没有创建任何对象的前提下，仅仅通过类本身来调用static方法。这实际上正是static方法的主要用途</p></blockquote><p>总结：方便在没有创建对象的情况下调用类的方法</p><p>static修饰过的方法可以直接被类调用，但是其中不能使用类中非静态（没有被static修饰过）方法或变量，可以使用类中其他的静态方法和静态变量</p><p><strong>被final修饰的类无法被继承</strong></p><p>会和类一起在初始化时就加载到堆中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 静态代码块，只执行一次</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 匿名代码块</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 构造器</span>    <span class="token keyword">public</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Application application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token number">2</span><span class="token number">3</span></code></pre><p>静态导入包</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Math<span class="token punctuation">.</span>random<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-封装"><a href="#3-封装" class="headerlink" title="3 封装"></a>3 封装</h3><ul><li>提高程序的安全性，保护数据</li><li>隐藏代码的实现细节</li><li>统一接口</li><li>系统可维护性增加了</li></ul><p>本质：数据的隐藏，通常应该禁止直接访问一个对象中数据的实际表示，而是通过操作接口来访问</p><p>private：私有</p><p>在类中有一些属性需要被隐藏起来不直接给用户使用，而是通过一些其他方法来操作这个属性</p><p>类似python中的双下划线属性</p><p>mac：command+n快速生成</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-继承"><a href="#4-继承" class="headerlink" title="4 继承"></a>4 继承</h3><p>继承的本质就是对一批类的抽象，extends，java中只有单继承，没有多继承</p><p>继承的关系：父类（基类），子类（派生类）</p><p>子类继承父类共有的属性和方法，私有的无法继承</p><p>在java中所有的类都直接或者间接继承object类</p><p>在子类中使用可以通过super来使用父类的属性或方法，和python中的super相似</p><ul><li>this和super不能同时调用构造方法</li><li>this()调用本类的构造，super()调用父类的构造</li></ul><p>子类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 隐藏代码，调用了父类的无参构造器</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用父类的构造器必须在子类构造器的第一行</span>        <span class="token comment" spellcheck="true">// 如果父类写了有参构造器（会默认顶替无参构造器）这里就会报错</span>        <span class="token comment" spellcheck="true">// 因为这里默认调用的是父类的无参构造器，所以父类若是写了有参构造器</span>        <span class="token comment" spellcheck="true">// 为了防止子类报错有两种解决方式</span>        <span class="token comment" spellcheck="true">// 1 在子类构造器中调用父类的有参构造器</span>        <span class="token comment" spellcheck="true">// 2 在父类中写上无参构造器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String name <span class="token operator">=</span> <span class="token string">"lxt"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>父类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> <span class="token string">"hz"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"people say"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>方法的重写</strong></p><p>静态方法的调用只和类型有关，和实例化是哪个类无关</p><p>方法的重写只和非静态方法有关</p><p>注意和重载的区别：重载是方法名相同，参数不同，重写是方法名和参数都相同，且都为公有非静态方法</p><p>重写的修饰符只能方法不能缩小，抛出的异常只能缩小不能放大</p><p>为什么要重写：</p><ul><li>父类的方法子类不一定需要也不一定满足</li></ul><p>静态方法demo</p><pre class=" language-java"><code class="language-java">Student<span class="token punctuation">.</span>java<span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>People<span class="token punctuation">.</span>java<span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">import</span> oop<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> oop<span class="token punctuation">.</span>People<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        People p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>sp</code></pre><p><strong>非静态方法重写demo</strong></p><pre class=" language-java"><code class="language-java">子类<span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        super.say();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>父类<span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">import</span> oop<span class="token punctuation">.</span>Student<span class="token punctuation">;</span><span class="token keyword">import</span> oop<span class="token punctuation">.</span>People<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子类方法</span>        People p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 由子类重写</span>        People p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对父类本身没有影响</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>ssp</code></pre><h3 id="5-多态"><a href="#5-多态" class="headerlink" title="5 多态"></a>5 多态</h3><p>概念：同一个方法根据其发送对象的不同而采用不同的行为方式</p><p>一个对象的实际类型的是确定的，但是可以指向对象的引用类型有很多（父类，有关系的类）</p><ul><li>多态是方法的多态，与属性无关</li><li>要有父子之间关系，否则会报错：ClassCastException，类型转换异常</li><li>方法需要重写，不然用的就是自己的方法了</li><li>父类引用指向子类对象</li></ul><pre class=" language-java"><code class="language-java">Father f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>instanceof</strong></p><p>判断对象是否是一个类型，如果是父类或者之上就返回true</p><pre class=" language-java"><code class="language-java">Son s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Father</span>  <span class="token comment" spellcheck="true">// true</span>s <span class="token keyword">instanceof</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>子类转换成父类可能会丢失一些方法，子类转换成父类需要强转</p><h3 id="6-抽象类（abstract）约束"><a href="#6-抽象类（abstract）约束" class="headerlink" title="6 抽象类（abstract）约束"></a>6 抽象类（abstract）约束</h3><ul><li>抽象类的所有方法，继承了它的子类，都必须实现它抽象方法，除非子类也是抽象类</li><li>抽象类不能new去使用，主要功能就是为了去约束子类的行为</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 抽象类不能有方法体，主要是约束子类必须重新这个方法</span>   <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//抽象类中也可以有普通方法</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"people eat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 抽象类也可以有构造器，并在子类实例化的时候执行</span>    <span class="token keyword">public</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student say"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-接口"><a href="#7-接口" class="headerlink" title="7 接口"></a>7 接口</h3><p>接口和类的区别</p><ul><li>普通类：只有具体实现</li><li>抽象类：具体实现和约束都有</li><li>接口：只有约束，自己无法写方法，约束和实现分离，面向接口编程</li></ul><p>接口注意项</p><ul><li>接口里面所有的定义方法都是抽象的：public abstract，可以不写</li><li>接口可以多继承 implements</li><li>接口里面定义的属性都是常量：public static final（不会这么用）</li></ul><p>接口1</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 定义接口人的规范，必须有增删改查</span>    <span class="token comment" spellcheck="true">// 默认是public abstract</span>   <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接口2</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oop<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">People</span><span class="token punctuation">,</span>Animal <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8-error和exception"><a href="#8-error和exception" class="headerlink" title="8 error和exception"></a>8 error和exception</h3><p>error错误不是异常，是脱离程序员控制的问题，类似于栈溢出，在编译时无法被检查到</p><p>java中把异常当做对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类</p><p>java api中定义了很多异常类：主要分为error错误和exception异常</p><p>error类对象由java虚拟机生成抛出</p><p>修饰词：</p><ul><li><p>try  可能会报错的代码块</p></li><li><p>catch 捕获异常</p></li><li><p>finally  都会执行的代码块</p></li><li><p>throw 抛出异常对象</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Application<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></li></ul><p>  }</p><pre><code>- throws 在方法中抛出异常- ```javapackage oop;public final class Application &#123;    public static void main(String[] args) &#123;        try &#123;            Application.test(0);        &#125; catch (ArithmeticException e) &#123;            e.printStackTrace();        &#125;    &#125;    public static void test(int i)throws ArithmeticException&#123;        if (i==0)&#123;            throw new ArithmeticException();        &#125;    &#125;&#125;</code></pre><p>自定义异常类只要继承Exception就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java集合</title>
      <link href="/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E9%9B%86%E5%90%88/"/>
      <url>/task/2021/06/03/java/%E5%9F%BA%E7%A1%80/java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="java集合"><a href="#java集合" class="headerlink" title="java集合"></a>java集合</h2><h3 id="1-Collection"><a href="#1-Collection" class="headerlink" title="1 Collection"></a>1 Collection</h3><p><img src="https://pic2.zhimg.com/v2-564932877398de8eb9f242795cc473c5_r.jpg" alt="preview" loading="lazy"></p><p>Java标准库自带的<code>java.util</code>包提供了集合类：<code>Collection</code>，它是除<code>Map</code>外所有其他集合类的根接口。Java的<code>java.util</code>包主要提供了以下三种类型的集合：</p><ul><li><code>List</code>：一种有序列表的集合，例如，按索引排列的<code>Student</code>的<code>List</code>；python中的列表</li><li><code>Set</code>：一种保证没有重复元素的集合，例如，所有无重复名称的<code>Student</code>的<code>Set</code>python中的元组</li><li><code>Map</code>：一种通过键值（key-value）查找的映射表集合，例如，根据<code>Student</code>的<code>name</code>查找对应<code>Student</code>的<code>Map</code>。python中的字典</li></ul><p>Java集合的设计有几个特点：一是实现了接口和实现类相分离，例如，有序表的接口是<code>List</code>，具体的实现类有<code>ArrayList</code>，<code>LinkedList</code>等，二是支持泛型，我们可以限制在一个集合中只能放入同一种数据类型的元素，例如</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只能放入String类型</span></code></pre><p>Java访问集合总是通过统一的方式——迭代器（Iterator）来实现，它最明显的好处在于无需知道集合内部元素是按什么方式存储的。</p><p>在python中也有迭代器的概念，是把可迭代对象通过双下划线iter方法调用得到迭代器，迭代器使用时只存在一个值</p><h3 id="2-List（列表）"><a href="#2-List（列表）" class="headerlink" title="2 List（列表）"></a>2 List（列表）</h3><pre class=" language-java"><code class="language-java">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List 是一个接口com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>tools<span class="token punctuation">.</span>javac<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List 是List的一个实现类</code></pre><p>在java中List是最基础的集合，一种有序列表，类似java的数组</p><p>但是区别在于底层对内部元素存储结构</p><ul><li>数组：初始化限定长度，无法更改，插入和删除的时间复杂度都是O（n）</li><li>ArrayList：不限定长度，追加超限后会自动扩容，类似go中的切片</li></ul><p>使用迭代器<code>Iterator</code>来访问<code>List</code>。<code>Iterator</code>本身也是一个对象，但它是由<code>List</code>的实例调用<code>iterator()</code>方法的时候创建的。<code>Iterator</code>对象知道如何遍历一个<code>List</code>，并且不同的<code>List</code>类型，返回的<code>Iterator</code>对象实现也是不同的，但总是具有最高的访问效率。</p><p><code>Iterator</code>对象有两个方法：<code>boolean hasNext()</code>判断是否有下一个元素，<code>E next()</code>返回下一个元素。因此，使用<code>Iterator</code>遍历<code>List</code>代码如下：</p><p>注意：使用迭代器循环和for each是一样的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"pear"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> it <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            String s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="List转Array"><a href="#List转Array" class="headerlink" title="List转Array"></a>List转Array</h4><p>把<code>List</code>变为<code>Array</code>有三种方法，第一种是调用<code>toArray()</code>方法直接返回一个<code>Object[]</code>数组：</p><p>这种方法会丢失类型信息，基本不用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"pear"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object s <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二种方式是给<code>toArray(T[])</code>传入一个类型相同的<code>Array</code>，<code>List</code>内部自动把元素复制到传入的<code>Array</code>中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 传入的类型必须一致，包括数组的容量</span>        Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer n <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后一种更简洁的写法是通过<code>List</code>接口定义的<code>T[] toArray(IntFunction&lt;T[]&gt; generator)</code>方法：</p><pre class=" language-java"><code class="language-java">Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>Integer<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Array转List"><a href="#Array转List" class="headerlink" title="Array转List"></a>Array转List</h4><pre class=" language-java"><code class="language-java">Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="List中判断变量是否存在集合中"><a href="#List中判断变量是否存在集合中" class="headerlink" title="List中判断变量是否存在集合中"></a>List中判断变量是否存在集合中</h4><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> contains <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这种方法的时间复杂度很高，通过源码可以看出来</span></code></pre><p>List只是一个接口，所以具体的contains方法的实现需要在下面ArrayList实现类去看</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Returns the index of the first occurrence of the specified element     * in this list, or -1 if this list does not contain the element.     * More formally, returns the lowest index &lt;tt>i&lt;/tt> such that     * &lt;tt>(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt>,     * or -1 if there is no such index.     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>elementData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>indexOf通过循环一个一个去判断是否存在相同的元素的索引，没有就返回-1</p><h4 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h4><p>如何正确编写<code>equals()</code>方法？<code>equals()</code>方法要求我们必须满足以下条件：</p><ul><li>自反性（Reflexive）：对于非<code>null</code>的<code>x</code>来说，<code>x.equals(x)</code>必须返回<code>true</code>；</li><li>对称性（Symmetric）：对于非<code>null</code>的<code>x</code>和<code>y</code>来说，如果<code>x.equals(y)</code>为<code>true</code>，则<code>y.equals(x)</code>也必须为<code>true</code>；</li><li>传递性（Transitive）：对于非<code>null</code>的<code>x</code>、<code>y</code>和<code>z</code>来说，如果<code>x.equals(y)</code>为<code>true</code>，<code>y.equals(z)</code>也为<code>true</code>，那么<code>x.equals(z)</code>也必须为<code>true</code>；</li><li>一致性（Consistent）：对于非<code>null</code>的<code>x</code>和<code>y</code>来说，只要<code>x</code>和<code>y</code>状态不变，则<code>x.equals(y)</code>总是一致地返回<code>true</code>或者<code>false</code>；</li><li>对<code>null</code>的比较：即<code>x.equals(null)</code>永远返回<code>false</code>。</li></ul><p>多字段比较</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>先确定实例“相等”的逻辑，即哪些字段相等，就认为实例相等；</li><li>用<code>instanceof</code>判断传入的待比较的<code>Object</code>是不是当前类型，如果是，继续比较，否则，返回<code>false</code>；</li><li>对引用类型用<code>Objects.equals()</code>比较，对基本类型直接用<code>==</code>比较。</li></ol><p>使用<code>Objects.equals()</code>比较两个引用类型是否相等的目的是省去了判断<code>null</code>的麻烦。两个引用类型都是<code>null</code>时它们也是相等的。</p><p>如果不调用<code>List</code>的<code>contains()</code>、<code>indexOf()</code>这些方法，那么放入的元素就不需要实现<code>equals()</code>方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String firstName<span class="token punctuation">;</span>    String lastName<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String firstName<span class="token punctuation">,</span> String lastName<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> firstName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> lastName<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">,</span>p<span class="token punctuation">.</span>lastName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token punctuation">,</span>p<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>age<span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-Map（字典）"><a href="#3-Map（字典）" class="headerlink" title="3 Map（字典）"></a>3 Map（字典）</h3><p>map是一个接口，通常使用实现它的HashMap，类似python中的dict</p><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul><li>特点：空间换时间</li><li>内部key无序</li></ul><p>如果map的key需要使用我们自己定义的类，就必须重写equals和hashcode，因为如果要从map中通过一个key获取一个value，当key相同时我们要返回相同的value，key是否相同的依据就是通过equals和对象的hashcode来判断</p><p>如果一个自定义的类没有重写hashcode，那他在存入map时调用的是object的hashcode方法，并不会检索对象内部元素是否相同，以至于虽然是元素相同的对象，但存到map中是不一样的key</p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265117217944672#0">https://www.liaoxuefeng.com/wiki/1252599548343744/1265117217944672#0</a></p><p>总结：</p><p>要正确使用<code>HashMap</code>，作为<code>key</code>的类必须正确覆写<code>equals()</code>和<code>hashCode()</code>方法；</p><p>一个类如果覆写了<code>equals()</code>，就必须覆写<code>hashCode()</code>，并且覆写规则是：</p><ul><li>如果<code>equals()</code>返回<code>true</code>，则<code>hashCode()</code>返回值必须相等；</li><li>如果<code>equals()</code>返回<code>false</code>，则<code>hashCode()</code>返回值尽量不要相等。</li></ul><p>实现<code>hashCode()</code>方法可以通过<code>Objects.hashCode()</code>辅助方法实现。</p><h4 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h4><p>如果<code>Map</code>的key是<code>enum</code>类型，推荐使用<code>EnumMap</code>，既保证速度，也不浪费空间。</p><p>使用<code>EnumMap</code>的时候，根据面向抽象编程的原则，应持有<code>Map</code>接口。</p><h4 id="SortedMap"><a href="#SortedMap" class="headerlink" title="SortedMap"></a>SortedMap</h4><p>sortedMap是一种有序的map，是一个接口，它的实现类是TreeMap</p><p>会根据key内部的Comparable方法进行排序，若key的class没有Comparable方法，可以自定义一个排序方法</p><p>例子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Person<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>Person<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>Person p1<span class="token punctuation">,</span> Person p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> p1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Lily"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Person key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// {Person: Bob}, {Person: Lily}, {Person: Tom}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"{Person: "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p>Java集合库提供的<code>Properties</code>用于读写配置文件<code>.properties</code>。<code>.properties</code>文件可以使用UTF-8编码。</p><p>可以从文件系统、classpath或其他任何地方读取<code>.properties</code>文件。</p><p>读写<code>Properties</code>时，注意仅使用<code>getProperty()</code>和<code>setProperty()</code>方法，不要调用继承而来的<code>get()</code>和<code>put()</code>等方法。</p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1265119084411136">https://www.liaoxuefeng.com/wiki/1252599548343744/1265119084411136</a></p><h3 id="4-Set（集合）"><a href="#4-Set（集合）" class="headerlink" title="4 Set（集合）"></a>4 Set（集合）</h3><p>java中的set类似python中的集合，没有重复元素</p><p>HashSet是set的无序实现类</p><p>TreeSet是SortSet的有序实现类</p><p>set内部的元素类似map中的key，都必须重写hashcode和equals</p><p>主要方法</p><ul><li>将元素添加进<code>Set&lt;E&gt;</code>：<code>boolean add(E e)</code></li><li>将元素从<code>Set&lt;E&gt;</code>删除：<code>boolean remove(Object e)</code></li><li>判断是否包含元素：<code>boolean contains(Object e)</code></li></ul><h3 id="5-Queue（队列）"><a href="#5-Queue（队列）" class="headerlink" title="5 Queue（队列）"></a>5 Queue（队列）</h3><p>Queue是队列的接口，是一种特殊形式的列表</p><p>实现类LinkedList</p><p>FIFO 先进先出</p><p>主要方法</p><ul><li><code>int size()</code>：获取队列长度；</li><li><code>boolean add(E)</code>/<code>boolean offer(E)</code>：添加元素到队尾；</li><li><code>E remove()</code>/<code>E poll()</code>：获取队首元素并从队列中删除；</li><li><code>E element()</code>/<code>E peek()</code>：获取队首元素但并不从队列中删除。</li></ul><pre class=" language-java"><code class="language-java">Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>每个操作都有两个方法</p><table><thead><tr><th align="left">操作</th><th align="left">throw Exception</th><th>返回false或null</th></tr></thead><tbody><tr><td align="left">添加元素到队尾</td><td align="left">add(E e)</td><td>boolean offer(E e)</td></tr><tr><td align="left">取队首元素并删除</td><td align="left">E remove()</td><td>E poll()</td></tr><tr><td align="left">取队首元素但不删除</td><td align="left">E element()</td><td>E peek()</td></tr></tbody></table><h3 id="6-PriorityQueue（优先级队列）"><a href="#6-PriorityQueue（优先级队列）" class="headerlink" title="6 PriorityQueue（优先级队列）"></a>6 PriorityQueue（优先级队列）</h3><p>按照优先级出列本质是插入后会通过插入对象的compare方法来判断取出的顺序</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>User<span class="token operator">></span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加3个元素到队列:</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Bob"</span><span class="token punctuation">,</span> <span class="token string">"A1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token string">"A2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Boss"</span><span class="token punctuation">,</span> <span class="token string">"V1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Boss/V1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Bob/A1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Alice/A2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null,因为队列为空</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>User u1<span class="token punctuation">,</span> User u2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u1<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> u2<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果两人的号都是A开头或者都是V开头,比较号的大小:</span>            <span class="token keyword">return</span> u1<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>u1<span class="token punctuation">.</span>number<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'V'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// u1的号码是V开头,优先级高:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> String number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String number<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>总结：</p><p><code>PriorityQueue</code>实现了一个优先队列：从队首获取元素时，总是获取优先级最高的元素。</p><p><code>PriorityQueue</code>默认按元素比较的顺序排序（必须实现<code>Comparable</code>接口），也可以通过<code>Comparator</code>自定义排序算法（元素就不必实现<code>Comparable</code>接口）。</p><h3 id="7-Deque（双端队列）"><a href="#7-Deque（双端队列）" class="headerlink" title="7 Deque（双端队列）"></a>7 Deque（双端队列）</h3><p>Java集合提供了接口<code>Deque</code>来实现一个双端队列，它的功能是：</p><ul><li>既可以添加到队尾，也可以添加到队首；</li><li>既可以从队首获取，又可以从队尾获取。</li></ul><p>我们来比较一下<code>Queue</code>和<code>Deque</code>出队和入队的方法：</p><table><thead><tr><th align="left"></th><th align="left">Queue</th><th align="left">Deque</th></tr></thead><tbody><tr><td align="left">添加元素到队尾</td><td align="left">add(E e) / offer(E e)</td><td align="left">addLast(E e) / offerLast(E e)</td></tr><tr><td align="left">取队首元素并删除</td><td align="left">E remove() / E poll()</td><td align="left">E removeFirst() / E pollFirst()</td></tr><tr><td align="left">取队首元素但不删除</td><td align="left">E element() / E peek()</td><td align="left">E getFirst() / E peekFirst()</td></tr><tr><td align="left">添加元素到队首</td><td align="left">无</td><td align="left">addFirst(E e) / offerFirst(E e)</td></tr><tr><td align="left">取队尾元素并删除</td><td align="left">无</td><td align="left">E removeLast() / E pollLast()</td></tr><tr><td align="left">取队尾元素但不删除</td><td align="left">无</td><td align="left">E getLast() / E peekLast()</td></tr></tbody></table><h3 id="8-Stack（栈）"><a href="#8-Stack（栈）" class="headerlink" title="8 Stack（栈）"></a>8 Stack（栈）</h3><p>FILO</p><ul><li>把元素压栈：<code>push(E)</code>；</li><li>把栈顶的元素“弹出”：<code>pop(E)</code>；</li><li>取栈顶元素但不弹出：<code>peek(E)</code>。</li></ul><p>java集合没有单独的stack接口，因为有个遗留类名字就叫<code>Stack</code>，出于兼容性考虑，所以没办法创建<code>Stack</code>接口，只能用<code>Deque</code>接口来“模拟”一个<code>Stack</code>了。</p><p>当我们把<code>Deque</code>作为<code>Stack</code>使用时，注意只调用<code>push()</code>/<code>pop()</code>/<code>peek()</code>方法，不要调用<code>addFirst()</code>/<code>removeFirst()</code>/<code>peekFirst()</code>方法，这样代码更加清晰。</p><h3 id="9-Iterator"><a href="#9-Iterator" class="headerlink" title="9 Iterator"></a>9 Iterator</h3>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django知识点扩展</title>
      <link href="/task/2021/05/15/python/%E6%A1%86%E6%9E%B6/django%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%89%A9%E5%B1%95/"/>
      <url>/task/2021/05/15/python/%E6%A1%86%E6%9E%B6/django%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%89%A9%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="django-知识点扩展"><a href="#django-知识点扩展" class="headerlink" title="django 知识点扩展"></a>django 知识点扩展</h1><h2 id="一、模型部分"><a href="#一、模型部分" class="headerlink" title="一、模型部分"></a>一、模型部分</h2><h3 id="1-关于ForeignKey"><a href="#1-关于ForeignKey" class="headerlink" title="1 关于ForeignKey"></a>1 关于ForeignKey</h3><h4 id="1-1-级联"><a href="#1-1-级联" class="headerlink" title="1.1 级联"></a>1.1 级联</h4><p>在django2版本以上，外键关联的数据需要设置级联更新</p><pre class=" language-python"><code class="language-python">xxx <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>关联的表<span class="token punctuation">,</span>on_delete<span class="token operator">=</span>model<span class="token punctuation">.</span>CASCADE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 级联操作需要注意，如果是一对一的关联，那没问题应该级联删除</span><span class="token comment" spellcheck="true"># 但如果是一对多，删除了一个出版社，就把这个出版社的所有书都删了，显然不合理，因为书和出版社只是逻辑联系，不是真的物理关联</span><span class="token comment" spellcheck="true"># 所以通常我们会断开一对多的关联表</span> publish <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>to<span class="token operator">=</span><span class="token string">'Publish'</span><span class="token punctuation">,</span>on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>DO_NOTHING<span class="token punctuation">,</span>db_constraint<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># db_constraint=False 表示这个外键只有逻辑关联，没有实质的关联</span><span class="token comment" spellcheck="true"># 级联也应当修改</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>DO_NOTHING <span class="token comment" spellcheck="true"># 删除出版社的时候，书表什么都不做</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>CASCADE <span class="token comment" spellcheck="true"># 级联删除</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>SET_NULL <span class="token comment" spellcheck="true"># 前提是这个字段可以为空</span>on_delete <span class="token operator">=</span> models<span class="token punctuation">.</span>SET_DEFAULT <span class="token comment" spellcheck="true"># 前提是有默认值</span></code></pre><h4 id="1-2-参数"><a href="#1-2-参数" class="headerlink" title="1.2 参数"></a>1.2 参数</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># to 设置要关联的表</span><span class="token comment" spellcheck="true"># to_field 设置要关联表的字段</span><span class="token comment" spellcheck="true"># related_name 反向查询的时候替代原来的‘表名_set’</span><span class="token comment" spellcheck="true"># db_constraint 是否在数据库中创建外键约束，默认为True</span></code></pre><h3 id="2-关于内部类"><a href="#2-关于内部类" class="headerlink" title="2 关于内部类"></a>2 关于内部类</h3><p>内部类class Meta提供模型的元数据，元数据不属于任何字段的东西，是对整张表的描述</p><p>具体拥有的参数</p><ul><li><p>ordering 排序选项</p><ul><li><pre class=" language-python"><code class="language-python">ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'pk'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要注意排序的根据是一个元组，所以如果只有一个根据就要加逗号，排序如果出现重复就会根据第二个元素的排序依据进行排序</span></code></pre></li></ul></li></ul><ul><li><p>db_table 数据库表名</p><ul><li><pre class=" language-python"><code class="language-python">db_table <span class="token operator">=</span> <span class="token string">'数据库表名'</span><span class="token comment" spellcheck="true"># 注意此处修改表名是真实的在数据库中的表名被修改了，所以需要重新进行数据迁移</span></code></pre></li></ul></li><li><p>verbose_name_plural/verbose_name 单复数名称</p><ul><li>这是在admin后台管理的时候显示的名称，复数后缀会在中文后加s通常用中文的话就用单数</li></ul></li></ul><p><strong>其他相关字段</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>        nid <span class="token operator">=</span> models<span class="token punctuation">.</span>AutoField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span>        <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 设置成虚拟表，通常用于通用表，添加一些每个表必有的字段，让其他表继承</span>            abstract <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token comment" spellcheck="true"># 数据库中生成的表名称 默认 app名称 + 下划线 + 类名</span>            db_table <span class="token operator">=</span> <span class="token string">"table_name"</span>            <span class="token comment" spellcheck="true"># 联合索引</span>            index_together <span class="token operator">=</span> <span class="token punctuation">[</span>                <span class="token punctuation">(</span><span class="token string">"pub_date"</span><span class="token punctuation">,</span> <span class="token string">"deadline"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 联合唯一索引</span>            unique_together <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">,</span> <span class="token string">"restaurant"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>            ordering <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># admin中显示的表名称</span>            verbose_name<span class="token operator">=</span><span class="token string">'哈哈'</span>            <span class="token comment" spellcheck="true"># verbose_name加s</span>            verbose_name_plural<span class="token operator">=</span>verbose_name</code></pre><h2 id="二、视图函数部分"><a href="#二、视图函数部分" class="headerlink" title="二、视图函数部分"></a>二、视图函数部分</h2><h3 id="1-关于markdown使用"><a href="#1-关于markdown使用" class="headerlink" title="1 关于markdown使用"></a>1 关于markdown使用</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> markdown<span class="token comment" spellcheck="true"># 将markdown语法渲染成html样式</span>    article<span class="token punctuation">.</span>body <span class="token operator">=</span> markdown<span class="token punctuation">.</span>markdown<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">,</span>        extensions<span class="token operator">=</span><span class="token punctuation">[</span>        <span class="token comment" spellcheck="true"># 包含 缩写、表格等常用扩展</span>        <span class="token string">'markdown.extensions.extra'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 语法高亮扩展</span>        <span class="token string">'markdown.extensions.codehilite'</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里需要注意，原本的文本格式的文章现在转化成了html代码，如果要展示到前端，就要对数据进行转义</span><span class="token comment" spellcheck="true"># 复习:转义的两种方式</span><span class="token number">1</span> 直接在前端参数后面加safe过滤器<span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> article<span class="token punctuation">.</span>body<span class="token operator">|</span>safe <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token number">2</span> 在后端给html代码做标记<span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>safestring <span class="token keyword">import</span> mark_saferes <span class="token operator">=</span> mark_safe<span class="token punctuation">(</span>article<span class="token punctuation">.</span>body<span class="token punctuation">)</span></code></pre><h3 id="2、queryset对象"><a href="#2、queryset对象" class="headerlink" title="2、queryset对象"></a>2、queryset对象</h3><h4 id="2-1-可切片"><a href="#2-1-可切片" class="headerlink" title="2.1 可切片"></a>2.1 可切片</h4><p>用python的切片语法去限制查询的数据条数</p><pre class=" language-python"><code class="language-python">Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>      <span class="token comment" spellcheck="true"># (LIMIT 5)</span>Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># (OFFSET 5 LIMIT 5)</span></code></pre><p>不支持负的索引，切片返回的是一个新的查询集，是由原来的查询集筛选得到的。</p><h4 id="2-2-可迭代"><a href="#2-2-可迭代" class="headerlink" title="2.2 可迭代"></a>2.2 可迭代</h4><p>取出的是每一个数据对象</p><h4 id="2-3-惰性查询"><a href="#2-3-惰性查询" class="headerlink" title="2.3 惰性查询"></a>2.3 惰性查询</h4><p>简单来说就是如果只是把查询结果赋值给了一个变量，而没使用这个变量的话，查询语句是不会执行的，只有真正对数据进行操作了才会回过头来执行查询语句。</p><h4 id="2-4-缓存机制？"><a href="#2-4-缓存机制？" class="headerlink" title="2.4 缓存机制？"></a>2.4 缓存机制？</h4><h4 id="2-5-exists-与iterator-方法"><a href="#2-5-exists-与iterator-方法" class="headerlink" title="2.5 exists()与iterator()方法"></a>2.5 exists()与iterator()方法</h4><p><strong>exists</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 由于简单的if判断也会把整个数据对象集放入cache中，但是我们不需要判断这么多就可以用到exists</span><span class="token keyword">if</span> 查询集<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 相当于只从查询集中拿出一条数据进行判断</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p><strong>iterator</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 查询得到的数据集可能会非常大，一次性放入内存就会影响性能，我们可以通过iterator把数据集做成一个迭代器</span><span class="token comment" spellcheck="true"># 注意做成迭代器的特点，取完数据后数据需要重新查询，无法回头</span><span class="token comment" spellcheck="true"># 每次在内存中只会存在一个数据</span>objs <span class="token operator">=</span> Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>iterator<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>上面两种方法都是为了防止出现cache，所以他可能会增多了我们对数据库的查询，没有完美的方法只有合适的方法。</p><h4 id="2-6-orm额外方法"><a href="#2-6-orm额外方法" class="headerlink" title="2.6 orm额外方法"></a>2.6 orm额外方法</h4><pre class=" language-python"><code class="language-python">model<span class="token punctuation">.</span>Student<span class="token punctuation">.</span>object<span class="token punctuation">.</span>update_or_create<span class="token punctuation">(</span>aa<span class="token operator">=</span>aa<span class="token punctuation">,</span>defaults<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'bb=bb'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拿第一个参数作为查询依据，如果存在则修改，如果不存在则新增</span></code></pre><h3 id="3-extra"><a href="#3-extra" class="headerlink" title="3 extra"></a>3 extra</h3><p>由于orm对mysql的封装程度太高，有些情况下我们需要用一些复杂的查询就可以通过extra来对查询注入新的sql语句</p><p>extra可以指定一个或多个 <code>参数</code>,例如 <code>select</code>, <code>where</code> or <code>tables</code>. 这些参数都不是必须的，但是你至少要使用一个!要注意这些额外的方式对不同的数据库引擎可能存在移植性问题.(因为你在显式的书写SQL语句),除非万不得已,尽量避免这样做</p><h4 id="4-1参数之select"><a href="#4-1参数之select" class="headerlink" title="4.1参数之select"></a>4.1参数之select</h4><p>The <code>select</code> 参数可以让你在 <code>SELECT</code> 从句中添加其他字段信息，它应该是一个字典，存放着属性名到 SQL 从句的映射。</p><pre class=" language-python"><code class="language-python">queryResult<span class="token operator">=</span>models<span class="token punctuation">.</span>Article　　　　　　　　　　　<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'is_recent'</span><span class="token punctuation">:</span> <span class="token string">"create_time > '2017-09-05'"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>结果集中每个 Entry 对象都有一个额外的属性is_recent, 它是一个布尔值，表示 Article对象的create_time 是否晚于2017-09-05.</p><p>练习：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># in sqlite:</span>    article_obj<span class="token operator">=</span>models<span class="token punctuation">.</span>Article<span class="token punctuation">.</span>objects　　　　　　　　　　　　　　<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>nid<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>　　　　　　　　　　　　　　<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"standard_time"</span><span class="token punctuation">:</span><span class="token string">"strftime('%%Y-%%m-%%d',create_time)"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>　　　　　　　　　　　　　　<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token string">"standard_time"</span><span class="token punctuation">,</span><span class="token string">"nid"</span><span class="token punctuation">,</span><span class="token string">"title"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>article_obj<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># &lt;QuerySet [{'title': 'MongoDb 入门教程', 'standard_time': '2017-09-03', 'nid': 1}]></span></code></pre><h4 id="4-2参数之where-tables"><a href="#4-2参数之where-tables" class="headerlink" title="4.2参数之where / tables"></a>4.2参数之<code>where</code> / <code>tables</code></h4><p>您可以使用<code>where</code>定义显式SQL <code>WHERE</code>子句 - 也许执行非显式连接。您可以使用<code>tables</code>手动将表添加到SQL <code>FROM</code>子句。</p><p><code>where</code>和<code>tables</code>都接受字符串列表。所有<code>where</code>参数均为“与”任何其他搜索条件。</p><p>举例来讲：</p><pre class=" language-python"><code class="language-python">queryResult<span class="token operator">=</span>models<span class="token punctuation">.</span>Article　　　　　　　　　　　<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>where<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'nid in (1,3) OR title like "py%" '</span><span class="token punctuation">,</span><span class="token string">'nid>2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">extra<span class="token punctuation">,</span> 额外查询条件以及相关表，排序                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true"># id name age ut_id</span>                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>self<span class="token punctuation">,</span> select<span class="token operator">=</span>None<span class="token punctuation">,</span> where<span class="token operator">=</span>None<span class="token punctuation">,</span> params<span class="token operator">=</span>None<span class="token punctuation">,</span> tables<span class="token operator">=</span>None<span class="token punctuation">,</span> order_by<span class="token operator">=</span>None<span class="token punctuation">,</span> select_params<span class="token operator">=</span>None<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># a. 映射</span>                    <span class="token comment" spellcheck="true"># select </span>                    <span class="token comment" spellcheck="true"># select_params=None</span>                    <span class="token comment" spellcheck="true"># select 此处 from 表</span>                <span class="token comment" spellcheck="true"># b. 条件</span>                    <span class="token comment" spellcheck="true"># where=None</span>                    <span class="token comment" spellcheck="true"># params=None,</span>                    <span class="token comment" spellcheck="true"># select * from 表 where 此处</span>                <span class="token comment" spellcheck="true"># c. 表</span>                    <span class="token comment" spellcheck="true"># tables</span>                    <span class="token comment" spellcheck="true"># select * from 表,此处</span>                <span class="token comment" spellcheck="true"># c. 排序</span>                    <span class="token comment" spellcheck="true"># order_by=None</span>                    <span class="token comment" spellcheck="true"># select * from 表 order by 此处</span>                models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>                    select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'newid'</span><span class="token punctuation">:</span><span class="token string">'select count(1) from app01_usertype where id>%s'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                    select_params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    where <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'age>%s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    order_by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'-age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    tables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'app01_usertype'</span><span class="token punctuation">]</span>                <span class="token punctuation">)</span>                <span class="token triple-quoted-string string">"""                select                     app01_userinfo.id,                    (select count(1) from app01_usertype where id>1) as newid                from app01_userinfo,app01_usertype                where                     app01_userinfo.age > 18                order by                     app01_userinfo.age desc                """</span>                result <span class="token operator">=</span> models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>id__gt<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extra<span class="token punctuation">(</span>                    where<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'app01_userinfo.id &lt; %s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    tables<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'app01_usertype'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    order_by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'-app01_userinfo.id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'uid'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'sw'</span><span class="token punctuation">:</span><span class="token string">"select count(1) from app01_userinfo"</span><span class="token punctuation">}</span>                <span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>query<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># SELECT (1) AS "uid", (select count(1) from app01_userinfo) AS "sw", "app01_userinfo"."id", "app01_userinfo"."name", "app01_userinfo"."age", "app01_userinfo"."ut_id" FROM "app01_userinfo" , "app01_usertype" WHERE ("app01_userinfo"."id" > 1 AND (app01_userinfo.id &lt; 100)) ORDER BY ("app01_userinfo".id) DESC</span></code></pre><h2 id="三、路由部分"><a href="#三、路由部分" class="headerlink" title="三、路由部分"></a>三、路由部分</h2><h3 id="1-url和path的区别"><a href="#1-url和path的区别" class="headerlink" title="1 url和path的区别"></a>1 url和path的区别</h3><p>django1.x版本用的是url</p><p>基本用法：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> url，include<span class="token comment" spellcheck="true"># 参数部分是放一个{}内部键值对的key在views函数内要以关键字参数接受</span><span class="token comment" spellcheck="true"># 别名用于反向解析</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>     url<span class="token punctuation">(</span>正则表达式<span class="token punctuation">,</span> views视图函数，参数，别名<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 有名分组 year = 4位数的数字</span>re_path<span class="token punctuation">(</span>r<span class="token string">'^articles/(?P&lt;year>[0-9]{4})/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>year_archive<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 无名分组</span>re_path<span class="token punctuation">(</span>r<span class="token string">'^articles/([0-9]{4})/$'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>year_archive<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true"># 路由分发</span>path<span class="token punctuation">(</span><span class="token string">'app01/'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 反向解析的应用场景，当我们视图中或者模版中多次用到了某个url</span><span class="token comment" spellcheck="true"># 为了防止这个url后期修改导致所有用到的地方都要改，这里通过一个别名反向解析就行</span><span class="token comment" spellcheck="true"># 两种反向解析</span><span class="token comment" spellcheck="true"># 在视图函数中</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> reverseurl <span class="token operator">=</span> reverse<span class="token punctuation">(</span><span class="token string">'tag'</span><span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">/</span>mytag_test<span class="token operator">/</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 得到的是url路径，args是拼接在后面的参数</span><span class="token comment" spellcheck="true"># 在页面中</span><span class="token punctuation">{</span><span class="token operator">%</span> url <span class="token string">"别名"</span> 参数  参数<span class="token operator">%</span><span class="token punctuation">}</span></code></pre><p>django2.x用的大部分是path，也可以导入url去使用，也有结合两种特性的re_path</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># path的第一个是一个写死的路径，不支持正则</span><span class="token comment" spellcheck="true"># 第二个参数是具体的视图函数</span><span class="token comment" spellcheck="true"># 也可以反向解析</span><span class="token comment" spellcheck="true"># 在1.x版本的分组到2中变成了转换器拼接在url后面</span>path<span class="token punctuation">(</span><span class="token string">'article-create/&lt;int:id>/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>article_create<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'article_create'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 内置了5中转化器</span>str<span class="token punctuation">,</span>匹配除了路径分隔符（<span class="token operator">/</span>）之外的非空字符串，这是默认的形式int<span class="token punctuation">,</span>匹配正整数，包含<span class="token number">0</span>。slug<span class="token punctuation">,</span>匹配字母、数字以及横杠、下划线组成的字符串。uuid<span class="token punctuation">,</span>匹配格式化的uuid，如 <span class="token number">075194d3</span><span class="token operator">-</span><span class="token number">6885</span><span class="token operator">-</span><span class="token number">417e</span><span class="token operator">-</span>a8a8<span class="token number">-6c931e272f00</span>。path<span class="token punctuation">,</span>匹配任何非空字符串，包含了路径分隔符（<span class="token operator">/</span>）（不能用？）</code></pre><h2 id="四、模版部分"><a href="#四、模版部分" class="headerlink" title="四、模版部分"></a>四、模版部分</h2><h3 id="1-xss攻击"><a href="#1-xss攻击" class="headerlink" title="1 xss攻击"></a>1 xss攻击</h3><p>当我们服务端提供用户提交js代码的接口，就容易受到xss攻击，去用一些js代码影响我们的服务器。</p><p>如何解决xss攻击？</p><p>python中用了转义，让被设计者标记安全的语言才能显示到页面，内部原理是，如果用户给了<code>&lt;a href = &#39;meizitu.com&#39;&gt; 点击&lt;/a&gt;</code>这样的标签上传，如果标记安全，那这个字符串就会直接渲染到页面上变成一个标签。</p><p>如果我们没有对其转义，他会原封不动的显示在html页面上</p><p>展示的就是一些特殊字符，比如<code>&amp;gt</code>表示的就是&gt;，所以展示到页面的就是在后端显示的</p><h2 id="五、settings"><a href="#五、settings" class="headerlink" title="五、settings"></a>五、settings</h2><h3 id="1-静态资源暴露"><a href="#1-静态资源暴露" class="headerlink" title="1 静态资源暴露"></a>1 静态资源暴露</h3><p>网站所用的静态文件我们通常都放在static内，比如js，css文件，如果要让前端可以用这些静态文件渲染页面，就需要开放接口，关于网站的静态文件，django已经给我们开放了令牌（功能类似于反向解析），我们只要配置路径即可</p><pre class=" language-python"><code class="language-python">STATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">[</span>    os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">]</span></code></pre><p>而用户上传的静态文件，也需要专门有一个文件夹来接收，通常我们用media做文件夹的名字，也可以修改</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># settings.py</span>MEDIA_ROOT <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'media'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 用户上传的文件就会保存到该文件夹下</span><span class="token comment" spellcheck="true"># media是文件夹的名字，可以自定义，一般使用media作为名字</span></code></pre><p>用户只要上传文件，就会自动创建media目录，会自动在media内创建相应的上传目录</p><p>例如models中，avatar字段</p><pre class=" language-python"><code class="language-python">avatar <span class="token operator">=</span> models<span class="token punctuation">.</span>FileField<span class="token punctuation">(</span>upload_to<span class="token operator">=</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'avatar/default.png'</span><span class="token punctuation">)</span></code></pre><p>在上传了头像后，media内会自动创建一个avatar文件夹来存放头像</p><p>当然我们配置了路径只能在服务端使用这个路径，如果前端要访问后端的资源，就必须要开放相应的接口</p><p>在urls配置</p><p>固定写法，复制就能使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>static <span class="token keyword">import</span> serve<span class="token keyword">from</span> bbs <span class="token keyword">import</span> settingsurl<span class="token punctuation">(</span>r<span class="token string">'^media/(?P&lt;path>.*)'</span><span class="token punctuation">,</span> serve<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'document_root'</span><span class="token punctuation">:</span> settings<span class="token punctuation">.</span>MEDIA_ROOT<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="2-项目修改成中文"><a href="#2-项目修改成中文" class="headerlink" title="2 项目修改成中文"></a>2 项目修改成中文</h3><pre class=" language-python"><code class="language-python">LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/shanghai'</span>USE_I18N <span class="token operator">=</span> <span class="token boolean">True</span>USE_L10N <span class="token operator">=</span> <span class="token boolean">True</span>USE_TZ <span class="token operator">=</span> <span class="token boolean">False</span></code></pre><h2 id="六、RBAC：基于角色的权限控制（django内置的auth体系）"><a href="#六、RBAC：基于角色的权限控制（django内置的auth体系）" class="headerlink" title="六、RBAC：基于角色的权限控制（django内置的auth体系）"></a>六、RBAC：基于角色的权限控制（django内置的auth体系）</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># RBAC :是基于角色的访问控制（Role-Based Access Control ）,公司内部系统</span><span class="token comment" spellcheck="true"># django的auth就是内置了一套基于RBAC的权限系统</span><span class="token comment" spellcheck="true"># django中</span>    <span class="token comment" spellcheck="true"># 后台的权限控制（公司内部系统，crm，erp，协同平台）</span>    user表  <span class="token comment" spellcheck="true">#用户表</span>    permssion表 <span class="token comment" spellcheck="true"># 权限表</span>    group表 <span class="token comment" spellcheck="true"># 组别表</span>    user_groups表是user和group的中间表    group_permissions表是group和permssion中间表    user_user_permissions表是user和permission中间表    <span class="token comment" spellcheck="true"># 前台（主站），需要用三大认证</span><span class="token comment" spellcheck="true"># 用户和组别是多对多</span>用户a可以是销售组也可以是开发组销售组也可以有多个人<span class="token comment" spellcheck="true"># 组别和权限是多对多</span>销售组的人有销售产品的权限，也有检查产品的权限检查产品的权限可能管理组也有<span class="token comment" spellcheck="true"># 用户和权限</span>用户可以有多重权限一个权限也可以有多个用户拥有</code></pre><h2 id="七、django的缓存"><a href="#七、django的缓存" class="headerlink" title="七、django的缓存"></a>七、django的缓存</h2><h3 id="1-缓存6中配置位置"><a href="#1-缓存6中配置位置" class="headerlink" title="1 缓存6中配置位置"></a>1 缓存6中配置位置</h3><ol><li><p>开发调试(此模式为开发调试使用,实际上不执行任何操作)</p></li><li><p>内存缓存</p><pre class=" language-python"><code class="language-python">CACHES <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token string">'BACKEND'</span><span class="token punctuation">:</span> <span class="token string">'django.core.cache.backends.locmem.LocMemCache'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 指定缓存使用的引擎</span>  <span class="token string">'LOCATION'</span><span class="token punctuation">:</span> <span class="token string">'unique-snowflake'</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true"># 写在内存中的变量的唯一值 </span>  <span class="token string">'TIMEOUT'</span><span class="token punctuation">:</span><span class="token number">300</span><span class="token punctuation">,</span>             <span class="token comment" spellcheck="true"># 缓存超时时间(默认为300秒,None表示永不过期)</span>  <span class="token string">'OPTIONS'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>   <span class="token string">'MAX_ENTRIES'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true"># 最大缓存记录的数量（默认300）</span>   <span class="token string">'CULL_FREQUENCY'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true"># 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）</span>  <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>文件缓存</p></li><li><p>数据库缓存</p><pre class=" language-pythhon"><code class="language-pythhon">CACHES = { 'default': {  'BACKEND': 'django.core.cache.backends.db.DatabaseCache',  # 指定缓存使用的引擎  'LOCATION': 'cache_table',          # 数据库表      'OPTIONS':{   'MAX_ENTRIES': 300,           # 最大缓存记录的数量（默认300）   'CULL_FREQUENCY': 3,          # 缓存到达最大个数之后，剔除缓存个数的比例，即：1/CULL_FREQUENCY（默认3）  }   }   }</code></pre></li><li><p>Memcache缓存(使用python-memcached模块连接memcache)</p></li><li><p>Memcache缓存(使用pylibmc模块连接memcache)</p></li></ol><h3 id="2-缓存应用"><a href="#2-缓存应用" class="headerlink" title="2 缓存应用"></a>2 缓存应用</h3><p>Django提供了不同粒度的缓存,可以缓存某个页面,可以只缓存一个页面的某个部分,甚至可以缓存整个网站.</p><h4 id="2-1-视图中使用缓存"><a href="#2-1-视图中使用缓存" class="headerlink" title="2.1 视图中使用缓存"></a>2.1 视图中使用缓存</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache_page<span class="token keyword">import</span> time<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span>@cache_page<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#超时时间为15秒</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>　　t<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#获取当前时间</span>　　bookList<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>　　<span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"index.html"</span><span class="token punctuation">,</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># index.html</span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h3<span class="token operator">></span>当前时间<span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span> t <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token operator">&lt;</span>ul<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> book <span class="token keyword">in</span> bookList <span class="token operator">%</span><span class="token punctuation">}</span>       <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> book<span class="token punctuation">.</span>name <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> book<span class="token punctuation">.</span>price <span class="token punctuation">}</span><span class="token punctuation">}</span>$<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token comment" spellcheck="true"># 我们可以看到的效果是15秒内不管前端刷新了几次 t都不会改变</span></code></pre><h4 id="2-2-全局使用缓存"><a href="#2-2-全局使用缓存" class="headerlink" title="2.2 全局使用缓存"></a>2.2 全局使用缓存</h4><p>既然是全站缓存,当然要使用Django中的中间件.</p><p>用户的请求通过中间件,经过一系列的认证等操作,如果请求的内容在缓存中存在,则使用FetchFromCacheMiddleware获取内容并返回给用户</p><p>当返回给用户之前,判断缓存中是否已经存在,如果不存在,则UpdateCacheMiddleware会将缓存保存至Django的缓存之中,以实现全站缓存</p><pre class=" language-python"><code class="language-python">缓存整个站点，是最简单的缓存方法在 MIDDLEWARE_CLASSES 中加入 “update” 和 “fetch” 中间件MIDDLEWARE_CLASSES <span class="token operator">=</span> <span class="token punctuation">(</span>    ‘django<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>UpdateCacheMiddleware’<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#第一</span>    <span class="token string">'django.middleware.common.CommonMiddleware'</span><span class="token punctuation">,</span>    ‘django<span class="token punctuation">.</span>middleware<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>FetchFromCacheMiddleware’<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#最后</span><span class="token punctuation">)</span>“update” 必须配置在第一个“fetch” 必须配置在最后一个<span class="token comment" spellcheck="true"># 视图和模版都不需要配置</span></code></pre><h4 id="2-3-局部视图缓存"><a href="#2-3-局部视图缓存" class="headerlink" title="2.3 局部视图缓存"></a>2.3 局部视图缓存</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># views</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache_page<span class="token keyword">import</span> time<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>     t<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">#获取当前时间</span>     bookList<span class="token operator">=</span>Book<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">"index.html"</span><span class="token punctuation">,</span>locals<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># index.html</span><span class="token punctuation">{</span><span class="token operator">%</span> load cache <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> cache <span class="token number">2</span> <span class="token string">'name'</span> <span class="token operator">%</span><span class="token punctuation">}</span> <span class="token operator">&lt;</span>h3<span class="token operator">></span>缓存<span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">{</span> t <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span><span class="token punctuation">{</span><span class="token operator">%</span> endcache <span class="token operator">%</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习</title>
      <link href="/task/2021/03/15/%E5%85%B6%E4%BB%96/linux%E5%AD%A6%E4%B9%A0/"/>
      <url>/task/2021/03/15/%E5%85%B6%E4%BB%96/linux%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="linux学习"><a href="#linux学习" class="headerlink" title="linux学习"></a>linux学习</h1><p>[TOC]</p><h2 id="一、虚拟软件安装"><a href="#一、虚拟软件安装" class="headerlink" title="一、虚拟软件安装"></a>一、虚拟软件安装</h2><h3 id="1-虚拟化技术"><a href="#1-虚拟化技术" class="headerlink" title="1 虚拟化技术"></a>1 虚拟化技术</h3><p>kvm，vmware，这两个的功能是可以在硬件上开辟一个虚拟空间，在这个空间上可以安装不同的操作系统</p><ul><li>iaas 基础设置及服务</li><li>paas 平台及服务 </li><li>saas 软件及服务</li></ul><p>openstack管理在硬件上安装的所有的操作系统，实现iaas</p><p>docker：实现paas</p><p>k8s：容器编排，管理不同机器上的容器（docker容器）</p><h3 id="2-centos-安装"><a href="#2-centos-安装" class="headerlink" title="2 centos 安装"></a>2 centos 安装</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># DHCP :</span>DHCP（动态主机配置协议）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。默认情况下，DHCP作为Windows Server的一个服务组件不会被系统自动安装，还需要管理员手动安装并进行必要的配置<span class="token comment" spellcheck="true"># dns:可以把域名地址转换成ip地址</span><span class="token comment" spellcheck="true"># 主机名：生产环境，要有意义  地址+楼层+房间号+业务</span><span class="token comment" spellcheck="true"># swap分区：交换分区</span><span class="token comment" spellcheck="true"># 关于分区</span>linux 分区结构为树结构， windows 为森林结构，所以有C盘D盘之类的， 而linux <span class="token operator">/</span>分区就是根分区， swap可以理解为虚拟内存， <span class="token operator">/</span>boot 这是个目录， 可以分成一个分区，然后挂载到<span class="token operator">/</span>boot目录， 也可以只用一个<span class="token operator">/</span>分区， 里面会有boot目录的，保存的是引导文件，内核等等的东东</code></pre><h2 id="二、-bash-shell-介绍和使用"><a href="#二、-bash-shell-介绍和使用" class="headerlink" title="二、 bash shell 介绍和使用"></a>二、 bash shell 介绍和使用</h2><h3 id="1-什么是Bash-shell-壳"><a href="#1-什么是Bash-shell-壳" class="headerlink" title="1 什么是Bash shell(壳)"></a>1 什么是Bash shell(壳)</h3><pre class=" language-python"><code class="language-python">是一个命令解释器，就是一个软件  执行就是bash，可以在里面输入命令，做交互，exit退出</code></pre><h3 id="2-能干什么"><a href="#2-能干什么" class="headerlink" title="2 能干什么"></a>2 能干什么</h3><pre class=" language-python"><code class="language-python">原来在windows上点点点完成的是，它都能做到使用Shell实现对Linux系统的大部分管理，例如<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">.</span>文件管理<span class="token punctuation">(</span>文件创建，移动，复制，删除，编辑…<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span>权限管理<span class="token punctuation">(</span>不同用户不通权限<span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span>用户管理（创建，删除…<span class="token punctuation">.</span>）<span class="token number">4</span><span class="token punctuation">.</span>磁盘管理（挂载）<span class="token number">5</span><span class="token punctuation">.</span>网络管理<span class="token number">6</span><span class="token punctuation">.</span>软件管理等等</code></pre><h3 id="3-平时我们如何使用Shell呢？"><a href="#3-平时我们如何使用Shell呢？" class="headerlink" title="3 平时我们如何使用Shell呢？"></a>3 平时我们如何使用Shell呢？</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 输入命令，低效<span class="token number">2</span> shell script：shell脚本  ，批量执行命令</code></pre><h3 id="4-shell提示符"><a href="#4-shell提示符" class="headerlink" title="4  shell提示符"></a>4  shell提示符</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># root：当前用户</span><span class="token comment" spellcheck="true"># @ ：没有意义</span><span class="token comment" spellcheck="true">#lqz：主机名</span><span class="token comment" spellcheck="true"># ~：家目录</span><span class="token comment" spellcheck="true"># #:表示超级用户</span><span class="token punctuation">[</span>lqz@lqz <span class="token operator">~</span><span class="token punctuation">]</span>$ </code></pre><h3 id="5-Shell基础语法"><a href="#5-Shell基础语法" class="headerlink" title="5 Shell基础语法"></a>5 Shell基础语法</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#  命令  选项  参数   三部分组成</span>ls <span class="token operator">-</span>a  <span class="token operator">/</span>temp      ls <span class="token operator">-</span><span class="token operator">-</span>all<span class="token comment" spellcheck="true"># 以下三个一样</span>ls <span class="token operator">-</span>l <span class="token operator">-</span>als <span class="token operator">-</span>lals <span class="token operator">-</span>al</code></pre><h3 id="6-命令补全"><a href="#6-命令补全" class="headerlink" title="6 命令补全"></a>6 命令补全</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 一下或者两下tab建</span><span class="token comment" spellcheck="true"># 一下的话会直接找到你要用的命令</span><span class="token comment" spellcheck="true"># 两下，可能会用到的全列出来</span><span class="token comment" spellcheck="true"># ifconfig 在7的版本没有，需要装软件</span>yum insatll net<span class="token operator">-</span>tools <span class="token operator">-</span>yyum insatll net<span class="token operator">-</span>tools<span class="token comment" spellcheck="true"># yum install bash-completion -y   补齐选项</span>ls <span class="token operator">-</span> 两下tab建，所有的选项都会提示出来</code></pre><h3 id="7-命令快捷键"><a href="#7-命令快捷键" class="headerlink" title="7 命令快捷键"></a>7 命令快捷键</h3><pre class=" language-python"><code class="language-python">Ctrl <span class="token operator">+</span> a    <span class="token comment" spellcheck="true">#光标跳转至正在输入的命令行的首部</span>Ctrl <span class="token operator">+</span> e    <span class="token comment" spellcheck="true">#光标跳转至正在输入的命令行的尾部</span>Ctrl <span class="token operator">+</span> c    <span class="token comment" spellcheck="true">#终止前台运行的程序   ##################</span>Ctrl <span class="token operator">+</span> d    <span class="token comment" spellcheck="true">#在shell中，ctrl-d表示推出当前shell。</span>Ctrl <span class="token operator">+</span> z    <span class="token comment" spellcheck="true">#将任务暂停，挂至后台</span>Ctrl <span class="token operator">+</span> l    <span class="token comment" spellcheck="true">#清屏，和clear命令等效。  ##############</span>Ctrl <span class="token operator">+</span> k    <span class="token comment" spellcheck="true">#删除从光标到行末的所有字符</span>Ctrl <span class="token operator">+</span> u    <span class="token comment" spellcheck="true">#删除从光标到行首的所有字符</span>Ctrl <span class="token operator">+</span> r    <span class="token comment" spellcheck="true">#搜索历史命令, 利用关键字，Tab建选中,只能找到最近的一条</span>Ctrl <span class="token operator">+</span> w    <span class="token comment" spellcheck="true">#按单词或空格进行向前删除</span>Ctrl <span class="token operator">+</span> 左右建 <span class="token comment" spellcheck="true">#按单词或空格进行向前向后跳</span><span class="token comment" spellcheck="true">#在命令行前加面加 "#" 则该命令不会被执行</span></code></pre><h3 id="8-history"><a href="#8-history" class="headerlink" title="8 history"></a>8 history</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># history查看历史命令</span><span class="token comment" spellcheck="true"># !数字   快速执行数字那一行</span><span class="token comment" spellcheck="true"># !yum    快速执行最近一条yum命令</span><span class="token comment" spellcheck="true"># history -d 70  把历史记录的第70行删除</span><span class="token comment" spellcheck="true"># history -c   清空所有记录（连到人家服务器，操作完了，执行一下）</span><span class="token comment" spellcheck="true"># history -w   可以把 历史记录写到用户家路径的.bash_history文件中</span></code></pre><h3 id="9-网络问题"><a href="#9-网络问题" class="headerlink" title="9 网络问题"></a>9 网络问题</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 如果出现pingip可以但是ping百度不行，重启一下网络即可</span>service network restart</code></pre><h2 id="三、linux基本命令"><a href="#三、linux基本命令" class="headerlink" title="三、linux基本命令"></a>三、linux基本命令</h2><h3 id="1-命令别名"><a href="#1-命令别名" class="headerlink" title="1 命令别名"></a>1 命令别名</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 定义一个临时别名,ck查看目录下的所有文件</span>alias ck <span class="token operator">=</span> <span class="token string">'ls -a'</span><span class="token comment" spellcheck="true"># 2 删除临时别名</span>unalias ck<span class="token comment" spellcheck="true"># 3 永久生效别名（需要将别名的配置写到配置文件中）</span>echo <span class="token string">'alias ck="ls -a"'</span> <span class="token operator">>></span> <span class="token operator">/</span>etc<span class="token operator">/</span>bashrc</code></pre><h3 id="2-–help帮助"><a href="#2-–help帮助" class="headerlink" title="2 –help帮助"></a>2 –help帮助</h3><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls --help</span>用法<span class="token punctuation">:</span> ls <span class="token punctuation">[</span>选项<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span>文件<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment" spellcheck="true">#ls 常见选项</span><span class="token operator">-</span>a  <span class="token comment" spellcheck="true">#查看目录下的所有文件，包括隐藏文件</span><span class="token operator">-</span>l  <span class="token comment" spellcheck="true">#以长格式的方式显示文件的详细内容</span><span class="token operator">-</span>h  <span class="token comment" spellcheck="true">#以人性化的方式显示内容，配合-l使用</span><span class="token operator">-</span>d  <span class="token comment" spellcheck="true">#只列出目录名，不列出目录以下的内容</span><span class="token operator">-</span>t  <span class="token comment" spellcheck="true">#按修改时间进行排序</span><span class="token operator">-</span>i  <span class="token comment" spellcheck="true">#显示文件的inode(该文件在该分区的一个编号)</span><span class="token comment" spellcheck="true"># man ls    #查看ls命令的手册</span></code></pre><h3 id="3-目录介绍"><a href="#3-目录介绍" class="headerlink" title="3 目录介绍"></a>3 目录介绍</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> linux 是单根 <span class="token operator">/</span> 根路径，windows是多根<span class="token number">2</span> bin和sbin：bin普通用户命令，超级用户命令  都是usr下的文件夹软链接到根路径<span class="token number">3</span> home 、root：home普通用户的家路径，home下的用户名的文件夹    <span class="token operator">-</span>用户一登录系统，是在自己的家路径 jack<span class="token operator">-</span><span class="token operator">-</span>》<span class="token operator">/</span>home<span class="token operator">/</span>jack</code></pre><h4 id="1-目录之usr"><a href="#1-目录之usr" class="headerlink" title="1 目录之usr"></a>1 目录之usr</h4><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>usr，相当于C<span class="token punctuation">:</span>Windows<span class="token operator">/</span>usr<span class="token operator">/</span>local，软件安装的目录，相当于C<span class="token punctuation">:</span>Program<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>，普通用户使用的应用程序<span class="token punctuation">(</span>重要<span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>sbin，管理员使用的应用程序<span class="token punctuation">(</span>重要<span class="token punctuation">)</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib，库文件Glibc 32bit<span class="token operator">/</span>usr<span class="token operator">/</span>lib64，库文件Glibc 64bit<span class="token number">1</span> df <span class="token operator">-</span>h  <span class="token comment" spellcheck="true"># 查看系统中文件的使用情况</span><span class="token number">2</span> du <span class="token operator">-</span>sh <span class="token operator">/</span>usr<span class="token operator">/</span>  <span class="token comment" spellcheck="true">#查看当前目录下各个文件及目录占用空间大小</span><span class="token comment" spellcheck="true"># 补充：远程执行ssh命令：</span><span class="token comment" spellcheck="true"># ansiable：python写的，批量执行命令（速度比较慢，大量的主机，会卡顿）</span><span class="token comment" spellcheck="true"># salstack：在客户端装agent，</span><span class="token comment" spellcheck="true"># zabbix：监控，php写的，监控mysql运行情况</span><span class="token comment" spellcheck="true"># /boot</span>存放的系统启动相关的文件，例如<span class="token punctuation">:</span>kernel，grub<span class="token punctuation">(</span>引导装载程序<span class="token punctuation">)</span></code></pre><h4 id="2-目录之etc"><a href="#2-目录之etc" class="headerlink" title="2 目录之etc"></a>2 目录之etc</h4><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>etc，极其重要，后续所有服务的配置都在这个目录中<span class="token operator">/</span>etc<span class="token operator">/</span>sysconfig<span class="token operator">/</span>network<span class="token operator">-</span>script<span class="token operator">/</span>ifcfg<span class="token operator">-</span>，网络配置文件<span class="token operator">/</span>etc<span class="token operator">/</span>hostname，系统主机名配置文件<span class="token punctuation">,</span>主机名很重要，有些特殊服务要依赖主机名，没有主机名会报错起不来；修改了要重启：reboot<span class="token operator">/</span>etc<span class="token operator">/</span>resolv<span class="token punctuation">.</span>conf，dns客户端配置文件<span class="token punctuation">,</span>域名解析服务器，一般我们不配置，因为网卡的配置好了，会覆盖掉它，网卡的优先级高<span class="token operator">/</span>etc<span class="token operator">/</span>hosts，本地域名解析配置文件，域名解析，先找自己的hosts，再去域名解析</code></pre><h4 id="3-目录之var-dev"><a href="#3-目录之var-dev" class="headerlink" title="3 目录之var dev"></a>3 目录之var dev</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> cat <span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>secure <span class="token comment" spellcheck="true">#查看用户登陆时间</span><span class="token operator">/</span>dev，存放设备文件，比如硬盘，硬盘分区，光驱，等等<span class="token operator">/</span>dev<span class="token operator">/</span>sd 硬盘设备<span class="token operator">/</span>dev<span class="token operator">/</span>null，黑洞设备，只进不出。类似于垃圾回收站<span class="token operator">/</span>dev<span class="token operator">/</span>random，生成随机数的设备<span class="token operator">/</span>dev<span class="token operator">/</span>zero，能远远不断的产生数据，类似于取款机，随时随地取钱</code></pre><h4 id="4-目录之proc"><a href="#4-目录之proc" class="headerlink" title="4 目录之proc"></a>4 目录之proc</h4><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>proc，反映系统当前进程的实时状态 <span class="token punctuation">:</span>process加上跑着一个uwsgi<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>》id号，重启，id号会变，<span class="token number">1</span>这个永远不变<span class="token comment" spellcheck="true">#1 media:提供设备的挂载点，媒体文件</span><span class="token comment" spellcheck="true"># linux 新增了盘符，需要手动挂载</span><span class="token comment" spellcheck="true"># 把光盘里的数据，挂载到media目录</span>mount  <span class="token operator">/</span>dev<span class="token operator">/</span>cdrom <span class="token operator">/</span>media<span class="token operator">/</span><span class="token comment" spellcheck="true"># 2 mnt：提供设备的挂载点（同上）</span><span class="token comment" spellcheck="true"># 3 opt：第三方工具，第三方软件默认安装的(mysql...)</span><span class="token comment" spellcheck="true"># run :下有pid，log结尾的文件</span>ls <span class="token operator">/</span>runcat sshd<span class="token punctuation">.</span>pid  <span class="token comment" spellcheck="true"># 进程运行的pid号,放在文件中</span>ps aux <span class="token operator">|</span>grep sshd<span class="token comment" spellcheck="true"># .lock文件的作用,锁机制</span><span class="token comment" spellcheck="true"># 假设现在执行</span>yum install tree<span class="token comment" spellcheck="true"># 再开一个窗口执行相同命令</span>yum install tree<span class="token triple-quoted-string string">'''Another app is currently holding the yum lock; waiting for it to exit...  The other application is: yum    Memory :  71 M RSS (470 MB VSZ)    Started: Tue Aug 18 00:26:31 2020 - 00:24 ago    State  : Sleeping, pid: 6191'''</span>cat <span class="token operator">/</span>run<span class="token operator">/</span>yum<span class="token punctuation">.</span>pid</code></pre><h3 id="4-文件管理"><a href="#4-文件管理" class="headerlink" title="4 文件管理"></a>4 文件管理</h3><h4 id="1-创建"><a href="#1-创建" class="headerlink" title="1 创建"></a>1 创建</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># touch 文件创建</span><span class="token comment" spellcheck="true"># 无则创建，有则修改更新时间</span>touch filetouch <span class="token operator">/</span>home<span class="token operator">/</span>od<span class="token operator">/</span>file1 file2  <span class="token comment" spellcheck="true"># home和od都必须存在</span>touch file｛a，b，c｝<span class="token comment" spellcheck="true"># mkdir 目录创建</span><span class="token comment" spellcheck="true"># 选项：-v 显示详细信息  -p 递归创建目录</span><span class="token comment" spellcheck="true"># mkdir dir1</span><span class="token comment" spellcheck="true"># mkdir /home/od/dir1 /home/od/dir2</span><span class="token comment" spellcheck="true"># mkdir -v /home/od/{dir3,dir4} </span><span class="token comment" spellcheck="true"># mkdir -pv /home/od/dir5/dir6</span><span class="token comment" spellcheck="true"># mkdir -pv /home/{od/{diu,but},boy}</span></code></pre><h4 id="2-查看"><a href="#2-查看" class="headerlink" title="2 查看"></a>2 查看</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> ls<span class="token number">2</span> <span class="token comment" spellcheck="true"># 选项: -L: 显示目录树的层级</span><span class="token comment" spellcheck="true"># tree /home/od/    #显示当前目录下的结构</span><span class="token operator">/</span>home<span class="token operator">/</span>od<span class="token operator">/</span>├── but├── dir1├── dir2├── dir3├── dir4├── dir5│   └── dir6└── diu</code></pre><h4 id="3-复制"><a href="#3-复制" class="headerlink" title="3 复制"></a>3 复制</h4><pre class=" language-python"><code class="language-python">cp<span class="token comment" spellcheck="true">#选项： -v:详细显示命令执行的操作 -r: 递归处理目录与子目录 -p: 保留源文件或目录的属性</span><span class="token comment" spellcheck="true"># cp file /tmp/file_copy</span><span class="token comment" spellcheck="true"># cp name /tmp/name         #不修改名称</span><span class="token comment" spellcheck="true"># cp file /tmp/             #不修改名称</span><span class="token comment" spellcheck="true"># cp -p file /tmp/file_p    #-p保持原文件或目录的属性</span><span class="token comment" spellcheck="true"># cp -r  /etc/ /tmp/        #复制目录需要使用-r参数, 递归复制</span><span class="token comment" spellcheck="true"># cp -rv /etc/hosts /etc/hostname /tmp  #拷贝多个文件至一个目录</span><span class="token comment" spellcheck="true"># cp -rv /etc/{hosts,hosts.bak}</span><span class="token comment" spellcheck="true"># cp -rv /etc/hosts{,-org}</span></code></pre><h4 id="4-移动"><a href="#4-移动" class="headerlink" title="4 移动"></a>4 移动</h4><pre><code>mv# mv file file1             #原地移动算改名# mv file1 /tmp/            #移动文件至tmp目录# mv /tmp/file1 ./          #移动tmp目录的文件至当前目录# mv dir/ /tmp/             #移动目录至/tmp目录下# touch file&#123;1..3&#125;# mv file1 file2 file3 /opt/    #移动多个文件或至同一个目录# mkdir dir&#123;1..3&#125;# mv dir1/ dir2/ dir3/ /opt     #移动多个目录至同一个目录</code></pre><h4 id="5-删除"><a href="#5-删除" class="headerlink" title="5 删除"></a>5 删除</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#选项：-r: 递归 -f: 强制删除 -v: 详细过程</span><span class="token comment" spellcheck="true"># rm  file.txt      #删除文件, 默认rm存在alias别名，rm -i所以会提醒是否删除文件</span><span class="token comment" spellcheck="true"># rm -f file.txt    #删除文件, 不提醒</span><span class="token comment" spellcheck="true"># rm -r dir/        #递归删除目录，会提示</span><span class="token comment" spellcheck="true"># rm -rf dir/       #强制删除目录,不提醒(慎用)</span><span class="token comment" spellcheck="true">#1.rm删除示例</span><span class="token comment" spellcheck="true"># mkdir /home/dir10</span><span class="token comment" spellcheck="true"># touch /home/dir10/{file2,file3,.file4}</span><span class="token comment" spellcheck="true"># rm -f /home/dir10/  //不包括隐藏文件 </span><span class="token comment" spellcheck="true"># ls /home/dir10/ -a</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span>file4<span class="token comment" spellcheck="true">#2.rm删除示例2</span><span class="token comment" spellcheck="true"># touch file{1..10}</span><span class="token comment" spellcheck="true"># touch {1..10}.pdf</span><span class="token comment" spellcheck="true"># rm -rf file </span><span class="token comment" spellcheck="true"># rm -rf .pdf</span></code></pre><h4 id="6-查看文件内容cat"><a href="#6-查看文件内容cat" class="headerlink" title="6 查看文件内容cat"></a>6 查看文件内容cat</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------cat</span><span class="token comment" spellcheck="true"># cp /etc/passwd ./pass</span><span class="token comment" spellcheck="true"># cat pass      #正常查看文件方式</span><span class="token comment" spellcheck="true"># cat -n pass   #-n显示文件有多少行</span><span class="token comment" spellcheck="true"># cat -A pass   #查看文件的特殊符号,比如文件中存在tab键</span><span class="token comment" spellcheck="true"># tac pass      #倒序查看文件</span>cat <span class="token operator">>></span> test2<span class="token punctuation">.</span>txt <span class="token operator">&lt;&lt;</span>EOFadsadfEOF</code></pre><h4 id="7-查看文件内容less，more"><a href="#7-查看文件内容less，more" class="headerlink" title="7 查看文件内容less，more"></a>7 查看文件内容less，more</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------less、more</span><span class="token comment" spellcheck="true"># less /etc/services    #使用光标上下翻动，空格进行翻页，q退出</span><span class="token comment" spellcheck="true"># more /etc/services    #使用回车上下翻动，空格进行翻页，q退出(有百分比)</span></code></pre><h4 id="8-查看文件头head，尾tail"><a href="#8-查看文件头head，尾tail" class="headerlink" title="8 查看文件头head，尾tail"></a>8 查看文件头head，尾tail</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------head</span><span class="token comment" spellcheck="true"># head pass     #查看头部内容，默认前十行</span><span class="token comment" spellcheck="true"># head -n5 pass #查看头部5行，使用-n指定</span><span class="token comment" spellcheck="true"># ps aux | head -5 # 只看头部5个进程</span><span class="token comment" spellcheck="true">#------tail</span><span class="token comment" spellcheck="true"># tail pass  # 查看文件尾部，默认10行</span><span class="token comment" spellcheck="true"># tail -20 /var/log/secure  # 查看文件尾部20行</span><span class="token comment" spellcheck="true"># tail -f /var/log/messages #-f动态查看文件尾部的变化</span><span class="token comment" spellcheck="true"># tailf /var/log/messages   #查看文件尾部的变化</span><span class="token comment" spellcheck="true"># ps aux | tail -2</span></code></pre><h4 id="9-过滤文件"><a href="#9-过滤文件" class="headerlink" title="9 过滤文件"></a>9 过滤文件</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#------grep过滤文件内容</span><span class="token comment" spellcheck="true"># grep "^root" pass     #匹配以root开头的行</span><span class="token comment" spellcheck="true"># grep "bash$" pass     #匹配以bash结尾的行</span><span class="token comment" spellcheck="true"># grep -i "ftp" pass    #忽略大小写匹配</span><span class="token comment" spellcheck="true"># grep  -Ei "sync$|ftp" pass    #匹配文件中包含sync结尾或ftp字符串</span><span class="token comment" spellcheck="true"># grep -n -A 2 "Failed" /var/log/secure #匹配/var/log/secure文件中Failed字符串,并打印它的下2行</span><span class="token comment" spellcheck="true"># grep -n -B 2 "Failed" /var/log/secure #匹配/var/log/secure文件中Failed字符串,并打印它的上2行</span><span class="token comment" spellcheck="true"># grep -n -C 2 "Failed" /var/log/secure #匹配/var/log/secure文件中Failed字符串,并打印它的上下2行</span><span class="token comment" spellcheck="true"># 上翻，下翻</span>control<span class="token operator">+</span>b：下翻control<span class="token operator">+</span>f：上翻</code></pre><h4 id="10-联网下载文件"><a href="#10-联网下载文件" class="headerlink" title="10 联网下载文件"></a>10 联网下载文件</h4><pre class=" language-python"><code class="language-python">yum install wget <span class="token operator">-</span>y<span class="token comment" spellcheck="true">#选项: -O: 指定下载地址</span><span class="token comment" spellcheck="true"># wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><span class="token comment" spellcheck="true"># 比如下载图片</span><span class="token comment" spellcheck="true"># crul：浏览网络上资源，-o保存到本地</span><span class="token comment" spellcheck="true">#选项: -o: 指定下载地址</span><span class="token comment" spellcheck="true"># curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><span class="token comment" spellcheck="true"># 请求网址得到的是页面的html地址类似request模块</span></code></pre><h4 id="11-本地上传下载"><a href="#11-本地上传下载" class="headerlink" title="11 本地上传下载"></a>11 本地上传下载</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># yum install lrzsz -y  #不安装软件则无法执行该命令</span><span class="token comment" spellcheck="true"># rz            #只能上传文件文件上传(不能大于4g)</span><span class="token comment" spellcheck="true"># sz /path/file #只能下载文件</span></code></pre><h4 id="12-文件查找"><a href="#12-文件查找" class="headerlink" title="12 文件查找"></a>12 文件查找</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># locate /etc/sh       #搜索etc目录下所有以sh开头的文件</span><span class="token comment" spellcheck="true"># locate -i /etc/sh    #搜索etc目录下，所有以sh开头的文件，忽略大小写</span></code></pre><h4 id="13-命令查找"><a href="#13-命令查找" class="headerlink" title="13 命令查找"></a>13 命令查找</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># which ls  #查找ls命令的绝对路径</span><span class="token comment" spellcheck="true"># whereis ls       //查找命令的路径、帮助手册、等</span><span class="token comment" spellcheck="true"># whereis -b ls    //仅显示命令所在的路径，仅看二进制</span><span class="token comment" spellcheck="true"># 对于内核相关的一些命令，用which whereis 是无法查询到的，需要使用type采查询</span><span class="token comment" spellcheck="true"># type -a ls        #查看命令的绝对路径(包括别名)</span><span class="token comment" spellcheck="true"># type -a for</span></code></pre><h4 id="14-文件字符处理"><a href="#14-文件字符处理" class="headerlink" title="14 文件字符处理"></a>14 文件字符处理</h4><pre class=" language-python"><code class="language-python">sort 排序uniq 去重cut 截断wc 统计行号http<span class="token punctuation">:</span><span class="token operator">//</span>liuqingzheng<span class="token punctuation">.</span>top<span class="token operator">/</span>linux<span class="token operator">/</span><span class="token operator">%</span>E5<span class="token operator">%</span><span class="token number">85</span><span class="token operator">%</span>A5<span class="token operator">%</span>E9<span class="token operator">%</span><span class="token number">97</span><span class="token operator">%</span>A8<span class="token operator">%</span>E5<span class="token operator">%</span><span class="token number">88</span><span class="token operator">%</span>B0<span class="token operator">%</span>E7<span class="token operator">%</span>B2<span class="token operator">%</span>BE<span class="token operator">%</span>E9<span class="token operator">%</span><span class="token number">80</span><span class="token operator">%</span><span class="token number">9A</span><span class="token operator">/</span><span class="token number">04</span><span class="token operator">-</span>Linux<span class="token operator">%</span>E6<span class="token operator">%</span><span class="token number">96</span><span class="token operator">%</span><span class="token number">87</span><span class="token operator">%</span>E4<span class="token operator">%</span>BB<span class="token operator">%</span>B6<span class="token operator">%</span>E7<span class="token operator">%</span>AE<span class="token operator">%</span>A1<span class="token operator">%</span>E7<span class="token operator">%</span><span class="token number">90</span><span class="token operator">%</span><span class="token number">86</span><span class="token operator">/</span></code></pre><h4 id="15-系统文件属性"><a href="#15-系统文件属性" class="headerlink" title="15 系统文件属性"></a>15 系统文件属性</h4><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -l ks.cfg</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll -h ks.cfg</span><span class="token operator">-</span>rw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span> <span class="token number">1</span> root root <span class="token number">4434</span> May <span class="token number">30</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">58</span> ks<span class="token punctuation">.</span>cfg<span class="token comment" spellcheck="true">#</span><span class="token operator">-</span>rw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span> ①<span class="token punctuation">:</span>第一个字符是文件类型，其他则是权限<span class="token number">1</span>           ②<span class="token punctuation">:</span>硬链接次数root        ③<span class="token punctuation">:</span>文件属于哪个用户root        ④<span class="token punctuation">:</span>文件属于哪个组（用户的分组）<span class="token number">4434</span>        ⑤<span class="token punctuation">:</span>文件大小May30 <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">58</span> ⑥⑦⑧<span class="token punctuation">:</span>最新修改的时间与日期ks<span class="token punctuation">.</span>cfg      ⑨<span class="token punctuation">:</span>文件或目录名称<span class="token comment" spellcheck="true"># 文件类型解析</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll -d /etc/hosts /tmp /bin/ls  /dev/sda /dev/tty1 /etc/grub2.cfg /dev/log /run/dmeventd-client</span><span class="token operator">-</span>rwxr<span class="token operator">-</span>xr<span class="token operator">-</span>x<span class="token punctuation">.</span>  <span class="token number">1</span> root root <span class="token number">117656</span> Jun <span class="token number">30</span>  <span class="token number">2016</span> <span class="token operator">/</span>bin<span class="token operator">/</span>lssrw<span class="token operator">-</span>rw<span class="token operator">-</span>rw<span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root      <span class="token number">0</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">35</span> <span class="token operator">/</span>dev<span class="token operator">/</span>logbrw<span class="token operator">-</span>rw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root disk   <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">/</span>dev<span class="token operator">/</span>sdacrw<span class="token operator">-</span><span class="token operator">-</span>w<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root tty    <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">/</span>dev<span class="token operator">/</span>tty1lrwxrwxrwx<span class="token punctuation">.</span>  <span class="token number">1</span> root root     <span class="token number">22</span> Jan <span class="token number">13</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">31</span> <span class="token operator">/</span>etc<span class="token operator">/</span>grub2<span class="token punctuation">.</span>cfg <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>boot<span class="token operator">/</span>grub2<span class="token operator">/</span>grub<span class="token punctuation">.</span>cfg<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root    <span class="token number">199</span> Jan <span class="token number">20</span> <span class="token number">11</span><span class="token punctuation">:</span><span class="token number">03</span> <span class="token operator">/</span>etc<span class="token operator">/</span>hostsprw<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">.</span>  <span class="token number">1</span> root root      <span class="token number">0</span> Jan <span class="token number">20</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">36</span> <span class="token operator">/</span>run<span class="token operator">/</span>dmeventd<span class="token operator">-</span>clientdrwxrwxrwt<span class="token punctuation">.</span> <span class="token number">61</span> root root   <span class="token number">8192</span> Jan <span class="token number">21</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">01</span> <span class="token operator">/</span>tmp<span class="token comment" spellcheck="true">#说明</span><span class="token operator">-</span>   <span class="token comment" spellcheck="true">#普通文件(文本, 二进制, 压缩, 图片, 日志等) </span>d   <span class="token comment" spellcheck="true">#目录文件</span>b   <span class="token comment" spellcheck="true">#设备文件(块设备)存储设备硬盘 /dev/sda1, /dev/sda2</span>c   <span class="token comment" spellcheck="true">#设备文件(字符设备)，终端 /dev/tty1, /dev/zero</span>s   <span class="token comment" spellcheck="true">#套接字文件, 进程间通信(socket)</span>p   <span class="token comment" spellcheck="true">#管道文件</span>l   <span class="token comment" spellcheck="true">#链接文件</span><span class="token comment" spellcheck="true"># 但是有时候这样给的文件类型不太精确，我们可以file来判断这个文件的类型</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /etc/hosts</span><span class="token operator">/</span>etc<span class="token operator">/</span>hosts<span class="token punctuation">:</span> ASCII text<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /bin/ls</span><span class="token operator">/</span>bin<span class="token operator">/</span>ls<span class="token punctuation">:</span> ELF <span class="token number">64</span><span class="token operator">-</span>bit LSB executable<span class="token punctuation">,</span> x86<span class="token number">-64</span><span class="token punctuation">,</span> version <span class="token number">1</span> <span class="token punctuation">(</span>SYSV<span class="token punctuation">)</span><span class="token punctuation">,</span> dynamically linked <span class="token punctuation">(</span>uses shared libs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">for</span> GNU<span class="token operator">/</span>Linux <span class="token number">2.6</span><span class="token punctuation">.</span><span class="token number">32</span><span class="token punctuation">,</span> BuildID<span class="token punctuation">[</span>sha1<span class="token punctuation">]</span><span class="token operator">=</span>aa7ff68f13de25936a098016243ce57c3c982e06<span class="token punctuation">,</span> stripped<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /dev/sda</span><span class="token operator">/</span>dev<span class="token operator">/</span>sda<span class="token punctuation">:</span> block special<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /dev/tty1</span><span class="token operator">/</span>dev<span class="token operator">/</span>tty1<span class="token punctuation">:</span> character special<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /etc/grub2.cfg</span><span class="token operator">/</span>etc<span class="token operator">/</span>grub2<span class="token punctuation">.</span>cfg<span class="token punctuation">:</span> broken symbolic link to `<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>boot<span class="token operator">/</span>grub2<span class="token operator">/</span>grub<span class="token punctuation">.</span>cfg'<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /home</span><span class="token operator">/</span>home<span class="token punctuation">:</span> directory<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file /run/dmeventd-client</span><span class="token operator">/</span>run<span class="token operator">/</span>dmeventd<span class="token operator">-</span>client<span class="token punctuation">:</span> fifo <span class="token punctuation">(</span>named pipe<span class="token punctuation">)</span><span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ll but</span><span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span> <span class="token number">1</span> root root <span class="token number">42125</span> Apr  <span class="token number">1</span> <span class="token number">12</span><span class="token punctuation">:</span><span class="token number">26</span> but<span class="token punctuation">[</span>root@lqz <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># file but</span>but<span class="token punctuation">:</span> Zip archive data<span class="token punctuation">,</span> at least v1<span class="token number">.0</span> to extract</code></pre><h4 id="16-系统链接文件"><a href="#16-系统链接文件" class="headerlink" title="16 系统链接文件"></a>16 系统链接文件</h4><p>文件有文件名与数据，在Linux上被分成两个部分：用户数据 (user data) 与元数据 (metadata)。<br>用户数据，即文件数据块 (data block)，数据块是记录文件真实内容的地方，我们将其称为Block<br>元数据，即文件的附加属性，如文件大小、创建时间、所有者等信息。我们称其为Inode<br>在Linux中，inode是文件元数据的一部分但其并不包含文件名，inode号即索引节点号）<br>文件名仅是为了方便人们的记忆和使用，系统或程序通过 inode 号寻找正确的文件数据块。图1.展示了程序通过文件名获取文件内容的过程。</p><p>Linux 系统引入了两种链接：硬链接 (hard link) 与软链接（又称符号链接，即 soft link 或 symbolic link）</p><p>ll -i 查看inode</p><h5 id="16-1软连接"><a href="#16-1软连接" class="headerlink" title="16.1软连接"></a>16.1软连接</h5><p>软链接相当于Windows的快捷方式，软链接文件会将inode指向源文件的block，当我们访问这个软链接文件时，其实访问的是源文件本身。那么当我们对一个文件创建多个软链接，其实就是多个inode指向同一个block。当我们删除软链接文件时，其实只是删除了一个inode指向，并不会对源文件源文件造成影响，但如果删除的是源文件则会造成所有软链接文件失效。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#文件软链接示例</span>touch <span class="token operator">/</span>root<span class="token operator">/</span>fileln <span class="token operator">-</span>s <span class="token operator">/</span>root<span class="token operator">/</span>file <span class="token operator">/</span>tmp<span class="token operator">/</span>file_bakll <span class="token operator">/</span>tmp<span class="token operator">/</span>file_bak  <span class="token operator">//</span>root下file链接到<span class="token operator">/</span>tmp下并重命名为file_bak<span class="token comment" spellcheck="true">#目录软链接示例</span>mkdir <span class="token operator">/</span>soft<span class="token operator">/</span>nginx1<span class="token number">.1</span> <span class="token operator">-</span>pln <span class="token operator">-</span>s <span class="token operator">/</span>soft<span class="token operator">/</span>nginx1<span class="token number">.1</span><span class="token operator">/</span> <span class="token operator">/</span>soft<span class="token operator">/</span>nginxll <span class="token operator">/</span>soft<span class="token operator">/</span>nginx   <span class="token operator">//</span>查看链接指向<span class="token comment" spellcheck="true">#软链接使用场景</span><span class="token number">1</span><span class="token punctuation">.</span>软件升级<span class="token number">2</span><span class="token punctuation">.</span>企业代码发布 <span class="token number">3</span><span class="token punctuation">.</span>不方便目录移动</code></pre><h5 id="16-2-硬链接"><a href="#16-2-硬链接" class="headerlink" title="16.2 硬链接"></a>16.2 硬链接</h5><p>若一个inode号对应多个文件名，则称这些文件为硬链接。换言之，硬链接就是同一个文件使用了多个别名，如下图hard link 就是 file 的一个别名，他们有共同的 inode。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#文件硬链接示例</span>ln  <span class="token operator">/</span>root<span class="token operator">/</span>file <span class="token operator">/</span>tmp<span class="token operator">/</span>file_hardll <span class="token operator">/</span>tmp<span class="token operator">/</span>file_hard<span class="token comment" spellcheck="true">#PS：目录不能创建硬链接，硬链接文件可以用rm命令删除</span></code></pre><p>5.硬链接与软链接区别<br>1)ln命令创建硬链接，ln -s命令创建软链接。<br>2)目录不能创建硬链接，并且硬链接不可以跨越分区系统。<br>3)目录软链接特别常用,并且软链接支持跨越分区系统。<br>4)硬链接文件与源文件的inode相同，软链接文件与源文件inode不同。<br>5)删除软链接文件，对源文件及硬链接文件无任何影响。<br>6)删除文件的硬链接文件，对源文件及链接文件无任何影响。<br>7)删除链接文件的源文件，对硬链接无影响，会导致软链接失效。<br>8)删除源文件及其硬链接文件，整个文件会被真正的删除。</p><h3 id="5-读写文件"><a href="#5-读写文件" class="headerlink" title="5 读写文件"></a>5 读写文件</h3><p><strong>vim</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># yum install vim -y</span><span class="token comment" spellcheck="true"># 普通模式、编辑模式、命令模式</span><span class="token comment" spellcheck="true"># 普通模式：</span>    <span class="token operator">-</span>上下翻    <span class="token operator">-</span>yy 复制一行    <span class="token operator">-</span>p   粘贴    <span class="token operator">-</span>dd  剪切    <span class="token operator">-</span>p   把上面剪切的粘贴上<span class="token comment" spellcheck="true"># 编辑模式</span>    <span class="token operator">-</span>i：insert插入    <span class="token operator">-</span>a：append追加    <span class="token operator">-</span>o：换行    <span class="token operator">-</span>正常写就可以了    <span class="token operator">-</span>esc回到普通模式<span class="token comment" spellcheck="true"># 命令模式：</span>    <span class="token operator">-</span>不能从编辑模式直接进，只能先到普通模式按 <span class="token punctuation">:</span>  进入命令，退出命令模式esc     <span class="token operator">-</span>w  表示保存     <span class="token operator">-</span>q   退出     <span class="token operator">-</span>！  强制退出     <span class="token operator">-</span>修改了文件后保存：  wq    wq！     <span class="token operator">-</span>修改了不想保存退出： q     q！     <span class="token operator">-</span><span class="token punctuation">:</span>set nu 显示行号     <span class="token operator">-</span><span class="token punctuation">:</span>set nonu 不显示行号     <span class="token operator">-</span><span class="token operator">/</span>字符串    搜索这个字符串     <span class="token operator">-</span><span class="token punctuation">:</span><span class="token operator">%</span>s<span class="token comment" spellcheck="true">#sbin#test#g #替换整个文本文件中包含sbin的替换为test</span></code></pre><h3 id="6-用户相关"><a href="#6-用户相关" class="headerlink" title="6 用户相关"></a>6 用户相关</h3><h4 id="1-用户与权限"><a href="#1-用户与权限" class="headerlink" title="1 用户与权限"></a>1 用户与权限</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  id  查看当前用户信息</span>uid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> gid<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> groups<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#2  用户信息保存在 cat /etc/passwd</span>root<span class="token punctuation">:</span>x<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span>root<span class="token punctuation">:</span><span class="token operator">/</span>root<span class="token punctuation">:</span><span class="token operator">/</span>bin<span class="token operator">/</span>bash<span class="token comment" spellcheck="true">#3  密码存放路径 cat /etc/shadow</span><span class="token comment" spellcheck="true">#4 约定不同用户的uid属于某个范围（了解）</span><span class="token comment" spellcheck="true"># 5 用户的增，删，改</span>    <span class="token operator">-</span>useradd（一个用户只能属于一个主组，属于多个附加组）        <span class="token operator">-</span>groupadd sa  新增一个组        <span class="token operator">-</span>groupadd sa1  新增一个组        <span class="token operator">-</span>groupadd students 新增一个组        <span class="token operator">-</span>useradd <span class="token operator">-</span>u <span class="token number">5001</span> <span class="token operator">-</span>g students <span class="token operator">-</span>G sa<span class="token punctuation">,</span>sa1 <span class="token operator">-</span>c <span class="token string">"2020 new student"</span> <span class="token operator">-</span>s <span class="token operator">/</span>bin<span class="token operator">/</span>bash lqz1    <span class="token operator">-</span>创建mysql系统用户，<span class="token operator">-</span>M不建立用户家目录 <span class="token operator">-</span>s指定nologin使其用户无法登陆系统        useradd mysql <span class="token operator">-</span>M <span class="token operator">-</span>s <span class="token operator">/</span>sbin<span class="token operator">/</span>nologin    <span class="token operator">-</span>usermod        <span class="token operator">-</span>usermod <span class="token operator">-</span>c <span class="token string">"2019 new student"</span> <span class="token operator">-</span>md <span class="token operator">/</span>bgx <span class="token operator">-</span>s <span class="token operator">/</span>bin<span class="token operator">/</span>sh <span class="token operator">-</span>l change_bgx bgx        <span class="token operator">-</span>usermod <span class="token operator">-</span>L change_bgx  <span class="token comment" spellcheck="true">#锁定后会无法登陆系统</span>        <span class="token operator">-</span>usermod <span class="token operator">-</span>U change_bgx    <span class="token operator">-</span>userdel        <span class="token operator">-</span>userdel egon  <span class="token comment" spellcheck="true"># 删除用户，不删家目录</span>        <span class="token operator">-</span>userdel <span class="token operator">-</span>r egon1 <span class="token comment" spellcheck="true"># 删除用户，删家目录</span><span class="token comment" spellcheck="true">#6  改密码</span>    <span class="token operator">-</span>passwd root<span class="token comment" spellcheck="true">#7 组增删改</span>    <span class="token operator">-</span>groupadd no_gid   新增组    <span class="token operator">-</span>groupmod <span class="token operator">-</span>g <span class="token number">1111</span> student  改组id号    <span class="token operator">-</span>groupmod student <span class="token operator">-</span>n new_student  改组名字    <span class="token operator">-</span>groupdel new_student   删除组（组下没有人，把人删除，再删）<span class="token comment" spellcheck="true"># 8 su 和sudo</span>    <span class="token operator">-</span>su 切换用户        <span class="token operator">-</span>su <span class="token operator">-</span> jack：打开新的shell，会加载自己的环境变量        <span class="token operator">-</span>su jack：不打开新的shell，不会加载它的环境变量    <span class="token operator">-</span>sudo 普通用户可以有一些超级用户的权限，不需要输入密码        usermod jack <span class="token operator">-</span>G wheel  <span class="token comment" spellcheck="true"># 把jack用户加入到了wheel组</span>        <span class="token operator">-</span>你这个用户没有权限，你尝试 sudo mkdir ll试一下，不行，超级管理员没有给你配这个权限</code></pre><h4 id="2-文件权限（特殊权限）"><a href="#2-文件权限（特殊权限）" class="headerlink" title="2 文件权限（特殊权限）"></a>2 文件权限（特殊权限）</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#选项: + 增加权限 -减少权限 =等于某个权限</span><span class="token comment" spellcheck="true"># a：让文件或目录仅可追加内容</span><span class="token comment" spellcheck="true"># i：不得任意更动文件或目录</span><span class="token comment" spellcheck="true"># 给某个文件或者文件夹加特殊权限</span>    <span class="token operator">-</span>chattr <span class="token operator">+</span>i lqz<span class="token punctuation">.</span>text        <span class="token operator">-</span>chattr <span class="token operator">-</span>i lqz<span class="token punctuation">.</span>text</code></pre><h3 id="7-压缩解压"><a href="#7-压缩解压" class="headerlink" title="7 压缩解压"></a>7 压缩解压</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  Windows的压缩包与Linux的压缩包能否互通</span>    windwods：rar，zip      linux：tar<span class="token punctuation">.</span>gz<span class="token punctuation">,</span>zip互通，不支持rar<span class="token comment" spellcheck="true"># 2 gzip (只能压一个文件，不能压文件夹，会把原来的删除)</span>    <span class="token operator">-</span>gzip file    <span class="token operator">-</span>gzip <span class="token operator">-</span>d file    <span class="token operator">-</span>有什么用？       <span class="token operator">-</span>cd <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>       <span class="token comment" spellcheck="true"># 可以把文件做个备份</span><span class="token comment" spellcheck="true">#3 zip的压缩和解压</span>    <span class="token operator">-</span>yum install zip unzip <span class="token operator">-</span>y    <span class="token operator">-</span>zip  filename<span class="token punctuation">.</span>zip  filename  <span class="token comment" spellcheck="true"># 压单个文件</span>    <span class="token operator">-</span>zip <span class="token operator">-</span>r home<span class="token punctuation">.</span>zip <span class="token operator">/</span>home<span class="token operator">/</span>   <span class="token comment" spellcheck="true">#把home文件夹压缩</span>    <span class="token operator">-</span>unzip  home<span class="token punctuation">.</span>zip   <span class="token comment" spellcheck="true">#解压</span>    <span class="token operator">-</span>unzip <span class="token operator">-</span>l  home<span class="token punctuation">.</span>zip <span class="token comment" spellcheck="true"># 不解压，看内容</span>    <span class="token operator">-</span>unzip home<span class="token punctuation">.</span>zip  <span class="token operator">-</span>d <span class="token operator">/</span>opt<span class="token operator">/</span>   <span class="token comment" spellcheck="true"># 把当前路径下的home.zip 解压到opt</span><span class="token comment" spellcheck="true"># 4 tar打包与压缩</span>    <span class="token operator">-</span>tar <span class="token operator">-</span>czf 压缩后的文件名 压缩前的文件名        <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>》tar<span class="token punctuation">.</span>gz    <span class="token operator">-</span>tar <span class="token operator">-</span>xf  xx<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz  <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>解压xx<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz    tar <span class="token operator">-</span>xzvf  xx<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz ：解压tar<span class="token punctuation">.</span>gz，详细过程列出来    <span class="token comment" spellcheck="true"># 可以把不同目录的文件都压缩到一个文件内</span>    <span class="token operator">-</span>tar <span class="token operator">-</span>czf home<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz dd<span class="token operator">/</span> lqz1 lqz2 <span class="token operator">/</span>home<span class="token operator">/</span>    <span class="token operator">-</span>tar czf etc<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">-</span><span class="token operator">-</span>exclude<span class="token operator">=</span>etc<span class="token operator">/</span>services etc<span class="token operator">/</span>  <span class="token comment" spellcheck="true"># 排除文件</span>    <span class="token operator">-</span>tar xf <span class="token operator">/</span>etc<span class="token operator">/</span>local<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz  <span class="token operator">-</span>C <span class="token operator">/</span>tmp  <span class="token comment" spellcheck="true"># -C指定解压到哪个路径</span></code></pre><h3 id="8-软件管理：rpm"><a href="#8-软件管理：rpm" class="headerlink" title="8 软件管理：rpm"></a>8 软件管理：rpm</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  红帽的软件安装包（windows的：exe，mis）</span><span class="token comment" spellcheck="true">#2  mount /dev/cdrom /mnt 把光盘挂在到 /mnt文件夹</span><span class="token comment" spellcheck="true">#3  Linux中除了rpm安装软件，是否还有安装软件方式</span>    <span class="token operator">-</span>源码安装<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>官网下源码<span class="token operator">-</span><span class="token operator">-</span>》编译安装<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>》最新    <span class="token operator">-</span>rpm包，预先编译打包<span class="token punctuation">,</span>安装简单，yum安装，本质就是rmp安装<span class="token operator">-</span><span class="token operator">-</span>》稍微老一些    <span class="token operator">-</span>二进制包：绿色包    <span class="token operator">-</span>安装rpm的软件：rpm <span class="token operator">-</span>ivh tree<span class="token number">-1.6</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">10.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm    <span class="token operator">-</span>强制安装：rpm <span class="token operator">-</span>ivh <span class="token operator">-</span><span class="token operator">-</span>force <span class="token operator">/</span>mnt<span class="token operator">/</span>Packages<span class="token operator">/</span>tree<span class="token number">-1.5</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">3.</span>el6<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm    <span class="token operator">-</span>rpm <span class="token operator">-</span>q ：查看这个软件是否安装<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>    <span class="token operator">-</span>rpm <span class="token operator">-</span>qa <span class="token operator">|</span>grep tr  ：列出所有安装的软件    <span class="token operator">-</span>rpm <span class="token operator">-</span>ql <span class="token punctuation">:</span>查询指定软件包所安装的目录、文件列表rpm <span class="token operator">-</span>ql unzip <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">*</span>    <span class="token operator">-</span>rpm <span class="token operator">-</span>qc unzip<span class="token punctuation">:</span>查看这个软件的配置文件位置    <span class="token operator">-</span>rpm <span class="token operator">-</span>qf <span class="token operator">/</span>etc<span class="token operator">/</span>pam<span class="token punctuation">.</span>d<span class="token operator">/</span>vsftpd  ：查看配置文件属于哪个软件    <span class="token operator">-</span>rpm <span class="token operator">-</span>qlp trace<span class="token operator">-</span>cmd<span class="token number">-2.6</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span><span class="token number">10.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm ：查看该软件包安装后会释放哪些文件    <span class="token operator">-</span>使用远程地址安装：rpm <span class="token operator">-</span>ivh https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>zabbix<span class="token operator">/</span>zabbix<span class="token operator">/</span><span class="token number">3.0</span><span class="token operator">/</span>rhel<span class="token operator">/</span><span class="token number">7</span><span class="token operator">/</span>x86_64<span class="token operator">/</span>zabbix<span class="token operator">-</span>agent<span class="token number">-3.0</span><span class="token punctuation">.</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">2.</span>el7<span class="token punctuation">.</span>x86_64<span class="token punctuation">.</span>rpm    <span class="token operator">-</span>rpm <span class="token operator">-</span>Uivh  升级软件需要用  U    <span class="token operator">-</span>rpm <span class="token operator">-</span>e zabbix<span class="token operator">-</span>agent</code></pre><h3 id="9-yum仓库，源"><a href="#9-yum仓库，源" class="headerlink" title="9 yum仓库，源"></a>9 yum仓库，源</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 Yum是RedHat以及CentOS中的软件包管理器。能够通过互联网下载 .rpm 包并且安装，并可以自动处理依赖性关系，无须繁琐地一次次下载、安装</span><span class="token comment" spellcheck="true"># 2 cd /etc/yum.repos.d/  路径下有xx.repo 文件---》yum源</span><span class="token comment" spellcheck="true"># 3 换阿里云的源</span>    wget <span class="token operator">-</span>O <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>CentOS<span class="token operator">-</span>Base<span class="token punctuation">.</span>repo https<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>repo<span class="token operator">/</span>Centos<span class="token number">-7.</span>repo<span class="token comment" spellcheck="true"># 4 配置其他源</span>    <span class="token operator">-</span>wget <span class="token operator">-</span>O <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>epel<span class="token punctuation">.</span>repo http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>repo<span class="token operator">/</span>epel<span class="token number">-7.</span>repo    <span class="token operator">-</span>yum install nginx     <span class="token operator">-</span>yum provides ipconfig  <span class="token comment" spellcheck="true"># 通过命令查软件，这个命令属于哪个软件</span>       <span class="token operator">-</span>rpm <span class="token operator">-</span>qf `which ifconfig` <span class="token comment" spellcheck="true"># 查命令属于哪个软件，前提是该软件安装了z</span></code></pre><h3 id="10-文件权限chmod"><a href="#10-文件权限chmod" class="headerlink" title="10 文件权限chmod"></a>10 文件权限chmod</h3><pre><code>1 rwx                 r-x       r-x  属主(文件所有者)      属组权限    其他人权限2 权限详解    r：read写权限    w: write写权限    x:可执行3 修改权限    7=4(r)+2(w)+1(x)    chmod 777 文件夹/文件</code></pre><h3 id="11-源码安装软件"><a href="#11-源码安装软件" class="headerlink" title="11 源码安装软件"></a>11 源码安装软件</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 会了yum安装，为什么还要会二进制安装（编译安装）    <span class="token operator">-</span>官方不提供yum安装    <span class="token operator">-</span>二进制安装是最新的<span class="token number">2</span> 向服务器传递文件的几种方式     <span class="token operator">-</span>scp nginx<span class="token number">-1.18</span><span class="token punctuation">.</span><span class="token number">0.</span>tar<span class="token punctuation">.</span>gz root@<span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>jack     <span class="token operator">-</span>sz，rz    <span class="token operator">-</span>xftp软件来传    <span class="token comment" spellcheck="true">#1.基础环境准备</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># yum install -y gcc make wget </span><span class="token comment" spellcheck="true">#2.下载源码包</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># wget http://nginx.org/download/nginx-1.15.12.tar.gz</span><span class="token comment" spellcheck="true">#3.解压源码包, 并进入相应目录</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tar xf nginx-1.15.12.tar.gz</span><span class="token punctuation">[</span>root@node1 <span class="token operator">~</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd nginx-1.15.12</span><span class="token comment" spellcheck="true">#4.配置相关的选项，并生成Makefile</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --help</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ./configure --prefix=/usr/local/nginx</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo $? # 检查上一个命令是否执行成功</span><span class="token comment" spellcheck="true">#5.将Makefile文件编译可执行二进制程序，此时,/usr/local/nginx可执行文件还不在，需要执行make install 才能copy过去</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make</span><span class="token comment" spellcheck="true">#6.将二进制文件拷贝至对应的目录中</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># make install</span><span class="token comment" spellcheck="true">#7 建立软连接（以后方便升级）</span><span class="token punctuation">[</span>root@node1 nginx<span class="token number">-1.15</span><span class="token punctuation">.</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s nginx-1.18.0 nginx</span><span class="token comment" spellcheck="true">#8 目录介绍</span>conf<span class="token punctuation">:</span>配置文件html：网站文件存放logs：日志sbin<span class="token punctuation">:</span>可执行文件<span class="token comment" spellcheck="true"># 9 命令</span>nginx  <span class="token comment" spellcheck="true"># 启动</span>nginx <span class="token operator">-</span>s reload <span class="token comment" spellcheck="true"># 重新加载</span>nginx <span class="token operator">-</span>s stop  <span class="token comment" spellcheck="true"># 重启</span>nginx <span class="token operator">-</span>s stop <span class="token comment" spellcheck="true"># 停止</span></code></pre><h3 id="12-进程管理"><a href="#12-进程管理" class="headerlink" title="12 进程管理"></a>12 进程管理</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  ps -aux 用它，[系统进程]</span><span class="token comment" spellcheck="true">#2  ps -ef</span><span class="token comment" spellcheck="true">#3  ps -aux|grep id,进程名字，</span><span class="token comment" spellcheck="true"># 4 top实时看状态</span><span class="token comment" spellcheck="true"># 5 kill -l</span><span class="token comment" spellcheck="true"># 6 kill -9 进程id号 强行关闭</span><span class="token comment" spellcheck="true"># 7 pkill -9 nginx  关闭nginx所有进程</span><span class="token comment" spellcheck="true"># 8 killall nginx   关闭nginx所有进程</span><span class="token comment" spellcheck="true"># 通过来管理进程screen</span>yum install screen <span class="token operator">-</span>y创建一个窗口screen <span class="token operator">-</span>S myjobs执行耗时任务，进程ctrl<span class="token operator">+</span>a<span class="token operator">+</span>d  退出当前bashshell但是耗时任务还在后台运行screen <span class="token operator">-</span>r myjobs 调到前台执行screen <span class="token operator">-</span>list  查看所有任务</code></pre><h3 id="13-系统服务"><a href="#13-系统服务" class="headerlink" title="13 系统服务"></a>13 系统服务</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1  centos6 上启动服务service start network</span><span class="token comment" spellcheck="true">#2  centos7 启动服务：systemctl start network</span><span class="token comment" spellcheck="true"># 制作系统服务其实就是编写一堆配置，在配置文件中最起码要有这个程序的启动和关闭命令</span><span class="token comment" spellcheck="true"># 如果有必要也可以做成系统服务</span><span class="token comment" spellcheck="true">#3  cd /usr/lib/systemd/system/</span><span class="token comment" spellcheck="true">###制作系统服务</span><span class="token comment" spellcheck="true">#4 vim mynginx.service</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>my nginxAfter<span class="token operator">=</span>network<span class="token punctuation">.</span>target  <span class="token comment" spellcheck="true">#在哪个服务启动后启动</span><span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type<span class="token operator">=</span>forkingExecStart<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginxExecStop<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s stopExecRestart<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s restartExecReload<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>nginx<span class="token operator">/</span>sbin<span class="token operator">/</span>nginx <span class="token operator">-</span>s reload<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi<span class="token operator">-</span>user<span class="token punctuation">.</span>target<span class="token comment" spellcheck="true"># 以后就支持使用 systemctl start mynginx.service</span><span class="token comment" spellcheck="true"># 查看服务状态：</span>    systemctl status mynginx<span class="token punctuation">.</span>service    <span class="token comment" spellcheck="true"># disabled表示没有开机自启动</span>    Loaded<span class="token punctuation">:</span> loaded <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>systemd<span class="token operator">/</span>system<span class="token operator">/</span>mynginx<span class="token punctuation">.</span>service<span class="token punctuation">;</span> disabled<span class="token punctuation">;</span> vendor preset<span class="token punctuation">:</span> disabled<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 开机自启动</span>    systemctl enable mynginx<span class="token comment" spellcheck="true"># 取消开机自启动</span>systemctl disable mynginx<span class="token punctuation">.</span>service</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 接口</title>
      <link href="/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%8E%A5%E5%8F%A3/"/>
      <url>/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-接口"><a href="#1-接口" class="headerlink" title="1 接口"></a>1 接口</h3><p>接口的本质就是定义一个标准，起到限制和规范的作用，和抽象类有点相似，但是抽象类只规范类，接口规范的范围更大，对属性，函数，类都可以有限制作用</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口</span><span class="token comment" spellcheck="true">// 属性接口，对传入参数进行约束</span><span class="token comment" spellcheck="true">// 一般函数在传参的时候定义参数类型string，其实也是一种约束</span><span class="token comment" spellcheck="true">// 但这种约束是简单约束，我们需要自定制或者更复杂的约束就需要用到接口</span><span class="token keyword">interface</span> <span class="token class-name">FullName</span><span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token keyword">string</span>    secondName<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token comment" spellcheck="true">// 可选参数，可传可不传</span>    age<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">printName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>FullName<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">"--"</span><span class="token operator">+</span>name<span class="token punctuation">.</span>secondName<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里函数传参必须要传一个满足接口规范的对象</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    firstName<span class="token punctuation">:</span><span class="token string">"黄"</span><span class="token punctuation">,</span>    secondName<span class="token punctuation">:</span><span class="token string">"钊"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 也可以传其他无关参数,但是函数中的name无法使用</span>    xxx<span class="token punctuation">:</span><span class="token number">18</span>    <span class="token comment" spellcheck="true">// 可选参数可穿可不传</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果直接在传参括号内定义对象就只能有接口中的属性，不能添加额外的</span><span class="token function">printName</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span></code></pre><h3 id="2-封装ajax（接口小🌰）"><a href="#2-封装ajax（接口小🌰）" class="headerlink" title="2 封装ajax（接口小🌰）"></a>2 封装ajax（接口小🌰）</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口例子，实现ajax</span><span class="token keyword">interface</span> <span class="token class-name">Config</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span><span class="token keyword">string</span>    url<span class="token punctuation">:</span><span class="token keyword">string</span>    data<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">string</span>    dataType<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span>config<span class="token punctuation">:</span>Config<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>type<span class="token punctuation">,</span>config<span class="token punctuation">.</span>url<span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dataType<span class="token operator">==</span><span class="token string">"json"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 真实请求api地址</span>    dataType<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-函数类型接口"><a href="#3-函数类型接口" class="headerlink" title="3 函数类型接口"></a>3 函数类型接口</h3><p>对传入的参数和返回值批量约束</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 函数类型接口</span><span class="token keyword">interface</span> <span class="token class-name">base</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用这个函数类型就必须遵循它的参数和返回值格式</span>    <span class="token punctuation">(</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> printMsg<span class="token punctuation">:</span>base <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>num<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> key<span class="token operator">+</span>num<span class="token punctuation">}</span><span class="token function">printMsg</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span></code></pre><h3 id="4-可索引接口：数组，对象的约束（不常用）"><a href="#4-可索引接口：数组，对象的约束（不常用）" class="headerlink" title="4 可索引接口：数组，对象的约束（不常用）"></a>4 可索引接口：数组，对象的约束（不常用）</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可索引接口 对数组的约束</span><span class="token keyword">interface</span> <span class="token class-name">userNum</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr<span class="token punctuation">:</span>userNum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token string">"yyy"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 对对象的约束</span><span class="token keyword">interface</span> <span class="token class-name">userObj</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span>index<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">}</span><span class="token keyword">var</span> arr<span class="token punctuation">:</span>userObj <span class="token operator">=</span> <span class="token punctuation">[</span>name<span class="token punctuation">:</span><span class="token string">"hz"</span><span class="token punctuation">]</span></code></pre><h3 id="5-类类型接口"><a href="#5-类类型接口" class="headerlink" title="5 类类型接口"></a>5 类类型接口</h3><p>和抽象类很相似</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token function">run</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里只是约束了得有这个方法，具体的传参和返回值没法约束</span>    <span class="token function">run</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="6-接口的继承"><a href="#6-接口的继承" class="headerlink" title="6 接口的继承"></a>6 接口的继承</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 接口的继承+类继承综合使用</span><span class="token keyword">interface</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">People</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token function">work</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Peo</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    age<span class="token punctuation">:</span><span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"is play"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Peo</span> <span class="token keyword">implements</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在工作"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"在吃"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> ts面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 模块</title>
      <link href="/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%A8%A1%E5%9D%97/"/>
      <url>/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="1-模块的定义"><a href="#1-模块的定义" class="headerlink" title="1 模块的定义"></a>1 模块的定义</h3><p>ts中<strong>内部模块</strong>现在称为“命名空间”，<strong>外部模块</strong>简称模块</p><p>ts中模块想要使用首先要在模块内部通过export把内的数据暴露出去，再在需要使用的地方import引入模块</p><h3 id="2-模块的简单使用"><a href="#2-模块的简单使用" class="headerlink" title="2 模块的简单使用"></a>2 模块的简单使用</h3><p><strong>被导入页面</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">printMsg</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>salary<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hz"</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token comment" spellcheck="true">// 默认导入，只能使用一次</span><span class="token keyword">export</span> <span class="token keyword">default</span> salary<span class="token keyword">export</span><span class="token punctuation">{</span>name <span class="token punctuation">,</span> age<span class="token punctuation">}</span></code></pre><p><strong>导入页面</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认导入的方式就不需要加花括号，但是只能导入一个</span><span class="token keyword">import</span> salary <span class="token keyword">from</span> <span class="token string">"./modules/func"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> printMsg as print<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./modules/func"</span><span class="token comment" spellcheck="true">// 可以多个一起导入，也可以起别名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="3-命名空间的简单使用"><a href="#3-命名空间的简单使用" class="headerlink" title="3 命名空间的简单使用"></a>3 命名空间的简单使用</h3><p>命名空间就是在一个ts文件中，使用名称空间包裹一个范围，这个范围内的数据只属于这个名称空间，在外部可以重复</p><p><strong>index.ts</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 如果其他页面要使用这个命名空间的数据就必须先导出namespace，再导出内部数据</span><span class="token keyword">export</span> namespace A<span class="token punctuation">{</span>    <span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">printMsg</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>salary<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">}</span> <span class="token keyword">export</span> namespace B<span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">printMsg</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>salary<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">var</span> salary <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">}</span> </code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> ts基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 泛型</title>
      <link href="/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%B3%9B%E5%9E%8B/"/>
      <url>/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-泛型的定义"><a href="#1-泛型的定义" class="headerlink" title="1 泛型的定义"></a>1 泛型的定义</h3><p>泛型：要考虑到组件的可重用性和扩展性，要求组件不仅支持当前的数据类型，也要支持未来的数据类型，在创建大型系统时提供了十分灵活的功能</p><p>ts中的泛型类似于c#和java，用户可以自定义数据类型来使用组件</p><p>通俗理解：泛型就是解决 类 接口 方法的复用性，以及对不确定类型进行数据校验</p><h3 id="2-泛型函数"><a href="#2-泛型函数" class="headerlink" title="2 泛型函数"></a>2 泛型函数</h3><p>当我们需要一个方法传入什么类型就返回什么类型的时候就可以用到，和any不一样，any忽略了类型检查，可以返回一样的也可以返回不一样的</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 在函数名后加 &lt;T>,表示使用了泛型</span><span class="token comment" spellcheck="true">// 泛型的规则是</span><span class="token comment" spellcheck="true">// 1 你必须有一个/多个参数属于泛型类型</span><span class="token comment" spellcheck="true">// 2 返回值类型必须是泛型类型</span><span class="token comment" spellcheck="true">// 3 函数调用必须指定泛型的类型</span><span class="token keyword">function</span> getData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>msg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span>getData<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token string">"hz"</span><span class="token punctuation">)</span></code></pre><h3 id="3-泛型类"><a href="#3-泛型类" class="headerlink" title="3 泛型类"></a>3 泛型类</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 泛型</span><span class="token comment" spellcheck="true">// 在函数名后加 &lt;T>,表示使用了泛型</span><span class="token comment" spellcheck="true">// 泛型的规则是</span><span class="token comment" spellcheck="true">// 1 你必须有一个/多个参数属于泛型类型</span><span class="token comment" spellcheck="true">// 2 返回值类型必须是泛型类型</span><span class="token comment" spellcheck="true">// 3 函数调用必须指定泛型的类型</span><span class="token keyword">function</span> getData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>msg<span class="token punctuation">:</span>T<span class="token punctuation">,</span>key<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// getData&lt;number>(123,456,"hz")</span><span class="token comment" spellcheck="true">// 定义一个类，有添加数据到数组的功能，也有求数组中最小元素的功能</span><span class="token keyword">class</span> <span class="token class-name">MinClass</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    list<span class="token punctuation">:</span>T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>        <span class="token keyword">var</span> minMsg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>minMsg<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                minMsg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> minMsg    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实例化类，并指定了泛型的类型</span><span class="token keyword">var</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MinClass</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4-泛型接口"><a href="#4-泛型接口" class="headerlink" title="4 泛型接口"></a>4 泛型接口</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 泛型接口</span><span class="token keyword">interface</span> <span class="token class-name">ConfigFn</span><span class="token punctuation">{</span>    <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>value2<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">}</span><span class="token keyword">var</span> printMsg<span class="token punctuation">:</span>ConfigFn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>value<span class="token punctuation">:</span>T<span class="token punctuation">,</span>value2<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>T<span class="token punctuation">{</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span>printMsg<span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">444</span><span class="token punctuation">)</span>printMsg<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span><span class="token string">"444"</span><span class="token punctuation">)</span></code></pre><h3 id="5-泛型类，以类为参数传递（小🌰）"><a href="#5-泛型类，以类为参数传递（小🌰）" class="headerlink" title="5 泛型类，以类为参数传递（小🌰）"></a>5 泛型类，以类为参数传递（小🌰）</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 定义几个类映射数据库的表</span><span class="token comment" spellcheck="true">// 定义一个MysqlDB操作数据添加到数据库</span><span class="token keyword">class</span> <span class="token class-name">MysqlDB</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>info<span class="token punctuation">:</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">boolean</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    password <span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> undefined<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token punctuation">{</span>        title<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined        desc<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>title        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>desc    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个db对象，只能操作添加User类的数据</span><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlDB</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>admin<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"admin"</span>admin<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token number">123</span> db<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 定义一个db对象，只能操作添加Articld类的数据</span><span class="token keyword">var</span> dbA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MysqlDB</span><span class="token operator">&lt;</span>Article<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span><span class="token string">"金品梅"</span><span class="token punctuation">,</span>    desc<span class="token punctuation">:</span><span class="token string">"好看"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>dbA<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> ts高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 装饰器</title>
      <link href="/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/task/2020/09/19/%E5%89%8D%E7%AB%AF/Typescript%20%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>模仿python的，没啥好说</p><p>用法基本一模一样</p><p>ts中的装饰器可以注入到类，属性，方法，参数上</p><h3 id="2-类装饰器"><a href="#2-类装饰器" class="headerlink" title="2 类装饰器"></a>2 类装饰器</h3><h4 id="2-1-无参装饰器"><a href="#2-1-无参装饰器" class="headerlink" title="2.1 无参装饰器"></a>2.1 无参装饰器</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    params<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apiUrl <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">}</span>@logClass<span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 可能会报错，检测不到这个属性，是ide报的错不用管</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span></code></pre><h4 id="2-2-有参装饰器（装饰器工厂）"><a href="#2-2-有参装饰器（装饰器工厂）" class="headerlink" title="2.2 有参装饰器（装饰器工厂）"></a>2.2 有参装饰器（装饰器工厂）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 有参装饰器</span><span class="token keyword">function</span> <span class="token function">logClass</span><span class="token punctuation">(</span>msg<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        params<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>apiUrl <span class="token operator">=</span> msg    <span class="token punctuation">}</span><span class="token punctuation">}</span>@<span class="token function">logClass</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>apiUrl<span class="token punctuation">)</span></code></pre><h3 id="3-属性装饰器"><a href="#3-属性装饰器" class="headerlink" title="3 属性装饰器"></a>3 属性装饰器</h3><p>注意点：</p><p>只能有参，传入的俩参数</p><ul><li>参数1：对于静态成员来说就是类的构造函数，对于实例成员来说就是类的原形对象</li><li>参数2：成员名字</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logPrototype</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>targat<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>attr<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>targat<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 注意这里在修改的时候需要用[]而不能直接点，当然也可以用原形链</span>        targat<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> params    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    @<span class="token function">logPrototype</span><span class="token punctuation">(</span><span class="token string">"baidu"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>url<span class="token punctuation">)</span></code></pre><h3 id="4-方法装饰器"><a href="#4-方法装饰器" class="headerlink" title="4 方法装饰器"></a>4 方法装饰器</h3><p>接受三个参数</p><ul><li>参数1：对于静态成员来说是类的构造函数，对于实例成员是类的原形</li><li>成员名字</li><li>成员的属性描述符</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>funcName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>funcName<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 这跟类装饰器没啥区别，直接拿到类了就能随便改了</span>        <span class="token comment" spellcheck="true">// 但是这里没有修改成功，看下面</span>        target<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logFunc</span><span class="token punctuation">(</span><span class="token string">"run func"</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     </code></pre><p><strong>替换方法</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">logFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>funcName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// desc.value 就是原来的方法</span>        <span class="token comment" spellcheck="true">// 直接替换了个新的</span>        <span class="token comment" spellcheck="true">// 但是我只想扩展不是想直接换了，看下面</span>        desc<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logFunc</span><span class="token punctuation">(</span><span class="token string">"run func"</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  </code></pre><p><strong>修改方法</strong></p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 有参装饰器</span><span class="token keyword">function</span> <span class="token function">logFunc</span><span class="token punctuation">(</span>params<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 外层函数接受参数</span>    <span class="token comment" spellcheck="true">// console.log(params)</span>    <span class="token comment" spellcheck="true">// 内层函数接受类，属性名</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>funcName<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">,</span>desc<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// desc.value 就是原来的方法</span>        <span class="token keyword">var</span> oMethod <span class="token operator">=</span> desc<span class="token punctuation">.</span>value        desc<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            args <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 调用原来的方法</span>            <span class="token comment" spellcheck="true">// oMethod()</span>            <span class="token comment" spellcheck="true">// 为原来的方法传参</span>            oMethod<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">HttpClient</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> url<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> undefined    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">logFunc</span><span class="token punctuation">(</span><span class="token string">"run func"</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>h<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">"zaaa"</span><span class="token punctuation">)</span>     </code></pre><p>方法参数装饰器用的不多就不记了</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> ts高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 类，继承，修饰符，静态，多态，抽象类</title>
      <link href="/task/2020/09/15/%E5%89%8D%E7%AB%AF/Typescript%20%E7%B1%BB%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
      <url>/task/2020/09/15/%E5%89%8D%E7%AB%AF/Typescript%20%E7%B1%BB%EF%BC%8C%E7%BB%A7%E6%89%BF%EF%BC%8C%E4%BF%AE%E9%A5%B0%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h3 id="1-类的定义"><a href="#1-类的定义" class="headerlink" title="1 类的定义"></a>1 类的定义</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token comment" spellcheck="true">// constructor 是类实例化触发的构造函数</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 可以通过类中的方法去对属性改值，取值</span>    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name    <span class="token punctuation">}</span>    <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> peo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span>peo<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2 继承"></a>2 继承</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：通过extend super</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 继承要点1：必须继承父类的构造方法，可以在上面新增，但是不能缺</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 继承要点2：属性和方法的查找顺序优先从自己开始到父类</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> w <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-修饰符"><a href="#3-修饰符" class="headerlink" title="3 修饰符"></a>3 修饰符</h3><p>修饰符修饰的是类中的属性和方法</p><ul><li>public：公有<ul><li>在类中，子类中，类外部都可以访问</li></ul></li><li>protected：保护类型（封装）<ul><li>在类中，子类中可以访问，类外部不能访问</li></ul></li><li>private：私有<ul><li>只有在类中能访问，在子类和类外部都不能访问</li></ul></li></ul><p>注意：属性如果不加修饰符默认是public</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">protected</span> sex<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span>    <span class="token keyword">private</span> xxx<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Web</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    age<span class="token punctuation">:</span><span class="token keyword">number</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 继承要点1：必须继承父类的构造方法，可以在上面新增，但是不能缺</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 继承要点2：属性和方法的查找顺序优先从自己开始到父类</span>    <span class="token comment" spellcheck="true">// 继承要点3：如果父类中有私有属性，子类中不能重复定义这个属性</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 类中的修饰符运用</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-静态属性-方法"><a href="#4-静态属性-方法" class="headerlink" title="4 静态属性/方法"></a>4 静态属性/方法</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">protected</span> sex<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">false</span>    <span class="token keyword">private</span> xxx<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span>    <span class="token keyword">static</span> wifi<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"lxt"</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 实例方法,只能使用实例属性</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>xxx<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 静态方法，静态方法不能直接调用属性，只能调用静态属性</span>    <span class="token keyword">static</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>wifi<span class="token operator">+</span><span class="token string">"在play"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span>People<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="5-多态"><a href="#5-多态" class="headerlink" title="5 多态"></a>5 多态</h3><p>ts中的多态属于继承的一种形式，父类定义方法但不去实现，子类去实现父类的方法，实现多态</p><p>ts中的多态属于鸭子类型，和python和go中的多态相似，都属于非侵入式，就算不写也不会报错</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃肉"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃🐭"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"xd"</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"xm"</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="6-抽象类，抽象方法"><a href="#6-抽象类，抽象方法" class="headerlink" title="6 抽象类，抽象方法"></a>6 抽象类，抽象方法</h3><p>注意点：</p><ul><li>抽象方法无法单独存在必须定义在抽象类中</li><li>继承抽象类的子类，必须实现抽象类中的抽象方法</li><li>抽象类无法实例化</li><li>抽象类的继承也属于多态，属于侵入式，没有重写就会报错</li></ul><pre class=" language-ts"><code class="language-ts">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token keyword">string</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义在抽象类内部的抽象方法</span>    <span class="token comment" spellcheck="true">// 不能在这里实现</span>    <span class="token comment" spellcheck="true">// 必须定义返回值类型：void为无返回值</span>    abstract <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃肉"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"吃🐭"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"xd"</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"xm"</span><span class="token punctuation">)</span>cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> ts面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go 结构体、方法、接口</title>
      <link href="/task/2020/09/14/go/%E5%9F%BA%E7%A1%80/go%20%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%8E%A5%E5%8F%A3/"/>
      <url>/task/2020/09/14/go/%E5%9F%BA%E7%A1%80/go%20%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E6%96%B9%E6%B3%95%E3%80%81%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="1-结构体"><a href="#1-结构体" class="headerlink" title="1 结构体"></a>1 结构体</h3><p>定义：结构体是多个字段的集合</p><p>面向对象中类的定义是属性和方法的集合，结构体可以看做是属性的集合</p><h4 id="1-1-结构体定义（创建命名结构体）"><a href="#1-1-结构体定义（创建命名结构体）" class="headerlink" title="1.1 结构体定义（创建命名结构体）"></a>1.1 结构体定义（创建命名结构体）</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// type关键字 结构体名 struct关键字{}</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 如果是大写开头表示可以在作为包导入中引用</span>    Age <span class="token builtin">int</span>    sex <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 两种定义方式，按位置必须全传，按关键字可以不按顺序少传</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"男"</span><span class="token punctuation">}</span>    peo2 <span class="token operator">:=</span> People<span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"lxt"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>补充：如果只定义不初始化内部只存在对应字段的零值</p><h4 id="1-2-创建匿名结构体"><a href="#1-2-创建匿名结构体" class="headerlink" title="1.2 创建匿名结构体"></a>1.2 创建匿名结构体</h4><p>匿名结构体通常在创建的时候就定义，一般只用一次，在整合多个数据类型的时候可以用，通常定义在方法内部或者结构体内部</p><pre class=" language-go"><code class="language-go">dog <span class="token operator">:=</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">189</span><span class="token punctuation">,</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span></code></pre><h4 id="1-3-访问-修改结构体字段"><a href="#1-3-访问-修改结构体字段" class="headerlink" title="1.3 访问/修改结构体字段"></a>1.3 访问/修改结构体字段</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 直接.访问修改赋值</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-结构体指针"><a href="#1-4-结构体指针" class="headerlink" title="1.4 结构体指针"></a>1.4 结构体指针</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 指向结构体的指针，用法和结构体没差</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 原本必须要写(*peo).age go内部支持简写</span>    peo<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-5-匿名字段"><a href="#1-5-匿名字段" class="headerlink" title="1.5 匿名字段"></a>1.5 匿名字段</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 匿名字段本质就是把字段类型当名字一起使用</span><span class="token comment" spellcheck="true">// 但是同时只能存在一种类型，就是不能写俩string</span><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span>    <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"xxx"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-6-嵌套结构体"><a href="#1-6-嵌套结构体" class="headerlink" title="1.6 嵌套结构体"></a>1.6 嵌套结构体</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span>    Hobby Hobby<span class="token punctuation">}</span><span class="token keyword">type</span> Hobby <span class="token keyword">struct</span> <span class="token punctuation">{</span>    hobbyId <span class="token builtin">int</span>    hobbyName <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义方式1</span>    <span class="token comment" spellcheck="true">//peo.Hobby.hobbyId = 1</span>    <span class="token comment" spellcheck="true">//peo.Hobby.hobbyName= "xxx"</span>    <span class="token comment" spellcheck="true">// 定义方式2</span>    peo<span class="token punctuation">.</span>Hobby <span class="token operator">=</span> Hobby<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"xxx"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>Hobby<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-7-字段提升"><a href="#1-7-字段提升" class="headerlink" title="1.7 字段提升"></a>1.7 字段提升</h4><p>在<strong>不重名</strong>的情况下可以把嵌套在内部的结构体字段提升到外层结构体来使用，如果重名就会优先使用外层结构体的字段名</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    sex <span class="token builtin">string</span>    <span class="token comment" spellcheck="true">// 必须使用匿名嵌套结构体才能提升</span>    Hobby<span class="token punctuation">}</span><span class="token keyword">type</span> Hobby <span class="token keyword">struct</span> <span class="token punctuation">{</span>    hobbyId <span class="token builtin">int</span>    hobbyName <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> <span class="token operator">&amp;</span>People<span class="token punctuation">{</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span>Hobby <span class="token operator">=</span> Hobby<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"xxx"</span><span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>hobbyName<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo<span class="token punctuation">.</span>hobbyId<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-8-结构体相等性"><a href="#1-8-结构体相等性" class="headerlink" title="1.8 结构体相等性"></a>1.8 结构体相等性</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo1 <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    peo2 <span class="token operator">:=</span> People<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 两个字段稍微一点不同就是false</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>peo1 <span class="token operator">==</span> peo2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 注意：结构体中只有全是值类型才能比较，如果存在引用类型比如切片，map这种引用类型就不能比较</span></code></pre><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2 方法"></a>2 方法</h3><p>方法就是在定义函数之前加一个特殊的接收器类型，接收器可以是结构体或者非结构体，接收器内部可以访问这个方法</p><h4 id="1-1-定义一个方法"><a href="#1-1-定义一个方法" class="headerlink" title="1.1 定义一个方法"></a>1.1 定义一个方法</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为People结构体绑定了printName方法</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化一个结构体对象</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">}</span>    peo<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-2-函数能实现同样的功能，为什么要方法？"><a href="#1-2-函数能实现同样的功能，为什么要方法？" class="headerlink" title="1.2 函数能实现同样的功能，为什么要方法？"></a>1.2 函数能实现同样的功能，为什么要方法？</h4><ul><li>go不是纯粹的面向对象的语言，go不支持类，方法是对应面向对象中对象的方法</li><li>一个方法可以绑定给多个不同的结构体，但是一个函数不能接受不同的结构体作为参数</li></ul><h4 id="1-3-指针接收器与值接收器"><a href="#1-3-指针接收器与值接收器" class="headerlink" title="1.3 指针接收器与值接收器"></a>1.3 指针接收器与值接收器</h4><p>如果是在方法中</p><p>有值接收器，那它可以接收值接收器和指针接收器</p><p>有指针接收器，那它可以接收值接收器和指针接收器</p><p>总结：不管方法的接收器是什么，都可以用值或者指针去接受，两种接收器的区别就是：值接收器是值传递，指针接收器是引用传递</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> People <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果只是简单的值传递，那在内部改的值其实是一个copy的新值</span><span class="token comment" spellcheck="true">// 值接收器</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p People<span class="token punctuation">)</span><span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lxt"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果需要改动真的生效，就需要用到指针接收器</span><span class="token comment" spellcheck="true">// 指针接收器（全都用这个就行了）</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>People<span class="token punctuation">)</span><span class="token function">changeName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"lxt"</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    peo <span class="token operator">:=</span> People<span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//peo.changeName()  // 没有改原值</span>    peo<span class="token punctuation">.</span><span class="token function">changeName2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    peo<span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="1-4-非结构体方法"><a href="#1-4-非结构体方法" class="headerlink" title="1.4 非结构体方法"></a>1.4 非结构体方法</h4><p>如果要对非结构体绑定方法，那这个非结构体必须是我们自己定义的类型或者重命名的类型</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> MyInt <span class="token builtin">int</span><span class="token comment" spellcheck="true">// 注意在运算中类型必须一致才能运算</span><span class="token comment" spellcheck="true">// int不能传入结构体，必须重命名</span><span class="token keyword">func</span> <span class="token punctuation">(</span>i MyInt<span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span>x MyInt<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token operator">+</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> i MyInt <span class="token operator">=</span> <span class="token number">5</span>    i<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="3-接口"><a href="#3-接口" class="headerlink" title="3 接口"></a>3 接口</h3><p>接口就是一系列方法的集合，类似于面向对象中的多态，go语言的接口也支持鸭子类型</p><p>面向对象领域中，接口是指定义和规范一个子类的行为</p><h4 id="3-1-接口简单实现（鸭子类型）（非侵入式）"><a href="#3-1-接口简单实现（鸭子类型）（非侵入式）" class="headerlink" title="3.1 接口简单实现（鸭子类型）（非侵入式）"></a>3.1 接口简单实现（鸭子类型）（非侵入式）</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> TDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> DDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    salary <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TDUCK"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DDUCK"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"T EAT"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D EAT"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 让Tduck和Dduck都实现Duck接口</span>    <span class="token comment" spellcheck="true">// 方式一：通过鸭子类型，写同样的方法</span>    t <span class="token operator">:=</span>TDuck<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    t<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token operator">:=</span>DDuck<span class="token punctuation">{</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">}</span>    d<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="3-2-侵入式接口"><a href="#3-2-侵入式接口" class="headerlink" title="3.2 侵入式接口"></a>3.2 侵入式接口</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TDUCK"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DDUCK"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"T EAT"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D EAT"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> TDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> DDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    salary <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 让Tduck和Dduck都实现Duck接口</span>    <span class="token comment" spellcheck="true">// 方式二：侵入式接口，接口方法没有，报错</span>    <span class="token keyword">var</span> duck Duck    t<span class="token operator">:=</span>TDuck<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    duck<span class="token operator">=</span>t    duck<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    d<span class="token operator">:=</span>DDuck<span class="token punctuation">{</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">}</span>    duck <span class="token operator">=</span> d    duck<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="3-3-接口的内部表示"><a href="#3-3-接口的内部表示" class="headerlink" title="3.3 接口的内部表示"></a>3.3 接口的内部表示</h4><p>我们可以把接口看作内部的一个元组 (type, value)。<br>type 是接口底层的具体类型（Concrete Type），而 value 是具体类型的值。</p><h4 id="3-4-类型断言"><a href="#3-4-类型断言" class="headerlink" title="3.4 类型断言"></a>3.4 类型断言</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"TDUCK"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DDUCK"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t TDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"T EAT"</span><span class="token punctuation">,</span>t<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>d DDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D EAT"</span><span class="token punctuation">,</span>d<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> TDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">type</span> DDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    age <span class="token builtin">int</span>    salary <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 断言类型</span>    <span class="token comment" spellcheck="true">// 把接口类型转换成结构体类型</span>    <span class="token comment" spellcheck="true">// 定义了一个接口类型</span>    <span class="token keyword">var</span> tduck Duck <span class="token operator">=</span> TDuck<span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 断言这个值的类型，v为值，ok为判断的bool</span>    <span class="token comment" spellcheck="true">// 如果断言失败，ok为false v为空值</span>    v<span class="token punctuation">,</span>ok <span class="token operator">:=</span> tduck<span class="token punctuation">.</span><span class="token punctuation">(</span>TDuck<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>ok<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><strong>类型断言扩展</strong></p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//5 类型选择(通过switch)</span><span class="token comment" spellcheck="true">//var duck Duck =TDuck{"egon","男",1,"刘亦菲"}</span><span class="token comment" spellcheck="true">////var duck Duck =PDuck{"egon","男",1}</span><span class="token comment" spellcheck="true">//test4(duck)</span><span class="token comment" spellcheck="true">//使用switch，选择成功，拿到结构体对象</span><span class="token comment" spellcheck="true">//func test4(duck Duck)  {</span><span class="token comment" spellcheck="true">//    switch v:=duck.(type) {</span><span class="token comment" spellcheck="true">//    case PDuck:</span><span class="token comment" spellcheck="true">//        fmt.Println(v.name)</span><span class="token comment" spellcheck="true">//        fmt.Println("我是普通鸭子")</span><span class="token comment" spellcheck="true">//    case TDuck:</span><span class="token comment" spellcheck="true">//        fmt.Println(v.wife)</span><span class="token comment" spellcheck="true">//        fmt.Println("我是唐老鸭")</span><span class="token comment" spellcheck="true">//    default:</span><span class="token comment" spellcheck="true">//        fmt.Println(v)</span><span class="token comment" spellcheck="true">//        fmt.Println("我是鸭子这个类")</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//}</span></code></pre><h4 id="3-5-空接口"><a href="#3-5-空接口" class="headerlink" title="3.5 空接口"></a>3.5 空接口</h4><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Empty <span class="token keyword">interface</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义一个空接口</span>    <span class="token comment" spellcheck="true">// 所有数据类型都实现了空接口，所以空接口可以接受任意类型的值</span>    <span class="token keyword">var</span> e Empty    a <span class="token operator">:=</span> <span class="token number">123</span>    e <span class="token operator">=</span> a    <span class="token comment" spellcheck="true">// 虽然可以接受任意类型，但是有一个缺点就是本身没有任何方法</span>    <span class="token comment" spellcheck="true">// 所以要使用原来值类型的方法就必须类型断言回去，再使用</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>同理，集合中也可以放入空接口来接收任意值</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//var a[3]Duck</span><span class="token comment" spellcheck="true">//a[1]=PDuck{}</span><span class="token comment" spellcheck="true">//a[2]=TDuck{}</span><span class="token comment" spellcheck="true">//var a map[string]interface{}= make(map[string]interface{})</span><span class="token comment" spellcheck="true">//a["name"]="lqz"</span><span class="token comment" spellcheck="true">//a["age"]=19</span><span class="token comment" spellcheck="true">//a["duck"]=PDuck{}</span></code></pre><h4 id="3-7-实现多个接口"><a href="#3-7-实现多个接口" class="headerlink" title="3.7 实现多个接口"></a>3.7 实现多个接口</h4><p>方式一：直接写方法就行</p><p>方式二：通过接口嵌套</p><pre class=" language-go"><code class="language-go"><span class="token keyword">type</span> Animal <span class="token keyword">interface</span> <span class="token punctuation">{</span>    <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">type</span> Duck <span class="token keyword">interface</span> <span class="token punctuation">{</span>    Animal    <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//type Cat interface {</span><span class="token comment" spellcheck="true">//    Animal</span><span class="token comment" spellcheck="true">//    speak()</span><span class="token comment" spellcheck="true">//    run()</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//如果一个结构体实现duck接口</span><span class="token keyword">type</span> PDuck <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    sex <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p PDuck<span class="token punctuation">)</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//1 实现多个接口</span>    <span class="token comment" spellcheck="true">//var t TDuck=TDuck{}</span>    <span class="token comment" spellcheck="true">//var a Animal</span>    <span class="token comment" spellcheck="true">//var d Duck</span>    <span class="token comment" spellcheck="true">////一旦转到某个接口上，只能使用接口的方法，自身属性和自身方法需要类型断言后才能使用</span>    <span class="token comment" spellcheck="true">//a=t</span>    <span class="token comment" spellcheck="true">//d=ta</span>    <span class="token comment" spellcheck="true">//2 接口嵌套</span>    <span class="token comment" spellcheck="true">//var a Animal</span>    <span class="token comment" spellcheck="true">//var d Duck</span>    <span class="token comment" spellcheck="true">//var c PDuck=PDuck{}</span>    <span class="token comment" spellcheck="true">//a=c</span>    <span class="token comment" spellcheck="true">//d=c</span>    <span class="token comment" spellcheck="true">//3 接口的零值</span>    <span class="token comment" spellcheck="true">//var a Animal   //nil 是引用类型</span>    <span class="token comment" spellcheck="true">//fmt.Println(a)</span><span class="token punctuation">}</span></code></pre><h3 id="4-自定义集合类型"><a href="#4-自定义集合类型" class="headerlink" title="4 自定义集合类型"></a>4 自定义集合类型</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">//定义MySet类型</span><span class="token keyword">type</span> MySet <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token comment" spellcheck="true">//判断元素是否存在</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">isExist</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//返回set长度</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">set</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m MySet<span class="token punctuation">)</span> <span class="token function">delete</span><span class="token punctuation">(</span>a <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">delete</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试代码</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个set</span>    <span class="token keyword">var</span> a MySet <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span>MySet<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//相当于</span>    <span class="token comment" spellcheck="true">//var a MySet = make(map[interface{}]bool)</span>    <span class="token comment" spellcheck="true">//打印set的长度</span>    <span class="token comment" spellcheck="true">//fmt.Println(a.len())</span>    <span class="token comment" spellcheck="true">//放入一个值</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//放入一个相同值</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"lqz"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//打印长度，还是1</span>    <span class="token comment" spellcheck="true">//fmt.Println(a.len())</span>    <span class="token comment" spellcheck="true">//判断1是否存在</span>    <span class="token comment" spellcheck="true">//fmt.Println(a.isExist(2))</span>    <span class="token comment" spellcheck="true">////删除1</span>    a<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">////判断1是否存在</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">isExist</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span><span class="token keyword">range</span> a<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-make和new的区别"><a href="#5-make和new的区别" class="headerlink" title="5 make和new的区别"></a>5 make和new的区别</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token comment" spellcheck="true">//make和new的区别</span><span class="token keyword">type</span> PDuck1 <span class="token keyword">struct</span> <span class="token punctuation">{</span>    name <span class="token builtin">string</span>    sex <span class="token builtin">string</span>    age <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//make是引用类型初始化的时候用的</span>    <span class="token comment" spellcheck="true">//var per *PDuck1 =new(PDuck1)    //new 是返回指向这个类型的指针</span>    <span class="token comment" spellcheck="true">//fmt.Println(per)</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//var per1 =&amp;PDuck1{}</span>    <span class="token comment" spellcheck="true">//fmt.Println(per1)</span>    <span class="token comment" spellcheck="true">//var per2 = make([]int,3,4)  //make是具体的造引用类型  //new是造指向这个类型的指针</span>    <span class="token comment" spellcheck="true">//var per2 *[]int= new([]int)</span>    <span class="token comment" spellcheck="true">//fmt.Println(per2)</span>    <span class="token comment" spellcheck="true">//(*per2)=append((*per2),99)</span>    <span class="token comment" spellcheck="true">//fmt.Println(per2)</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> go面向接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript函数</title>
      <link href="/task/2020/09/14/%E5%89%8D%E7%AB%AF/Typescript%E5%87%BD%E6%95%B0/"/>
      <url>/task/2020/09/14/%E5%89%8D%E7%AB%AF/Typescript%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-函数基本定义"><a href="#1-函数基本定义" class="headerlink" title="1 函数基本定义"></a>1 函数基本定义</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5中函数写法</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hz"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es5 中的匿名函数</span><span class="token keyword">var</span> run1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es6中有名函数，推荐返回值指定类型</span><span class="token keyword">function</span> <span class="token function">run2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"hz"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es6中匿名函数</span><span class="token keyword">var</span> run3 <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span></code></pre><h3 id="2-参数和返回值"><a href="#2-参数和返回值" class="headerlink" title="2 参数和返回值"></a>2 参数和返回值</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 定义函数传参</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义没有返回值的函数</span><span class="token keyword">function</span> <span class="token function">run4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里return就会报错，因为已经指定了void没有返回值</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// es5 的写法可以传也可以不传，对返回值没有要求</span><span class="token keyword">function</span> <span class="token function">run5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span></code></pre><h3 id="3-可选参数"><a href="#3-可选参数" class="headerlink" title="3 可选参数"></a>3 可选参数</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可选参数</span><span class="token comment" spellcheck="true">// ts中默认必须按照形参传实参，如果设置某个参数可以不传就需要配置</span><span class="token keyword">function</span> <span class="token function">prinyMsg</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">   </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> age保密`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">prinyMsg</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token keyword">var</span> res1 <span class="token operator">=</span> <span class="token function">prinyMsg</span><span class="token punctuation">(</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span></code></pre><p>注意：可选参数必须放在形参的最后面，不然会报错</p><h3 id="4-默认参数"><a href="#4-默认参数" class="headerlink" title="4 默认参数"></a>4 默认参数</h3><p>es5中不能设置默认参数，es6和ts中都可以设置默认参数</p><p>注意：默认参数也必须写在最后，否则没有效果</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认参数</span><span class="token keyword">function</span> <span class="token function">prinyMsg2</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">   </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> age保密`</span></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">prinyMsg2</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">prinyMsg2</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span></code></pre><h3 id="5-剩余参数（三点运算符）"><a href="#5-剩余参数（三点运算符）" class="headerlink" title="5 剩余参数（三点运算符）"></a>5 剩余参数（三点运算符）</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 也可以先传一个，后面的再接受起来</span><span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token operator">...</span>result<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> a<span class="token operator">+</span>b    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="6-函数重载"><a href="#6-函数重载" class="headerlink" title="6 函数重载"></a>6 函数重载</h3><p>es5中出现同名函数，下面的会替换上面的</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 方法重载</span><span class="token comment" spellcheck="true">// 如果我只写两个getInfo就会报错，必须要有重载函数</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我是"</span><span class="token operator">+</span> str    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"我的年龄是"</span> <span class="token operator">+</span> str    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 且这里传参必须传能找到的，否则报错</span><span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h3 id="7-箭头函数"><a href="#7-箭头函数" class="headerlink" title="7 箭头函数"></a>7 箭头函数</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// es6 ts</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'run'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 箭头函数中的this指代上下文</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> ts基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es5面向对象（ts面向对象前提扩展）</title>
      <link href="/task/2020/09/14/%E5%89%8D%E7%AB%AF/es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%89%8D%E6%8F%90%E6%89%A9%E5%B1%95%EF%BC%89/"/>
      <url>/task/2020/09/14/%E5%89%8D%E7%AB%AF/es5%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88ts%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%89%8D%E6%8F%90%E6%89%A9%E5%B1%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="es5面向对象（ts面向对象前提扩展）"><a href="#es5面向对象（ts面向对象前提扩展）" class="headerlink" title="es5面向对象（ts面向对象前提扩展）"></a>es5面向对象（ts面向对象前提扩展）</h2><h3 id="1-创建对象"><a href="#1-创建对象" class="headerlink" title="1 创建对象"></a>1 创建对象</h3><p>定义，创建，原形链，静态方法</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 配置静态方法</span>Peopel<span class="token punctuation">.</span>getInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我是类的静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>sex<span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span>Peopel<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2 继承"></a>2 继承</h3><h4 id="2-1-对象冒充实现继承"><a href="#2-1-对象冒充实现继承" class="headerlink" title="2.1 对象冒充实现继承"></a>2.1 对象冒充实现继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：原形链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Peopel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 对象冒充实现继承</span>    <span class="token comment" spellcheck="true">// 可以调用父类中的属性和方法，除原形链的方法和属性外</span><span class="token punctuation">}</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-2-原形链实现继承"><a href="#2-2-原形链实现继承" class="headerlink" title="2.2 原形链实现继承"></a>2.2 原形链实现继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hz"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：原形链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链即可以是用父类原型链扩展的，也可以使用父类中的属性和方法</span>Web<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peopel</span><span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 存在问题：在实例化子类的时候无法给父类传参</span></code></pre><h4 id="3-3-原形链-构造函数组合继承"><a href="#3-3-原形链-构造函数组合继承" class="headerlink" title="3.3 原形链+构造函数组合继承"></a>3.3 原形链+构造函数组合继承</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// es5 中定义类和对象</span><span class="token keyword">function</span> <span class="token function">Peopel</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"i am "</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过原形链增加类中的方法和属性,原形链上的属性和方法会被所有实例使用</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"boy"</span>Peopel<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>work <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 继承：原形链+对象冒充的组合继承模式</span><span class="token keyword">function</span> <span class="token function">Web</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    Peopel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 第一种写法</span>Web<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Peopel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第二种写法</span>Web<span class="token punctuation">.</span>protorype <span class="token operator">=</span> Peopel<span class="token punctuation">.</span>protorype<span class="token keyword">var</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>w<span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> ts基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript入门，基本数据类型</title>
      <link href="/task/2020/09/13/%E5%89%8D%E7%AB%AF/Typescript%E5%85%A5%E9%97%A8%EF%BC%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/task/2020/09/13/%E5%89%8D%E7%AB%AF/Typescript%E5%85%A5%E9%97%A8%EF%BC%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1 基本介绍"></a>1 基本介绍</h3><p>ts是js的超集，是目前前端必备的基础，包含了es5，es6的语法</p><p>也可以集成到vue中</p><p>安装：cnpm install -g typescript</p><p>查看版本：tsc -v</p><p>语言类型：静态弱类型</p><p>无法直接在浏览器运行，需要编译成js代码</p><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h3><h4 id="2-1-如何配置自动编译"><a href="#2-1-如何配置自动编译" class="headerlink" title="2.1 如何配置自动编译"></a>2.1 如何配置自动编译</h4><p>使用idev：vscode</p><p>在vscode中在项目下cmd窗口输入<code>tsc --init</code>就会自动生成一个.json的配置文件</p><p>修改配置文件中</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 默认是注释的解开注释即可</span><span class="token string">"outDir"</span><span class="token punctuation">:</span> <span class="token string">"./js"</span><span class="token comment" spellcheck="true">// 会把编译完成的ts代码放到js目录下的文件中</span></code></pre><p>然后点击终端–typescript–监视配置文件</p><p>如果报错9成是因为tsc权限不足</p><p>解决方式：以管理员方式打开cmd</p><p>输入<code>set-ExecutionPolicy RemoteSigned</code></p><p>再输入A或者Y即可</p><h3 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3 数据类型"></a>3 数据类型</h3><h4 id="3-1-数据类型定义"><a href="#3-1-数据类型定义" class="headerlink" title="3.1 数据类型定义"></a>3.1 数据类型定义</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 布尔类型 boolean</span><span class="token keyword">let</span> boo<span class="token punctuation">:</span><span class="token keyword">boolean</span> <span class="token operator">=</span> <span class="token keyword">true</span><span class="token comment" spellcheck="true">// let关键字 变量名:变量类型 = 值</span></code></pre><h4 id="3-2-数字类型-number"><a href="#3-2-数字类型-number" class="headerlink" title="3.2 数字类型(number)"></a>3.2 数字类型(number)</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">123.3</span><span class="token comment" spellcheck="true">// 数值类型包括整形和浮点型</span></code></pre><h4 id="3-3-字符类型（string）"><a href="#3-3-字符类型（string）" class="headerlink" title="3.3 字符类型（string）"></a>3.3 字符类型（string）</h4><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> str<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"hz"</span></code></pre><h4 id="3-4-数组类型（array）"><a href="#3-4-数组类型（array）" class="headerlink" title="3.4 数组类型（array）"></a>3.4 数组类型（array）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 数组在定义的时候必须指定内部的类型</span><span class="token comment" spellcheck="true">// 第一种定义方式</span><span class="token keyword">let</span> test_arry1<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">]</span><span class="token keyword">let</span> test_arry2<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"lxt"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 推荐用双引号</span><span class="token comment" spellcheck="true">// 第二种定义方式</span><span class="token keyword">let</span> test_arry3<span class="token punctuation">:</span><span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 第三种定义方式</span><span class="token comment" spellcheck="true">// 通过any类型就可以放任意类型</span><span class="token keyword">let</span> arr<span class="token punctuation">:</span><span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'123'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token keyword">true</span><span class="token punctuation">]</span></code></pre><h4 id="3-5-元组类型（tuple）"><a href="#3-5-元组类型（tuple）" class="headerlink" title="3.5 元组类型（tuple）"></a>3.5 元组类型（tuple）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 可以定义内部类型的数组，必须一一对应</span><span class="token comment" spellcheck="true">// 元组类型（数组的一种）</span><span class="token keyword">let</span> test_arry4<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">,</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"nb"</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><h4 id="3-6-枚举类型（enum）"><a href="#3-6-枚举类型（enum）" class="headerlink" title="3.6 枚举类型（enum）"></a>3.6 枚举类型（enum）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 枚举类型，相当于创建一种新的类型，通过标识符和数值的对应来表示值类</span><span class="token comment" spellcheck="true">// 用于标识一种状态</span><span class="token keyword">enum</span> Flag <span class="token punctuation">{</span>success<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>error<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">var</span> f<span class="token punctuation">:</span>Flag <span class="token operator">=</span> Flag<span class="token punctuation">.</span>success console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Flag<span class="token punctuation">.</span>error<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//2 </span><span class="token comment" spellcheck="true">// 如果枚举类型没有定义值，打印的就是索引值</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>red<span class="token punctuation">,</span>blue<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>green<span class="token punctuation">}</span><span class="token keyword">var</span> c<span class="token punctuation">:</span>Color <span class="token operator">=</span> Color<span class="token punctuation">.</span>redconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 0</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>blue<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 5</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>green<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 6 如果上一个对应值不是索引，就会按照上一个值递增1</span></code></pre><h4 id="3-7-任意类型（any）"><a href="#3-7-任意类型（any）" class="headerlink" title="3.7 任意类型（any）"></a>3.7 任意类型（any）</h4><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 任意类型 any</span><span class="token keyword">let</span> data<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">=</span> <span class="token number">123</span>data <span class="token operator">=</span> <span class="token string">'123'</span><span class="token comment" spellcheck="true">// 任意类型的用途</span><span class="token comment" spellcheck="true">// 当我们需要用变量接受一个对象时，js中是可以直接接受</span><span class="token comment" spellcheck="true">// 必须指定any</span><span class="token keyword">let</span> oBox<span class="token punctuation">:</span><span class="token keyword">any</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span>oBox<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span></code></pre><h4 id="3-8-其他类型（never类型）的子类型"><a href="#3-8-其他类型（never类型）的子类型" class="headerlink" title="3.8 其他类型（never类型）的子类型"></a>3.8 其他类型（never类型）的子类型</h4><p>代表从不会出现的值</p><p>以为这never类型的变量只能被类型所赋值</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 其他类型（never类型）的子类型</span><span class="token comment" spellcheck="true">//undefined</span><span class="token comment" spellcheck="true">// num此时只能被赋值undefined</span><span class="token keyword">var</span> num<span class="token punctuation">:</span>undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果被赋值就是number类型，没赋值就是undefined类型</span><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// null</span><span class="token comment" spellcheck="true">// undefined可以不赋值是因为他不仅可以作为类型，也可以作为值，而null不一样，如果要定义null类型就必须赋值null值</span><span class="token keyword">var</span> num1<span class="token punctuation">:</span><span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 综合运用</span><span class="token comment" spellcheck="true">// 如果我们对一个值的类型不能确定，不仅可以用any，也可以用|分隔可能出现的类型</span><span class="token keyword">let</span> num<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefinedconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>num <span class="token operator">=</span> <span class="token keyword">null</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// null</span>num <span class="token operator">=</span> <span class="token number">123</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123</span></code></pre><h4 id="3-9-void表示没有任何类型"><a href="#3-9-void表示没有任何类型" class="headerlink" title="3.9 void表示没有任何类型"></a>3.9 void表示没有任何类型</h4><p>一般用于定义方法的时候没有任何返回值</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 表示这个方法没有返回值</span><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'456'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果一个方法有返回值，就指定返回值类型</span><span class="token keyword">function</span> <span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">run1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ts </tag>
            
            <tag> ts基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议查漏补缺</title>
      <link href="/task/2020/09/13/%E5%89%8D%E7%AB%AF/HTTP%E5%8D%8F%E8%AE%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/"/>
      <url>/task/2020/09/13/%E5%89%8D%E7%AB%AF/HTTP%E5%8D%8F%E8%AE%AE%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一、HTTP协议版本区别"><a href="#一、HTTP协议版本区别" class="headerlink" title="一、HTTP协议版本区别"></a>一、HTTP协议版本区别</h3><ul><li>0.9 远古版本，只有一个GET命令，只支持纯文本</li><li>1.1 主流版本<ul><li>引入了持久链接，通过请求头中的<code> keep-alive</code>来设置</li><li>引入了管道机制，同一个tcp链接可以同时发送多个请求</li><li>支持断点续传，请求头中的<code> range</code>来实现</li><li>使用了虚拟网络，一个物理机上可以存在多个虚拟主机，共享一个ip地址</li></ul></li><li>2.0 先进版本<ul><li>二进制分帧：头信息和数据体都是二进制</li><li>头部压缩：在1.1版本头部信息会偏重，而body只有几十个字节，通过HPACK算法进行亚索</li><li>多路复用：一个TCP链接，哭护短和浏览器都可以同时发出多个请求，不用按顺序一一对应，解决了队头阻塞的问题</li><li>请求优先级：可以设置数据帧的优先级，让服务器先处理重要的请求</li></ul></li></ul><h3 id="二、状态码"><a href="#二、状态码" class="headerlink" title="二、状态码"></a>二、状态码</h3><ul><li>1xx：代表请求已经被接受，需要后续处理</li><li>2xx：表示成功</li><li>3xx：重定向状态</li><li>4xx：客户端有误</li><li>5xx：服务器错误</li></ul><h4 id="1xx-信息类"><a href="#1xx-信息类" class="headerlink" title="1xx 信息类"></a>1xx 信息类</h4><p>接受的请求正在处理，信息类状态码</p><h4 id="2xx-成功"><a href="#2xx-成功" class="headerlink" title="2xx 成功"></a>2xx 成功</h4><ul><li><p>200 OK 表示从客户端发来的请求在服务器端被正确请求。</p></li><li><p>204 No content，表示请求成功，但没有资源可返回。</p></li><li><p>206 Partial Content，该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的 GET 请求 响应报文中包含由 <strong>「Content-Range」</strong> 指定范围的实体内容。</p></li></ul><h4 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx 重定向"></a>3xx 重定向</h4><ul><li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL，这时应该按 Location 首部字段提示的 URI 重新保存。</li><li>302 found，临时性重定向，表示资源临时被分配了新的 URL。</li><li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源。</li><li>304 not modified，当协商缓存命中时会返回这个状态码。</li><li>307 temporary redirect，临时重定向，和302含义相同,不会改变method</li></ul><p>注意区分：301（永久重定向），302（临时重定向）</p><h4 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx 客户端错误"></a>4xx 客户端错误</h4><ul><li>400 bad request，请求报文存在语法错误。</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息。</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝，可能遇到跨站请求伪造</li><li>404 not found，表示在服务器上没有找到请求的资源，可能是网址输错了</li><li>405 Method Not Allowed，服务器禁止使用该方法，客户端可以通过options方法来查看服务器允许的访问方法，可能遇到了cors，跨域问题</li></ul><h4 id="5xx-服务器错误"><a href="#5xx-服务器错误" class="headerlink" title="5xx 服务器错误"></a>5xx 服务器错误</h4><ul><li>500 internal sever error，表示服务器端在执行请求时发生了错误。</li><li>502 Bad Gateway，服务器自身是正常的，访问的时候出了问题，具体啥错误我们不知道。</li><li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求。</li></ul><h3 id="三、HTTP的缓存策略"><a href="#三、HTTP的缓存策略" class="headerlink" title="三、HTTP的缓存策略"></a>三、HTTP的缓存策略</h3><h4 id="1-强缓存"><a href="#1-强缓存" class="headerlink" title="1 强缓存"></a>1 强缓存</h4><p>两个关键字段：Expires，Cache-Control</p><p>HTTP1.0版本，使用的是Expires，HTTP1.1使用的是Cache-Control</p><ul><li>Expires表示过期时间，时间是相对于服务器时间而言，所以可能因为服务器和客户端时间不一致而出错</li><li>Cache-Control 表示过期时长，从现在开始多少秒过期，这样就避免了两端时间不一致的问题</li></ul><p>注意点：</p><ul><li>当Expires和Cache-Control同时存在时，优先考虑Cache-Control。</li><li>当然了，当缓存资源失效了，也就是没有命中强缓存，接下来就进入协商缓存👇</li></ul><h4 id="2-协商缓存"><a href="#2-协商缓存" class="headerlink" title="2 协商缓存"></a>2 协商缓存</h4><p>强缓存失效后，浏览器就会在请求头中携带响应的缓存Tag向服务器发送请求，服务器根据tag决定是否使用缓存</p><p>缓存分成两种：<strong>「Last-Modified」</strong> 和 <strong>「ETag」</strong></p><h5 id="2-1-Last-Modified"><a href="#2-1-Last-Modified" class="headerlink" title="2.1 Last-Modified"></a>2.1 Last-Modified</h5><p>表示最后修改时间，第一次请求的时候，服务器的响应头会带上这个参数，然后这个参数会在下一次缓存未命中的时候加入到请求头改为：<strong>If-Modified-Since</strong>，key不同，但是value相同，服务器拿到这个字段后，就会和请求资源的最后修改时间对比</p><ul><li>如果请求头的时间更久远，说明这个数据已经发生了改变就要跟新这个缓存了，返回新的资源</li><li>否则返回304告诉浏览器直接使用缓存</li></ul><h5 id="2-2-ETag"><a href="#2-2-ETag" class="headerlink" title="2.2 ETag"></a>2.2 ETag</h5><p>本质就是对请求的资源通过md5算法运算，生成的结果哪怕动了一个字节都算是修改，存储和请求方式和上面相似</p><p>浏览器接受到ETag值，会在下次请求的时候，将这个值作为<strong>「If-None-Match」</strong>这个字段的内容，发给服务器。</p><p>服务器接收到<strong>「If-None-Match」</strong>后，会跟服务器上该资源的<strong>「ETag」</strong>进行比对👇</p><ul><li>如果两者一样的话，直接返回304，告诉浏览器直接使用缓存</li><li>如果不一样的话，说明内容更新了，返回新的资源，跟常规的HTTP请求响应的流程一样</li></ul><h5 id="2-3-总结："><a href="#2-3-总结：" class="headerlink" title="2.3 总结："></a>2.3 总结：</h5><p>协商缓存的两种方式</p><ul><li>性能上：Last-Modified更好，因为etag需要运算</li><li>精度上：etag更好，比如说某个资源文件，只是touch了一下，并没有修改内容，在修改时间上是更新了，但是本质上内容没变。</li><li>如果两种方式都支持，优先考虑etag</li></ul><h4 id="3-缓存位置"><a href="#3-缓存位置" class="headerlink" title="3 缓存位置"></a>3 缓存位置</h4><p>总结来说：大的js，css缓存是放在磁盘中，一些小的资源类是放在内存中</p><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h4><ul><li><p>首先检查<code>Cache-Control</code>， 尝鲜，看强缓存是否可用</p></li><li><p>如果可用的话，直接使用</p></li><li><p>否则进入协商缓存，发送HTTP请求，服务器通过请求头中的<code>If-Modified-Since</code>或者<code>If-None-Match</code>字段检查资源是否更新</p></li><li><p>资源更新，返回资源和200状态码。</p></li><li><p>否则，返回304，直接告诉浏览器直接从缓存中去资源。</p></li></ul><h3 id="四、HTTP和HTTPS"><a href="#四、HTTP和HTTPS" class="headerlink" title="四、HTTP和HTTPS"></a>四、HTTP和HTTPS</h3><p>HTTPS不是一个行的应用层协议，本质是HTTP+TLS/SSL协议的组合，保证安全性是SSL/TLS的工作</p><ul><li>SSL：安全套接层2</li><li>TLS：传输层安全（非对称加密）</li></ul><p>HTTPS的关键：</p><ul><li>对数据进行加密，并建立一个信息安全通道，来保证传输过程中的数据安全;</li><li>对网站服务器进行真实身份认证。</li></ul><h3 id="五、短轮询，长轮询，WebSocket"><a href="#五、短轮询，长轮询，WebSocket" class="headerlink" title="五、短轮询，长轮询，WebSocket"></a>五、短轮询，长轮询，WebSocket</h3><h4 id="1-短轮询"><a href="#1-短轮询" class="headerlink" title="1 短轮询"></a>1 短轮询</h4><p>通过不断建立http请求，无论数据是否有更新都直接响应</p><p>优缺点：</p><ul><li>优点：简单</li><li>缺点：大量浪费资源</li></ul><h4 id="2-长轮询"><a href="#2-长轮询" class="headerlink" title="2 长轮询"></a>2 长轮询</h4><p>接受到请求不会直接响应，先把这个请求挂起，判断服务端数据是否有更新</p><p>如果有更新就响应，没有更新就等一会再返回</p><p>优缺点：</p><ul><li>优点：比短轮询节省了资源</li><li>缺点：挂起也会导致资源的浪费</li></ul><h4 id="3-WebSocket"><a href="#3-WebSocket" class="headerlink" title="3 WebSocket"></a>3 WebSocket</h4><p>WebSocket 是 Html5 定义的一个新协议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。</p><p>使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息。</p><h3 id="六、正向代理和反向代理"><a href="#六、正向代理和反向代理" class="headerlink" title="六、正向代理和反向代理"></a>六、正向代理和反向代理</h3><p>正向代理：</p><p>我要去找马云借钱，但是直接找马云他不会给我，我可以通过花呗找马云借钱，隐藏的是我（客户端）</p><p>反向代理：</p><p>输入<a href="http://www.baidu.com,我们不知道是哪台服务器为我们工作,但是只要能访问到就行,隐藏的是服务器/">www.baidu.com，我们不知道是哪台服务器为我们工作，但是只要能访问到就行，隐藏的是服务器</a></p><p>一般反向代理用于实现服务器的负载均衡</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 协议，查漏补缺 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git使用</title>
      <link href="/task/2020/07/01/%E5%85%B6%E4%BB%96/git%E5%AD%A6%E4%B9%A0/"/>
      <url>/task/2020/07/01/%E5%85%B6%E4%BB%96/git%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><h3 id="1-Git-commit-规范"><a href="#1-Git-commit-规范" class="headerlink" title="1 Git commit 规范"></a>1 Git commit 规范</h3><h4 id="type-commit-的类型"><a href="#type-commit-的类型" class="headerlink" title="type: commit 的类型"></a><strong>type: commit 的类型</strong></h4><ul><li>init: 初始化</li><li>feat: 新特性</li><li>fix: 修改问题</li><li>refactor: 代码重构</li><li>docs: 文档修改</li><li>style: 代码格式修改, 注意不是 css 修改</li><li>test: 测试用例修改</li><li>build: 构建项目</li><li>chore: 其他修改, 比如依赖管理</li><li>scope: commit 影响的范围, 比如: route, component, utils, build…</li><li>subject: commit 的概述</li></ul><p>body: commit 具体修改内容, 可以分为多行.</p><p>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</p><h3 id="2-git版本管理规范"><a href="#2-git版本管理规范" class="headerlink" title="2 git版本管理规范"></a>2 git版本管理规范</h3><ul><li>master：该分支是线上稳定版本代码，禁止提交代码</li><li>dev：从master分支切出，是需要开发代码的分支，所有开发均在dev分支</li><li>release：从dev分支切出，dev合并到release分支进行测试，同时也是发布分支</li><li>hotfix：从master分支切出，解决线上紧急BUG的修复</li></ul><h3 id="3-git配置"><a href="#3-git配置" class="headerlink" title="3 git配置"></a>3 git配置</h3><p>ssh公钥配置</p><pre><code>$ git config --global user.name &quot;your_name&quot;$ git config --global user.email &quot;your_email@example.com&quot;ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;然后去根目录下的.ssh文件，以.pub后缀的文件，打开复制，放到gitee上的秘钥框中git remote add origin ssh地址配置公钥后在remote的时候记得用ssh方式，不然还是要输密码</code></pre><p>拉取最新代码</p><pre><code>git initgit remote add origin git@gitee.com:qimumaoyi/guquan-backstage.gitgit pull --rebase origin master</code></pre><h3 id="4-git-rebase（变基）"><a href="#4-git-rebase（变基）" class="headerlink" title="4 git rebase（变基）"></a>4 git rebase（变基）</h3><p>rebase会把当前的分支放到公共分支后面</p><p>如果你从 master 拉了个feature分支出来,然后你提交了几个 commit,这个时候刚好有人把他开发的东西合并到 master 了,这个时候 master 就比你拉分支的时候多了几个 commit,如果这个时候你 rebase master 的话，就会把你当前的几个 commit，放到那个人 commit 的后面。</p><h3 id="5-git-merge"><a href="#5-git-merge" class="headerlink" title="5 git merge"></a>5 git merge</h3><p>merge会把当前提交的所有commit变成一个新的commit提交到对应的分支上，</p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xpath基本用法</title>
      <link href="/task/2020/04/25/python/%E7%88%AC%E8%99%AB/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/task/2020/04/25/python/%E7%88%AC%E8%99%AB/Xpath%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>XPath 是一门在 XML 文档中查找信息的语言，本质上和bs4差不多</p><p>主要选取节点的表达式是<code>/</code>和<code>//</code>组成</p><p>教程：<a href="https://www.runoob.com/xpath/xpath-syntax.html">https://www.runoob.com/xpath/xpath-syntax.html</a></p><table><thead><tr><th align="left">表达式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">nodename</td><td align="left">选取此节点的所有子节点。</td></tr><tr><td align="left">/</td><td align="left">从根节点选取。</td></tr><tr><td align="left">//</td><td align="left">从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td></tr><tr><td align="left">.</td><td align="left">选取当前节点。</td></tr><tr><td align="left">..</td><td align="left">选取当前节点的父节点。</td></tr><tr><td align="left">@</td><td align="left">选取属性。</td></tr></tbody></table><table><thead><tr><th align="left">路径表达式</th><th align="left">结果</th></tr></thead><tbody><tr><td align="left">bookstore</td><td align="left">选取 bookstore 元素的所有子节点。</td></tr><tr><td align="left">/bookstore</td><td align="left">选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td align="left">bookstore/book</td><td align="left">选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td align="left">//book</td><td align="left">选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td align="left">bookstore//book</td><td align="left">选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td align="left">//@lang</td><td align="left">选取名为 lang 的所有属性。</td></tr></tbody></table><pre class=" language-python"><code class="language-python">doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story li">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span></code></pre><p>测试案例：</p><pre class=" language-python"><code class="language-python">html <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 所有节点，列表包含一个个tag对象</span><span class="token comment" spellcheck="true"># a = html.xpath('//*')</span><span class="token comment" spellcheck="true"># 在body下的所有b标签（包含子子孙孙）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//b')</span><span class="token comment" spellcheck="true"># 在bdoy下的子标签中的b标签（只有子标签）</span><span class="token comment" spellcheck="true"># a = html.xpath('body/b')</span><span class="token comment" spellcheck="true"># 属性匹配,只能完全匹配，如果有多个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]')</span><span class="token comment" spellcheck="true"># 属性匹配模糊，只要有就能匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li")]')</span><span class="token comment" spellcheck="true"># 多属性匹配</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[contains(@class,"li") or @id="my_p"]')</span><span class="token comment" spellcheck="true"># 获取当前标签的文本（不包含其子节点内部的）（列表）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/text()')</span><span class="token comment" spellcheck="true"># 获取标签的属性</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[@class="title"]/@id')</span><span class="token comment" spellcheck="true"># 索引取出一个标签（注意第一个就是【1】不是0｝）</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[1]/text()')</span><span class="token comment" spellcheck="true"># 取出最后一个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()]/text()')</span><span class="token comment" spellcheck="true"># 取出位置小于3的</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[position()&lt;3]')</span><span class="token comment" spellcheck="true"># 取出倒数第二个</span><span class="token comment" spellcheck="true"># a = html.xpath('body//p[last()-2]')</span><span class="token comment" spellcheck="true"># 11 节点轴选择</span><span class="token comment" spellcheck="true"># ancestor：祖先节点</span><span class="token comment" spellcheck="true"># 使用了* 获取所有祖先节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::*')</span><span class="token comment" spellcheck="true"># # 获取祖先节点中的div</span><span class="token comment" spellcheck="true"># a=html.xpath('//a/ancestor::div')</span><span class="token comment" spellcheck="true"># attribute：属性值</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/attribute::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/@aa')</span><span class="token comment" spellcheck="true"># child：直接子节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/child::img/@src')</span><span class="token comment" spellcheck="true"># descendant：所有子孙节点</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[6]/descendant::h5/text()')</span><span class="token comment" spellcheck="true"># following:当前节点之后所有节点(兄弟节点和兄弟内部的节点)</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following::*[1]/@href')</span><span class="token comment" spellcheck="true"># following-sibling:当前节点之后同级节点（只找兄弟）</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::a')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]')</span><span class="token comment" spellcheck="true"># a=html.xpath('//a[1]/following-sibling::*[2]/@href')</span></code></pre><h3 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取文本</span>a <span class="token operator">=</span> html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'body//p[1]/text()'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性值</span>a<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span>'<span class="token operator">//</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span>@href<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 要注意，如果我们是找到一个标签再通过这个标签进行xpath筛选</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示还是从根往下找</span>tag<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'.//a[1]/@href'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这表示从当前标签位置为根往下找</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>celery基础</title>
      <link href="/task/2020/04/25/python/%E6%A8%A1%E5%9D%97/celery/"/>
      <url>/task/2020/04/25/python/%E6%A8%A1%E5%9D%97/celery/</url>
      
        <content type="html"><![CDATA[<h2 id="一、celery介绍"><a href="#一、celery介绍" class="headerlink" title="一、celery介绍"></a>一、celery介绍</h2><p>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></p><p>Celery 官方文档英文版：<a href="http://docs.celeryproject.org/en/latest/index.html">http://docs.celeryproject.org/en/latest/index.html</a></p><p>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></p><ul><li>异步任务框架</li><li>执行异步任务</li><li>执行延迟任务</li><li>执行定时任务</li></ul><h2 id="二、celery架构"><a href="#二、celery架构" class="headerlink" title="二、celery架构"></a>二、celery架构</h2><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/007S8ZIlgy1ggqw0f7bltj30q80c174d.jpg" alt="007S8ZIlgy1ggqw0f7bltj30q80c174d" loading="lazy"></p><h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p><h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>异步执行：解决耗时任务,将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p><p>延迟执行：解决延迟任务</p><p>定时执行：解决周期(周期)任务,比如每天数据统计</p><h2 id="三、celery使用"><a href="#三、celery使用" class="headerlink" title="三、celery使用"></a>三、celery使用</h2><p>安装：<code>pip install celery</code></p><p>根据celery架构，我们可以看出，worker就像是一个工人，一直在工作，如果有工作的时候就会从broker（Redist）里去拿过来执行，并放到pakend（redist）中存放结果</p><h3 id="方式一：在一个文件夹内的三个页面"><a href="#方式一：在一个文件夹内的三个页面" class="headerlink" title="方式一：在一个文件夹内的三个页面"></a>方式一：在一个文件夹内的三个页面</h3><p><strong>worker执行页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celery<span class="token comment" spellcheck="true"># broker存储的位置</span>broker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span><span class="token comment" spellcheck="true"># backend存储的位置</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化的celery对象</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 需要添加的任务</span>@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><p><strong>broker提交任务的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> add<span class="token comment" spellcheck="true"># 执行这个文件，就是把这个任务添加到数据库中，只要worker在工作</span><span class="token comment" spellcheck="true"># 就会把这个任务从数据库1中拿出来执行，并把结果放到数据库2中</span>ret <span class="token operator">=</span> add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ret 是这个任务的uuid，用于获取任务结果</span></code></pre><p><strong>backend获取任务结果的页面</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> app<span class="token keyword">from</span> celery<span class="token punctuation">.</span>result <span class="token keyword">import</span> AsyncResult<span class="token comment" spellcheck="true"># 任务对象的唯一标识：uuid</span>id <span class="token operator">=</span> <span class="token string">'19dc2faa-39f9-47b6-af77-e9d3a4d05d2e'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    async1 <span class="token operator">=</span> AsyncResult<span class="token punctuation">(</span>id<span class="token operator">=</span>id<span class="token punctuation">,</span> app<span class="token operator">=</span>app<span class="token punctuation">)</span>    <span class="token keyword">if</span> async1<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> async1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>failed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务失败'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'PENDING'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务等待中被执行'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'RETRY'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务异常后正在重试'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'STARTED'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务已经开始被执行'</span><span class="token punctuation">)</span></code></pre><h3 id="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"><a href="#方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）" class="headerlink" title="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"></a>方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）</h3><p>创建一个celery项目（包），内部必须含有名字为celery的py文件，在内部创建celery对象</p><p><strong>celery.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task1'</span><span class="token punctuation">,</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>编写需要添加的任务也在这个包内，可创建不同的任务文件，可添加多个</p><p><strong>task1.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y</code></pre><h3 id="执行延迟任务"><a href="#执行延迟任务" class="headerlink" title="执行延迟任务"></a>执行延迟任务</h3><p>添加任务页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 执行延迟任务就是多个一个时间参数</span><span class="token comment" spellcheck="true"># 这里注意，时间参数是根据utc时间，并不是中国时间</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token comment" spellcheck="true"># 时间对象必须和时间对象相加</span>eta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>add<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eta<span class="token operator">=</span>eta<span class="token punctuation">)</span></code></pre><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>celery页面</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.tasks.low'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A pc_celery -l info</span><span class="token comment" spellcheck="true"># celery -A pc_celery worker -l info -P eventlet</span></code></pre><h2 id="四、django中配置celery"><a href="#四、django中配置celery" class="headerlink" title="四、django中配置celery"></a>四、django中配置celery</h2><p>celery包最好放在根路径下</p><p><strong>添加定时任务</strong></p><p>celery.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># 配置django配置</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'luffyapi.settings.dev'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置celery的worker环境</span><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment" spellcheck="true"># 实例化worker对象app，用include添加定时任务</span>app<span class="token operator">=</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment" spellcheck="true"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.task2.update_banner'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token comment" spellcheck="true"># 'args': (),</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment" spellcheck="true"># celery beat -A celery_task -l info</span></code></pre><p><strong>task定时任务</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token comment" spellcheck="true"># 每三秒跟新一次缓存</span><span class="token comment" spellcheck="true"># 添加一个任务，celery内设定间隔时间3秒</span><span class="token comment" spellcheck="true"># 任务内去cache跟新banner_list，从数据库中拿到banner放到cache中的banner_list中</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>models <span class="token keyword">import</span> Banner<span class="token comment" spellcheck="true"># from luffyapi.settings import const</span><span class="token comment" spellcheck="true"># [OrderedDict(</span><span class="token comment" spellcheck="true">#     [('image', 'http://127.0.0.1:8000/media/banner/banner1.png'), ('link', '/free-courses'), ('name', 'banner1')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner2.png'), ('link', '/light-courses'), ('name', 'banner2')]),</span><span class="token comment" spellcheck="true">#  OrderedDict(</span><span class="token comment" spellcheck="true">#      [('image', 'http://127.0.0.1:8000/media/banner/banner3.png'), ('link', '/actual-courses'), ('name', 'banner3')])]</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>sers <span class="token keyword">import</span> BannerSer@app<span class="token punctuation">.</span>task<span class="token keyword">def</span> <span class="token function">update_banner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Banner<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>is_delete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    banner_ser <span class="token operator">=</span> BannerSer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> banner <span class="token keyword">in</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">:</span>        banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000'</span> <span class="token operator">+</span> banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>    cache<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'更新banner成功'</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 异步任务框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝网页支付接口调用</title>
      <link href="/task/2020/04/25/python/%E6%A8%A1%E5%9D%97/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
      <url>/task/2020/04/25/python/%E6%A8%A1%E5%9D%97/%E6%94%AF%E4%BB%98%E5%AE%9D%E7%BD%91%E9%A1%B5%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SDK-API接口的调用"><a href="#一、SDK-API接口的调用" class="headerlink" title="一、SDK/API接口的调用"></a>一、SDK/API接口的调用</h2><p>支付宝平台不提供python的sdk，只有api，我们可以去网上找别人封装好的sdk，复制过来，了解对应参数</p><p>可以通过支付宝提供的软件自动生成公钥和私钥</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> alipay <span class="token keyword">import</span> AliPay<span class="token comment" spellcheck="true"># app_private_key_string = open("/path/to/your/private/key.pem").read()</span><span class="token comment" spellcheck="true"># alipay_public_key_string = open("/path/to/alipay/public/key.pem").read()</span>app_private_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN RSA PRIVATE KEY-----你的私钥-----END RSA PRIVATE KEY-----"""</span>alipay_public_key_string <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN PUBLIC KEY-----支付宝平台创建的应用的公钥-----END PUBLIC KEY-----"""</span>alipay <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>    <span class="token comment" spellcheck="true"># 创建应用的appid</span>    appid<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    app_notify_url<span class="token operator">=</span><span class="token string">'http://127.0.0.1:8000/home/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># the default notify path</span>    <span class="token comment" spellcheck="true"># 配置你的私钥</span>    app_private_key_string<span class="token operator">=</span>app_private_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># alipay public key, do not use your own public key!</span>    <span class="token comment" spellcheck="true"># 配置应用的公钥</span>    alipay_public_key_string<span class="token operator">=</span>alipay_public_key_string<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 加密方式</span>    sign_type<span class="token operator">=</span><span class="token string">"RSA2"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># RSA or RSA2</span>    <span class="token comment" spellcheck="true"># 调试模式，如果用真实环境就要改成True</span>    debug<span class="token operator">=</span><span class="token boolean">False</span>  <span class="token comment" spellcheck="true"># False by default</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 支付宝的网关接口</span>alipay_url<span class="token operator">=</span><span class="token string">'https://openapi.alipaydev.com/gateway.do?'</span><span class="token comment" spellcheck="true"># 生成支付页面</span>order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>    out_trade_no<span class="token operator">=</span><span class="token string">"20161112www4334"</span><span class="token punctuation">,</span>    total_amount<span class="token operator">=</span><span class="token number">9999</span><span class="token punctuation">,</span>    subject<span class="token operator">=</span><span class="token string">'韩红版充气娃娃'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 商品名称</span>    <span class="token comment" spellcheck="true"># 提交get请求的url</span>    return_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 提交post请求的url</span>    notify_url<span class="token operator">=</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成支付链接</span><span class="token keyword">print</span><span class="token punctuation">(</span>alipay_url<span class="token operator">+</span>order_string<span class="token punctuation">)</span></code></pre><p>这里内部有很多配置信息，可以把配置信息提取出来放到settings文件中，解耦合</p><h2 id="二、项目中调用支付接口"><a href="#二、项目中调用支付接口" class="headerlink" title="二、项目中调用支付接口"></a>二、项目中调用支付接口</h2><p>前端点击立即购买，把后端所需要的参数发送给后端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">PayView</span><span class="token punctuation">(</span>GenericViewSet<span class="token punctuation">,</span> CreateModelMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 登录jwt认证</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span>JSONWebTokenAuthentication<span class="token punctuation">,</span> <span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 防止游客登录</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span>IsAuthenticated<span class="token punctuation">,</span> <span class="token punctuation">]</span>    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>    serializer_class <span class="token operator">=</span> sers<span class="token punctuation">.</span>OrderSerializer    <span class="token comment" spellcheck="true"># 重写create方法</span>    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'request'</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 通过序列化类去校验数据，保存数据到数据库，生成支付宝链接</span>        <span class="token comment" spellcheck="true"># 主要逻辑都在序列化类中</span>        serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 等同于ser.save（）</span>        self<span class="token punctuation">.</span>perform_create<span class="token punctuation">(</span>serializer<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 返回支付宝支付链接</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pay_url'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>序列化类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">OrderSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 前端传什么数据过来{course:[1,2,3],total_amount:100,subject:xx商品,pay_type:1,}</span>    <span class="token comment" spellcheck="true"># user字段需要，但是不是传的，使用了jwt</span>    <span class="token comment" spellcheck="true"># 需要把course:[1,2,3] 处理成 course:[obj1,obj2,obj3]</span>    <span class="token comment" spellcheck="true"># 课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    <span class="token comment" spellcheck="true"># course=serializers.CharField()</span>    <span class="token keyword">from</span> course<span class="token punctuation">.</span>models <span class="token keyword">import</span> Course    <span class="token comment" spellcheck="true"># 这个方法可以让课时：[1,4,6,]===>课时：[obj1,obj4,obj6,]</span>    course<span class="token operator">=</span>serializers<span class="token punctuation">.</span>PrimaryKeyRelatedField<span class="token punctuation">(</span>queryset<span class="token operator">=</span>Course<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> write_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Order        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'total_amount'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">,</span><span class="token string">'pay_type'</span><span class="token punctuation">,</span><span class="token string">'course'</span><span class="token punctuation">]</span>        extra_kwargs<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">'total_amount'</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'required'</span><span class="token punctuation">:</span><span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">'pay_type'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'required'</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">_check_price</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        total_amount<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'total_amount'</span><span class="token punctuation">)</span>        course_list<span class="token operator">=</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        total_price<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            total_price<span class="token operator">+=</span>course<span class="token punctuation">.</span>price        <span class="token keyword">if</span> total_price<span class="token operator">!=</span>total_amount<span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'价格不合法'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> total_amount    <span class="token keyword">def</span> <span class="token function">_gen_out_trade_no</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> uuid        <span class="token keyword">return</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 需要request对象(需要视图通过context把reuqest对象传入。重写create方法)</span>        request<span class="token operator">=</span>self<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> request<span class="token punctuation">.</span>user    <span class="token keyword">def</span> <span class="token function">_gen_pay_url</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>subject<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># total_amout是Decimal类型，识别不了，需要转换成float类型</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay<span class="token punctuation">,</span>gateway        order_string <span class="token operator">=</span> alipay<span class="token punctuation">.</span>api_alipay_trade_page_pay    <span class="token punctuation">(</span>            out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">,</span>            total_amount<span class="token operator">=</span>float<span class="token punctuation">(</span>total_amout<span class="token punctuation">)</span><span class="token punctuation">,</span>            subject<span class="token operator">=</span>subject<span class="token punctuation">,</span>            return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># get回调，前台地址（最后跳转的支付成功页面）</span>            notify_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>NOTIFY_URL   <span class="token comment" spellcheck="true"># post回调，后台地址（给后端去判断是否支付成功，支付成功返回success）</span>        <span class="token punctuation">)</span>        <span class="token keyword">return</span> gateway<span class="token operator">+</span>order_string    <span class="token keyword">def</span> <span class="token function">_before_create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">:</span>        attrs<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token operator">=</span>user        attrs<span class="token punctuation">[</span><span class="token string">'out_trade_no'</span><span class="token punctuation">]</span><span class="token operator">=</span>out_trade_no        self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'pay_url'</span><span class="token punctuation">]</span><span class="token operator">=</span>pay_url    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        # 1）订单总价校验        # 2）生成订单号        # 3）支付用户：request.user        # 4）支付链接生成        # 5）入库(两个表)的信息准备        '''</span>        <span class="token comment" spellcheck="true"># 1）订单总价校验</span>        total_amout <span class="token operator">=</span> self<span class="token punctuation">.</span>_check_price<span class="token punctuation">(</span>attrs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 2）生成订单号</span>        out_trade_no<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_out_trade_no<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 3）支付用户：request.user</span>        user<span class="token operator">=</span>self<span class="token punctuation">.</span>_get_user<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 4）支付链接生成</span>        pay_url<span class="token operator">=</span>self<span class="token punctuation">.</span>_gen_pay_url<span class="token punctuation">(</span>out_trade_no<span class="token punctuation">,</span>total_amout<span class="token punctuation">,</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'subject'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 5）入库(两个表)的信息准备</span>        self<span class="token punctuation">.</span>_before_create<span class="token punctuation">(</span>attrs<span class="token punctuation">,</span>user<span class="token punctuation">,</span>pay_url<span class="token punctuation">,</span>out_trade_no<span class="token punctuation">)</span>        <span class="token keyword">return</span> attrs    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> validated_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        course_list<span class="token operator">=</span>validated_data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'course'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token operator">**</span>validated_data<span class="token punctuation">)</span>        <span class="token keyword">for</span> course <span class="token keyword">in</span> course_list<span class="token punctuation">:</span>            models<span class="token punctuation">.</span>OrderDetail<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>order<span class="token operator">=</span>order<span class="token punctuation">,</span>course<span class="token operator">=</span>course<span class="token punctuation">,</span>price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">,</span>real_price<span class="token operator">=</span>course<span class="token punctuation">.</span>price<span class="token punctuation">)</span>        <span class="token keyword">return</span> order</code></pre><p>支付成功后，前端会直接跳转到支付成功的页面，支付宝会向后端发送post请求，让我们验证所有的信息是否正确</p><pre class=" language-python"><code class="language-python"> <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        支付宝回调接口        '''</span>        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>libs<span class="token punctuation">.</span>al_pay <span class="token keyword">import</span> alipay        <span class="token keyword">from</span> luffyapi<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>logger <span class="token keyword">import</span> log        data <span class="token operator">=</span> request<span class="token punctuation">.</span>data        out_trade_no<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        gmt_payment<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'gmt_payment'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>        signature <span class="token operator">=</span> data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 验证签名</span>        success <span class="token operator">=</span> alipay<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>data<span class="token punctuation">,</span> signature<span class="token punctuation">)</span>        <span class="token keyword">if</span> success <span class="token operator">and</span> data<span class="token punctuation">[</span><span class="token string">"trade_status"</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">"TRADE_SUCCESS"</span><span class="token punctuation">,</span> <span class="token string">"TRADE_FINISHED"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>order_status<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>pay_time<span class="token operator">=</span>gmt_payment<span class="token punctuation">)</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单支付成功'</span><span class="token operator">%</span>out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'%s订单有问题'</span> <span class="token operator">%</span> out_trade_no<span class="token punctuation">)</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">)</span></code></pre><p>前端到了支付成功的页面，其实也不完全是支付成功，因为还没有得到后端的确认，所以可以发送一个get请求去校验一下是否成功</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        out_trade_no<span class="token operator">=</span>request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">)</span>        order<span class="token operator">=</span>models<span class="token punctuation">.</span>Order<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>out_trade_no<span class="token operator">=</span>out_trade_no<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> order<span class="token punctuation">.</span>order_status<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
            <tag> 第三方接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis管道，位图，geo，HyperLogLog，发布订阅</title>
      <link href="/task/2020/04/23/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis%E7%AE%A1%E9%81%93%EF%BC%8C%E4%BD%8D%E5%9B%BE%EF%BC%8Cgeo%EF%BC%8CHyperLogLog%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/"/>
      <url>/task/2020/04/23/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis%E7%AE%A1%E9%81%93%EF%BC%8C%E4%BD%8D%E5%9B%BE%EF%BC%8Cgeo%EF%BC%8CHyperLogLog%EF%BC%8C%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/</url>
      
        <content type="html"><![CDATA[<h2 id="一、慢查询"><a href="#一、慢查询" class="headerlink" title="一、慢查询"></a>一、慢查询</h2><p>因为redis是个单线程架构，所以只要有慢查询夯住会非常影响性能，在生产环境中应该避免出现慢查询或者限制慢查询</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis.conf</span>slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than<span class="token operator">=</span><span class="token number">0</span>，记录所有命令slowlog<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than <span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span>不记录任何命令<span class="token comment" spellcheck="true"># 也可以直接在链接过程中修改配置</span>config get slowlog<span class="token operator">-</span>max<span class="token operator">-</span>len<span class="token operator">=</span><span class="token number">128</span> <span class="token comment" spellcheck="true"># 慢查询最大接收数</span>Config get slowly<span class="token operator">-</span>log<span class="token operator">-</span>slower<span class="token operator">-</span>than<span class="token operator">=</span><span class="token number">10000</span> <span class="token comment" spellcheck="true"># 接受小于1毫秒的命令</span></code></pre><p>总结：</p><ol><li>slowlog-max-len 不要设置过大，默认10ms，通常设置1ms</li><li>slowlog-log-slower-than不要设置过小，通常设置1000左右</li><li>理解命令生命周期</li><li>定期持久化慢查询</li></ol><h2 id="二、pipline和watch"><a href="#二、pipline和watch" class="headerlink" title="二、pipline和watch"></a>二、pipline和watch</h2><h3 id="1-pipline"><a href="#1-pipline" class="headerlink" title="1 pipline"></a>1 pipline</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># pipline在redis命令中不支持，但是在编程语言中支持</span><span class="token comment" spellcheck="true"># 其实就是批量执行命令的一种方式，redis命令可以用事务来实现这种功能</span><span class="token comment" spellcheck="true"># 客户端实现</span><span class="token keyword">import</span> redispool <span class="token operator">=</span> redis<span class="token punctuation">.</span>ConnectionPool<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'10.211.55.4'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>connection_pool<span class="token operator">=</span>pool<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># pipe = r.pipeline(transaction=False)</span><span class="token comment" spellcheck="true">#创建pipeline</span>pipe <span class="token operator">=</span> r<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span>transaction<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#开启事务</span>pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'lqz'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#其他代码，可能出异常</span>pipe<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">'role'</span><span class="token punctuation">,</span> <span class="token string">'nb'</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="2-原生事务"><a href="#2-原生事务" class="headerlink" title="2 原生事务"></a>2 原生事务</h3><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> multi <span class="token comment" spellcheck="true"># 开启事务后所有的命令都会放到Quee中，直到执行exec结束事务才会执行</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">exec</span> </code></pre><h3 id="3-watch"><a href="#3-watch" class="headerlink" title="3 watch"></a>3 watch</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># redis中可以通过watch实现乐观锁</span><span class="token comment" spellcheck="true"># 演示：watch一个key，在开启事务后可以修改这个key，但是如果在事务外同时有修改这个key的请求，再修改事务中的key就会失败</span></code></pre><h2 id="三、位图"><a href="#三、位图" class="headerlink" title="三、位图"></a>三、位图</h2><p>因为redis可以通过byte进行存储，归属字符类型，所以可以通过bitmap做一些操作：独立用户统计</p><p>需要用户量非常大大概一亿左右的用户量才会和用集合存储有差别</p><pre class=" language-python"><code class="language-python">set hello big <span class="token comment" spellcheck="true">#放入key位hello 值为big的字符串</span>getbit hello <span class="token number">0</span> <span class="token comment" spellcheck="true">#取位图的第0个位置，返回0</span>getbit hello <span class="token number">1</span> <span class="token comment" spellcheck="true">#取位图的第1个位置，返回1 如上图</span><span class="token comment" spellcheck="true">##我们可以直接操纵位</span>setbit key offset value <span class="token comment" spellcheck="true">#给位图指定索引设置值</span>setbit hello <span class="token number">7</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#把hello的第7个位置设为1 这样，big就变成了cig</span>setbit test <span class="token number">50</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#test不存在，在key为test的value的第50位设为1，那其他位都以0补</span>bitcount key <span class="token punctuation">[</span>start end<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#获取位图指定范围(start到end,单位为字节,注意按字节一个字节8个bit为，如果不指定就是获取全部)位值为1的个数</span>bitop op destkey key <span class="token punctuation">[</span>key<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#做多个Bitmap的and(交集)/or(并集)/not(非)/xor(异或)，操作并将结果保存在destkey中 </span>bitop <span class="token operator">and</span> after_lqz lqz lqz2 <span class="token comment" spellcheck="true">#把lqz和lqz2按位与操作，放到after_lqz中</span>bitpos key targetBit start end <span class="token comment" spellcheck="true">#计算位图指定范围(start到end，单位为字节，如果不指定是获取全部)第一个偏移量对应的值等于targetBit的位置</span>bitpos lqz <span class="token number">1</span> <span class="token comment" spellcheck="true">#big 对应位图中第一个1的位置，在第二个位置上，由于从0开始返回1</span>bitpos lqz <span class="token number">0</span> <span class="token comment" spellcheck="true">#big 对应位图中第一个0的位置，在第一个位置上，由于从0开始返回0</span>bitpos lqz <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">#返回9：返回从第一个字节到第二个字节之间 第一个1的位置，看上图，为9</span></code></pre><h2 id="四、HyperLogLog"><a href="#四、HyperLogLog" class="headerlink" title="四、HyperLogLog"></a>四、HyperLogLog</h2><p>本质：布隆过滤器</p><p>存储数据量极小，只有存在和不存在的状态，本身内容无法读取</p><p>百万级独立用户统计，但是可能会出错，可以做日活用户统计</p><p>实际上就三个操作：添加，合并，统计</p><pre class=" language-python"><code class="language-python">pfadd key element <span class="token comment" spellcheck="true">#向hyperloglog添加元素,可以同时添加多个</span>pfcount key <span class="token comment" spellcheck="true">#计算hyperloglog的独立总数</span>pfmerge destroy sourcekey1 sourcekey2<span class="token comment" spellcheck="true">#合并多个hyperloglog，把sourcekey1和sourcekey2合并为destroy</span>pfadd uuids <span class="token string">"uuid1"</span> <span class="token string">"uuid2"</span> <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span> <span class="token comment" spellcheck="true">#向uuids中添加4个uuid</span>pfcount uuids <span class="token comment" spellcheck="true">#返回4</span>pfadd uuids <span class="token string">"uuid1"</span> <span class="token string">"uuid5"</span><span class="token comment" spellcheck="true">#有一个之前存在了，其实只把uuid5添加了</span>pfcount uuids <span class="token comment" spellcheck="true">#返回5</span>pfadd uuids1 <span class="token string">"uuid1"</span> <span class="token string">"uuid2"</span> <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span>pfadd uuids2 <span class="token string">"uuid3"</span> <span class="token string">"uuid4"</span> <span class="token string">"uuid5"</span> <span class="token string">"uuid6"</span>pfmerge uuidsall uuids1 uuids2 <span class="token comment" spellcheck="true">#合并</span>pfcount uuidsall <span class="token comment" spellcheck="true">#统计个数 返回6</span></code></pre><h2 id="五、geo"><a href="#五、geo" class="headerlink" title="五、geo"></a>五、geo</h2><p>根据经纬度计算距离，统计范围内的人</p><p>操作：添加，获取（地理位置，两地距离），查看范围内的人</p><pre class=" language-python"><code class="language-python">geoadd key longitude latitude member <span class="token comment" spellcheck="true">#增加地理位置信息</span>geoadd cities<span class="token punctuation">:</span>locations <span class="token number">116.28</span> <span class="token number">39.55</span> beijing <span class="token comment" spellcheck="true">#把北京地理信息天津到cities:locations中</span>geoadd cities<span class="token punctuation">:</span>locations <span class="token number">117.12</span> <span class="token number">39.08</span> tianjingeoadd cities<span class="token punctuation">:</span>locations <span class="token number">114.29</span> <span class="token number">38.02</span> shijiazhuanggeoadd cities<span class="token punctuation">:</span>locations <span class="token number">118.01</span> <span class="token number">39.38</span> tangshangeoadd cities<span class="token punctuation">:</span>locations <span class="token number">115.29</span> <span class="token number">38.51</span> baodinggeopos key member <span class="token comment" spellcheck="true">#获取地理位置信息</span>geopos cities<span class="token punctuation">:</span>locations beijing <span class="token comment" spellcheck="true">#获取北京地理信息</span>geodist key member1 member2 <span class="token punctuation">[</span>unit<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取两个地理位置的距离 unit:m(米) km(千米) mi(英里) ft(尺)</span>geodist cities<span class="token punctuation">:</span>locations beijing tianjin km <span class="token comment" spellcheck="true">#北京到天津的距离，89公里</span>georadius key logitude latitude radiusm<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>withcoord<span class="token punctuation">]</span> <span class="token punctuation">[</span>withdist<span class="token punctuation">]</span> <span class="token punctuation">[</span>withhash<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> <span class="token punctuation">[</span>asc<span class="token operator">|</span>desc<span class="token punctuation">]</span> <span class="token punctuation">[</span>store key<span class="token punctuation">]</span><span class="token punctuation">[</span>storedist key<span class="token punctuation">]</span>georadiusbymember key member radiusm<span class="token operator">|</span>km<span class="token operator">|</span>ft<span class="token operator">|</span>mi <span class="token punctuation">[</span>withcoord<span class="token punctuation">]</span> <span class="token punctuation">[</span>withdist<span class="token punctuation">]</span> <span class="token punctuation">[</span>withhash<span class="token punctuation">]</span> <span class="token punctuation">[</span>COUNT count<span class="token punctuation">]</span> <span class="token punctuation">[</span>asc<span class="token operator">|</span>desc<span class="token punctuation">]</span> <span class="token punctuation">[</span>store key<span class="token punctuation">]</span><span class="token punctuation">[</span>storedist key<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#获取指定位置范围内的地理位置信息集合</span><span class="token triple-quoted-string string">'''withcoord:返回结果中包含经纬度withdist：返回结果中包含距离中心节点位置withhash：返回解雇中包含geohashCOUNT count：指定返回结果的数量asc|desc：返回结果按照距离中心店的距离做升序/降序排列store key：将返回结果的地理位置信息保存到指定键storedist key：将返回结果距离中心点的距离保存到指定键'''</span>georadiusbymember cities<span class="token punctuation">:</span>locations beijing <span class="token number">150</span> km<span class="token triple-quoted-string string">'''1) "beijing"2) "tianjin"3) "tangshan"4) "baoding"'''</span></code></pre><h2 id="六、发布订阅（基本不用）"><a href="#六、发布订阅（基本不用）" class="headerlink" title="六、发布订阅（基本不用）"></a>六、发布订阅（基本不用）</h2><p>发布者发布了消息，所有订阅者都能接受到，本质是生产者消费者模型</p><pre class=" language-python"><code class="language-python">publish channel message <span class="token comment" spellcheck="true">#发布命令</span>publish souhu<span class="token punctuation">:</span>tv <span class="token string">"hello world"</span> <span class="token comment" spellcheck="true">#在souhu:tv频道发布一条hello world  返回订阅者个数</span>subscribe <span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#订阅命令，可以订阅一个或多个</span>subscribe souhu<span class="token punctuation">:</span>tv  <span class="token comment" spellcheck="true">#订阅sohu:tv频道</span>unsubscribe <span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#取消订阅一个或多个频道</span>unsubscribe sohu<span class="token punctuation">:</span>tv  <span class="token comment" spellcheck="true">#取消订阅sohu:tv频道</span>psubscribe <span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#订阅模式匹配</span>psubscribe c<span class="token operator">*</span>  <span class="token comment" spellcheck="true">#订阅以c开头的频道</span>unpsubscribe <span class="token punctuation">[</span>pattern<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#按模式退订指定频道</span>pubsub channels <span class="token comment" spellcheck="true">#列出至少有一个订阅者的频道,列出活跃的频道</span>pubsub numsub <span class="token punctuation">[</span>channel<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#列出给定频道的订阅者数量</span>pubsub numpat <span class="token comment" spellcheck="true">#列出被订阅模式的数量</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy框架</title>
      <link href="/task/2020/04/22/python/%E7%88%AC%E8%99%AB/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
      <url>/task/2020/04/22/python/%E7%88%AC%E8%99%AB/scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1 pip3 install scrapy（mac，linux）</span><span class="token comment" spellcheck="true">#2 windows上（80%能成功，少部分人成功不了）</span>    <span class="token number">1</span>、pip3 install wheel <span class="token comment" spellcheck="true">#安装后，便支持通过wheel文件安装软件，wheel文件官网：https://www.lfd.uci.edu/~gohlke/pythonlibs</span>    <span class="token number">3</span>、pip3 install lxml    <span class="token number">4</span>、pip3 install pyopenssl    <span class="token number">5</span>、下载并安装pywin32：https<span class="token punctuation">:</span><span class="token operator">//</span>sourceforge<span class="token punctuation">.</span>net<span class="token operator">/</span>projects<span class="token operator">/</span>pywin32<span class="token operator">/</span>files<span class="token operator">/</span>pywin32<span class="token operator">/</span>    <span class="token number">6</span>、下载twisted的wheel文件：http<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>lfd<span class="token punctuation">.</span>uci<span class="token punctuation">.</span>edu<span class="token operator">/</span><span class="token operator">~</span>gohlke<span class="token operator">/</span>pythonlibs<span class="token operator">/</span><span class="token comment" spellcheck="true">#twisted</span>    <span class="token number">7</span>、执行pip3 install 下载目录\Twisted<span class="token number">-17.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">-</span>cp36<span class="token operator">-</span>cp36m<span class="token operator">-</span>win_amd64<span class="token punctuation">.</span>whl    <span class="token number">8</span>、pip3 install scrapy<span class="token comment" spellcheck="true"># 3 就有scrapy命令</span>    <span class="token operator">-</span>D<span class="token punctuation">:</span>\Python36\Scripts\scrapy<span class="token punctuation">.</span>exe  用于创建项目</code></pre><h2 id="二、框架简介"><a href="#二、框架简介" class="headerlink" title="二、框架简介"></a>二、框架简介</h2><p><strong>执行流程图</strong></p><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/1036857-20171109221422778-1731419400.png" alt="1036857-20171109221422778-1731419400" loading="lazy"></p><ol><li><p>引擎(EGINE)</p><p>引擎负责控制系统所有组件之间的数据流，并在某些动作发生时触发事件。有关详细信息，请参见上面的数据流部分。</p><p>（scrapy的核心，用于转发数据或请求，如果是数据，转到管道去保存，如果是请求，转到调度器，如果来的是响应对象，转给爬虫）</p></li><li><p><strong>调度器(SCHEDULER)</strong><br>用来接受引擎发过来的请求, 压入队列中, 并在引擎再次请求的时候返回. 可以想像成一个URL的优先级队列, 由它来决定下一个要抓取的网址是什么, 同时去除重复的网址</p><p>（用于处理要爬取的url的顺序，深度优先/表示一条路走到黑，还是广度优先/表示同一层先爬下来，，去重）</p></li><li><p><strong>下载器(DOWLOADER)</strong><br>用于下载网页内容, 并将网页内容返回给EGINE，下载器是建立在twisted这个高效的异步模型上的</p><p>（向外要爬取的地址发送请求）</p></li><li><p><strong>爬虫(SPIDERS)</strong><br>SPIDERS是开发人员自定义的类，用来解析responses，并且提取items，或者发送新的请求</p></li><li><p><strong>项目管道(ITEM PIPLINES)</strong><br>在items被提取后负责处理它们，主要包括清理、验证、持久化（比如存到数据库）等操作</p><p>（需要在settings中配置）</p></li><li><p>下载器中间件(Downloader Middlewares)</p><p>位于Scrapy引擎和下载器之间，主要用来处理从EGINE传到DOWLOADER的请求request，已经从DOWNLOADER传到EGINE的响应response，你可用该中间件做以下几件事</p><ol><li>process a request just before it is sent to the Downloader (i.e. right before Scrapy sends the request to the website);</li><li>change received response before passing it to a spider;</li><li>send a new Request instead of passing received response to a spider;</li><li>pass response to a spider without fetching a web page;</li><li>silently drop some requests.</li></ol></li><li><p><strong>爬虫中间件(Spider Middlewares)</strong><br>位于EGINE和SPIDERS之间，主要工作是处理SPIDERS的输入（即responses）和输出（即requests）</p></li></ol><p>执行顺序：爬虫把要爬的url转发给引擎，引擎再转发给调度器，由调度器决定顺序，返回给引擎，引擎再把要爬取的url通过下载中间件（用于加个头，cookie啥的）向需要爬取的服务端发送请求，响应回来之后也通过下载中间件给引擎，引擎判断是响应数据之后，转发给爬虫，爬虫对数据进行处理，返回一个新的需要爬的地址（就继续上面的流程）或者需要保存的数据，数据部分由引擎转发给管道，保存数据</p><p><strong>目录介绍</strong></p><pre class=" language-python"><code class="language-python">    firstscrapy  <span class="token comment" spellcheck="true"># 项目名字</span>        firstscrapy <span class="token comment" spellcheck="true"># 包</span>            <span class="token operator">-</span>spiders <span class="token comment" spellcheck="true"># 所有的爬虫文件放在里面</span>                <span class="token operator">-</span>baidu<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 一个个的爬虫（以后基本上都在这写东西）</span>                <span class="token operator">-</span>chouti<span class="token punctuation">.</span>py            <span class="token operator">-</span>middlewares<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 中间件（爬虫，下载中间件都写在这）</span>            <span class="token operator">-</span>pipelines<span class="token punctuation">.</span>py   <span class="token comment" spellcheck="true"># 持久化相关写在这（items.py中类的对象）</span>            <span class="token operator">-</span>main<span class="token punctuation">.</span>py        <span class="token comment" spellcheck="true"># 自己加的，执行爬虫</span>            <span class="token operator">-</span>items<span class="token punctuation">.</span>py       <span class="token comment" spellcheck="true"># 一个一个的类，</span>            <span class="token operator">-</span>settings<span class="token punctuation">.</span>py    <span class="token comment" spellcheck="true"># 配置文件</span>        scrapy<span class="token punctuation">.</span>cfg          <span class="token comment" spellcheck="true"># 上线相关</span></code></pre><p><strong>settings参数介绍</strong></p><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 默认情况，scrapy会去遵循爬虫协议<span class="token number">2</span> 修改配置文件参数，强行爬取，不遵循协议    <span class="token operator">-</span>ROBOTSTXT_OBEY <span class="token operator">=</span> <span class="token boolean">False</span><span class="token number">3</span> USER_AGENT <span class="token operator">=</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'</span><span class="token number">4</span> LOG_LEVEL<span class="token operator">=</span><span class="token string">'ERROR'</span> <span class="token comment" spellcheck="true"># 运行的时候就不会把其他日志展示出来</span></code></pre><h2 id="三、基本使用"><a href="#三、基本使用" class="headerlink" title="三、基本使用"></a>三、基本使用</h2><h3 id="1-基本命令"><a href="#1-基本命令" class="headerlink" title="1 基本命令"></a>1 基本命令</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建项目</span>scrapy startproject firstscrapy<span class="token comment" spellcheck="true"># 创建爬虫</span>scrapy genspider 爬虫名 爬虫地址scrapy genspider chouti dig<span class="token punctuation">.</span>chouti<span class="token punctuation">.</span>com<span class="token comment" spellcheck="true"># 一执行就会在spider文件夹下创建出一个py文件</span><span class="token comment" spellcheck="true"># 运行爬虫</span>scrapy crawl chouti   <span class="token comment" spellcheck="true"># 带运行日志</span>scrapy crawl chouti <span class="token operator">-</span><span class="token operator">-</span>nolog  <span class="token comment" spellcheck="true"># 不带日志</span><span class="token comment" spellcheck="true"># 支持右键执行爬虫</span><span class="token comment" spellcheck="true"># 在项目路径下新建一个main.py</span><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>cmdline <span class="token keyword">import</span> executeexecute<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'scrapy'</span><span class="token punctuation">,</span><span class="token string">'crawl'</span><span class="token punctuation">,</span><span class="token string">'chouti'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h3 id="2-数据解析"><a href="#2-数据解析" class="headerlink" title="2 数据解析"></a>2 数据解析</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#xpath：</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@class,"link-title")]/text()'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取文本</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//a[contains(@class,"link-title")]/@href'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#取属性</span><span class="token comment" spellcheck="true">#css</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取文本</span>    <span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::attr(href)'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取属性</span></code></pre><h3 id="3-数据持久化"><a href="#3-数据持久化" class="headerlink" title="3 数据持久化"></a>3 数据持久化</h3><p><strong>items.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 持久化匹配的字段</span><span class="token keyword">class</span> <span class="token class-name">ChoutiItem</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Item<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># define the fields for your item here like:</span>    title <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span>    laiyuan <span class="token operator">=</span> scrapy<span class="token punctuation">.</span>Field<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>spiders/chouti.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> scrapy<span class="token keyword">class</span> <span class="token class-name">ChoutiSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'chouti'</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'dig.chouti.com'</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://dig.chouti.com/'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 返回要爬取的页面，或者返回要保存的数据</span>        <span class="token comment" spellcheck="true"># 下面两者效果相同</span>        <span class="token keyword">from</span> pachong<span class="token punctuation">.</span>items <span class="token keyword">import</span> ChoutiItem        item <span class="token operator">=</span> ChoutiItem<span class="token punctuation">(</span><span class="token punctuation">)</span>        div_list <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-con .link-item'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># div_list = response.xpath('//div[contains(@class,"link-item")]')</span>        <span class="token keyword">for</span> div <span class="token keyword">in</span> div_list<span class="token punctuation">:</span>            title <span class="token operator">=</span> div<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            laiyuan <span class="token operator">=</span> div<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-from::text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>extract_first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># title = div.xpath('//a[contains(@class,"link-title")]/text()').extract()</span>            <span class="token keyword">if</span> <span class="token operator">not</span> laiyuan<span class="token punctuation">:</span>                laiyuan <span class="token operator">=</span> <span class="token string">''</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span>laiyuan<span class="token punctuation">)</span>            item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> title            item<span class="token punctuation">[</span><span class="token string">'laiyuan'</span><span class="token punctuation">]</span> <span class="token operator">=</span> laiyuan            <span class="token keyword">yield</span> item</code></pre><p><strong>pipelines.py</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">PachongPipeline</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">open_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">"root"</span><span class="token punctuation">,</span>                 database<span class="token operator">=</span><span class="token string">'pachong'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">process_item</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        cursor <span class="token operator">=</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>        sql <span class="token operator">=</span> <span class="token string">'insert into chouti (title,laiyuan)values(%s,%s)'</span>        cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">[</span>item<span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">[</span><span class="token string">'laiyuan'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> item    <span class="token keyword">def</span> <span class="token function">close_spider</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>settings.py</strong></p><pre class=" language-python"><code class="language-python">ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'pachong.pipelines.PachongPipeline'</span><span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 配置优先级</span></code></pre><h2 id="四、scrapy高级"><a href="#四、scrapy高级" class="headerlink" title="四、scrapy高级"></a>四、scrapy高级</h2><h3 id="1-提升scrapy爬取数据的效率"><a href="#1-提升scrapy爬取数据的效率" class="headerlink" title="1 提升scrapy爬取数据的效率"></a>1 提升scrapy爬取数据的效率</h3><pre class=" language-python"><code class="language-python"><span class="token operator">-</span> 在配置文件中进行相关的配置即可<span class="token punctuation">:</span><span class="token punctuation">(</span>默认还有一套setting<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#1 增加并发：</span>默认scrapy开启的并发线程为<span class="token number">32</span>个，可以适当进行增加。在settings配置文件中修改CONCURRENT_REQUESTS <span class="token operator">=</span> <span class="token number">100</span>值为<span class="token number">100</span><span class="token punctuation">,</span>并发设置成了为<span class="token number">100</span>。<span class="token comment" spellcheck="true">#2 降低日志级别：</span>在运行scrapy时，会有大量日志信息的输出，为了减少CPU的使用率。可以设置log输出信息为INFO或者ERROR即可。在配置文件中编写：LOG_LEVEL <span class="token operator">=</span> ‘INFO’<span class="token comment" spellcheck="true"># 3 禁止cookie：</span>如果不是真的需要cookie，则在scrapy爬取数据时可以禁止cookie从而减少CPU的使用率，提升爬取效率。在配置文件中编写：COOKIES_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 4禁止重试：</span>对失败的HTTP进行重新请求（重试）会减慢爬取速度，因此可以禁止重试。在配置文件中编写：RETRY_ENABLED <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 5 减少下载超时：</span>如果对一个非常慢的链接进行爬取，减少下载超时可以能让卡住的链接快速被放弃，从而提升效率。在配置文件中进行编写：DOWNLOAD_TIMEOUT <span class="token operator">=</span> <span class="token number">10</span> 超时时间为10s</code></pre><h3 id="2-scrapy的中间件（下载中间件）"><a href="#2-scrapy的中间件（下载中间件）" class="headerlink" title="2 scrapy的中间件（下载中间件）"></a>2 scrapy的中间件（下载中间件）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 都写在middlewares.py</span><span class="token comment" spellcheck="true"># 2 爬虫中间件</span><span class="token comment" spellcheck="true"># 3 下载中间件</span><span class="token comment" spellcheck="true"># 4 要生效，一定要配置，配置文件</span><span class="token comment" spellcheck="true"># 下载中间件</span><span class="token operator">-</span>process_request：返回不同的对象，后续处理不同（加代理<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>）          <span class="token comment" spellcheck="true"># 1 更换请求头</span>        <span class="token comment" spellcheck="true"># print(type(request.headers))</span>        <span class="token comment" spellcheck="true"># print(request.headers)</span>        <span class="token comment" spellcheck="true">#</span>        <span class="token comment" spellcheck="true"># from scrapy.http.headers import Headers</span>        <span class="token comment" spellcheck="true"># request.headers['User-Agent']=''</span>        <span class="token comment" spellcheck="true"># 2 加cookie ---cookie池</span>        <span class="token comment" spellcheck="true"># 假设你你已经搭建好cookie 池了，</span>        <span class="token comment" spellcheck="true"># print('00000--',request.cookies)</span>        <span class="token comment" spellcheck="true"># request.cookies={'username':'asdfasdf'}</span>        <span class="token comment" spellcheck="true"># 3 加代理</span>        <span class="token comment" spellcheck="true"># print(request.meta)</span>        <span class="token comment" spellcheck="true"># request.meta['download_timeout'] = 20</span>        <span class="token comment" spellcheck="true"># request.meta["proxy"] = 'http://27.188.62.3:8060'</span><span class="token operator">-</span>process_response：返回不同的对象，后续处理不同<span class="token operator">-</span> process_exception<span class="token keyword">def</span> <span class="token function">process_exception</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xxxx'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 不允许直接改url</span>        <span class="token comment" spellcheck="true"># request.url='https://www.baidu.com'</span>        <span class="token keyword">from</span> scrapy <span class="token keyword">import</span> Request        request<span class="token operator">=</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>callback<span class="token operator">=</span>spider<span class="token punctuation">.</span>parser<span class="token punctuation">)</span>        <span class="token keyword">return</span> request</code></pre><h3 id="3-selenium在scrapy中的使用流程"><a href="#3-selenium在scrapy中的使用流程" class="headerlink" title="3 selenium在scrapy中的使用流程"></a>3 selenium在scrapy中的使用流程</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 当前爬虫用的selenium是同一个</span><span class="token comment" spellcheck="true"># 1 在爬虫中初始化webdriver对象</span>    <span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver    <span class="token keyword">class</span> <span class="token class-name">CnblogSpider</span><span class="token punctuation">(</span>scrapy<span class="token punctuation">.</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> <span class="token string">'cnblog'</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> bro<span class="token operator">=</span>webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>executable_path<span class="token operator">=</span><span class="token string">'../chromedriver.exe'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 在中间件中使用（process_request）</span>spider<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://dig.chouti.com/'</span><span class="token punctuation">)</span>   response<span class="token operator">=</span>HtmlResponse<span class="token punctuation">(</span>url<span class="token operator">=</span><span class="token string">'https://dig.chouti.com/'</span><span class="token punctuation">,</span>body<span class="token operator">=</span>spider<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>page_source<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>request<span class="token operator">=</span>request<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token comment" spellcheck="true"># 3 在爬虫中关闭</span>    <span class="token keyword">def</span> <span class="token function">close</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我结束了"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bro<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-分布式爬虫（scrapy-redis）"><a href="#4-分布式爬虫（scrapy-redis）" class="headerlink" title="4 分布式爬虫（scrapy-redis）"></a>4 分布式爬虫（scrapy-redis）</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 pip3 install scrapy-redis</span><span class="token comment" spellcheck="true"># 2 原来继承Spider，现在继承RedisSpider</span><span class="token comment" spellcheck="true"># 3 不能写start_urls = ['https:/www.cnblogs.com/']</span><span class="token comment" spellcheck="true"># 4 需要写redis_key = 'myspider:start_urls'</span><span class="token comment" spellcheck="true"># 5 setting中配置：</span><span class="token comment" spellcheck="true"># redis的连接</span>REDIS_HOST <span class="token operator">=</span> <span class="token string">'localhost'</span>                            <span class="token comment" spellcheck="true"># 主机名</span>REDIS_PORT <span class="token operator">=</span> <span class="token number">6379</span>                                   <span class="token comment" spellcheck="true"># 端口</span>    <span class="token comment" spellcheck="true"># 使用scrapy-redis的去重</span>DUPEFILTER_CLASS <span class="token operator">=</span> <span class="token string">"scrapy_redis.dupefilter.RFPDupeFilter"</span><span class="token comment" spellcheck="true"># 使用scrapy-redis的Scheduler</span><span class="token comment" spellcheck="true"># 分布式爬虫的配置</span>SCHEDULER <span class="token operator">=</span> <span class="token string">"scrapy_redis.scheduler.Scheduler"</span><span class="token comment" spellcheck="true"># 持久化的可以配置，也可以不配置</span>ITEM_PIPELINES <span class="token operator">=</span> <span class="token punctuation">{</span>   <span class="token string">'scrapy_redis.pipelines.RedisPipeline'</span><span class="token punctuation">:</span> <span class="token number">299</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 9现在要让爬虫运行起来，需要去redis中以myspider:start_urls为key，插入一个起始地址lpush myspider:start_urls https://www.cnblogs.com/</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python框架 </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 爬虫高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup模块的使用</title>
      <link href="/task/2020/04/21/python/%E7%88%AC%E8%99%AB/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/task/2020/04/21/python/%E7%88%AC%E8%99%AB/BeautifulSoup%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="BeautifulSoup模块的使用"><a href="#BeautifulSoup模块的使用" class="headerlink" title="BeautifulSoup模块的使用"></a>BeautifulSoup模块的使用</h2><h4 id="1-参数介绍"><a href="#1-参数介绍" class="headerlink" title="1 参数介绍"></a>1 参数介绍</h4><pre class=" language-python"><code class="language-python">html_doc <span class="token operator">=</span> <span class="token triple-quoted-string string">"""&lt;html>&lt;head>&lt;title>The Dormouse's story&lt;/title>&lt;/head>&lt;body>&lt;p id="my_p" class="title">hello&lt;b id="bbb" class="boldest">The Dormouse's story&lt;/b>&lt;/p>&lt;p class="story">Once upon a time there were three little sisters; and their names were&lt;a href="http://example.com/elsie" class="sister" id="link1">Elsie&lt;/a>&lt;a href="http://example.com/lacie" class="sister" id="link2">Lacie&lt;/a> and&lt;a href="http://example.com/tillie" class="sister" id="link3">Tillie&lt;/a>;and they lived at the bottom of a well.&lt;/p>&lt;p class="story">...&lt;/p>"""</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第一个参数是要解析的html页面，通常是我们通过请求得到的页面数据</span><span class="token comment" spellcheck="true"># 第二个参数是解析的解析器选择</span><span class="token comment" spellcheck="true"># python内置的html.parser</span><span class="token comment" spellcheck="true"># 其他解释器：lxml（通常使用），xml，html5lib</span></code></pre><p>文档：<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html">https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html</a></p><h4 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 标签查找</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>html_doc<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有多个只会找到第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>pres <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token comment" spellcheck="true"># 2 标签属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>attrs<span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token string">'bbb'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'boldest'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 3 获取文本内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>string <span class="token comment" spellcheck="true"># 当p下只有文本取到，否则为None</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>strings <span class="token comment" spellcheck="true"># 获取全部文本得到一个生成器对象</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 取到标签下所有的文本内容拼接起来</span><span class="token comment" spellcheck="true"># 4 嵌套选择</span><span class="token comment" spellcheck="true"># 可以让选择更加准确</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>b<span class="token punctuation">.</span>string<span class="token comment" spellcheck="true"># 5 子节点、子孙节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents <span class="token comment" spellcheck="true"># 获得p内所有子节点</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>b <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"boldest"</span> id<span class="token operator">=</span><span class="token string">"bbb"</span><span class="token operator">></span>The Dormouse<span class="token string">'s story&lt;/b>, '</span>\n'<span class="token punctuation">]</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>children <span class="token comment" spellcheck="true"># 得到一个迭代器，包含p内所有子节点</span><span class="token triple-quoted-string string">'''子节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>'''</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>descendants <span class="token comment" spellcheck="true"># 得到一个生成器，包含p内所有子孙节点</span><span class="token triple-quoted-string string">'''子孙节点hello&lt;b class="boldest" id="bbb">The Dormouse's story&lt;/b>The Dormouse's story'''</span><span class="token comment" spellcheck="true"># 6 父节点、祖节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parent <span class="token comment" spellcheck="true"># 获得p的父节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>parents <span class="token comment" spellcheck="true"># 获得p的父节点，和父节点的父节点。。。的生成器</span><span class="token comment" spellcheck="true"># 7 兄弟节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_sibling <span class="token comment" spellcheck="true"># 下一个兄弟</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>next_previous_sibling <span class="token comment" spellcheck="true"># 上一个兄弟</span></code></pre><h4 id="3-搜索文档树"><a href="#3-搜索文档树" class="headerlink" title="3 搜索文档树"></a>3 搜索文档树</h4><h5 id="3-1-五种过滤器"><a href="#3-1-五种过滤器" class="headerlink" title="3.1 五种过滤器"></a>3.1 五种过滤器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 字符串</span><span class="token comment" spellcheck="true"># 如果有多个取第一个</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取全部，只有一个也是放在列表中</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 正则表达式</span><span class="token comment" spellcheck="true"># 获得所有以b开头的标签：body，b</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^b'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3 列表</span><span class="token comment" spellcheck="true"># a标签，b标签都会取</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4 布尔</span><span class="token comment" spellcheck="true"># 会查找到所有标签，不包括文本节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5 自定义过滤器</span><span class="token comment" spellcheck="true"># 会把整个页面传给tag</span><span class="token keyword">def</span> <span class="token function">has_class_not_id</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">)</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>has_class_not_id<span class="token punctuation">)</span></code></pre><h5 id="3-2-find-all"><a href="#3-2-find-all" class="headerlink" title="3.2 find_all()"></a>3.2 find_all()</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># name：可以放任意类型的过滤器</span><span class="token comment" spellcheck="true"># keyword：放键值对</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>id <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'^my'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果有特殊参数不能通过k，v来表示</span><span class="token comment" spellcheck="true"># 比如data-foo = value</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>attrs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"data-foo"</span><span class="token punctuation">:</span><span class="token string">"value"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按类名的时候，关键字是class_</span><span class="token comment" spellcheck="true"># 查找由sister和sss类的a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>class_<span class="token operator">=</span><span class="token string">'sister sss'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># limit参数</span><span class="token comment" spellcheck="true"># 找前连个a标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>limit<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># recursive = False 会查找tag下的直接的子节点</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>html<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>recursive <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><h5 id="3-3-css选择器"><a href="#3-3-css选择器" class="headerlink" title="3.3 css选择器"></a>3.3 css选择器</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 选择器</span><span class="token comment" spellcheck="true"># 类</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 含有sister类下的b标签</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># id</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'#sister'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取属性</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>attrs<span class="token comment" spellcheck="true"># 获取内容</span>res <span class="token operator">=</span> soup<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token string">'.title b'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis持久化，主从，哨兵，集群</title>
      <link href="/task/2020/04/21/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%8C%E4%B8%BB%E4%BB%8E%EF%BC%8C%E5%93%A8%E5%85%B5%EF%BC%8C%E9%9B%86%E7%BE%A4/"/>
      <url>/task/2020/04/21/%E6%95%B0%E6%8D%AE%E5%BA%93/redis/Redis%E6%8C%81%E4%B9%85%E5%8C%96%EF%BC%8C%E4%B8%BB%E4%BB%8E%EF%BC%8C%E5%93%A8%E5%85%B5%EF%BC%8C%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="一、持久化"><a href="#一、持久化" class="headerlink" title="一、持久化"></a>一、持久化</h2><p>持久化表示把数据存储到硬盘的过程</p><p>持久化的两种方式</p><ul><li>快照：某事某刻数据库的完整备份 redis的RDB</li><li>写日志：任何操作都记录下来，要恢复数据就重新走一遍流程即可 redis的AOF</li></ul><h3 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1 RDB"></a>1 RDB</h3><p>RDB的三种触发机制</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">'''save(同步)1 客户端执行save命令----》redis服务端----》同步创建RDB二进制文件2 会造成redis的阻塞（数据量非常大的时候）3 文件策略：如果老的RDB存在，会替换老的4 复杂度 o(n)'''</span><span class="token triple-quoted-string string">'''bgsave(异步，Backgroud saving started)1 客户端执行save命令----》redis服务端----》异步创建RDB二进制文件（fork函数生成一个子进程（fork会阻塞reids），执行createRDB，执行成功，返回给reids消息）2 此时访问redis，会正常响应客户端3 文件策略：跟save相同，如果老的RDB存在，会替换老的4 复杂度 o(n)'''</span><span class="token triple-quoted-string string">'''自动（通过配置）配置   seconds   changessave   900        1save   300        10save   60         10000如果60s中改变了1w条数据，自动生成rdb如果300s中改变了10条数据，自动生成rdb如果900s中改变了1条数据，自动生成rdb以上三条符合任意一条，就自动生成rdb，内部使用bgsave'''</span><span class="token comment" spellcheck="true">#配置：</span>save <span class="token number">900</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">#配置一条</span>save <span class="token number">300</span> <span class="token number">10</span> <span class="token comment" spellcheck="true">#配置一条</span>save <span class="token number">60</span> <span class="token number">10000</span> <span class="token comment" spellcheck="true">#配置一条</span>dbfilename dump<span class="token punctuation">.</span>rdb  <span class="token comment" spellcheck="true">#rdb文件的名字，默认为dump.rdb</span>dir <span class="token punctuation">.</span><span class="token operator">/</span> <span class="token comment" spellcheck="true">#rdb文件存在当前目录</span>stop<span class="token operator">-</span>writes<span class="token operator">-</span>on<span class="token operator">-</span>bgsave<span class="token operator">-</span>error yes <span class="token comment" spellcheck="true">#如果bgsave出现错误，是否停止写入，默认为yes</span>rdbcompression yes <span class="token comment" spellcheck="true">#采用压缩格式</span>rdbchecksum yes <span class="token comment" spellcheck="true">#是否对rdb文件进行校验和检验</span><span class="token comment" spellcheck="true">#最佳配置</span>save <span class="token number">900</span> <span class="token number">1</span> save <span class="token number">300</span> <span class="token number">10</span> save <span class="token number">60</span> <span class="token number">10000</span> dbfilename dump<span class="token operator">-</span>$<span class="token punctuation">{</span>port<span class="token punctuation">}</span><span class="token punctuation">.</span>rdb  <span class="token comment" spellcheck="true">#以端口号作为文件名，可能一台机器上很多reids，不会乱</span>dir <span class="token operator">/</span>bigdiskpath <span class="token comment" spellcheck="true">#保存路径放到一个大硬盘位置目录</span>stop<span class="token operator">-</span>writes<span class="token operator">-</span>on<span class="token operator">-</span>bgsave<span class="token operator">-</span>error yes <span class="token comment" spellcheck="true">#出现错误停止</span>rdbcompression yes <span class="token comment" spellcheck="true">#压缩</span>rdbchecksum yes <span class="token comment" spellcheck="true">#校验</span></code></pre><p><strong>触发机制</strong></p><pre><code>1 全量复制 #没有执行save和bgsave没有添加rdb策略，还会生成rdb文件，如果开启主从复制，主会自动生成rdb2 debug reload #debug级别的重启，不会将内存中的数据清空3 shutdown save#关闭会出发rdb的生成</code></pre><p><strong>存在的问题</strong>：耗时，耗性能，不可控，数据可能会丢失</p><h3 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2 AOF"></a>2 AOF</h3><p>原理：客户端每写入一条命令就会记录一条日志，放到日志文件中，如果出现宕机完全可以恢复</p><p><strong>AOF三种保存策略</strong></p><p>日志不是直接写到硬盘上，而是先放在缓冲区，缓冲区根据一些策略，写到硬盘上</p><ul><li><p>always：redis–》写命令刷新的缓冲区—》每条命令fsync到硬盘—》AOF文件</p></li><li><p>everysec（默认值）：redis——》写命令刷新的缓冲区—》每秒把缓冲区fsync到硬盘–》AOF文件</p></li><li><p>no:redis——》写命令刷新的缓冲区—》操作系统决定，缓冲区fsync到硬盘–》AOF文件</p></li></ul><table><thead><tr><th>命令</th><th>always</th><th>everysec</th><th>no</th></tr></thead><tbody><tr><td>优点</td><td>不丢失数据</td><td>每秒一次fsync，丢失1秒数据</td><td>不用管</td></tr><tr><td>缺点</td><td>IO开销大，一般的sata盘只有几百TPS</td><td>丢1秒数据</td><td>不可控</td></tr></tbody></table><h4 id="3-1-AOF重写"><a href="#3-1-AOF重写" class="headerlink" title="3.1 AOF重写"></a>3.1 AOF重写</h4><p>是aof中的一个模式，日志文件越堆越多就会存在很多没用的命令</p><p>比如给hello赋值了10次，实际上只有第10次有意义，所以前面9次都可以删掉，或者是rpush a，rpush b ，rpush c，可以写成rpush a，b，c</p><p>本质就是把过期的，无用的，重复的，可以优化的命令，来优化</p><p>这样可以减少磁盘占用量，加速恢复速度</p><p><strong>实现方式</strong></p><p>bgrewriteaof：</p><p>客户端向服务端发送bgrewriteaof命令，服务端会起一个fork进程，完成AOF重写</p><p><strong>配置方式</strong></p><pre class=" language-python"><code class="language-python">appendonly yes <span class="token comment" spellcheck="true">#将该选项设置为yes，打开</span>appendfilename <span class="token string">"appendonly-${port}.aof"</span> <span class="token comment" spellcheck="true">#文件保存的名字</span>appendfsync everysec <span class="token comment" spellcheck="true">#采用第二种策略</span>dir <span class="token operator">/</span>bigdiskpath <span class="token comment" spellcheck="true">#存放的路径</span>no<span class="token operator">-</span>appendfsync<span class="token operator">-</span>on<span class="token operator">-</span>rewrite yes <span class="token comment" spellcheck="true">#在aof重写的时候，是否要做aof的append操作，因为aof重写消耗性能，磁盘消耗，正常aof写磁盘有一定的冲突，这段期间的数据，允许丢失</span></code></pre><h2 id="二、主从复制"><a href="#二、主从复制" class="headerlink" title="二、主从复制"></a>二、主从复制</h2><p>QPS达到瓶颈就可以做主从复制</p><ul><li><p>一主一从或者一主多从</p></li><li><p>做读写分离，数据副本</p></li><li><p>扩展操作数据的新能</p></li><li><p>一个master（主）可以有多个slave（从）</p></li><li><p>一个从智能属于一个主</p></li><li><p>数据流向是单向的，从主到从</p></li></ul><p><strong>原理</strong></p><pre><code>1 从库通过 slaveof ip 端口连接主库，并发送一个SYNC请求给主库2 主库接受到SYNC，会立即出发bgsave（持久化），后台保存RDB，发送给从库3 从库接收到RDB文件会执行（就是把数据读出来）4 此时主从复制就能正常工作了，主库会将新的操作以命令的形式陆续发给从库5 所有的复制信息都可以从info中查到6 如果发生主从关系断开时,从库数据没有任何损坏,在下次重连之后,从库发送PSYNC给主库7 主库只会将从库缺失部分的数据同步给从库应用,达到快速恢复主从的目的</code></pre><h3 id="1-辅助配置"><a href="#1-辅助配置" class="headerlink" title="1 辅助配置"></a>1 辅助配置</h3><pre class=" language-python"><code class="language-python">min<span class="token operator">-</span>slaves<span class="token operator">-</span>to<span class="token operator">-</span>write <span class="token number">1</span>min<span class="token operator">-</span>slaves<span class="token operator">-</span>max<span class="token operator">-</span>lag <span class="token number">3</span><span class="token comment" spellcheck="true">#那么在从服务器的数量少于1个，或者三个从服务器的延迟（lag）值都大于或等于3秒时，主服务器将拒绝执行写命令</span></code></pre><h3 id="2-复制配置"><a href="#2-复制配置" class="headerlink" title="2 复制配置"></a>2 复制配置</h3><h4 id="2-1-slave命令"><a href="#2-1-slave命令" class="headerlink" title="2.1 slave命令"></a>2.1 slave命令</h4><pre class=" language-python"><code class="language-python"><span class="token number">6380</span>是从，<span class="token number">6379</span>是主在<span class="token number">6380</span>上执行（去从库配置，配置主库）slaveof <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token comment" spellcheck="true">#异步</span>slaveof no one <span class="token comment" spellcheck="true">#取消复制，不会把之前的数据清除</span></code></pre><h4 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h4><pre class=" language-python"><code class="language-python">slaveof ip port <span class="token comment" spellcheck="true">#配置从节点ip和端口</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes <span class="token comment" spellcheck="true">#从节点只读，因为可读可写，数据会乱</span><span class="token triple-quoted-string string">'''mkdir -p redis1/conf redis1/data redis2/conf redis2/data redis3/conf redis3/datavim redis.confdaemonize nopidfile redis.pidbind 0.0.0.0protected-mode noport 6379timeout 0logfile redis.logdbfilename dump.rdbdir /dataslaveof 10.0.0.101 6379slave-read-only yescp redis.conf /home/redis2/conf/docker run -p 6379:6379 --name redis_6379 -v /home/redis1/conf/redis.conf:/etc/redis/redis.conf -v /home/redis1/data:/data -d redis redis-server /etc/redis/redis.confdocker run -p 6378:6379 --name redis_6378 -v /home/redis2/conf/redis.conf:/etc/redis/redis.conf -v /home/redis2/data:/data -d redis redis-server /etc/redis/redis.confdocker run -p 6377:6379 --name redis_6377 -v /home/redis3/conf/redis.conf:/etc/redis/redis.conf -v /home/redis3/data:/data -d redis redis-server /etc/redis/redis.confinfo replication'''</span></code></pre><h4 id="2-3-复制常见的问题"><a href="#2-3-复制常见的问题" class="headerlink" title="2.3 复制常见的问题"></a>2.3 复制常见的问题</h4><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 读写分离读流量分摊到从节点可能遇到问题：复制数据延迟，读到过期数据，从节点故障<span class="token number">2</span> 主从配置不一致maxmemory不一致：丢失数据数据结构优化参数：主节点做了优化，从节点没有设置优化，会出现一些问题<span class="token number">3</span> 规避全量复制第一次全量复制，不可避免：小主节点，低峰<span class="token punctuation">(</span>夜间<span class="token punctuation">)</span>节点运行id不匹配：主节点重启<span class="token punctuation">(</span>运行id变化<span class="token punctuation">)</span>复制挤压缓冲区不足：增大复制缓冲区大小，rel_backlog_size<span class="token number">4</span> 规避复制风暴单主节点复制风暴，主节点重启，所有从节点复制</code></pre><h2 id="三、redis-Sentinel（哨兵）"><a href="#三、redis-Sentinel（哨兵）" class="headerlink" title="三、redis-Sentinel（哨兵）"></a>三、redis-Sentinel（哨兵）</h2><p>哨兵就是为了实现主从复制的高可用</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#主从复制存在的问题：</span><span class="token comment" spellcheck="true">#1 主从复制，主节点发生故障，需要做故障转移，可以手动转移：让其中一个slave变成master</span><span class="token comment" spellcheck="true">#2 主从复制，只能主写数据，所以写能力和存储能力有限</span></code></pre><p><strong>架构说明</strong></p><p>1 多个sentinel发现并确认master有问题</p><p>2 选举触一个sentinel作为领导</p><p>3 选取一个slave作为新的master</p><p>4 通知其余slave成为新的master的slave</p><p>5 通知客户端主从变化</p><p>6 等待老的master复活成为新master的slave</p><h3 id="1-安装配置"><a href="#1-安装配置" class="headerlink" title="1 安装配置"></a>1 安装配置</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#配置开启sentinel监控主节点</span>mkdir <span class="token operator">-</span>p redis4<span class="token operator">/</span>conf redis4<span class="token operator">/</span>data redis5<span class="token operator">/</span>conf redis5<span class="token operator">/</span>data redis6<span class="token operator">/</span>data redis6<span class="token operator">/</span>confvi sentinel<span class="token punctuation">.</span>confport <span class="token number">26379</span>daemonize yesdir dataprotected<span class="token operator">-</span>mode nobind <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span>logfile <span class="token string">"redis_sentinel.log"</span>sentinel monitor mymaster <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token number">2</span>sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds mymaster <span class="token number">30000</span>sentinel parallel<span class="token operator">-</span>syncs mymaster <span class="token number">1</span>sentinel failover<span class="token operator">-</span>timeout mymaster <span class="token number">180000</span>docker run <span class="token operator">-</span>p <span class="token number">26379</span><span class="token punctuation">:</span><span class="token number">26379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_26379 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis4<span class="token operator">/</span>conf<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis4<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>d redis redis<span class="token operator">-</span>sentinel <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>confdocker run <span class="token operator">-</span>p <span class="token number">26378</span><span class="token punctuation">:</span><span class="token number">26379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_26378 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis5<span class="token operator">/</span>conf<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis5<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>d redis redis<span class="token operator">-</span>sentinel <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>confdocker run <span class="token operator">-</span>p <span class="token number">26377</span><span class="token punctuation">:</span><span class="token number">26379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_26377 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis6<span class="token operator">/</span>conf<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>redis6<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>d redis redis<span class="token operator">-</span>sentinel <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>sentinel<span class="token punctuation">.</span>confredis<span class="token operator">-</span>sentinel sentinel<span class="token punctuation">.</span>confinfo配置会重写，自动发现slave</code></pre><pre class=" language-python"><code class="language-python">sentinel monitor mymaster <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token number">2</span>sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds mymaster <span class="token number">30000</span>sentinel parallel<span class="token operator">-</span>syncs mymaster <span class="token number">1</span>sentinel failover<span class="token operator">-</span>timeout mymaster <span class="token number">180000</span>sentinel monitor <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>ip<span class="token operator">></span> <span class="token operator">&lt;</span>redis<span class="token operator">-</span>port<span class="token operator">></span> <span class="token operator">&lt;</span>quorum<span class="token operator">></span>告诉sentinel去监听地址为ip<span class="token punctuation">:</span>port的一个master，这里的master<span class="token operator">-</span>name可以自定义，quorum是一个数字，指明当有多少个sentinel认为一个master失效时，master才算真正失效sentinel auth<span class="token operator">-</span><span class="token keyword">pass</span> <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>password<span class="token operator">></span>设置连接master和slave时的密码，注意的是sentinel不能分别为master和slave设置不同的密码，因此master和slave的密码应该设置相同。sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>milliseconds<span class="token operator">></span> 这个配置项指定了需要多少失效时间，一个master才会被这个sentinel主观地认为是不可用的。 单位是毫秒，默认为<span class="token number">30</span>秒sentinel parallel<span class="token operator">-</span>syncs <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>numslaves<span class="token operator">></span> 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，这个数字越小，完成failover所需的时间就越长，但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。可以通过将这个值设为 <span class="token number">1</span> 来保证每次只有一个slave 处于不能处理命令请求的状态。sentinel failover<span class="token operator">-</span>timeout <span class="token operator">&lt;</span>master<span class="token operator">-</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>milliseconds<span class="token operator">></span>failover<span class="token operator">-</span>timeout 可以用在以下这些方面：     <span class="token number">1</span><span class="token punctuation">.</span> 同一个sentinel对同一个master两次failover之间的间隔时间。   <span class="token number">2</span><span class="token punctuation">.</span> 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。    <span class="token number">3</span><span class="token punctuation">.</span>当想要取消一个正在进行的failover所需要的时间。    <span class="token number">4</span><span class="token punctuation">.</span>当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel<span class="token operator">-</span>syncs所配置的规则来了。</code></pre><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 搭一个一主两从<span class="token comment" spellcheck="true">#创建三个配置文件：</span><span class="token comment" spellcheck="true">#第一个是主配置文件</span>daemonize yespidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis<span class="token punctuation">.</span>pidport <span class="token number">6379</span>dir <span class="token string">"/opt/soft/redis/data"</span>logfile “<span class="token number">6379.</span>log”<span class="token comment" spellcheck="true">#第二个是从配置文件</span>daemonize yespidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis2<span class="token punctuation">.</span>pidport <span class="token number">6378</span>dir <span class="token string">"/opt/soft/redis/data2"</span>logfile “<span class="token number">6378.</span>log”slaveof <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes<span class="token comment" spellcheck="true">#第三个是从配置文件</span>daemonize yespidfile <span class="token operator">/</span>var<span class="token operator">/</span>run<span class="token operator">/</span>redis3<span class="token punctuation">.</span>pidport <span class="token number">6377</span>dir <span class="token string">"/opt/soft/redis/data3"</span>logfile “<span class="token number">6377.</span>log”slaveof <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span>slave<span class="token operator">-</span>read<span class="token operator">-</span>only yes<span class="token comment" spellcheck="true">#把三个redis服务都启动起来</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server redis_6379<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server redis_6378<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>server redis_6377<span class="token punctuation">.</span>conf<span class="token number">2</span> 搭建哨兵<span class="token comment" spellcheck="true"># sentinel.conf这个文件</span><span class="token comment" spellcheck="true"># 把哨兵也当成一个redis服务器</span>创建三个配置文件分别叫sentinel_26379<span class="token punctuation">.</span>conf sentinel_26378<span class="token punctuation">.</span>conf  sentinel_26377<span class="token punctuation">.</span>conf<span class="token comment" spellcheck="true"># 当前路径下创建 data1 data2 data3 个文件夹</span><span class="token comment" spellcheck="true">#内容如下(需要修改端口，文件地址日志文件名字)</span>port <span class="token number">26379</span>daemonize yesdir <span class="token punctuation">.</span><span class="token operator">/</span>data3protected<span class="token operator">-</span>mode nobind <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span>logfile <span class="token string">"redis_sentinel3.log"</span>sentinel monitor mymaster <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span> <span class="token number">6379</span> <span class="token number">2</span>sentinel down<span class="token operator">-</span>after<span class="token operator">-</span>milliseconds mymaster <span class="token number">30000</span>sentinel parallel<span class="token operator">-</span>syncs mymaster <span class="token number">1</span>sentinel failover<span class="token operator">-</span>timeout mymaster <span class="token number">180000</span><span class="token comment" spellcheck="true">#启动三个哨兵</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel_26379<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel_26378<span class="token punctuation">.</span>conf<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>sentinel sentinel_26377<span class="token punctuation">.</span>conf<span class="token comment" spellcheck="true"># 登陆哨兵</span><span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>p <span class="token number">26377</span><span class="token comment" spellcheck="true"># 输入 info</span><span class="token comment" spellcheck="true"># 查看哨兵的配置文件被修改了，自动生成的</span><span class="token comment" spellcheck="true"># 主动停掉主redis 6379，哨兵会自动选择一个从库作为主库</span>redis<span class="token operator">-</span>cli <span class="token operator">-</span>p <span class="token number">6379</span>shutdown<span class="token comment" spellcheck="true">#等待原来的主库启动，该主库会变成从库</span></code></pre><h3 id="2-客户端链接"><a href="#2-客户端链接" class="headerlink" title="2 客户端链接"></a>2 客户端链接</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> redis<span class="token keyword">from</span> redis<span class="token punctuation">.</span>sentinel <span class="token keyword">import</span> Sentinel<span class="token comment" spellcheck="true"># 连接哨兵服务器(主机名也可以用域名)</span><span class="token comment" spellcheck="true"># 10.0.0.101:26379</span>sentinel <span class="token operator">=</span> Sentinel<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'10.0.0.101'</span><span class="token punctuation">,</span> <span class="token number">26379</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">'10.0.0.101'</span><span class="token punctuation">,</span> <span class="token number">26378</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                     <span class="token punctuation">(</span><span class="token string">'10.0.0.101'</span><span class="token punctuation">,</span> <span class="token number">26377</span><span class="token punctuation">)</span>             <span class="token punctuation">]</span><span class="token punctuation">,</span>                    socket_timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sentinel<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取主服务器地址</span>master <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>discover_master<span class="token punctuation">(</span><span class="token string">'mymaster'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取从服务器地址</span>slave <span class="token operator">=</span> sentinel<span class="token punctuation">.</span>discover_slaves<span class="token punctuation">(</span><span class="token string">'mymaster'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>slave<span class="token punctuation">)</span><span class="token comment" spellcheck="true">##### 读写分离</span><span class="token comment" spellcheck="true"># 获取主服务器进行写入</span><span class="token comment" spellcheck="true"># master = sentinel.master_for('mymaster', socket_timeout=0.5)</span><span class="token comment" spellcheck="true"># w_ret = master.set('foo', 'bar')</span><span class="token comment" spellcheck="true"># slave = sentinel.slave_for('mymaster', socket_timeout=0.5)</span><span class="token comment" spellcheck="true"># r_ret = slave.get('foo')</span><span class="token comment" spellcheck="true"># print(r_ret)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Redis高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rabbitmq、Rpc</title>
      <link href="/task/2020/03/24/%E5%85%B6%E4%BB%96/Rabbitmq%EF%BC%8CRpc/"/>
      <url>/task/2020/03/24/%E5%85%B6%E4%BB%96/Rabbitmq%EF%BC%8CRpc/</url>
      
        <content type="html"><![CDATA[<p>消息队列介绍：<strong><a href="http://mrw.so/6m21VY">http://mrw.so/6m21VY</a></strong></p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 原生安装    <span class="token operator">-</span>安装扩展epel源    <span class="token operator">-</span>yum <span class="token operator">-</span>y install erlang    <span class="token operator">-</span>yum <span class="token operator">-</span>y install rabbitmq<span class="token operator">-</span>server    <span class="token operator">-</span>systemctl start rabbitmq<span class="token operator">-</span>server<span class="token number">2</span> docker拉取    <span class="token operator">-</span>docker pull rabbitmq<span class="token punctuation">:</span>management（自动开启了web管理界面）    <span class="token operator">-</span>docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name rabbitmq <span class="token operator">-</span>e RABBITMQ_DEFAULT_USER<span class="token operator">=</span>admin <span class="token operator">-</span>e RABBITMQ_DEFAULT_PASS<span class="token operator">=</span>admin <span class="token operator">-</span>p <span class="token number">15672</span><span class="token punctuation">:</span><span class="token number">15672</span> <span class="token operator">-</span>p <span class="token number">5672</span><span class="token punctuation">:</span><span class="token number">5672</span> rabbitmq<span class="token punctuation">:</span>management<span class="token number">3</span> <span class="token number">5672</span>：是rabbitmq的默认端口  <span class="token number">15672</span>：web管理界面的端口<span class="token number">4</span> 创建用户rabbitmqctl add_user lqz <span class="token number">123</span><span class="token number">5</span> 分配权限rabbitmqctl set_user_tags lqz administratorrabbitmqctl set_permissions <span class="token operator">-</span>p <span class="token string">"/"</span> lqz <span class="token string">".*"</span> <span class="token string">".*"</span> <span class="token string">".*"</span></code></pre><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2 基本使用"></a>2 基本使用</h3><h4 id="2-1-消息安全☞ack"><a href="#2-1-消息安全☞ack" class="headerlink" title="2.1 消息安全☞ack"></a>2.1 消息安全☞ack</h4><p>是否响应数据已经被接受</p><p>就是消费者中接受数据的时候配置一个参数auto_ack=False，就会导致拿到数据了，但是数据还在队列中</p><p><strong>消费者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pika<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建一个用户对象</span>    credentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建一个链接对象</span>    connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'121.36.98.49'</span><span class="token punctuation">,</span> credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建操作对象</span>    channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建一个队列（默认是在生产者中创建，为了防止消费者先启动，多写也不会重复创建）</span>    channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [x] Received %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等到hello队列中出现数据，如果出现则执行callback</span>    channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span> on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span> auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一直启动等待接收消息</span>    channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>生产者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pika<span class="token comment" spellcheck="true"># 拿到连接对象</span><span class="token comment" spellcheck="true"># connection = pika.BlockingConnection(pika.ConnectionParameters('101.133.225.166'))</span><span class="token comment" spellcheck="true"># 有用户名密码的情况</span>credentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'121.36.98.49'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拿到channel对象</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 声明一个队列</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 指定队列名字</span><span class="token comment" spellcheck="true"># 生产者向hello队列中放一条消息"lqz js nb"</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                      routing_key<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span>                      body<span class="token operator">=</span><span class="token string">'lqz js nb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" Sent 'Hello World!'"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭连接</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-2-消息安全☞durable持久化"><a href="#2-2-消息安全☞durable持久化" class="headerlink" title="2.2 消息安全☞durable持久化"></a>2.2 消息安全☞durable持久化</h4><p>durable持久化消费者不需要动，只要在生产者产生数据的时候配置一个参数即可</p><p>注意：配置持久化必须是新的队列</p><p><strong>生产者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 声明一个队列(创建一个队列),durable=True支持持久化，队列必须是新的才可以</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'lqz1'</span><span class="token punctuation">,</span>durable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                      routing_key<span class="token operator">=</span><span class="token string">'lqz1'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 消息队列名称</span>                      body<span class="token operator">=</span><span class="token string">'111'</span><span class="token punctuation">,</span>                      properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>                          delivery_mode<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># make message persistent,消息也持久化</span>                      <span class="token punctuation">)</span>                      <span class="token punctuation">)</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-3-闲置消费"><a href="#2-3-闲置消费" class="headerlink" title="2.3 闲置消费"></a>2.3 闲置消费</h4><p>默认情况下，如果有多个消费者，是按照顺序第一个消息给第一个消费者，第二个消息给第二个消费者</p><p>但是可能第一个消息的消费者处理消息很耗时，一直没结束，就可以让第二个消费者优先获得闲置的消息</p><p>就是在消费者接受数据前配置一个参数</p><p><strong>消费者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 声明一个队列(创建一个队列)</span><span class="token comment" spellcheck="true"># channel.queue_declare(queue='lqz123')</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者接受到了任务: %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通知服务端，消息取走了，如果auto_ack=False，不加下面，消息会一直存在</span>    ch<span class="token punctuation">.</span>basic_ack<span class="token punctuation">(</span>delivery_tag<span class="token operator">=</span>method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_qos<span class="token punctuation">(</span>prefetch_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#####就只有这一句话 谁闲置谁获取，没必要按照顺序一个一个来</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'lqz123'</span><span class="token punctuation">,</span>on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span>auto_ack<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-4-发布订阅"><a href="#2-4-发布订阅" class="headerlink" title="2.4 发布订阅"></a>2.4 发布订阅</h4><p>发布订阅的本质是观察者模式，发布者发布了内容，订阅者只要订阅了发布者就会接受发布者推送的内容</p><p><strong>发布者</strong></p><p>与上面生产者模式的不同，这里发布者是通过一个中间者，所有绑定了这个中间者的订阅者绑定的队列都会接受到这个推送</p><p>就像a,b,c（订阅者）都关注了一个公众号（发布者），只要公众号发了消息，都会由微信的服务器（中间者）转发这个消息到a,b,c的账号（队列）上</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m1'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'fanout'</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m1'</span><span class="token punctuation">,</span>                      routing_key<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                      body<span class="token operator">=</span><span class="token string">'lqz nb'</span><span class="token punctuation">)</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>订阅者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># exchange='m1',exchange(秘书)的名称</span><span class="token comment" spellcheck="true"># exchange_type='fanout' , 秘书工作方式将消息发送给所有的队列</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m1'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'fanout'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机生成一个队列</span>result <span class="token operator">=</span> channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>queue_name <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue<span class="token keyword">print</span><span class="token punctuation">(</span>queue_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 让exchange和queque进行绑定.</span>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m1'</span><span class="token punctuation">,</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者接受到了任务: %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span>auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-5-发布订阅扩☞Routing-按关键字匹配"><a href="#2-5-发布订阅扩☞Routing-按关键字匹配" class="headerlink" title="2.5 发布订阅扩☞Routing(按关键字匹配)"></a>2.5 发布订阅扩☞Routing(按关键字匹配)</h4><p>发布订阅接受推送的条件默认是只有订阅者能接受，routing限定了订阅者必须要有绑定这个关键字</p><p><strong>发布者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'direct'</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>                      routing_key<span class="token operator">=</span><span class="token string">'bnb'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 多个关键字，指定routing_key</span>                      body<span class="token operator">=</span><span class="token string">'lqz nb'</span><span class="token punctuation">)</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>订阅者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># exchange='m1',exchange(秘书)的名称</span><span class="token comment" spellcheck="true"># exchange_type='direct' , 秘书工作方式将消息发送给不同的关键字</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'direct'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机生成一个队列</span>result <span class="token operator">=</span> channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>queue_name <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue<span class="token keyword">print</span><span class="token punctuation">(</span>queue_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 让exchange和queque进行绑定. 可以有多个</span>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>routing_key<span class="token operator">=</span><span class="token string">'nb'</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m2'</span><span class="token punctuation">,</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>routing_key<span class="token operator">=</span><span class="token string">'bnb'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者接受到了任务: %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span>auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="2-6-发布订阅高级☞Topic-按关键字模糊匹配"><a href="#2-6-发布订阅高级☞Topic-按关键字模糊匹配" class="headerlink" title="2.6 发布订阅高级☞Topic(按关键字模糊匹配)"></a>2.6 发布订阅高级☞Topic(按关键字模糊匹配)</h4><p><strong>发布者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m3'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'topic'</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m3'</span><span class="token punctuation">,</span>                      <span class="token comment" spellcheck="true"># routing_key='lqz.handsome', #都能收到</span>                      routing_key<span class="token operator">=</span><span class="token string">'lqz.handsome.xx'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">#只有lqz.#能收到</span>                      body<span class="token operator">=</span><span class="token string">'lqz nb'</span><span class="token punctuation">)</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>*只能加一个单词</p><p>#可以加任意单词字符</p><p><strong>订阅者</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span>credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># exchange='m1',exchange(秘书)的名称</span><span class="token comment" spellcheck="true"># exchange_type='direct' , 秘书工作方式将消息发送给不同的关键字</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m3'</span><span class="token punctuation">,</span>exchange_type<span class="token operator">=</span><span class="token string">'topic'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机生成一个队列</span>result <span class="token operator">=</span> channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>queue_name <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue<span class="token keyword">print</span><span class="token punctuation">(</span>queue_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 让exchange和queque进行绑定.</span>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">'m3'</span><span class="token punctuation">,</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>routing_key<span class="token operator">=</span><span class="token string">'lqz.#'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"消费者接受到了任务: %r"</span> <span class="token operator">%</span> body<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span>queue_name<span class="token punctuation">,</span>on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span>auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="3-rpc远程过程调用"><a href="#3-rpc远程过程调用" class="headerlink" title="3 rpc远程过程调用"></a>3 rpc远程过程调用</h3><p>是微服务的一种概念，通过http请求或者socket请求去服务端调用函数或者类的方法</p><h4 id="3-1-rabbitmq实现rpc"><a href="#3-1-rabbitmq实现rpc" class="headerlink" title="3.1 rabbitmq实现rpc"></a>3.1 rabbitmq实现rpc</h4><p><strong>服务端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pikacredentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span> credentials<span class="token operator">=</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'rpc_queue'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">elif</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fib<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">on_request</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> props<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> int<span class="token punctuation">(</span>body<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [.] fib(%s)"</span> <span class="token operator">%</span> n<span class="token punctuation">)</span>    response <span class="token operator">=</span> fib<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                     routing_key<span class="token operator">=</span>props<span class="token punctuation">.</span>reply_to<span class="token punctuation">,</span>                     properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>correlation_id <span class="token operator">=</span> \                                                         props<span class="token punctuation">.</span>correlation_id<span class="token punctuation">)</span><span class="token punctuation">,</span>                     body<span class="token operator">=</span>str<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>basic_ack<span class="token punctuation">(</span>delivery_tag<span class="token operator">=</span>method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_qos<span class="token punctuation">(</span>prefetch_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'rpc_queue'</span><span class="token punctuation">,</span> on_message_callback<span class="token operator">=</span>on_request<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [x] Awaiting RPC requests"</span><span class="token punctuation">)</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>客户端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pika<span class="token keyword">import</span> uuid<span class="token keyword">class</span> <span class="token class-name">FibonacciRpcClient</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>credentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'101.133.225.166'</span><span class="token punctuation">,</span> credentials<span class="token operator">=</span>self<span class="token punctuation">.</span>credentials<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>channel <span class="token operator">=</span> self<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>callback_queue <span class="token operator">=</span> result<span class="token punctuation">.</span>method<span class="token punctuation">.</span>queue        self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>            queue<span class="token operator">=</span>self<span class="token punctuation">.</span>callback_queue<span class="token punctuation">,</span>            on_message_callback<span class="token operator">=</span>self<span class="token punctuation">.</span>on_response<span class="token punctuation">,</span>            auto_ack<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">on_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> method<span class="token punctuation">,</span> props<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>corr_id <span class="token operator">==</span> props<span class="token punctuation">.</span>correlation_id<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>response <span class="token operator">=</span> body    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>response <span class="token operator">=</span> None        self<span class="token punctuation">.</span>corr_id <span class="token operator">=</span> str<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>            exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>            routing_key<span class="token operator">=</span><span class="token string">'rpc_queue'</span><span class="token punctuation">,</span>            properties<span class="token operator">=</span>pika<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">(</span>                reply_to<span class="token operator">=</span>self<span class="token punctuation">.</span>callback_queue<span class="token punctuation">,</span>                correlation_id<span class="token operator">=</span>self<span class="token punctuation">.</span>corr_id<span class="token punctuation">,</span>            <span class="token punctuation">)</span><span class="token punctuation">,</span>            body<span class="token operator">=</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> self<span class="token punctuation">.</span>response <span class="token keyword">is</span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>process_data_events<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>response<span class="token punctuation">)</span>fibonacci_rpc <span class="token operator">=</span> FibonacciRpcClient<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [x] Requesting fib(30)"</span><span class="token punctuation">)</span>response <span class="token operator">=</span> fibonacci_rpc<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 外界看上去，就像调用本地的call()函数一样</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" [.] Got %r"</span> <span class="token operator">%</span> response<span class="token punctuation">)</span></code></pre><h4 id="3-2-SimpleXMLRPCServer实现rpc"><a href="#3-2-SimpleXMLRPCServer实现rpc" class="headerlink" title="3.2 SimpleXMLRPCServer实现rpc"></a>3.2 SimpleXMLRPCServer实现rpc</h4><p><strong>服务端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> xmlrpc<span class="token punctuation">.</span>server <span class="token keyword">import</span> SimpleXMLRPCServer<span class="token keyword">class</span> <span class="token class-name">RPCServer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RPCServer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'server:'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>recv_data <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">getObj</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get data'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>send_data    <span class="token keyword">def</span> <span class="token function">sendObj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send data'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recv_data <span class="token operator">=</span> data        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv_data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># SimpleXMLRPCServer</span>server <span class="token operator">=</span> SimpleXMLRPCServer<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span><span class="token number">4242</span><span class="token punctuation">)</span><span class="token punctuation">,</span> allow_none<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>register_introspection_functions<span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>register_instance<span class="token punctuation">(</span>RPCServer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>客户端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> xmlrpc<span class="token punctuation">.</span>client <span class="token keyword">import</span> ServerProxy<span class="token comment" spellcheck="true"># SimpleXMLRPCServer</span><span class="token keyword">def</span> <span class="token function">xmlrpc_client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xmlrpc client'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> ServerProxy<span class="token punctuation">(</span><span class="token string">'http://localhost:4242'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'client:'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token operator">=</span>c<span class="token punctuation">.</span>getObj<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        c<span class="token punctuation">.</span>sendObj<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'xmlrpc total time %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    xmlrpc_client<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="3-3-ZeroRPC实现rpc"><a href="#3-3-ZeroRPC实现rpc" class="headerlink" title="3.3 ZeroRPC实现rpc"></a>3.3 ZeroRPC实现rpc</h4><p><strong>服务端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> zerorpc<span class="token keyword">class</span> <span class="token class-name">RPCServer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RPCServer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>send_data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'server:'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>recv_data <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">getObj</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'get data'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>send_data    <span class="token keyword">def</span> <span class="token function">sendObj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send data'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>recv_data <span class="token operator">=</span> data        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>recv_data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># zerorpc</span>s <span class="token operator">=</span> zerorpc<span class="token punctuation">.</span>Server<span class="token punctuation">(</span>RPCServer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">'tcp://0.0.0.0:4243'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>客户端</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> zerorpc<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># zerorpc</span><span class="token keyword">def</span> <span class="token function">zerorpc_client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'zerorpc client'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> zerorpc<span class="token punctuation">.</span>Client<span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'tcp://127.0.0.1:4243'</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'client:'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a<span class="token operator">=</span>c<span class="token punctuation">.</span>getObj<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        c<span class="token punctuation">.</span>sendObj<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'total time %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>time<span class="token punctuation">.</span>clock<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    zerorpc_client<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rabbitmq </tag>
            
            <tag> Rpc </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列</title>
      <link href="/task/2020/03/24/%E5%85%B6%E4%BB%96/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/task/2020/03/24/%E5%85%B6%E4%BB%96/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>消息队列：是一种数据结构</p><p>生产者：把数据放入到队列中的一方</p><p>消费者：把数据从队列中取出的一方</p><h3 id="2-存在的意义"><a href="#2-存在的意义" class="headerlink" title="2 存在的意义"></a>2 存在的意义</h3><h4 id="2-1-解耦"><a href="#2-1-解耦" class="headerlink" title="2.1 解耦"></a>2.1 解耦</h4><p>场景一：</p><p>存在三个系统</p><p>a系统要给b系统发送数据，调用系统b的接口</p><p>a系统要给c系统发送数据，调用系统c的接口</p><p>如果有一天b不需要a的数据了，就需要让a注释掉掉b接口的代码</p><p>如果新增系统d要接受数据，又要增加调用系统d的代码</p><p><strong>这些调用逻辑都是一些重复的不可避免的劳动</strong></p><p>此处的a系统与bcd系统高度耦合了，因为之间的数据交互如果需要修改，或者接受数据的系统出现了问题，那么a系统的调用逻辑还要思考需不需要继续发送数据</p><p>场景二：</p><p>在上述场景加入消息队列，消息队列是生产者（a系统）与消费者（bcd系统）之间的一个数据交互中转站</p><p>a系统发布消息，bcd订阅消息，如果不需要订阅就取消订阅即可，并不需要修改发布消息的代码</p><h4 id="2-2-异步"><a href="#2-2-异步" class="headerlink" title="2.2 异步"></a>2.2 异步</h4><p>消息队列是一个异步任务，如果a系统要完成<strong>产生数据（100ms）</strong>，<strong>发送数据至系统b（300ms）</strong>，<strong>发送数据至系统c（300ms）</strong></p><p>此时a系统完成消息发送是一个同步任务，完成时间是100+300+300=700ms</p><p>如果用了消息队列，a系统只要产生消息，并发送至消息队列，由消息队列异步回调订阅过的系统接口</p><p>此时a系统完成发送消息的时间是100ms</p><h4 id="2-3-削峰-限流"><a href="#2-3-削峰-限流" class="headerlink" title="2.3 削峰/限流"></a>2.3 削峰/限流</h4><p>如果有一个商场网站出了促销活动，此时每秒的请求数是5000，一般的mysql只能处理2000个左右的并发。</p><p>此时在用户与mysql之间加入mq，它可以接受者5000个请求，但是只给mysql发送2000个。</p><p>就像一个喷水的管子，如果突然流水量过大，管子就会裂开，我们通过开关把水流量放小一点就问题不大，但是我们要知道，在这个开关后水压还是这么大，mq做到的只是限制最大量。</p><h4 id="2-4-其他应用场景"><a href="#2-4-其他应用场景" class="headerlink" title="2.4 其他应用场景"></a>2.4 其他应用场景</h4><ul><li><strong>日志处理</strong>：将大量日志存储到消息队列中（一般采用分布式消息队列kafka），解决大量日志传输的问题。其中，消息队列负责日志数据的接收，存储和转发；</li><li><strong>消息通讯</strong>：点对点通讯或聊天室通讯。</li></ul><h3 id="3-使用消息队列会有什么优缺点"><a href="#3-使用消息队列会有什么优缺点" class="headerlink" title="3 使用消息队列会有什么优缺点"></a>3 使用消息队列会有什么优缺点</h3><p>优点其实就是上文中谈到的，在特殊场景下的应用好处，解耦、异步与削峰等。</p><p><strong>系统可用性</strong>：<br> 系统因为依赖与MQ消息队列这个服务，若这个服务崩溃了，那么我们的整个系统将不可用。为此往往我们都是通过集群/分布式部署来实现MQ高可用的。</p><p>高可用：通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性</p><p><strong>系统复杂度</strong>：<br> 我们将数据写到消息队列上，就有可能会存在数据丢失的情况。以及我们如何保证消息没有被重复消费等问题。</p><p><strong>一致性问题</strong>：<br> A系统将请求写入到消息队列后就返回请求成功了，假设在多机部署的时候，系统B、C写库成功，假设D写入失败了，这种情况下就会产生数据不一致的问题。</p><p><a href="https://www.jianshu.com/p/ec7c2503c3ef">https://www.jianshu.com/p/ec7c2503c3ef</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests模块使用</title>
      <link href="/task/2020/03/21/python/%E7%88%AC%E8%99%AB/requests%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
      <url>/task/2020/03/21/python/%E7%88%AC%E8%99%AB/requests%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="1-发送请求"><a href="#1-发送请求" class="headerlink" title="1 发送请求"></a>1 发送请求</h4><pre class=" language-python"><code class="language-python">r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://images.cnblogs.com/cnblogs_com/xuexianqi/1749514/o_20042405405202.png'</span><span class="token punctuation">)</span></code></pre><h4 id="2-请求地址中携带数据"><a href="#2-请求地址中携带数据" class="headerlink" title="2 请求地址中携带数据"></a>2 请求地址中携带数据</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># url的编码和解码</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlencode<span class="token punctuation">,</span>unquoteheader <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36'</span><span class="token punctuation">,</span> <span class="token punctuation">}</span>res<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/s'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'wd'</span><span class="token punctuation">:</span><span class="token string">'美女'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="3-请求中带cookie"><a href="#3-请求中带cookie" class="headerlink" title="3 请求中带cookie"></a>3 请求中带cookie</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 方式一：在headers中携带</span>header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'cookie'</span><span class="token punctuation">:</span><span class="token string">'name=hz'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方式二：添加cookies参数</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>cookies<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'hz'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4-post请求发送url和json格式数据"><a href="#4-post请求发送url和json格式数据" class="headerlink" title="4 post请求发送url和json格式数据"></a>4 post请求发送url和json格式数据</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># url格式</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'hz'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># post请求发送json格式数据</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/test/'</span><span class="token punctuation">,</span>json<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'hz'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="5-session函数自动处理携带cookie"><a href="#5-session函数自动处理携带cookie" class="headerlink" title="5 session函数自动处理携带cookie"></a>5 session函数自动处理携带cookie</h4><pre class=" language-python"><code class="language-python">session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/login/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>r2 <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/order/'</span><span class="token punctuation">)</span></code></pre><h4 id="6-response对象的方法"><a href="#6-response对象的方法" class="headerlink" title="6 response对象的方法"></a>6 response对象的方法</h4><pre class=" language-python"><code class="language-python">respone<span class="token punctuation">.</span>text <span class="token comment" spellcheck="true"># 响应的文本信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>content<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应体的二进制</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应状态码</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 响应头</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># cookie</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#  把cookie转成字典</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># key和value</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 请求的url</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>history<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#[]放重定向之前的地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>encoding<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应的编码方式</span>respone<span class="token punctuation">.</span>iter_content<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 图片，视频，大文件，一点一点循环取出来</span></code></pre><h4 id="7-编码问题"><a href="#7-编码问题" class="headerlink" title="7 编码问题"></a>7 编码问题</h4><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.autohome.com/news'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 一旦打印出来出现乱码问题</span><span class="token comment" spellcheck="true"># 方式一：手动设定编码格式</span>res<span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token string">'gb2312'</span><span class="token comment" spellcheck="true"># 方式二</span>res<span class="token punctuation">.</span>encoding<span class="token operator">=</span>res<span class="token punctuation">.</span>apparent_encoding<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><h4 id="8-json解析"><a href="#8-json解析" class="headerlink" title="8 json解析"></a>8 json解析</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jsonrespone<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8000/index/'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'lqz'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>respone<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 响应的文本</span><span class="token keyword">print</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>respone<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>respone<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 相当于上面那句话</span></code></pre><h4 id="9-使用代理"><a href="#9-使用代理" class="headerlink" title="9 使用代理"></a>9 使用代理</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># respone=requests.get('http://127.0.0.1:8000/index/',proxies={'http':'代理的地址和端口号',})</span><span class="token comment" spellcheck="true"># 代理，免费代理，收费代理花钱买</span><span class="token comment" spellcheck="true"># 代理池：列表放了一堆代理ip，每次随机取一个，再发请求就不会封ip了</span><span class="token comment" spellcheck="true"># 高匿和透明代理？如果使用高匿代理，后端无论如何拿不到你的ip，使用透明，后端能够拿到你的ip</span><span class="token comment" spellcheck="true"># 后端如何拿到透明代理的ip，  后端：X-Forwarded-For</span><span class="token comment" spellcheck="true"># respone=requests.get('https://www.baidu.com/',proxies={'http':'27.46.20.226:8888',})</span><span class="token comment" spellcheck="true"># print(respone.text)</span></code></pre><h4 id="10-其他操作"><a href="#10-其他操作" class="headerlink" title="10 其他操作"></a>10 其他操作</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 11 超时设置</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># respone=requests.get('https://www.baidu.com',</span><span class="token comment" spellcheck="true">#                      timeout=0.0001)</span><span class="token comment" spellcheck="true"># 12 认证设置（你见不到了）</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># r=requests.get('xxx',auth=('user','password'))</span><span class="token comment" spellcheck="true"># print(r.status_code)</span><span class="token comment" spellcheck="true"># 13 异常处理</span><span class="token comment" spellcheck="true"># import requests</span><span class="token comment" spellcheck="true"># from requests.exceptions import * #可以查看requests.exceptions获取异常类型</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># try:</span><span class="token comment" spellcheck="true">#     r=requests.get('http://www.baidu.com',timeout=0.00001)</span><span class="token comment" spellcheck="true"># # except ReadTimeout:</span><span class="token comment" spellcheck="true"># #     print('===:')</span><span class="token comment" spellcheck="true"># except Exception as e:</span><span class="token comment" spellcheck="true">#     print(e)</span><span class="token comment" spellcheck="true"># 14 上传文件</span><span class="token comment" spellcheck="true"># res=requests.post('http://127.0.0.1:8000/index/',files={'myfile':open('a.jpg','rb')})</span><span class="token comment" spellcheck="true"># print(res.text)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> python模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题及解决</title>
      <link href="/task/2020/03/15/%E5%85%B6%E4%BB%96/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
      <url>/task/2020/03/15/%E5%85%B6%E4%BB%96/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、同源策略"><a href="#一、同源策略" class="headerlink" title="一、同源策略"></a>一、同源策略</h2><p>同源策略：请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同</p><p>比如:我在本地上的域名是127.0.0.1:8000,请求另外一个域名：127.0.0.1:8001一段数据</p><p>浏览器上就会报错，这就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险</p><h2 id="二、CORS（跨域资源共享）简介"><a href="#二、CORS（跨域资源共享）简介" class="headerlink" title="二、CORS（跨域资源共享）简介"></a>二、CORS（跨域资源共享）简介</h2><p><strong>服务端对某个来源的请求开放请求资源的接口，就是cors</strong></p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p><strong>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><h2 id="三、CORS两种请求详解"><a href="#三、CORS两种请求详解" class="headerlink" title="三、CORS两种请求详解"></a>三、CORS两种请求详解</h2><p>只要同时满足以下两大条件，就属于简单请求，只要其中一个不满足就是非简单请求</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""（1) 请求方法是以下三种方法之一：    HEAD    GET    POST"""</span><span class="token triple-quoted-string string">"""（2）HTTP的头信息不超出以下几种字段：    Accept    Accept-Language    Content-Language    Last-Event-ID    Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain"""</span></code></pre><p><strong>两种请求的区别</strong></p><ul><li>简单请求：一次请求</li><li>非简单请求：两次请求，会在数据请求发送之前，先发送一次‘预检’请求，如果通过了则可以发送真正的请求</li></ul><p><strong>预检</strong></p><pre class=" language-python"><code class="language-python"> <span class="token operator">=</span><span class="token operator">></span> 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过        Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Method <span class="token operator">=</span><span class="token operator">></span> 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过        Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Headers</code></pre><p><strong>支持跨域，简单请求</strong></p><p>服务器设置响应头：Access-Control-Allow-Origin = ‘域名’ 或 ‘*’</p><p><strong>支持跨域，复杂请求</strong></p><p>由于复杂请求时，首先会发送“预检”请求，如果“预检”成功，则发送真实数据。</p><ul><li>“预检”请求时，允许请求方式则需服务器设置响应头：Access-Control-Request-Method</li><li>“预检”请求时，允许请求头则需服务器设置响应头：Access-Control-Request-Headers</li></ul><h2 id="四、django中解决跨域的两种方式"><a href="#四、django中解决跨域的两种方式" class="headerlink" title="四、django中解决跨域的两种方式"></a>四、django中解决跨域的两种方式</h2><h3 id="1-自定义中间件"><a href="#1-自定义中间件" class="headerlink" title="1 自定义中间件"></a>1 自定义中间件</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定制中间件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">class</span> <span class="token class-name">CorsMiddleWare</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">"OPTIONS"</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#可以加*</span>            response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Content-Type"</span>        response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://localhost:8080"</span>        <span class="token keyword">return</span> response</code></pre><h3 id="2-使用django-cors-headers-解决跨域问题"><a href="#2-使用django-cors-headers-解决跨域问题" class="headerlink" title="2 使用django-cors-headers 解决跨域问题"></a>2 使用django-cors-headers 解决跨域问题</h3><ul><li><p>安装：pip install django-cors-headers</p></li><li><p>注册app：’corsheaders’</p></li><li><p>添加中间件：’corsheaders.middleware.CorsMiddleware’,</p></li><li><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 基本配置</span>CORS_ALLOW_CREDENTIALS <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_ALLOW_ALL <span class="token operator">=</span> <span class="token boolean">True</span>CORS_ORIGIN_WHITELIST <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'*'</span><span class="token punctuation">)</span>CORS_ALLOW_METHODS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'DELETE'</span><span class="token punctuation">,</span>    <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token string">'OPTIONS'</span><span class="token punctuation">,</span>    <span class="token string">'PATCH'</span><span class="token punctuation">,</span>    <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token string">'PUT'</span><span class="token punctuation">,</span>    <span class="token string">'VIEW'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>CORS_ALLOW_HEADERS <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>    <span class="token string">'X_FILENAME'</span><span class="token punctuation">,</span>    <span class="token string">'accept-encoding'</span><span class="token punctuation">,</span>    <span class="token string">'authorization'</span><span class="token punctuation">,</span>    <span class="token string">'content-type'</span><span class="token punctuation">,</span>    <span class="token string">'dnt'</span><span class="token punctuation">,</span>    <span class="token string">'origin'</span><span class="token punctuation">,</span>    <span class="token string">'user-agent'</span><span class="token punctuation">,</span>    <span class="token string">'x-csrftoken'</span><span class="token punctuation">,</span>    <span class="token string">'x-requested-with'</span><span class="token punctuation">,</span>    <span class="token string">'Pragma'</span><span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 跨域问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4000字总结python基础</title>
      <link href="/task/2020/03/15/python/%E5%AD%A6%E4%B9%A0/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9Apython%E5%85%A5%E9%97%A8/"/>
      <url>/task/2020/03/15/python/%E5%AD%A6%E4%B9%A0/%E6%A0%B8%E5%BF%83%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9Apython%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="核心知识点：python入门"><a href="#核心知识点：python入门" class="headerlink" title="核心知识点：python入门"></a>核心知识点：python入门</h1><h2 id="一、python入门day1-day24"><a href="#一、python入门day1-day24" class="headerlink" title="一、python入门day1-day24"></a>一、python入门day1-day24</h2><h3 id="day01-03-编程语言"><a href="#day01-03-编程语言" class="headerlink" title="day01-03 编程语言"></a>day01-03 编程语言</h3><p>python是一种强类型的解释型语言</p><h3 id="day04-变量"><a href="#day04-变量" class="headerlink" title="day04 变量"></a>day04 变量</h3><p>变量名不能以数字开头</p><p>小整数池的范围[-5,256]，pycharm里这个范围非常大</p><p>这是为了优化内存的合理安排</p><p>指向相同数字的变量名id相同</p><h3 id="day05-垃圾回收机制（GC机制）"><a href="#day05-垃圾回收机制（GC机制）" class="headerlink" title="day05 垃圾回收机制（GC机制）"></a>day05 垃圾回收机制（GC机制）</h3><p>为了解决没有被引用的数据（垃圾）大量占用内存导致程序崩溃</p><h4 id="1-引用计数"><a href="#1-引用计数" class="headerlink" title="1 引用计数"></a>1 引用计数</h4><p>a = 10 表示10被a引用了1次，a = 20 表示a和10断开链接，a与20相连接20的引用计数为1，10的引用计数为0（垃圾）</p><p>存在的问题：循环引用</p><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'xxx'</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'yyy'</span><span class="token punctuation">]</span>l1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l2<span class="token punctuation">)</span>l2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># l1与l2循环引用了</span><span class="token comment" spellcheck="true"># 此时['xxx']被l1引用了1次，被['yyy']引用了一次，引用计数为2</span><span class="token comment" spellcheck="true"># 此时['yyy']被l1引用了1次，被['xxx']引用了一次，引用计数为2</span><span class="token keyword">del</span> l1<span class="token keyword">del</span> l2<span class="token comment" spellcheck="true"># 按照常规['xxx']['yyy']此时的引用计数为0要被清除，但是由于循环引用的问题，他们俩彼此互相引用导致引用计数失效</span></code></pre><h4 id="2-标记清除"><a href="#2-标记清除" class="headerlink" title="2 标记清除"></a>2 标记清除</h4><p>标记清除是当内存即将被程序占满的时候，把程序停下来，进行标记清除</p><p>标记清除分为两步：</p><ul><li>标记<ul><li>遍历所有的GC Roots对象（<strong>栈区内所有的名字或者线程</strong>），将所有可以被直接或者间接访问到的<strong>堆区对象</strong>标记存活</li></ul></li><li>清除<ul><li>遍历堆区所有对象，没有被标记的就清除。</li></ul></li></ul><p>刚刚循环引用的地方，堆区的两个列表虽然互相引用，但是他们没有被栈区的任何对象直接或者间接访问，所以没有被标记，就被清除了。</p><h4 id="3-分代回收"><a href="#3-分代回收" class="headerlink" title="3 分代回收"></a>3 分代回收</h4><p>分代回收解决了引用计数的第二个问题，效率</p><p>工作原理：根据栈区中名字的使用频率为他们划分代，不同代的名字扫描频率不同。</p><h3 id="day05-程序交互与基本运算符"><a href="#day05-程序交互与基本运算符" class="headerlink" title="day05 程序交互与基本运算符"></a>day05 程序交互与基本运算符</h3><p>/ 除，显示小数点</p><p>// 取整除，不显示小数点</p><p><strong>解压赋值</strong></p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 全部解压</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d <span class="token operator">=</span> num<span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">=</span><span class="token number">1</span> b<span class="token operator">=</span><span class="token number">2</span> c<span class="token operator">=</span><span class="token number">3</span> d<span class="token operator">=</span><span class="token number">4</span><span class="token comment" spellcheck="true"># 部分解压</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">*</span>_<span class="token operator">=</span>num<span class="token operator">>></span><span class="token operator">></span> a<span class="token operator">=</span><span class="token number">1</span> b<span class="token operator">=</span><span class="token number">2</span></code></pre><h3 id="day06-可变不可变类型"><a href="#day06-可变不可变类型" class="headerlink" title="day06 可变不可变类型"></a>day06 可变不可变类型</h3><p>可变类型：列表，字典（key：不可变类型，value：任意类型）</p><p>不可变类型：整形，浮点型，字符串，bool</p><h3 id="day07-流程控制"><a href="#day07-流程控制" class="headerlink" title="day07 流程控制"></a>day07 流程控制</h3><p><strong>深浅拷贝</strong></p><h4 id="1-赋值"><a href="#1-赋值" class="headerlink" title="1 赋值 ="></a>1 赋值 =</h4><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> l1<span class="token comment" spellcheck="true"># 这时候l1 就是l2，id相同，对l1内部的可变类型不可变类型的修改都会影响l2</span></code></pre><h4 id="2-浅拷贝-copy"><a href="#2-浅拷贝-copy" class="headerlink" title="2 浅拷贝 copy"></a>2 浅拷贝 copy</h4><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> l1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把l1内部的第一层内存地址都copy给l2，l1和l2是两个id不同的列表</span><span class="token comment" spellcheck="true"># 内部的可变类型其实是同一个，所以会同时修改</span><span class="token comment" spellcheck="true"># 修改l1内部的不可变类型，l2不会跟着变</span><span class="token comment" spellcheck="true"># 修改l1内部的可变类型，l2也会变</span></code></pre><h4 id="3-深拷贝-deepcopy"><a href="#3-深拷贝-deepcopy" class="headerlink" title="3 深拷贝 deepcopy"></a>3 深拷贝 deepcopy</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> copy l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把l1内部的第一层内存地址都copy给l2，l1和l2是两个id不同的列表</span><span class="token comment" spellcheck="true"># 不同的是，可变类型会在内存中复制一份，所以修改可变类型其实是不同的</span></code></pre><p>这里注意的点就是可变类型的修改和不可变类型修改的区别</p><p>不可变类型直接会断开和原数据的链接，重新链接新数据</p><p>可变类型则是在原数据上进行修改</p><h3 id="day08-10-基本数据类型"><a href="#day08-10-基本数据类型" class="headerlink" title="day08-10 基本数据类型"></a>day08-10 基本数据类型</h3><h4 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1 字符串"></a>1 字符串</h4><ul><li><p>strip 去掉左右两边指定字符，默认空格（扩展：rsrip，lsrip）</p></li><li><p>split 从左到右以指定字符切割，默认空格，可以指定次数，默认全部（扩展rsplit，从右到左以指定字符切割）</p></li><li><p>lower 全大写，upper 全小写</p></li><li><p>srartswith 以什么为开头，endwith 以什么为结尾</p></li><li><pre class=" language-python"><code class="language-python"><span class="token string">','</span>join<span class="token punctuation">(</span><span class="token string">'hz'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 分隔字符串</span><span class="token operator">>></span><span class="token operator">></span> h<span class="token punctuation">,</span>z</code></pre></li><li><p>replace 替换字符</p></li><li><p>isdigit 判断是否纯数字</p></li><li><p>find 查找是否有指定字符有则返回索引，无则返回-1</p></li><li><p>index查找是否有指定字符，有则返回索引，无则报错</p></li><li><p>count 统计赐重复出现的个数</p></li></ul><h4 id="2-列表"><a href="#2-列表" class="headerlink" title="2 列表"></a>2 列表</h4><ul><li><p>append 追加元素</p></li><li><p>extend 追加可迭代对象，会自动把可迭代对象循环添加，列表会循环添加key</p></li><li><p>insert 插入</p></li><li><p>del 常规删除，没有返回值</p><ul><li><pre class=" language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span><span class="token string">'bb'</span><span class="token punctuation">]</span><span class="token keyword">del</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></code></pre></li></ul></li><li><p>pop 索引删除，不写默认删除最后一个，返回值为删除的元素</p></li><li><p>remove 指名道姓删除，返回值为None</p></li><li><p>count 统计指定元素出现次数</p></li><li><p>index 查找指定元素索引</p></li><li><p>clear 清空索引</p></li><li><p>reverse 反转列表</p></li><li><p>sort 排序</p></li></ul><h4 id="3-元组"><a href="#3-元组" class="headerlink" title="3 元组"></a>3 元组</h4><p>看做是不可修改的列表</p><p>注意：元组内必须加逗号，如果一个或者没有元素的时候元组不加逗号会看成数学的括号</p><ul><li>index 查找指定元素索引</li><li>count 统计指定元素出现次数</li></ul><h4 id="4-字典"><a href="#4-字典" class="headerlink" title="4 字典"></a>4 字典</h4><ul><li>get 取值，和索引取的区别是get取不到返回None，索引取不到报错</li><li>pop 删除，返回值为key</li><li>popitem 随机删除，删除的键值对以（key，value）的形式返回</li><li>update 更新，存在则修改，不存在则新增</li><li>setdefault 新增，key不存在则新增，key存在则返回原来的value值</li></ul><p><strong>注意</strong>：</p><p>python3.5之后的字典是有序字典，因为更新之后优化了内部字典的存值方式，把原来的二维数组分成了现在一个一维数组+一个二维数组，但是原本创建一个字典就会创建8个位置，现在是创建一个字典生成一个位置</p><h4 id="5-集合"><a href="#5-集合" class="headerlink" title="5 集合"></a>5 集合</h4><p>可以把可变类型转化成集合在转回来可以去重，但是这种去重是无序的</p><ul><li>关系运算<ul><li>&amp; 交集 共有的</li><li>| 合集 融合去重</li><li>— 差集 某个集合单有的</li><li>^ 对称差集 两个集合单独有的的合集</li><li>＞ 父子集 判断是否包含</li></ul></li><li>discard 删除，存在则删除，不存在不变化</li><li>remove 删除，存在则删除，不存在则报错</li><li>update 更新，括号内放集合，会自动与元集合取合集</li><li>pop 删除指定元素，并返回，不写删除第一个</li><li>add 添加元素，只能添加不可变类型</li></ul><h4 id="6-基本数据类型总结"><a href="#6-基本数据类型总结" class="headerlink" title="6 基本数据类型总结"></a>6 基本数据类型总结</h4><p>不包含集合</p><ul><li>按照存值个数区分<ul><li>只能存一个值：数字，字符串</li><li>可以存多个值：字典，列表，元组</li></ul></li><li>按访问方式区分<ul><li>直接访问：数字</li><li>顺序访问/索引访问：字符串，列表，元组</li><li>key访问：字典</li></ul></li><li>可变不可变区分<ul><li>可变：列表，字典，集合</li><li>不可变：数字，元组，字符串</li></ul></li></ul><h3 id="day10-字符编码"><a href="#day10-字符编码" class="headerlink" title="day10 字符编码"></a>day10 字符编码</h3><h4 id="1-ascii表"><a href="#1-ascii表" class="headerlink" title="1 ascii表"></a>1 ascii表</h4><p>只有英文字符与数字的一一对应关系</p><p>一个英文字符对应一个字节（bytes），一个字节等于8个bit，8个bit最多包含256个数字</p><h4 id="2-GBK（中国），Shift-JIS（日本）等等"><a href="#2-GBK（中国），Shift-JIS（日本）等等" class="headerlink" title="2 GBK（中国），Shift_JIS（日本）等等"></a>2 GBK（中国），Shift_JIS（日本）等等</h4><p>只有对应国家的文字和英文字符与数字的一一对应关系</p><p>2字节代表一个汉字</p><h4 id="3-unicode"><a href="#3-unicode" class="headerlink" title="3 unicode"></a>3 unicode</h4><p>此时只能转换成对应字符编码的二进制，当出现unicode的时候开始统一</p><p>所有存在的文字都有与数字的一一对应关系，而传统的GBK等字符编码也能在unicode内找到对应关系</p><h4 id="4-utf-8"><a href="#4-utf-8" class="headerlink" title="4 utf-8"></a>4 utf-8</h4><p>当我们出现要输入多国语言的时候，unicode就会显得很臃肿</p><p>utf-8会显得更灵活</p><p>utf-8是针对unicode的可变长度字符编码，一个英文字符占一个bytes，一个汉字占3个，生僻字占更多</p><h3 id="day11-12-文件操作"><a href="#day11-12-文件操作" class="headerlink" title="day11-12 文件操作"></a>day11-12 文件操作</h3><p>with 上下文资源管理，会自动帮我们在次级代码结束后关闭文件</p><p>显示模式：t文本模式（默认），b二进制</p><p>操作模式：r只读（默认），w只写，a只追加，+全都能读能写</p><h4 id="1-读相关操作："><a href="#1-读相关操作：" class="headerlink" title="1 读相关操作："></a>1 读相关操作：</h4><ul><li>readline 一次读一行</li><li>readlines 把文件内容按照换行符为分隔返回列表</li><li>read 读取全部内容</li></ul><h4 id="2-写相关操作："><a href="#2-写相关操作：" class="headerlink" title="2 写相关操作："></a>2 写相关操作：</h4><ul><li>write 写入全部内容</li><li>writelines 是readlines的反操作</li></ul><p>flsh 刷新</p><h4 id="3-文件高级操作："><a href="#3-文件高级操作：" class="headerlink" title="3 文件高级操作："></a>3 文件高级操作：</h4><p>f.seek(n，模式) n代表移动的字节数</p><ul><li>0模式，参照物是文件的开头</li><li>1模式，参照物是光标当前所在位置</li><li>2模式，参照物是文件末尾，n为负数倒着移动</li><li>f.tell（）得到当前光标所在位置</li></ul><h3 id="day13-14-函数基础"><a href="#day13-14-函数基础" class="headerlink" title="day13-14 函数基础"></a>day13-14 函数基础</h3><p>函数的返回值如果是多个元素，会自动放在一个元组内</p><h3 id="day15-名称空间和作用域"><a href="#day15-名称空间和作用域" class="headerlink" title="day15 名称空间和作用域"></a>day15 名称空间和作用域</h3><h4 id="1-命名关键字参数："><a href="#1-命名关键字参数：" class="headerlink" title="1 命名关键字参数："></a>1 命名关键字参数：</h4><p>在传参时，*后面的都是命名关键字参数</p><p>特点是必须要以关键字传参方式传</p><h4 id="2-名称空间的存活时间"><a href="#2-名称空间的存活时间" class="headerlink" title="2 名称空间的存活时间"></a>2 名称空间的存活时间</h4><ul><li>内置名称空间，解释器启动则存活，解释器关闭则销毁</li><li>全局名称空间，文件执行则存活，文件关闭则销毁</li><li>局部名称空间，调用函数时存活，调用完毕后销毁</li></ul><h3 id="day16-闭包函数"><a href="#day16-闭包函数" class="headerlink" title="day16 闭包函数"></a>day16 闭包函数</h3><p>定义：是内嵌函数，引用了外部名称空间的名字</p><h3 id="day17-装饰器"><a href="#day17-装饰器" class="headerlink" title="day17 装饰器"></a>day17 装饰器</h3><p>定义：给其他函数添加额外功能的工具</p><p>开放封闭原则：对扩展功能开放，对修改内部代码封闭（多处引用，修改可能会导致错乱）</p><p>无参装饰器只要两层函数，调用装饰器的时候不能加括号</p><p>有参装饰器需要在无参装饰器外面再加一层函数用于接收参数</p><h4 id="修正装饰器："><a href="#修正装饰器：" class="headerlink" title="修正装饰器："></a>修正装饰器：</h4><p>functools模块下提供的一个装饰器，可以让我们在使用装饰器的时候让原函数看起来还和原来一样</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        res<span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        stop_time<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'run time is %s'</span> <span class="token operator">%</span><span class="token punctuation">(</span>stop_time<span class="token operator">-</span>start_time<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">return</span> wrapper</code></pre><p>用print（help（func））来判断是否和原函数一致</p><h3 id="day18-迭代器-生成器"><a href="#day18-迭代器-生成器" class="headerlink" title="day18 迭代器+生成器"></a>day18 迭代器+生成器</h3><h4 id="1-迭代器"><a href="#1-迭代器" class="headerlink" title="1 迭代器"></a>1 迭代器</h4><p>可迭代对象：内置有<code>__iter__</code>方法的对象</p><p>可迭代对象转换成迭代器对象：使用<code>__iter__</code>方法</p><p>迭代器对象：内置有<code>__iter__</code> ，<code>__next__</code>方法的对象</p><p>可迭代对象：列表，字符串，字典，元组，集合，文件对象</p><p>迭代器对象：文件对象</p><p>迭代器的优点：</p><ul><li>为序列和非序列类型提供了一种统一的取值方式</li><li>惰性计算，同一时间只存在一个数据，不会影响内存，其他数据类型存就是整体存</li></ul><p>迭代器的缺点：</p><ul><li>除非取完整个迭代器，不然不知道迭代器长度</li><li>无法控制取值，永远只能取下一个，如果要重新开始只能重新定义一个迭代器对象</li></ul><h4 id="2-生成器"><a href="#2-生成器" class="headerlink" title="2 生成器"></a>2 生成器</h4><p>生成器就是自定义迭代器，有yeild关键字的函数调用不会执行，会返回一个生成器，通过yeild关键字在指定位置挂起函数，通过<code>__next__</code>方法来继续执行函数直到下一次挂起或者return，yeild可以接受参数，也可以和return一样返回参数。</p><h3 id="day19-生成式"><a href="#day19-生成式" class="headerlink" title="day19 生成式"></a>day19 生成式</h3><h4 id="1-三元表达式"><a href="#1-三元表达式" class="headerlink" title="1 三元表达式"></a>1 三元表达式</h4><pre><code>条件成立时运行的代码 if 条件 else 条件不成立时运行的代码</code></pre><h4 id="2-生成式"><a href="#2-生成式" class="headerlink" title="2 生成式"></a>2 生成式</h4><h5 id="2-1-列表生成式"><a href="#2-1-列表生成式" class="headerlink" title="2.1 列表生成式"></a>2.1 列表生成式</h5><pre class=" language-python"><code class="language-python">l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c2"</span><span class="token punctuation">,</span><span class="token string">"adsa"</span><span class="token punctuation">,</span><span class="token string">"z"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#需求：把列表内长度大于1的值添加到新列表new_l中</span>new_l <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> l <span class="token keyword">if</span> len<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h5 id="2-2-字典生成式"><a href="#2-2-字典生成式" class="headerlink" title="2.2 字典生成式"></a>2.2 字典生成式</h5><pre class=" language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"a"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true"># 这个d只要是个可迭代对象即可</span><span class="token comment" spellcheck="true">#生成一个新的字典，key是d中的所有key，value为none</span>new_d <span class="token operator">=</span> <span class="token punctuation">{</span>key<span class="token punctuation">:</span>None <span class="token keyword">for</span> key <span class="token keyword">in</span> d <span class="token punctuation">}</span></code></pre><h5 id="2-3-集合生成式"><a href="#2-3-集合生成式" class="headerlink" title="2.3 集合生成式"></a>2.3 集合生成式</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 生成一个包含数字1-9的集合</span>s <span class="token operator">=</span><span class="token punctuation">{</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="2-4-生成器表达式"><a href="#2-4-生成器表达式" class="headerlink" title="2.4 生成器表达式"></a>2.4 生成器表达式</h5><pre class=" language-python"><code class="language-python">g <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">></span><span class="token number">3</span><span class="token punctuation">)</span></code></pre><h3 id="day20-匿名函数"><a href="#day20-匿名函数" class="headerlink" title="day20 匿名函数"></a>day20 匿名函数</h3><h4 id="1-lambda使用"><a href="#1-lambda使用" class="headerlink" title="1 lambda使用"></a>1 lambda使用</h4><pre><code>lambda 参数1,参数2... : 返回值</code></pre><h4 id="2-lambda与内置函数的应用"><a href="#2-lambda与内置函数的应用" class="headerlink" title="2 lambda与内置函数的应用"></a>2 lambda与内置函数的应用</h4><pre class=" language-python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">:</span><span class="token number">10011</span><span class="token punctuation">,</span><span class="token string">"lxt"</span><span class="token punctuation">:</span><span class="token number">1234</span><span class="token punctuation">,</span><span class="token string">"hzxc"</span><span class="token punctuation">:</span><span class="token number">101</span><span class="token punctuation">}</span>res <span class="token operator">=</span> max<span class="token punctuation">(</span>dict1<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> k<span class="token punctuation">:</span>dict1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><h4 id="3-map"><a href="#3-map" class="headerlink" title="3 map"></a>3 map</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 映射：把一个可迭代对象的每一个值拿出来作为函数的参数运行一次，把得到的值合并起来生成一个迭代器</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>res <span class="token operator">=</span> map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span></code></pre><h4 id="4-reduce"><a href="#4-reduce" class="headerlink" title="4 reduce"></a>4 reduce</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#reduce函数可以接收三个参数，一个是函数，第二个是可迭代对象，第三个是初始值</span><span class="token keyword">from</span> functools <span class="token keyword">import</span>  reducel <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>res <span class="token operator">=</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span class="token punctuation">,</span>l<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">11</span><span class="token comment" spellcheck="true"># 如果有初始值就会把初始值作为第一个参数传入，然后取出可迭代对象的第一个值作为第二个参数传入，得到的返回值作为下一次函数运行时的x，再把可迭代对象的第二个参数传入，一直调用函数直到可迭代对象循环结束</span></code></pre><h4 id="5-filter"><a href="#5-filter" class="headerlink" title="5 filter"></a>5 filter</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#过滤列表l</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>res <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#filter会迭代列表l把得到的值传给匿名函数，如果得到结果为真，则过滤出该元素，得到一个迭代器</span>res <span class="token operator">>></span><span class="token operator">></span> <span class="token number">4</span></code></pre><h3 id="day21模块（略）"><a href="#day21模块（略）" class="headerlink" title="day21模块（略）"></a>day21模块（略）</h3><h3 id="day22-24-常用模块"><a href="#day22-24-常用模块" class="headerlink" title="day22-24 常用模块"></a>day22-24 常用模块</h3><h4 id="1-time模块"><a href="#1-time模块" class="headerlink" title="1 time模块"></a>1 time模块</h4><ul><li>time.time() 时间戳：从1970年到现在的秒数</li><li>time.strftime() 格式化时间</li><li>time.locatime() 结构化时间（共9个元素）</li></ul><p>注意：结构化时间可以和时间戳互相转换，结构化时间也可以和格式化时间互相转换</p><h4 id="2-datetime模块"><a href="#2-datetime模块" class="headerlink" title="2 datetime模块"></a>2 datetime模块</h4><p>datetime.datatime.now()获取当前时间，精确到毫秒，格式化时间</p><h4 id="3-random模块"><a href="#3-random模块" class="headerlink" title="3 random模块"></a>3 random模块</h4><ul><li><p>random.random() 取0到1之间的小数</p></li><li><p>random.randint(1,3) 取大于等于1，小于等于3的整数</p></li><li><p>random.randrange(1,3) 取大于等于1，小于3的整数</p></li><li><p>random.choice([1,2,3,4,5,6]) 列表或元组内部随机取一个元素</p></li><li><p>random.sample([1,2,3,4,5,6]，n) 列表或元组内部随机取n个元素组合成列表</p></li><li><p>random.uniform(1,3) 取大于1小于3的小数</p></li><li><pre class=" language-python"><code class="language-python">l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 把一个列表打乱</span></code></pre></li></ul><h4 id="4-os"><a href="#4-os" class="headerlink" title="4 os"></a>4 os</h4><ul><li>os.path.getsize(‘文件路径’) 计算该文件大小</li><li>os.path.dirname/basename(‘文件路径’) 获得该文件的父级目录/获得该文件的文件名</li><li>os.path.isfile(r’文件路径’) 是否是一个存在的文件，返回布尔值</li><li>os.path.isdir(r’文件路径’) 是否是一个存在的目录，返回布尔值</li><li>os.path.abspath(<code>__file__</code>) 获取当前文件路径</li><li>os.path.dirname(‘文件路径’) 获取当前文件路径的父级路径</li><li>os.mkdir(‘dirname’)    生成单级目录；相当于shell中mkdir dirname</li><li>os.path.exists(‘文件路径’)  如果path存在，返回True；如果path不存在，返回False</li></ul><h4 id="5-sys模块"><a href="#5-sys模块" class="headerlink" title="5 sys模块"></a>5 sys模块</h4><p>sys.path.append(‘文件路径’) 给环境变量列表添加一个路径</p><p>通常用于解决跨文件导包的问题</p><h4 id="6-shutil"><a href="#6-shutil" class="headerlink" title="6 shutil"></a>6 shutil</h4><p>用于拷贝文件</p><ul><li>shutil.copy(文件1，文件2) 拷贝文件和权限</li><li>shutil.copy2(文件1，文件2) 拷贝文件和状态信息</li></ul><h4 id="7-json-amp-pickle"><a href="#7-json-amp-pickle" class="headerlink" title="7 json&amp;pickle"></a>7 json&amp;pickle</h4><ul><li>json.loads(‘数据’) 序列化</li><li>json.dumps(‘数据’) 反序列化</li><li>pickle.loads(‘数据’) 序列化</li><li>pickle.dumps(‘数据’) 反序列化</li></ul><p>两者的区别：json序列化成json数据可以供所有语言反序列化，pickle转化成pickle格式只能供python反序列化</p><h4 id="8-hashlib"><a href="#8-hashlib" class="headerlink" title="8 hashlib"></a>8 hashlib</h4><p>hash算法的模块</p><p>hash值的特点：</p><ul><li>只要传的值一样，用同样的hash算法得到的hash值必定一样<ul><li>可用于传输密码和验证文件的完整性</li></ul></li><li>不能由hash值反解成原来的内容</li><li>只要hash算法不变，无论检验的内容由多大，hash值都是定长</li></ul><p>基本操作：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlibpwd <span class="token operator">=</span> <span class="token number">123456789</span><span class="token comment" spellcheck="true"># 实例化md5对象，可以传任意参数，参数会跟着数据一起加密简称 加盐</span>m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token string">'盐'</span><span class="token punctuation">)</span>m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>pwd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pwd_md5 <span class="token operator">=</span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="9-logging（略）"><a href="#9-logging（略）" class="headerlink" title="9 logging（略）"></a>9 logging（略）</h4><h4 id="10-re（略）"><a href="#10-re（略）" class="headerlink" title="10 re（略）"></a>10 re（略）</h4><p><a href="https://www.cnblogs.com/hz2lxt/p/12614863.html">https://www.cnblogs.com/hz2lxt/p/12614863.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium基本使用</title>
      <link href="/task/2020/03/15/python/%E7%88%AC%E8%99%AB/selenium%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/task/2020/03/15/python/%E7%88%AC%E8%99%AB/selenium%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><ul><li>模块安装：<code>pip install selenium</code></li><li>驱动安装，安装和浏览器适配的驱动exe，放到解释器的script文件夹中（<a href="http://npm.taobao.org/mirrors/chromedriver/%EF%BC%89">http://npm.taobao.org/mirrors/chromedriver/）</a></li></ul><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 案例：打开百度输入搜索海贼王</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">import</span> time<span class="token comment" spellcheck="true"># 得到一个谷歌浏览器驱动对象</span>browser <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 隐式等待：页面中查找标签时等待，如果超出时间还没找到就报错</span>browser<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>input_tag <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kw'</span><span class="token punctuation">)</span>input_tag<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'海贼王'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># input_tag.send_keys(Keys.ENTER)</span>commit_tag <span class="token operator">=</span> browser<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'su'</span><span class="token punctuation">)</span>commit_tag<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>browser<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>所有方法</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># ##############选择器（find系列）</span><span class="token comment" spellcheck="true"># ===============所有方法===================</span><span class="token comment" spellcheck="true"># 1、find_element_by_id   # 通过id查找控件</span><span class="token comment" spellcheck="true"># 2、find_element_by_link_text  # 通过a标签内容找</span><span class="token comment" spellcheck="true"># 3、find_element_by_partial_link_text  # 通过a标签内容找，模糊匹配</span><span class="token comment" spellcheck="true"># 4、find_element_by_tag_name   # 标签名</span><span class="token comment" spellcheck="true"># 5、find_element_by_class_name  # 类名</span><span class="token comment" spellcheck="true"># 6、find_element_by_name      # name属性</span><span class="token comment" spellcheck="true"># 7、find_element_by_css_selector  # 通过css选择器</span><span class="token comment" spellcheck="true"># 8、find_element_by_xpath       # 通过xpaht选择器</span>css选择中<span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::text'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取文本</span><span class="token operator">-</span>response<span class="token punctuation">.</span>css<span class="token punctuation">(</span><span class="token string">'.link-title::attr(href)'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 取标签</span><span class="token comment" spellcheck="true"># 以上全都可以改成find_elements_xxx获取多个</span></code></pre><p><strong>获取属性</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重点</span><span class="token comment" spellcheck="true"># tag.get_attribute('href')  # 找当前控件 的href属性对的值</span><span class="token comment" spellcheck="true"># tag.text   # 获取文本内容</span><span class="token comment" spellcheck="true"># 了解</span><span class="token comment" spellcheck="true"># print(tag.id)   # 当前控件id号</span><span class="token comment" spellcheck="true"># print(tag.location)  # 当前控件在页面位置</span><span class="token comment" spellcheck="true"># print(tag.tag_name)  # 标签名</span><span class="token comment" spellcheck="true"># print(tag.size)      #标签的大小</span></code></pre><p><strong>其他</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">####无界面浏览器（phantomjs）</span><span class="token comment" spellcheck="true">#谷歌浏览器支持不打开页面</span><span class="token comment" spellcheck="true"># from selenium.webdriver.chrome.options import Options</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># chrome_options = Options()</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('window-size=1920x3000') #指定浏览器分辨率</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--disable-gpu') #谷歌文档提到需要加上这个属性来规避bug</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--hide-scrollbars') #隐藏滚动条, 应对一些特殊页面</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('blink-settings=imagesEnabled=false') #不加载图片, 提升速度</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># chrome_options.add_argument('--headless') #浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># bro=webdriver.Chrome(chrome_options=chrome_options,executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># bro.get('https://www.baidu.com/')</span><span class="token comment" spellcheck="true"># print(bro.page_source)</span><span class="token comment" spellcheck="true"># bro.close()</span><span class="token comment" spellcheck="true">######元素交互</span><span class="token comment" spellcheck="true"># tag.send_keys()  # 往里面写内容</span><span class="token comment" spellcheck="true"># tag.click()      # 点击控件</span><span class="token comment" spellcheck="true"># tag.clear()      # 清空控件内容</span><span class="token comment" spellcheck="true">#####执行js(有什么用?)</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># bro=webdriver.Chrome(executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># bro.implicitly_wait(5)  # 隐士等待：找一个控件，如果控件没有加载出来，等待5s中  等待所有，只需要写着一句，以后找所有控件都按这个操作来</span><span class="token comment" spellcheck="true"># bro.get('https://www.baidu.com/')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># bro.execute_script('window.open()')</span><span class="token comment" spellcheck="true"># bro.execute_script('window.open()')</span><span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token comment" spellcheck="true"># bro.close()</span><span class="token comment" spellcheck="true">####模拟浏览器前进后退</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># browser=webdriver.Chrome(executable_path='./chromedriver.exe')</span><span class="token comment" spellcheck="true"># browser.get('https://www.baidu.com')</span><span class="token comment" spellcheck="true"># browser.get('https://www.taobao.com')</span><span class="token comment" spellcheck="true"># browser.get('http://www.sina.com.cn/')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># browser.back()</span><span class="token comment" spellcheck="true"># time.sleep(1)</span><span class="token comment" spellcheck="true"># browser.forward()</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># browser.close()</span><span class="token comment" spellcheck="true">#####获取cookie</span><span class="token comment" spellcheck="true"># bro.get_cookies()</span><span class="token comment" spellcheck="true">#### 选项卡管理(了解)</span><span class="token comment" spellcheck="true"># from selenium import webdriver</span><span class="token comment" spellcheck="true"># import time</span><span class="token comment" spellcheck="true"># browser=webdriver.Chrome()</span><span class="token comment" spellcheck="true"># browser.get('https://www.baidu.com')</span><span class="token comment" spellcheck="true"># browser.execute_script('window.open()')</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># print(browser.window_handles) #获取所有的选项卡</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[1])</span><span class="token comment" spellcheck="true"># browser.get('https://www.taobao.com')</span><span class="token comment" spellcheck="true"># time.sleep(2)</span><span class="token comment" spellcheck="true"># browser.switch_to_window(browser.window_handles[0])</span><span class="token comment" spellcheck="true"># browser.get('https://www.sina.com.cn')</span><span class="token comment" spellcheck="true"># browser.close()</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql搜索变慢的原因</title>
      <link href="/task/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/sql%E6%90%9C%E7%B4%A2%E5%8F%98%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/task/2020/03/15/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/sql%E6%90%9C%E7%B4%A2%E5%8F%98%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<pre class=" language-mysql"><code class="language-mysql">mysql> CREATE TABLE `t_tweet` (  `id` int(11) NOT NULL,  `tweet_id` varchar(32) DEFAULT NULL,  `user_id` int(11) DEFAULT NULL,  `gmt_create` datetime DEFAULT NULL,  PRIMARY KEY (`id`),  KEY `tweet_id` (`tweet_id`),  KEY `gmt_create` (`gmt_create`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;</code></pre><h5 id="1-用函数处理索引"><a href="#1-用函数处理索引" class="headerlink" title="1 用函数处理索引"></a>1 用函数处理索引</h5><p>Q：为什么条件是<code>where gmt_create=&#39;2018-7-1’</code>的时候可以用上索引，而改成<code>where month(gmt_create)=7</code>的时候就不行了？</p><p>A：sql搜索是根据B+树快速定位的，这种能力来源于同一层兄弟节点的有序性。</p><p>简单来说如果是<code>where gmt_create=&#39;2018-7-1’</code>那么根据节点的有序性，我们可以快速知道所要找的叶子节点的路径</p><p>如果是<code>where month(gmt_create)=7</code>，树在第一层就不知道如何判断子节点的走向，就会放弃树搜索功能，走全文遍历。</p><p>总结：对索引字段进行函数操作，会破坏索引的值的有序性</p><p>但并不是直接遍历主键了，优化器会对比两者之间的索引大小，最后还是会决定索引gmt_create</p><p><strong>优化器在某些问题上确实有“偷懒”行为，即使是对于不改变有序性的函数，也不会考虑使用索 引。</strong></p><p>比如，对于<code>select * from t_tweet where id + 1 = 10000</code>这个SQL语句，这个加1操作并不会改变有序性，但是MySQL优化器还是不能用id索引快速定位到9999这一行。所以，需要你在写 SQL语句的时候，手动改写成 <code>where id = 10000 -1</code>才可以。</p><h5 id="2-索引的数据类型需要类型转化"><a href="#2-索引的数据类型需要类型转化" class="headerlink" title="2 索引的数据类型需要类型转化"></a>2 索引的数据类型需要类型转化</h5><pre class=" language-python"><code class="language-python">select <span class="token operator">*</span> <span class="token keyword">from</span> t_tweet where tweet_id<span class="token operator">=</span><span class="token number">110717</span><span class="token punctuation">;</span></code></pre><p>通过上述索引我们会发现还是进行了全表扫描，可以看到我们传入的值是 110717是整形，但是表中字段需要的数据类型是varchar</p><p>这里有两个问题：</p><p>Q1：数据类型转化的规则是什么？</p><p>Q2：为什么有数据类型转换，就会走全表索引？</p><p>问题1的答案是当数字类型和字符类型比较时会把字符类型转化成整形做<strong>整形比较</strong></p><p>可以通过<code>select &#39;10&#39;&gt;9</code>如果返回1，则是转化成整形，如果返回0则是转化成字符串</p><p>所以问题2的答案也油然而生，这个语句写全了</p><pre class=" language-mysql"><code class="language-mysql">select * from t_tweet where CAST(tweet_id AS tweetId int) = 110717;</code></pre><p>本质上还是对字段做了函数操作，导致优化器放弃走树搜索功能</p><p>转自：<a href="https://juejin.im/post/6860513755000733709#heading-1">https://juejin.im/post/6860513755000733709#heading-1</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf内置排序源码</title>
      <link href="/task/2020/02/15/python/%E6%A1%86%E6%9E%B6/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/"/>
      <url>/task/2020/02/15/python/%E6%A1%86%E6%9E%B6/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>如果我们要用排序，那么写的视图类就必须直接或间接继承ListModelMixin，因为其内部有帮我们排序的放方法</p><p>ListModelMixin</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 调用了视图类对象的filter_queryset方法</span>queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>但是我们视图类本身没有，根据orm查找顺序，我们就要看第一位父类</p><p>最后找到GenericAPIView的filter_queryset方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># filter_backends就是我们在视图类中写的drf内置的排序类</span>    <span class="token keyword">for</span> backend <span class="token keyword">in</span> list<span class="token punctuation">(</span>self<span class="token punctuation">.</span>filter_backends<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 实例化排序类对象，并调用它的filter_queryset方法</span>        queryset <span class="token operator">=</span> backend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token keyword">return</span> queryset<span class="token comment" spellcheck="true"># 视图类中我们是这样设置的</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>OrderingFilter<span class="token punctuation">]</span></code></pre><p>OrderingFilter的filter_queryset方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 调用了自己的get_ordering方法返回值应到是原本的queryset对象</span>    ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>get_ordering<span class="token punctuation">(</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span>    <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 下面是得到ordering的方法，返回的结果是('id', 'price')，直接通过这个排序</span>        <span class="token keyword">return</span> queryset<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token operator">*</span>ordering<span class="token punctuation">)</span>    <span class="token keyword">return</span> queryset</code></pre><p>OrderingFilter的get_ordering方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_ordering</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># ordering_param是在drf的配置文件中的字符串：ordering</span>    <span class="token comment" spellcheck="true"># params就是从url后ordering跟的排序字符串</span>    <span class="token comment" spellcheck="true"># params：‘id，name，price’</span>    params <span class="token operator">=</span> request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ordering_param<span class="token punctuation">)</span>    <span class="token keyword">if</span> params<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 通过一个列表生成式得到['id','name','price']</span>        fields <span class="token operator">=</span> <span class="token punctuation">[</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 通过内部remove_invalid_fields去移除fields中和视图类中设置不匹配的</span>        <span class="token comment" spellcheck="true"># 视图类是这样设置的ordering_fields = ('id', 'price')</span>        <span class="token comment" spellcheck="true"># 所以这里name是无效排序，就会通过这个方法移除</span>           ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>remove_invalid_fields<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> view<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>            <span class="token keyword">return</span> ordering</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> python函数 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf☞jwt自动签发与手动签发</title>
      <link href="/task/2020/02/15/python/%E6%A1%86%E6%9E%B6/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/"/>
      <url>/task/2020/02/15/python/%E6%A1%86%E6%9E%B6/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="一、自动签发"><a href="#一、自动签发" class="headerlink" title="一、自动签发"></a>一、自动签发</h2><p><strong>urls</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token<span class="token comment" spellcheck="true"># 使用jwt自带的登录视图</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><strong>settings</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetimeJWT_AUTH<span class="token operator">=</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 配置响应格式，必须和自动签发使用</span>  <span class="token string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span><span class="token punctuation">:</span><span class="token string">'app01.utils.my_jwt_response_payload_handler'</span><span class="token punctuation">,</span>    <span class="token string">'JWT_EXPIRATION_DELTA'</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 过期时间，手动配置</span><span class="token punctuation">}</span></code></pre><p><strong>utils</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 重写jwt响应格式（需要到settings配置）</span><span class="token comment" spellcheck="true"># 与之配合使用的必须是自动签发</span><span class="token keyword">def</span> <span class="token function">my_jwt_response_payload_handler</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token operator">=</span>None<span class="token punctuation">,</span> request<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 返回什么，前端就能看到什么样子</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>        <span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'登录成功'</span><span class="token punctuation">,</span>        <span class="token string">'status'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>        <span class="token string">'username'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>username    <span class="token punctuation">}</span></code></pre><p>然后直接在前端提交post请求发送账号和密码，会返回我们定义好的响应格式</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>    <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6Imh6IiwiZXhwIjoxNTk1NDE1MTEyLCJlbWFpbCI6IiJ9.BxBdsm6oBz8iPAwSSpo_7IaU4pBp6RjK4c0GJ_FYN1E"</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span>    <span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">}</span></code></pre><p>然后拿出token对测试类发送测试请求</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestAPI</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 因为内置的他没有对匿名用户设置拦截，素以匿名用户也能看到ok</span><span class="token comment" spellcheck="true"># 我们用request.user来区分</span><span class="token comment" spellcheck="true"># 这里可能会出现我登录了很多次，用每次不同的token都能登录</span><span class="token comment" spellcheck="true"># 这是因为token校验的是规则，是要加密规则符合且没有超时，那用哪次token都一样的</span></code></pre><h2 id="二、手动签发"><a href="#二、手动签发" class="headerlink" title="二、手动签发"></a>二、手动签发</h2><p><strong>utils</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> BaseJSONWebTokenAuthentication<span class="token punctuation">,</span>jwt_decode_handler<span class="token keyword">import</span> jwt<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> AuthenticationFailed<span class="token keyword">class</span> <span class="token class-name">MyAuthentication</span><span class="token punctuation">(</span>BaseJSONWebTokenAuthentication<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里重写的逻辑和BaseJSONWebTokenAuthentication里的authenticate一模一样</span>    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        jwt_token <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 获取浏览器传来的token</span>        <span class="token keyword">if</span> jwt_token<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                payload <span class="token operator">=</span> jwt_decode_handler<span class="token punctuation">(</span>jwt_token<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 传入token，拿出第二段用户信息,有内置的校验token功能</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>ExpiredSignature<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'签名过期'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>InvalidTokenError<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'用户非法'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 所有异常都会走到这</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span>str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 通过内置的方法把payload转换成用户对象</span>            user <span class="token operator">=</span> self<span class="token punctuation">.</span>authenticate_credentials<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">return</span> user<span class="token punctuation">,</span>None <span class="token comment" spellcheck="true"># ===》request.user,request.auth</span>        <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'您没有携带认证信息'</span><span class="token punctuation">)</span></code></pre><p><strong>sers</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment" spellcheck="true"># 多方序列化校验登录</span><span class="token keyword">import</span> re<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_encode_handler<span class="token punctuation">,</span>jwt_payload_handler<span class="token keyword">class</span> <span class="token class-name">LoginSer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 我们要提交校验数据的时候，如果直接用下面Meta绑定给模型类的话</span>    <span class="token comment" spellcheck="true"># 关键点2：这里如果不写username的话，序列化器直接用的是模型类的username</span>    <span class="token comment" spellcheck="true"># 这两者的区别在于，如果覆盖写了username，他表示的可以是任何前端传来的数据，如果是模型类绑定，那只能是用户名了</span>    <span class="token comment" spellcheck="true"># 我们这里username用于多方登录的校验数据，必须要重写</span>    <span class="token comment" spellcheck="true"># 而password不用重写，因为password用的就是模型类本身的</span>    username <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>User        fields <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> username<span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^1[3-9][0-9]{9}$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>mobile<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^.+@.+$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 邮箱</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>email<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> user<span class="token punctuation">:</span>                <span class="token keyword">if</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment" spellcheck="true"># 关键点3：jwt_payload_handler把用户数据对象转化成用户信息的字典</span>                    <span class="token comment" spellcheck="true"># jwt_encode_handler把用户信息的字典转化成token</span>                    payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># print('user:',user,type(user))</span>                    token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># print('payload:',payload,type(payload))</span>                    <span class="token comment" spellcheck="true"># print('token:',token)</span>                    <span class="token comment" spellcheck="true"># 关键点4：如果我们要给序列化器添加数据，让视图函数去使用</span>                    <span class="token comment" spellcheck="true"># 通常都是传给对象的context属性,当然直接赋值也可以，这只是他给我们提供的传值接口</span>                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> token                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> user                    self<span class="token punctuation">.</span>user <span class="token operator">=</span> user                    <span class="token keyword">return</span> attrs                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'不存在用户'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span></code></pre><p><strong>views</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LoginApi</span><span class="token punctuation">(</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 在调用序列化类给context传数据，可以直接在序列化类中调用</span>        <span class="token comment" spellcheck="true"># 关键点1：注意区分序列化传值与反序列化</span>        <span class="token comment" spellcheck="true"># 这里只要拿字典取校验数据，那就传给data</span>        <span class="token comment" spellcheck="true"># 如果是要把数据对象转化成字典就传给instance</span>        user_ser <span class="token operator">=</span> sers<span class="token punctuation">.</span>LoginSer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'request'</span><span class="token punctuation">:</span> request<span class="token punctuation">}</span><span class="token punctuation">)</span>        user_ser<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>user_ser<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>username<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔法方法</title>
      <link href="/task/2020/01/25/python/%E5%AD%A6%E4%B9%A0/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/task/2020/01/25/python/%E5%AD%A6%E4%B9%A0/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-str"><a href="#一、-str" class="headerlink" title="一、__str__"></a>一、<code>__str__</code></h2><p>改变对象的字符串显示，可以理解为print打印对象的显示</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token comment" spellcheck="true"># 定义对象的字符串表示</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>names1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 会调用s1的__str__方法</span><span class="token operator">>></span><span class="token operator">></span> 张三</code></pre><h2 id="二、-repr"><a href="#二、-repr" class="headerlink" title="二、__repr__"></a>二、<code>__repr__</code></h2><p>在python解释器环境下，会默认显示对象的repr表示。</p><pre class=" language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s1张三</code></pre><p><strong>总结：</strong></p><p>str函数或者print函数调用的是obj.<strong>str</strong>()<br>repr函数或者交互式解释器调用的是obj.<strong>repr</strong>()</p><p>注意：<br>如果__str__没有被定义，那么就会使用__repr__来代替输出。<br>__str__和__repr__方法的返回值都必须是字符串。</p><h2 id="三、-format"><a href="#三、-format" class="headerlink" title="三、__format__"></a>三、<code>__format__</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    __format_dict <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'n-a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：{obj.name}-年龄是：{obj.age}'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 名字是：lqz-年龄是：18</span>        <span class="token string">'n:a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：{obj.name}：年龄是：{obj.age}'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 名字是：lqz：年龄是：18</span>        <span class="token string">'n/a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：{obj.name}/年龄是：{obj.age}'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 名字是：/年龄是：18</span>    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__format__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_spec<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> format_spec <span class="token operator">or</span> format_spec <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">:</span>            format_spec <span class="token operator">=</span> <span class="token string">'n-a'</span>        fmt <span class="token operator">=</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">[</span>format_spec<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#{obj.name}:{obj.age}</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span>format<span class="token punctuation">(</span>obj<span class="token operator">=</span>self<span class="token punctuation">)</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'lqz'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> format<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">'n/a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># lqz/24</span></code></pre><h2 id="四、-del"><a href="#四、-del" class="headerlink" title="四、__del__"></a>四、<code>__del__</code></h2><p>当对象的内存被施放的时候执行</p><p>注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除了...'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;__main__.A object at 0x10164fb00></span><span class="token keyword">del</span> a  <span class="token comment" spellcheck="true"># 删除了...</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># NameError: name 'a' is not defined</span></code></pre><h2 id="五、-dict-和-slots"><a href="#五、-dict-和-slots" class="headerlink" title="五、__dict__和__slots__"></a>五、<code>__dict__和__slots__</code></h2><p>Python中的类，都会从object里继承一个__dict__属性，这个属性中存放着类的属性和方法对应的键值对。一个类实例化之后，这个类的实例也具有这么一个__dict__属性。但是二者并不相同。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    some <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> numa <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {'num': 10}</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># {'num': 10, 'age': 10}</span></code></pre><p>从上面的例子可以看出来，实例只保存实例的属性和方法，类的属性和方法它是不保存的。正是由于类和实例有__dict__属性，所以类和实例可以在运行过程动态添加属性和方法。</p><p>但是由于每实例化一个类都要分配一个__dict__变量，容易浪费内存。因此在Python中有一个内置的__slots__属性。当一个类设置了__slots__属性后，这个类的__dict__属性就不存在了（同理，该类的实例也不存在__dict__属性），如此一来，设置了__slots__属性的类的属性，只能是预先设定好的。</p><p>当你定义__slots__后，__slots__就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的小型数组来构建的，而不是为每个实例都定义一个__dict__字典，在__slots__中列出的属性名在内部被映射到这个数组的特定索引上。使用__slots__带来的副作用是我们没有办法给实例添加任何新的属性了。</p><p>注意：尽管__slots__看起来是个非常有用的特性，但是除非你十分确切的知道要使用它，否则尽量不要使用它。比如定义了__slots__属性的类就不支持多继承。__slots__通常都是作为一种优化工具来使用。–摘自《Python Cookbook》8.4</p><p>注意事项：<br>__slots__的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了__slots__后的类不再 支持一些普通类特性了,比如多继承。大多数情况下,你应该只在那些经常被使用到的用作数据结构的类上定义__slots__，比如在程序中需要创建某个类的几百万个实例对象 。<br>关于__slots__的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用__slots__可以达到这样的目的,但是这个并不是它的初衷。它更多的是用来作为一个内存优化工具。</p><h2 id="六、-item-、-attr-系列"><a href="#六、-item-、-attr-系列" class="headerlink" title="六、__item__、__attr__系列"></a>六、<code>__item__、__attr__系列</code></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj[key]=lqz赋值时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__delitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj[key]时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__delattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj.key时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.key = value的时候执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.get(key)的时候执行我'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">[</span>item<span class="token punctuation">]</span>f1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token string">'sb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>f1<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">'泡妞'</span><span class="token keyword">del</span> f1<span class="token punctuation">.</span>hobby<span class="token keyword">del</span> f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>f1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'lqz'</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span></code></pre><h2 id="七、-init"><a href="#七、-init" class="headerlink" title="七、__init__"></a>七、<code>__init__</code></h2><p>使用Python写面向对象的代码的时候我们都会习惯性写一个 <strong>init</strong> 方法，<strong>init</strong> 方法通常用在初始化一个类实例的时候。例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: {}({})>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></code></pre><p>上面是<strong>init__最普通的用法了。但是__init__其实不是实例化一个类的时候第一个被调用的方法。当使用 Persion(name, age) 来实例化一个类时，最先被调用的方法其实是 __new</strong> 方法。</p><h2 id="八、-new"><a href="#八、-new" class="headerlink" title="八、__new__"></a>八、<code>__new__</code></h2><p>其实__init__是在类实例被创建之后调用的，它完成的是类实例的初始化操作，而 __new__方法正是创建这个类实例的方法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__new__，创建类实例'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Person<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__init__，初始化实例'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: {}({})>'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span></code></pre><p>输出：</p><pre class=" language-python"><code class="language-python">调用__new__，创建类实例调用__init__，初始化实例<span class="token operator">&lt;</span>Person<span class="token punctuation">:</span> 张三<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">></span></code></pre><p>__new__方法在类定义中不是必须写的，如果没定义的话默认会调用object.__new__去创建一个对象（因为创建类的时候默认继承的就是object）。</p><p>如果我们在类中定义了__new__方法，就是重写了默认的__new__方法，我们可以借此自定义创建对象的行为。</p><p>举个例子：</p><p>重写类的__new__方法来实现单例模式。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 重写__new__方法，实现每一次实例化的时候，返回同一个instance对象</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> ages1 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这两实例都一样</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h2 id="九、-call"><a href="#九、-call" class="headerlink" title="九、__call__"></a>九、<code>__call__</code></h2><p><strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象()。拥有此方法的对象可以像函数一样被调用。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用对象的__call__方法'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 类Person可调用</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 对象a可以调用</span></code></pre><p><strong>注意：</strong> </p><p>__new__、__init__、__call__等方法都不是必须写的。</p><h2 id="十、-doc"><a href="#十、-doc" class="headerlink" title="十、__doc__"></a>十、<code>__doc__</code></h2><p>定义类的描述信息（注释）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""我是A类的描述信息"""</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span></code></pre><h2 id="十一、-iter-和-next"><a href="#十一、-iter-和-next" class="headerlink" title="十一、__iter__和__next__"></a>十一、<code>__iter__和__next__</code></h2><p>如果一个对象拥有了__iter__和__next__方法，那这个对象就是迭代器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> stop<span class="token punctuation">:</span>            start<span class="token punctuation">,</span> stop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start        self<span class="token punctuation">.</span>start <span class="token operator">=</span> start        self<span class="token punctuation">.</span>stop <span class="token operator">=</span> stop    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>start <span class="token operator">>=</span> self<span class="token punctuation">.</span>stop<span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration        n <span class="token operator">=</span> self<span class="token punctuation">.</span>start        self<span class="token punctuation">.</span>start <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> na <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterator<span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>a<span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>aaa<span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#抛异常</span></code></pre><h2 id="十二、-enter-和-exit"><a href="#十二、-enter-和-exit" class="headerlink" title="十二、__enter__和__exit__"></a>十二、<code>__enter__和__exit__</code></h2><p>一个对象如果实现了__enter__和___exit__方法，那么这个对象就支持上下文管理协议，即with语句</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块时执行此方法，此方法如果有返回值会赋值给as声明的变量'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'oo'</span>    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'退出with代码块时执行此方法'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> exc_type<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> exc_val<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token keyword">with</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># with语句中代码块出现异常，则with后的代码都无法执行。</span>    <span class="token comment" spellcheck="true"># raise AttributeError('sb')</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#f打印出oo</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'嘿嘿嘿'</span><span class="token punctuation">)</span></code></pre><h2 id="十三、-len"><a href="#十三、-len" class="headerlink" title="十三、__len__"></a>十三、<code>__len__</code></h2><p>拥有__len__方法的对象支持len(obj)操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十四、-hash"><a href="#十四、-hash" class="headerlink" title="十四、__hash__"></a>十四、<code>__hash__</code></h2><p>拥有__hash__方法的对象支持hash(obj)操作。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hash<span class="token punctuation">(</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hash<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="十五、-eq"><a href="#十五、-eq" class="headerlink" title="十五、__eq__"></a>十五、<code>__eq__</code></h2><p>拥有__eq__方法的对象支持相等的比较操作</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 打印出比较的第二个对象的x值</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span>self<span class="token punctuation">.</span>y <span class="token operator">==</span> obj<span class="token punctuation">.</span>x<span class="token operator">+</span>obj<span class="token punctuation">.</span>y<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>b <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
            <tag> python面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go基础语法</title>
      <link href="/task/2020/01/10/go/%E5%9F%BA%E7%A1%80/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/task/2020/01/10/go/%E5%9F%BA%E7%A1%80/Go%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1-包管理"><a href="#1-包管理" class="headerlink" title="1 包管理"></a>1 包管理</h3><h4 id="1-1-自定义包的规则"><a href="#1-1-自定义包的规则" class="headerlink" title="1.1 自定义包的规则"></a>1.1 自定义包的规则</h4><ul><li>go语言代码必须放在gopath的stc路径下</li><li>包导入是从gopath的src路径下开始检索</li><li>除了mian包，其他包名建议都叫所在文件夹名</li><li>同一个包下，变量，函数只能定义一次</li><li>同一个包下变量函数可以直接使用</li><li><strong>包内的函数和变量，想让外部包使用，必须首字母大写</strong></li></ul><p><strong>扩展</strong></p><p>包内的特殊函数 init</p><ul><li>不需要调用就会执行，可以设置多个</li></ul><p>go语言没有一个统一的包管理的地址，都放在github上</p><h4 id="1-2-包导入的几种方式"><a href="#1-2-包导入的几种方式" class="headerlink" title="1.2 包导入的几种方式"></a>1.2 包导入的几种方式</h4><pre class=" language-go"><code class="language-go"><span class="token operator">-</span><span class="token keyword">import</span> <span class="token string">"day02/mypackage"</span>    <span class="token operator">-</span>给包重命名        <span class="token operator">-</span><span class="token keyword">import</span> 名字 <span class="token string">"day02/mypackage"</span>        名字<span class="token punctuation">.</span>变量<span class="token operator">/</span>函数    <span class="token operator">-</span>包只导入，不使用    <span class="token keyword">import</span> <span class="token boolean">_</span> <span class="token string">"day02/mypackage"</span></code></pre><h4 id="1-3-go-mode模式"><a href="#1-3-go-mode模式" class="headerlink" title="1.3 go mode模式"></a>1.3 go mode模式</h4><pre class=" language-go"><code class="language-go"><span class="token operator">-</span>两种创建方式    <span class="token number">1</span>        <span class="token operator">-</span>命令行下输入：<span class="token keyword">go</span> mod init 项目名   在当前路径下创建出<span class="token keyword">go</span><span class="token punctuation">.</span><span class="token function">mod</span><span class="token punctuation">(</span>该项目依赖<span class="token keyword">go</span>的版本，第三方包版本<span class="token punctuation">)</span>        <span class="token operator">-</span>项目路径的cmd窗口，<span class="token keyword">go</span> get 第三方包，就会在<span class="token keyword">go</span><span class="token punctuation">.</span>mod中加入依赖        <span class="token operator">-</span>以后把项目<span class="token builtin">copy</span>给别人，<span class="token keyword">go</span> install        <span class="token operator">-</span>自己写的包，就放在自己项目路径下        <span class="token operator">-</span>加代理的方式：手动写，goland中配置    <span class="token number">2</span>       <span class="token operator">-</span>在goland中创建项目时，直接指定modules，可以配置环境变量（加代理）代理设置：GOPROXY<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>goproxy<span class="token punctuation">.</span>cn<span class="token punctuation">,</span>direct下载一个包测试一下：<span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>astaxie<span class="token operator">/</span>beego下载完成后会自动在mod文件内写入依赖</code></pre><h3 id="2-if-else"><a href="#2-if-else" class="headerlink" title="2 if-else"></a>2 if-else</h3><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">14</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">changeAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> age<span class="token operator">>=</span><span class="token number">15</span><span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"gt15"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> age<span class="token operator">&lt;=</span><span class="token number">14</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"lte15"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"都不是"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">changeAge</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">}</span></code></pre><h3 id="3-循环"><a href="#3-循环" class="headerlink" title="3 循环"></a>3 循环</h3><p>只有一种循环for</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 基本循环</span><span class="token comment" spellcheck="true">//for i:=0;i&lt;10;i++{</span><span class="token comment" spellcheck="true">//    fmt.Println(i)</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">// 省略中间</span><span class="token comment" spellcheck="true">//for i:=0;;i++{</span><span class="token comment" spellcheck="true">//    fmt.Println(i)</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">// 省略头</span><span class="token comment" spellcheck="true">//i:=0</span><span class="token comment" spellcheck="true">//for ;;i++{</span><span class="token comment" spellcheck="true">//    fmt.Println(i)</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">// 省略头和尾 （while）</span><span class="token comment" spellcheck="true">//i:=2</span><span class="token comment" spellcheck="true">//for i>1{</span><span class="token comment" spellcheck="true">//    fmt.Println(i)</span><span class="token comment" spellcheck="true">//    i++</span><span class="token comment" spellcheck="true">//}</span></code></pre><h3 id="4-switch"><a href="#4-switch" class="headerlink" title="4 switch"></a>4 switch</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 基本使用</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">15</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> age <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">15</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"15"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">16</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"16"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 默认值，只要上面没有匹配就会走这个</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 多条件表达式</span><span class="token keyword">switch</span> age <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">:</span>           fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 无表达式的 switch</span>num<span class="token operator">:=</span><span class="token number">12</span>num2<span class="token operator">:=</span><span class="token number">55</span><span class="token keyword">switch</span>  <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 条件关系为or</span>    <span class="token keyword">case</span> num<span class="token operator">+</span>num2<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">,</span>num<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> num<span class="token operator">+</span>num2<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">,</span>num2<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Fallthrough</span>age<span class="token operator">:=</span><span class="token number">11</span><span class="token keyword">switch</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> age<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">fallthrough</span>    <span class="token keyword">case</span> age<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">fallthrough</span> <span class="token comment" spellcheck="true">// 只要存在fallthrough就会无条件执行下一条</span>    <span class="token keyword">case</span> age<span class="token operator">==</span><span class="token number">12</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h3><p>数组：数组是同一类元素的集合，可以放多个值，但是类型必须一致，在内存中连续存储</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 1 定义数组</span><span class="token keyword">var</span> name  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">--</span> 一个长度为<span class="token number">3</span>的空数组<span class="token comment" spellcheck="true">// 2 给数组中的元素赋值</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hz"</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hz"</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hz"</span><span class="token comment" spellcheck="true">// 3 定义并初始化</span><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token string">"lxt"</span><span class="token punctuation">,</span><span class="token string">"fl"</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 可以写全也可以空几个或者全空</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4 数组特殊初始化</span><span class="token comment" spellcheck="true">// 数组的长度根据{}给的长度决定</span>name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"1"</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 5 数组是值传递</span><span class="token comment" spellcheck="true">// 所以在go中数组作为参数传给函数，就是copy了一个新的数组在函数中操作</span><span class="token comment" spellcheck="true">// 值传递不会影响原值</span>name <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token function">change</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span> 两次都是<span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">func</span> <span class="token function">change</span><span class="token punctuation">(</span>name <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 6 数组长度</span>name <span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3,数组的长度在数组定义的时候就决定好了</span><span class="token comment" spellcheck="true">// 7 数组循环</span><span class="token comment" spellcheck="true">// 普通循环</span>name<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// range循环</span>name<span class="token operator">:=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token keyword">range</span> name<span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印的是索引</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 补充</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>value<span class="token operator">:=</span><span class="token keyword">range</span> a<span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//把数组循环打印出来</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>value<span class="token operator">:=</span><span class="token keyword">range</span> a<span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 8 多维数组</span><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">55</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 多维数组循环</span><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">55</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">66</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token operator">:=</span> <span class="token keyword">range</span> name<span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 索引</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 每个数组</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>num <span class="token operator">:=</span><span class="token keyword">range</span> y<span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 数组中的元素</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 9 数组初始化の指定位置初始化</span><span class="token keyword">var</span> name <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></code></pre><h3 id="6-切片"><a href="#6-切片" class="headerlink" title="6 切片"></a>6 切片</h3><p>切片是由数组建立的一种方便，灵活，有强大包装能力的类型</p><p>切片本身不拥有任何数据类型，它只是对数组的引用</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 切片的定义方式</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%T"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 查看b的类型 []int</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// [0,1,2,3,4,5,6,7,8,9]</span><span class="token comment" spellcheck="true">// 修改切片，数组会跟着变</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 修改数组，切片会跟着变</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">99</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 只切数组的一部分的情况</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 切片顾头不顾尾 [2,3,4]</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [12,3,4]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [0,1,12,3,4,5,6,7,8,9] 根据切的地方修改</span><span class="token comment" spellcheck="true">// 多个切片切了同一块数组的值改变情况</span><span class="token comment" spellcheck="true">// 这里可以深刻理解切片只是数组的一段引用</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">var</span> c <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> c<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [12,3,4]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [0,1,12,3,4,5,6,7,8,9]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [12,3,4,5]</span><span class="token comment" spellcheck="true">// 查看切片的长度和容量</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//8 理解：从索引为2的位置到数组的最后就是8</span><span class="token comment" spellcheck="true">// 切片追加</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 追加b后，会修改原数组中对应的位置的值</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 长度增加了，最后一个位置为100</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 追加超出切片容量</span><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>b<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span> b<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 此时切片的追加索引已经超出了数组的最大索引，所以不会改</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 9</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">cap</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 16 在原来的基础上翻了一倍</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言基础</title>
      <link href="/task/2020/01/09/go/%E5%9F%BA%E7%A1%80/GO%E5%85%A5%E9%97%A8/"/>
      <url>/task/2020/01/09/go/%E5%9F%BA%E7%A1%80/GO%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、语言介绍"><a href="#一、语言介绍" class="headerlink" title="一、语言介绍"></a>一、语言介绍</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h4><p>Go 即Golang，是Google公司2009年11月正式对外公开的一门编程语言。</p><p>Go是静态强类型语言，是区别于解析型语言的编译型语言(静态：类型固定 强类型：不同类型不允许直接运算)。</p><h4 id="2-特性"><a href="#2-特性" class="headerlink" title="2 特性"></a>2 特性</h4><p>跨平台的编译型语言</p><p>语法接近C语言</p><p>管道（channel），切片（slice），并发（routine）</p><p>有垃圾回收的机制</p><p>支持面向对象（但是go中没有类的概念）和面向过程的编程模式</p><h4 id="3-版本"><a href="#3-版本" class="headerlink" title="3 版本"></a>3 版本</h4><ul><li>2009年11月7日 weekly.2009-11-06 —— 早期的版本</li><li>2018年8月24日 go1.11 —— modules和WebAssembly支持。</li><li>2020 年 8 月 go 1.15</li></ul><h4 id="4-下载"><a href="#4-下载" class="headerlink" title="4 下载"></a>4 下载</h4><p>开发环境搭建：<a href="https://golang.google.cn/dl/%E3%80%82">https://golang.google.cn/dl/。</a></p><p>一路下一步，默认会添加到环境变量</p><p>cmd窗口输入<code>go version</code>判断是否安装完成</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 常用命令</span><span class="token keyword">go</span> env <span class="token comment" spellcheck="true">// go的环境变量</span><span class="token keyword">go</span> build <span class="token comment" spellcheck="true">// 编译成可执行文件</span><span class="token keyword">go</span> run <span class="token comment" spellcheck="true">// 编译并执行</span></code></pre><p>ide下载：<a href="https://www.jetbrains.com/go/download/#section=mac">https://www.jetbrains.com/go/download/#section=mac</a></p><p>一路下一步，试用30天，再打开一个窗口把jar包拖入，重启软件后输入验证码即可永久试用</p><p>创建项目后会默认把go的所有项目都放到用户家目录下的go文件夹下，要运行的项目<strong>必须</strong>在这里，不然无法执行</p><h4 id="5-hello-world"><a href="#5-hello-world" class="headerlink" title="5 hello world"></a>5 hello world</h4><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 编译型语言的特性，必须有一个入口，一个运行程序只能有一个入口main</span><span class="token keyword">package</span> main<span class="token comment" spellcheck="true">// 打印函数在fmt包下</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello word"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 自带换行和python的一样</span><span class="token punctuation">}</span></code></pre><h3 id="二、变量"><a href="#二、变量" class="headerlink" title="二、变量"></a>二、变量</h3><p>注意点：</p><ul><li>变量定义了就必须使用，否则报错</li><li>变量类型在定义阶段就决定了，无法改变</li><li>变量推荐用驼峰体，文件名推荐用下划线分隔</li></ul><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 变量的三种定义方式</span><span class="token comment" spellcheck="true">// 1 全定义</span><span class="token comment" spellcheck="true">// var 变量名 类型 = 值</span><span class="token comment" spellcheck="true">//var a int = 123</span><span class="token comment" spellcheck="true">//fmt.Println(a)</span><span class="token comment" spellcheck="true">// 2 类型推导式</span><span class="token comment" spellcheck="true">// 和上面的区别就是不用写类型</span><span class="token comment" spellcheck="true">//var a = 123</span><span class="token comment" spellcheck="true">//fmt.Println(a)</span><span class="token comment" spellcheck="true">// 3 简略型</span><span class="token comment" spellcheck="true">// 变量名 := 值</span>a <span class="token operator">:=</span> <span class="token number">123</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4 声明多个变量</span>a<span class="token punctuation">,</span>b<span class="token operator">:=</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token comment" spellcheck="true">// 5 按默认值定义</span><span class="token keyword">var</span> age <span class="token builtin">int</span> <span class="token comment" spellcheck="true">// int类型默认值为0，string默认值为空字符串</span><span class="token comment" spellcheck="true">// 坑</span><span class="token comment" spellcheck="true">// 原来在go中，变量不能重复定义，但是在多个同时赋值时，左边只要有一个是未定义的，就可以这样使用</span>a<span class="token operator">:=</span><span class="token number">123</span>a<span class="token punctuation">,</span>b<span class="token operator">:=</span><span class="token number">789</span><span class="token punctuation">,</span><span class="token number">444</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span></code></pre><h3 id="三、类型"><a href="#三、类型" class="headerlink" title="三、类型"></a>三、类型</h3><pre class=" language-go"><code class="language-go">基础数据类型        数字：            有符号整形                <span class="token operator">-</span><span class="token builtin">int</span>：在<span class="token number">32</span>位机器是<span class="token builtin">int32</span>，在<span class="token number">64</span>位机器是<span class="token builtin">int64</span>                <span class="token operator">-</span><span class="token builtin">int8</span>：表示整数范围是：<span class="token number">8</span>个比特位，<span class="token number">8</span>个bit是1byte ，负数和<span class="token number">0</span>， <span class="token number">2</span>的<span class="token number">7</span>次方<span class="token operator">-</span><span class="token number">1</span> 的范围                <span class="token operator">-</span><span class="token builtin">int16</span> <span class="token number">2</span>的<span class="token number">15</span>次方减一                <span class="token operator">-</span><span class="token builtin">int32</span>                <span class="token operator">-</span><span class="token builtin">int64</span>            无符号整型                <span class="token operator">-</span><span class="token builtin">uint8</span>   <span class="token number">2</span>的<span class="token number">8</span>次方减一  定义一个人的年龄                <span class="token operator">-</span><span class="token builtin">uint16</span>                <span class="token operator">-</span><span class="token builtin">uint32</span>                <span class="token operator">-</span><span class="token builtin">uint64</span>            浮点型（小数），表示小数点后长度多少位                <span class="token operator">-</span><span class="token builtin">float32</span>                <span class="token operator">-</span><span class="token builtin">float64</span>            复数                <span class="token operator">-</span><span class="token builtin">complex64</span>                <span class="token operator">-</span><span class="token builtin">complex128</span>            <span class="token builtin">byte</span>：是<span class="token builtin">int8</span>的别名  单引号包裹            <span class="token builtin">rune</span>：是<span class="token builtin">int32</span>的别名  单引号包裹        字符串            双引号包裹            反引号包裹  <span class="token string">` `</span> 可以换行        布尔            <span class="token builtin">bool</span> <span class="token boolean">true</span> 和 <span class="token boolean">false</span>        数据类型默认值：            数字类型是<span class="token number">0</span>            字符串类型是 空字符串            布尔类型   <span class="token boolean">false</span></code></pre><h3 id="四、常量"><a href="#四、常量" class="headerlink" title="四、常量"></a>四、常量</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 只有两种定义方式，且不能修改</span><span class="token comment" spellcheck="true">// 1 </span><span class="token keyword">const</span> 常量名 常量类型 <span class="token operator">=</span> 常量值<span class="token comment" spellcheck="true">// 2</span><span class="token keyword">const</span> 常量名 <span class="token operator">=</span> 常量值<span class="token comment" spellcheck="true">// 3 扩展</span><span class="token keyword">const</span> name<span class="token punctuation">,</span>age <span class="token operator">=</span> <span class="token string">"hz"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    name <span class="token operator">=</span> <span class="token string">"hz"</span>    age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>    s1 <span class="token operator">=</span><span class="token boolean">iota</span> <span class="token comment" spellcheck="true">// 从0自增  0</span>    s2 <span class="token operator">=</span><span class="token boolean">iota</span> <span class="token comment" spellcheck="true">// 1</span>    s3  <span class="token comment" spellcheck="true">// 2</span>    s4 <span class="token operator">=</span><span class="token number">99</span>    s5 <span class="token operator">=</span><span class="token boolean">iota</span> <span class="token comment" spellcheck="true">// 4</span><span class="token punctuation">)</span></code></pre><h3 id="五、函数"><a href="#五、函数" class="headerlink" title="五、函数"></a>五、函数</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 有参，有返回值函数的调用与定义</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">,</span>s <span class="token operator">:=</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 多个同类型参数可以省略类型，如果有返回值就必须定义时书写返回值类型，而且写了就必须一一对应返回</span><span class="token keyword">func</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"加法"</span><span class="token punctuation">,</span>a<span class="token operator">+</span>b<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 匿名函数</span><span class="token comment" spellcheck="true">// 在go中函数是一等公民，可以把函数的内存地址传给变量</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"我是匿名函数"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 要遵循变量被定义就必须使用的原则</span>    <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数的参数是函数，函数的返回值也是函数</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    add <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b    <span class="token punctuation">}</span>    newAdd <span class="token operator">:=</span> <span class="token function">niuBiDeFunc</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>    msg <span class="token operator">:=</span> <span class="token function">newAdd</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">,</span><span class="token string">"帅"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">niuBiDeFunc</span><span class="token punctuation">(</span>add <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span>  <span class="token punctuation">{</span>    msg <span class="token operator">:=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"我是"</span><span class="token punctuation">,</span><span class="token string">"hz"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token keyword">return</span> add<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 闭包函数 1 定义在函数内部 2 对外部作用域有引用</span><span class="token keyword">func</span> <span class="token function">test</span><span class="token punctuation">(</span>age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    a<span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">}</span></code></pre><h3 id="六、变量作用域和范围"><a href="#六、变量作用域和范围" class="headerlink" title="六、变量作用域和范围"></a>六、变量作用域和范围</h3><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 定义在全局的变量</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 拿到的是全局的，改的也是全局的</span>    age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    age <span class="token operator">=</span> <span class="token number">20</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义在全局和局部的变量</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在main函数名称空间内用的是自己的age</span>    age <span class="token operator">:=</span> <span class="token number">0</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    age <span class="token operator">=</span> <span class="token number">19</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    age <span class="token operator">=</span> <span class="token number">20</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="补充自己发现的小点"><a href="#补充自己发现的小点" class="headerlink" title="补充自己发现的小点"></a>补充自己发现的小点</h5><p>go语言在最外层同级别下只能存在关键字</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment" spellcheck="true">// 报错</span>hz <span class="token operator">:=</span> <span class="token number">123</span><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker高级</title>
      <link href="/task/2019/09/18/%E5%85%B6%E4%BB%96/Docker%E9%AB%98%E7%BA%A7/"/>
      <url>/task/2019/09/18/%E5%85%B6%E4%BB%96/Docker%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、部署应用映射外部目录"><a href="#一、部署应用映射外部目录" class="headerlink" title="一、部署应用映射外部目录"></a>一、部署应用映射外部目录</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 部署redis，把配置文件和数据目录映射出来</span><span class="token comment" spellcheck="true"># 操作步骤</span>    <span class="token comment" spellcheck="true"># 创建需要被映射的目录</span>    <span class="token operator">-</span><span class="token number">1</span> mkdir <span class="token operator">/</span>redis<span class="token operator">/</span>conf <span class="token operator">/</span>redis<span class="token operator">/</span>data    <span class="token operator">-</span><span class="token number">2</span> vim <span class="token operator">/</span>redis<span class="token operator">/</span>conf<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf        <span class="token comment" spellcheck="true"># 配置文件</span>        bind <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span>        daemonize NO        protected<span class="token operator">-</span>mode no        requirepass <span class="token number">123456</span>      <span class="token operator">-</span><span class="token number">3</span> 创建并运行容器    docker run <span class="token operator">-</span>p <span class="token number">6378</span><span class="token punctuation">:</span><span class="token number">6379</span> <span class="token operator">-</span><span class="token operator">-</span>name redis_6379 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>hzdir<span class="token operator">/</span>redis<span class="token operator">/</span>conf<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>hzdir<span class="token operator">/</span>redis<span class="token operator">/</span>data<span class="token punctuation">:</span><span class="token operator">/</span>data <span class="token operator">-</span>di redis redis<span class="token operator">-</span>server <span class="token operator">/</span>etc<span class="token operator">/</span>redis<span class="token operator">/</span>redis<span class="token punctuation">.</span>conf    <span class="token operator">-</span><span class="token number">4</span> 本地window机器上远程连接到了docker里的redis    <span class="token operator">-</span><span class="token number">5</span> cmd窗口下        redis<span class="token operator">-</span>cli <span class="token operator">-</span>h <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span> <span class="token operator">-</span>p <span class="token number">6378</span>    <span class="token operator">-</span><span class="token number">6</span> 认证        auth <span class="token number">123456</span>    <span class="token operator">-</span><span class="token number">7</span> 写入数据        set name lqz    <span class="token operator">-</span><span class="token number">8</span> 保存数据        save或者是bgsave    <span class="token operator">-</span><span class="token number">9</span> 在宿主机的<span class="token operator">/</span>redis<span class="token operator">/</span>data路径下就能看到一个文件    <span class="token operator">-</span><span class="token number">10</span> 不管多少次重启redis容器，数据都还在    <span class="token operator">-</span><span class="token number">11</span> 原来的redis容器没了，按照第三步再启动一遍，数据都还在</code></pre><h2 id="二、迁移与备份"><a href="#二、迁移与备份" class="headerlink" title="二、迁移与备份"></a>二、迁移与备份</h2><h3 id="2-1-容器保存为镜像"><a href="#2-1-容器保存为镜像" class="headerlink" title="2.1 容器保存为镜像"></a>2.1 容器保存为镜像</h3><pre class=" language-python"><code class="language-python">docker commit 容器名字 镜像名字docker commit <span class="token number">19b</span> mydjangopip install django<span class="token operator">==</span><span class="token number">1.11</span><span class="token punctuation">.</span><span class="token number">11</span> <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>douban<span class="token punctuation">.</span>com<span class="token operator">/</span>simple<span class="token operator">/</span></code></pre><h3 id="2-2-把镜像打包成压缩包"><a href="#2-2-把镜像打包成压缩包" class="headerlink" title="2.2 把镜像打包成压缩包"></a>2.2 把镜像打包成压缩包</h3><pre class=" language-python"><code class="language-python">docker save <span class="token operator">-</span>o mydjango<span class="token punctuation">.</span>tar mydjango</code></pre><h3 id="2-3-把压缩包回复为镜像"><a href="#2-3-把压缩包回复为镜像" class="headerlink" title="2.3 把压缩包回复为镜像"></a>2.3 把压缩包回复为镜像</h3><pre class=" language-python"><code class="language-python">docker load <span class="token operator">-</span>i mydjango<span class="token punctuation">.</span>tar</code></pre><h2 id="三、dockerfile"><a href="#三、dockerfile" class="headerlink" title="三、dockerfile"></a>三、dockerfile</h2><p>通过dockerfile启动多个容器运行django项目通过nginx进行负载均衡</p><p>顺序：</p><ol><li>写一个django项目，写好导入的依赖文件，写好dockerfile镜像配置</li><li>通过dockerfile创建镜像</li><li>运行镜像生成容器，目录映射Django项目（此时已经可以访问）</li><li>通过nginx转发http请求做负载均衡</li></ol><pre class=" language-python"><code class="language-python"><span class="token number">1</span> dockerfile是什么    一个文件，里面一堆指令，通过这个文件可以生成镜像<span class="token number">2</span> dockerfile指令    命令                      作用    FROM image_name<span class="token punctuation">:</span>tag    定义了使用哪个基础镜像启动构建流程    MAINTAINER user_name    声明镜像的创建者    ENV key value    设置环境变量 <span class="token punctuation">(</span>可以写多条<span class="token punctuation">)</span>    RUN command    是Dockerfile的核心部分<span class="token punctuation">(</span>可以写多条<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># add 和 copy后面跟的本机路径都必须是相对路径，而且必须是在dockerfile同级下的</span>    ADD source_dir<span class="token operator">/</span>file dest_dir<span class="token operator">/</span>file    将宿主机的文件复制到容器内，如果是一个压缩文件，将会在复制后自动解压    COPY source_dir<span class="token operator">/</span>file dest_dir<span class="token operator">/</span>file    和ADD相似，但是如果有压缩文件并不能解压    WORKDIR path_dir    设置工作目录<span class="token number">3</span> 写一个dockerfile（文件名字必须交dockerfile）vim dockerfileFROM hzpythonMAINTAINER hzEXPOSE <span class="token number">8080</span>ADD <span class="token punctuation">.</span><span class="token operator">/</span>requirement<span class="token punctuation">.</span>txt <span class="token operator">/</span>home<span class="token operator">/</span>RUN pip install <span class="token operator">-</span>r <span class="token operator">/</span>home<span class="token operator">/</span>requirement<span class="token punctuation">.</span>txt <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>douban<span class="token punctuation">.</span>com<span class="token operator">/</span>simple<span class="token operator">/</span> RUN pip install uwsgi <span class="token operator">-</span>i https<span class="token punctuation">:</span><span class="token operator">//</span>pypi<span class="token punctuation">.</span>douban<span class="token punctuation">.</span>com<span class="token operator">/</span>simple<span class="token operator">/</span>VOLUME <span class="token punctuation">[</span><span class="token string">"/home"</span><span class="token punctuation">]</span>WORKDIR <span class="token operator">/</span>home<span class="token operator">/</span>django_testCMD <span class="token punctuation">[</span><span class="token string">"uwsgi"</span><span class="token punctuation">,</span> <span class="token string">"--ini"</span><span class="token punctuation">,</span> <span class="token string">"/home/django_test/uwsgi.ini"</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 或者</span>CMD <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"/home/text/manage.py"</span><span class="token punctuation">,</span> <span class="token string">"runserver"</span><span class="token punctuation">,</span><span class="token string">"0.0.0.0:8080"</span><span class="token punctuation">]</span> <span class="token number">4</span> 通过dockerfile构建出镜像    docker build <span class="token operator">-</span>t<span class="token operator">=</span><span class="token string">'django_1.11.11'</span> <span class="token punctuation">.</span><span class="token number">5</span> 查看镜像    docker images <span class="token number">6</span> 启动容器docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mydjango2 <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>lqz<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>home <span class="token operator">-</span>p <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">8080</span> django_1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token number">7</span> 在外部访问即可<span class="token number">8</span> 配置nginx转发<span class="token comment" spellcheck="true"># 创建文件件</span>mkdir <span class="token operator">-</span>p <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>conf <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>html <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>logs<span class="token comment" spellcheck="true"># 新建配置文件</span>vim nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span class="token comment" spellcheck="true"># 写入</span>worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>events <span class="token punctuation">{</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    upstream node    <span class="token punctuation">{</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8082</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    server <span class="token punctuation">{</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  localhost<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">#proxy_pass http://101.133.225.166:8080;</span>          <span class="token comment" spellcheck="true">#负载均衡配置</span>          proxy_pass http<span class="token punctuation">:</span><span class="token operator">//</span>node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># docker 中运行nginx</span>docker run <span class="token operator">-</span><span class="token operator">-</span>name nginx <span class="token operator">-</span>id <span class="token operator">-</span>p <span class="token number">8888</span><span class="token punctuation">:</span><span class="token number">80</span> <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>conf<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>nginx<span class="token punctuation">.</span>conf <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>html<span class="token punctuation">:</span><span class="token operator">/</span>etc<span class="token operator">/</span>nginx<span class="token operator">/</span>html <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>nginx<span class="token operator">/</span>logs<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>log<span class="token operator">/</span>nginx nginx<span class="token number">9</span> 配置负载均衡<span class="token comment" spellcheck="true"># 修改nginx配置文件</span>worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>events <span class="token punctuation">{</span>    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span>http <span class="token punctuation">{</span>    include       mime<span class="token punctuation">.</span>types<span class="token punctuation">;</span>    default_type  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    sendfile        on<span class="token punctuation">;</span>    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>    upstream node    <span class="token punctuation">{</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8080</span><span class="token punctuation">;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8081</span><span class="token punctuation">;</span>        server    <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">8082</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    server <span class="token punctuation">{</span>        listen       <span class="token number">80</span><span class="token punctuation">;</span>        server_name  localhost<span class="token punctuation">;</span>        location <span class="token operator">/</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">#proxy_pass http://101.133.225.166:8080;</span>          <span class="token comment" spellcheck="true">#负载均衡配置</span>          proxy_pass http<span class="token punctuation">:</span><span class="token operator">//</span>node<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 多启动几个docker容器</span>docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mydjango3 <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>lqz<span class="token operator">/</span>django_test2<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>django_test<span class="token operator">/</span> <span class="token operator">-</span>p <span class="token number">8081</span><span class="token punctuation">:</span><span class="token number">8080</span> django_1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span>docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mydjango3 <span class="token operator">-</span>v <span class="token operator">/</span>opt<span class="token operator">/</span>lqz<span class="token operator">/</span>django_test2<span class="token operator">/</span><span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>django_test<span class="token operator">/</span> <span class="token operator">-</span>p <span class="token number">8082</span><span class="token punctuation">:</span><span class="token number">8080</span> django_1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token comment" spellcheck="true"># 重启nginx</span><span class="token comment" spellcheck="true"># 假设8081的容器挂了，8080的容器挂了，正常提供服务，</span><span class="token comment" spellcheck="true"># 再把docker容器启动起来即可</span></code></pre><h2 id="四、配置私有仓库"><a href="#四、配置私有仓库" class="headerlink" title="四、配置私有仓库"></a>四、配置私有仓库</h2><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 拉取私有仓库镜像    docker pull registry<span class="token number">2</span> 启动容器    docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>registry <span class="token operator">-</span>p <span class="token number">5000</span><span class="token punctuation">:</span><span class="token number">5000</span> registry<span class="token number">3</span> 打开浏览器 输入地址http<span class="token punctuation">:</span><span class="token operator">//</span><span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span>v2<span class="token operator">/</span>_catalog看到<span class="token punctuation">{</span><span class="token string">"repositories"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span> 表示私有仓库搭建成功并且内容为空<span class="token number">4</span> 配置    修改daemon<span class="token punctuation">.</span>json    vi <span class="token operator">/</span>etc<span class="token operator">/</span>docker<span class="token operator">/</span>daemon<span class="token punctuation">.</span>json    添加以下内容，保存退出。    <span class="token punctuation">{</span><span class="token string">"insecure-registries"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">"101.133.225.166:5000"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>     此步用于让 docker信任私有仓库地址<span class="token number">5</span> 重启docker 服务    systemctl restart docker<span class="token number">6</span> 重启容器    docker start registry<span class="token number">7</span> 打标签    docker tag <span class="token number">5452fa6715c0</span> <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span>django1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token number">8</span> 上传到私有仓库docker push <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span>django1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token number">9</span> 从私有仓库拉取镜像docker pull <span class="token number">101.133</span><span class="token punctuation">.</span><span class="token number">225.166</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token operator">/</span>django1<span class="token number">.11</span><span class="token punctuation">.</span><span class="token number">11</span></code></pre><h2 id="五、docker-compose"><a href="#五、docker-compose" class="headerlink" title="五、docker-compose"></a>五、docker-compose</h2><pre class=" language-python"><code class="language-python"><span class="token number">1</span> docker<span class="token operator">-</span>compose是一个单机情况下容器编排的工具<span class="token number">2</span> 通过yml文件定义多个容器<span class="token number">3</span> 默认名字docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>yml<span class="token number">4</span> 三个概念，Service  Networks ，Volumes    一个service代表一个container，这个container可以从docker hub的image来创建，或者从本地dockerfile build的image来创建<span class="token number">5</span> version：有<span class="token number">1</span>，<span class="token number">2</span>，<span class="token number">3</span>版本，目前都用<span class="token string">"3"</span><span class="token number">6</span> 安装curl <span class="token operator">-</span>L https<span class="token punctuation">:</span><span class="token operator">//</span>get<span class="token punctuation">.</span>daocloud<span class="token punctuation">.</span>io<span class="token operator">/</span>docker<span class="token operator">/</span>compose<span class="token operator">/</span>releases<span class="token operator">/</span>download<span class="token operator">/</span><span class="token number">1.25</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token operator">-</span>`uname <span class="token operator">-</span>s`<span class="token operator">-</span>`uname <span class="token operator">-</span>m` <span class="token operator">></span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>docker<span class="token operator">-</span>composechmod <span class="token operator">+</span>x <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>docker<span class="token operator">-</span>compose<span class="token number">7</span> 验证安装成功    docker<span class="token operator">-</span>compose <span class="token operator">-</span>v</code></pre><p><strong>应用部署</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 部署flask redis</span><span class="token number">1</span> 创建Dockerfilevim DockerfileFROM python<span class="token punctuation">:</span><span class="token number">3.6</span>COPY <span class="token punctuation">.</span> <span class="token operator">/</span>appWORKDIR <span class="token operator">/</span>appRUN pip install flask redisEXPOSE <span class="token number">5000</span>CMD <span class="token punctuation">[</span> <span class="token string">"python"</span><span class="token punctuation">,</span> <span class="token string">"app.py"</span> <span class="token punctuation">]</span><span class="token number">2</span> 创建docker<span class="token operator">-</span>compose文件vim docker<span class="token operator">-</span>compose<span class="token punctuation">.</span>ymlversion<span class="token punctuation">:</span> <span class="token string">"3"</span>services<span class="token punctuation">:</span>  redis<span class="token punctuation">:</span>    image<span class="token punctuation">:</span> redis  web<span class="token punctuation">:</span>    build<span class="token punctuation">:</span>      context<span class="token punctuation">:</span> <span class="token punctuation">.</span>      dockerfile<span class="token punctuation">:</span> Dockerfile    ports<span class="token punctuation">:</span>      <span class="token operator">-</span> <span class="token number">8080</span><span class="token punctuation">:</span><span class="token number">5000</span>    environment<span class="token punctuation">:</span>      REDIS_HOST<span class="token punctuation">:</span> redis<span class="token number">3</span> 创建app<span class="token punctuation">.</span>pyvim app<span class="token punctuation">.</span>py<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> redis <span class="token keyword">import</span> Redis<span class="token keyword">import</span> os<span class="token keyword">import</span> socketapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>redis <span class="token operator">=</span> Redis<span class="token punctuation">(</span>host<span class="token operator">=</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'REDIS_HOST'</span><span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    redis<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'hits'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'你好! 查看 %s 次， hostname 是 %s.\n'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>redis<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'hits'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token number">4</span> 启动<span class="token operator">-</span><span class="token operator">-</span>运行docker<span class="token operator">-</span>compose up</code></pre><h2 id="六、多个容器通信"><a href="#六、多个容器通信" class="headerlink" title="六、多个容器通信"></a>六、多个容器通信</h2><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 端口映射到宿主机，直接访问宿主机<span class="token number">2</span> 通过ip地址访问<span class="token number">3</span> run的时候指定 <span class="token operator">-</span><span class="token operator">-</span>link 容器 docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>centos1 centos<span class="token punctuation">:</span>centos7docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>centos2 <span class="token operator">-</span><span class="token operator">-</span>link centos1 centos<span class="token punctuation">:</span>centos7进入到centos2中 ping centos1 可以ping同<span class="token comment" spellcheck="true"># 跨主机的容器通信</span>    <span class="token operator">-</span>端口映射</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用操作</title>
      <link href="/task/2019/08/15/%E5%85%B6%E4%BB%96/Docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/task/2019/08/15/%E5%85%B6%E4%BB%96/Docker%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Docker出现的原因"><a href="#一、Docker出现的原因" class="headerlink" title="一、Docker出现的原因"></a>一、Docker出现的原因</h2><h3 id="1-方便"><a href="#1-方便" class="headerlink" title="1 方便"></a>1 方便</h3><p>在Docker出现之前，要做一个项目需要有 <strong>开发环境</strong> 和 <strong>上线环境</strong>，不同环境之间的配置也不一样，导致开发和运维去上线一个项目就需要一定的成本</p><p>比如说我们需要跑的django项目+环境（mysql,redis,es）这是必不可少的</p><p>但是Docker可以把项目和环境放到一起，也就是环境不再需要重新搭建，在Docker上就可以很快实现</p><h3 id="2-小"><a href="#2-小" class="headerlink" title="2 小"></a>2 小</h3><p>在这之前虚拟化技术的的应用最起码需要一个vm软件+系统镜像，这两个东西不仅非常占用内存，还占用硬盘，普通一个系统镜像就需要十几个g</p><p>而docker是为了实用而生的用的是容器化技术，所以再Docker容器中不会有那么全的整体系统，而是装载了我们需要的环境，不同的Docker镜像只有十几m</p><p><strong>总结docker和虚拟技术的不同</strong></p><ul><li>传统虚拟机，需要虚拟出一套完整的硬件，运行一个完整的操作系统，上面运行软件</li><li>容器化技术，容器内部没有内核只有依赖包和软件，直接运行在宿主机上，容器之间也是相互隔离保证软件的安全，所以快的一批，且安全</li></ul><h3 id="3-Docker在DevOps上的体现"><a href="#3-Docker在DevOps上的体现" class="headerlink" title="3 Docker在DevOps上的体现"></a>3 Docker在DevOps上的体现</h3><blockquote><p>DevOps（开发、运维）</p></blockquote><p><strong>应用更快速的交付和部署</strong></p><ul><li>传统：一堆帮助文档，安装程序</li><li>Docker：打包镜像发布测试，一键上线</li></ul><p><strong>更快捷的升级和扩缩容</strong></p><ul><li>传统：升级运行环境需要一个一个升级，比如redis升级，mysql升级</li><li>Docker：环境是打包好的，可以整体升级</li></ul><p>扩展，做负载均衡</p><ul><li>传统：就是重新在一个服务器上部署一套运行环境</li><li>Docker：直接运行镜像即可</li></ul><p><strong>更简单的系统运维</strong></p><p>开发测试环境高度一致</p><p><strong>更高效的计算机利用资源</strong></p><p>Docker是内核级别的虚拟化，可以在一个物理机上运行很多个容器实例</p><h3 id="4-补充"><a href="#4-补充" class="headerlink" title="4 补充"></a>4 补充</h3><pre><code>0 各种软件用什么语言写的    zabbix（监控软件）：php    ansible（批量管理主机，执行命令,无angent）：python    openstack（云计算，管理虚拟机）：python    jekins（ci/di）：自动化部署，java    salstack(批量管理主机，执行命令，有angent):python    普罗米修斯（Prometheus，监控）：go写的    docker：go    k8s：go1 虚拟化技术有两类很核心的软件，一种是在硬件上虚拟出不同的操作系统，一种是管理这些操作系统    - vmware，kvm，docker 虚拟化操作系统（前两者虚拟的更加真实）    - openstach，k8s，阿里飞天 管理不同的虚拟化出来的操作系统    - k8s主要是管理量比较大的容器    - 虚拟化的核心：打破实体结构间不可分割的障碍2 Docker是一个客户端-服务器（C/S）架构程序（mysql，redis都是cs架构），整套RESTful API</code></pre><h2 id="二、Docker安装"><a href="#二、Docker安装" class="headerlink" title="二、Docker安装"></a>二、Docker安装</h2><h3 id="1-Docker基本组成"><a href="#1-Docker基本组成" class="headerlink" title="1 Docker基本组成"></a>1 Docker基本组成</h3><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/image-20200828114857826.png" alt="image-20200828114857826" loading="lazy"></p><p><strong>镜像（image）：</strong></p><p>是一个模版，用这个模块去创建容器对象，镜像和容器就想是类和对象的关系一样</p><p>镜像可以实例化出多个容器对象</p><p><strong>容器（container）：</strong></p><p>利用容器技术可以运行一个或一组应用，有启动，停止，删除等基本命令</p><p>这个容器可以理解为一个简易的linux系统</p><p><strong>仓库（repository）：</strong></p><p>就是存放镜像的地方</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1 卸载旧版本</span>yum remove docker \                  docker<span class="token operator">-</span>client \                  docker<span class="token operator">-</span>client<span class="token operator">-</span>latest \                  docker<span class="token operator">-</span>common \                  docker<span class="token operator">-</span>latest \                  docker<span class="token operator">-</span>latest<span class="token operator">-</span>logrotate \                  docker<span class="token operator">-</span>logrotate \                  docker<span class="token operator">-</span>engine<span class="token comment" spellcheck="true"># 2 需要的安装包</span>yum install <span class="token operator">-</span>y yum<span class="token operator">-</span>utils<span class="token comment" spellcheck="true"># 3 设置镜像仓库，默认是国外的</span>yum<span class="token operator">-</span>config<span class="token operator">-</span>manager \    <span class="token operator">-</span><span class="token operator">-</span>add<span class="token operator">-</span>repo \    https<span class="token punctuation">:</span><span class="token operator">//</span>download<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repoyum<span class="token operator">-</span>config<span class="token operator">-</span>manager \    <span class="token operator">-</span><span class="token operator">-</span>add<span class="token operator">-</span>repo \    http<span class="token punctuation">:</span><span class="token operator">//</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo<span class="token comment" spellcheck="true"># 更新yum软件包索引</span>yum makecache fast<span class="token comment" spellcheck="true"># 4 安装docker ce社区，ee企业</span>yum install docker<span class="token operator">-</span>ce docker<span class="token operator">-</span>ce<span class="token operator">-</span>cli containerd<span class="token punctuation">.</span>io<span class="token comment" spellcheck="true"># 5 检查版本</span>docker version<span class="token comment" spellcheck="true"># 6 启动第一个镜像hello-word</span>docker run hello<span class="token operator">-</span>word <span class="token comment" spellcheck="true"># 本地肯定是没有的，所以是去远程仓库拉下来的镜像</span><span class="token comment" spellcheck="true"># 7 启动docker服务</span>systemctl start docker<span class="token comment" spellcheck="true"># 8 停止docker服务，重启docker服务</span>systemctl stop dockersystemctl restart docker<span class="token comment" spellcheck="true"># 9 开机启动    </span>systemctl enable docker<span class="token comment" spellcheck="true"># 10 查看概要信息</span>docker info</code></pre><h3 id="3-远程仓库"><a href="#3-远程仓库" class="headerlink" title="3 远程仓库"></a>3 远程仓库</h3><p>如果感觉拉去镜像非常慢的话，可以配置一下备份镜像</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注册，登录 https://hub.docker.com/</span><span class="token comment" spellcheck="true"># 你可以上传镜像（类似于github），你把你制作的镜像传上去，别人可以下载使用</span><span class="token comment" spellcheck="true"># 配置加速（之前去https://hub.docker.com/），阿里云，清华，做了一个备份，配置好以后，再拉镜像会去国内地址拉取</span>第一步：vi <span class="token operator">/</span>etc<span class="token operator">/</span>docker<span class="token operator">/</span>daemon<span class="token punctuation">.</span>json  第二步：<span class="token punctuation">{</span><span class="token string">"registry-mirrors"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"https://docker.mirrors.ustc.edu.cn"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="三、Docker基本操作"><a href="#三、Docker基本操作" class="headerlink" title="三、Docker基本操作"></a>三、Docker基本操作</h2><h3 id="1-镜像操作"><a href="#1-镜像操作" class="headerlink" title="1 镜像操作"></a>1 镜像操作</h3><pre class=" language-python"><code class="language-python"><span class="token number">0</span> 查找镜像    方式一：https<span class="token punctuation">:</span><span class="token operator">//</span>hub<span class="token punctuation">.</span>docker<span class="token punctuation">.</span>com<span class="token operator">/</span> 点点点搜索（你用这种）    方式二：docker search <span class="token number">1</span> 拉取镜像     docker pull hello<span class="token operator">-</span>world  最新版本latest    docker pull hello<span class="token operator">-</span>world<span class="token punctuation">:</span>nanoserver<span class="token number">2</span> 查看机器上有哪些镜像     docker images    REPOSITORY  TAG   IMAGE ID   CREATED   SIZE    镜像名字      版本   id号       创建时间   大小<span class="token number">3</span> 删除镜像    docker rmi 镜像名字<span class="token operator">/</span>id号（<span class="token comment" spellcheck="true"># 如果还有基于这个镜像的容器，是不允许删除镜像的，先删除容器，再删除images）</span><span class="token number">4</span> 练习：拉取python3<span class="token number">.6</span>镜像，redis最新镜像，mysql5<span class="token number">.7</span>镜像    docker pull python<span class="token punctuation">:</span><span class="token number">3.6</span>    docker pull redis    docker pull mysql5<span class="token number">.7</span>    docker pull centos<span class="token punctuation">:</span>centos7<span class="token number">5</span> 镜像是什么？    <span class="token operator">-</span>就是一堆文件，这堆文件通过docker跑起来，就是容器，你现在就把他当成，一个操作系统内跑了这个软件（centos<span class="token operator">+</span>redis）    <span class="token operator">-</span>假设centos7的镜像跑起来，容器你就当成在你宿主机上跑了一个centos7的操作系统（虚拟机） <span class="token number">6</span> 补充（了解）    docker image inspect <span class="token number">46ff56815c7c</span>    docker image ls    docker image rm</code></pre><h3 id="2-容器操作"><a href="#2-容器操作" class="headerlink" title="2 容器操作"></a>2 容器操作</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> 删除容器 docker rm 容器名字<span class="token operator">/</span>容器id<span class="token number">2</span> 启动并运行容器    <span class="token comment" spellcheck="true"># 通过centos:centos7镜像，创建一个容器名字叫mycentos，并且把它运行起来</span>    docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mycentos centos<span class="token punctuation">:</span>centos7    打印出容器的id号<span class="token number">3</span> 查看机器上正在运行的容器    docker ps<span class="token number">4</span> 查看宿主机上所有的容器（包括停止的）    docker ps <span class="token operator">-</span>a<span class="token number">5</span> 停止容器    docker stop 容器名字<span class="token operator">/</span>id号<span class="token number">6</span> 启动容器    docker start 容器id<span class="token operator">/</span>名字<span class="token number">7</span> 容器的创建和启动（<span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>）    <span class="token operator">-</span>创建：docker create <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>xxx 镜像名：镜像版本 启动命令（默认启动bash，如果不是执行会夯住的命令，就会直接结束这个容器）    docker create <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>test<span class="token operator">-</span>container centos<span class="token punctuation">:</span>centos7 ps <span class="token operator">-</span>A    <span class="token operator">-</span>启动    docker start test<span class="token operator">-</span>container    <span class="token operator">-</span>容器一直运行的原因        <span class="token operator">-</span>它有一条前台进程<span class="token punctuation">,</span>一直在运行        <span class="token operator">-</span>以后如果自己制作的镜像，运行起容器，必须有个可以夯住的命令        <span class="token operator">-</span>如果该命令结束，该容器也就结束了    <span class="token operator">-</span>创建并启动（run）    <span class="token operator">-</span>i：表示运行容器    <span class="token operator">-</span>t：表示容器启动后会进入其命令行。    <span class="token operator">-</span>d：在run后面加上<span class="token operator">-</span>d参数<span class="token punctuation">,</span>则会创建一个守护式容器在后台运行（这样创建容器后不会自动登录容器，如果只加<span class="token operator">-</span>i <span class="token operator">-</span>t两个参数，创建后就会自动进去容器）。    <span class="token operator">-</span><span class="token operator">-</span>name <span class="token punctuation">:</span>为创建的容器命名。如果不写，会自动分配一个名字（英文人名）    <span class="token operator">-</span>v：表示目录映射关系（前者是宿主机目录，后者是容器目录，映射到宿主机上的目录），可以使用多个－v做多个目录或文件映射。注意：最好做目录映射，在宿主机上做修改，然后共享到容器上。    <span class="token operator">-</span>p：表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个<span class="token operator">-</span>p做多个端口映射    <span class="token operator">-</span>e：指定环境变量添加到容器的环境变量         <span class="token operator">-</span>e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token number">123456</span> 把mysql的密码设置成容器的环境变量    docker run <span class="token operator">-</span>it <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>myredis redis <span class="token comment" spellcheck="true"># 注意，docker run  镜像 如果本地没有，会先pull，再run</span><span class="token number">8</span> 进入容器的几种方式（并不是真进入）    第一种：docker <span class="token keyword">exec</span> <span class="token operator">-</span>it  容器id <span class="token operator">/</span>bin<span class="token operator">/</span>bash        docker <span class="token keyword">exec</span> 容器id ls         <span class="token keyword">exec</span>真正的作用是在容器内执行命令    第二种：ssh连接（容器内部装ssh服务端）<span class="token number">9</span> 退出    exit<span class="token number">10</span> 文件拷贝    <span class="token operator">-</span>从宿主机拷贝到容器内部        docker cp lqz<span class="token punctuation">.</span>txt 容器id<span class="token punctuation">:</span><span class="token operator">/</span>home    <span class="token operator">-</span>从容器内部拷贝到宿主机        docker cp 容器id<span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>lqz<span class="token punctuation">.</span>txt <span class="token operator">/</span>app<span class="token number">11</span> 目录挂载        docker run <span class="token operator">-</span>di <span class="token operator">-</span><span class="token operator">-</span>name<span class="token operator">=</span>mycentos99 <span class="token operator">-</span>v <span class="token operator">/</span>home<span class="token operator">/</span>lqz<span class="token punctuation">:</span><span class="token operator">/</span>home centos<span class="token punctuation">:</span>centos7    <span class="token comment" spellcheck="true"># 一旦挂载，以后宿主机目录内修改，同样影响容器内部</span><span class="token number">12</span> 端口映射    docker run <span class="token operator">-</span>di <span class="token operator">-</span>p <span class="token number">6377</span><span class="token punctuation">:</span><span class="token number">6379</span> redis<span class="token punctuation">:</span>latest    <span class="token comment" spellcheck="true"># 了解：/usr/local/bin/docker-entrypoint.sh</span><span class="token number">13</span> 查看容器详细信息    docker inspect f81    <span class="token comment" spellcheck="true"># 查看ip地址</span>    docker inspect <span class="token operator">-</span><span class="token operator">-</span>format<span class="token operator">=</span><span class="token string">'{{.NetworkSettings.IPAddress}}'</span> 容器名称（容器ID）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 容器化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python一些实用的小工具</title>
      <link href="/task/2019/07/25/python/%E6%A8%A1%E5%9D%97/python%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/task/2019/07/25/python/%E6%A8%A1%E5%9D%97/python%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="一、发送邮件"><a href="#一、发送邮件" class="headerlink" title="一、发送邮件"></a>一、发送邮件</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Headermsg_from <span class="token operator">=</span> <span class="token string">'572478035@qq.com'</span>  <span class="token comment" spellcheck="true"># 发送方邮箱</span>passwd <span class="token operator">=</span> <span class="token string">'ffaoofjltdfmbcic'</span>  <span class="token comment" spellcheck="true"># 填入发送方邮箱的授权码(填入自己的授权码，相当于邮箱密码)</span>msg_to <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'798818871@qq.com'</span><span class="token punctuation">,</span><span class="token string">'904925371@qq.com'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 收件人邮箱</span><span class="token comment" spellcheck="true"># msg_to = '616564099@qq.com'  # 收件人邮箱</span>subject <span class="token operator">=</span> <span class="token string">"邮件接口测试"</span>  <span class="token comment" spellcheck="true"># 主题</span>content <span class="token operator">=</span> <span class="token string">"邮件内容，我是邮件内容，哈哈哈"</span><span class="token comment" spellcheck="true"># 生成一个MIMEText对象（还有一些其它参数）</span>msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 放入邮件主题</span>msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject<span class="token comment" spellcheck="true"># 也可以这样传参</span><span class="token comment" spellcheck="true"># msg['Subject'] = Header(subject, 'utf-8')</span><span class="token comment" spellcheck="true"># 放入发件人</span>msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> msg_from<span class="token comment" spellcheck="true"># 放入收件人</span><span class="token comment" spellcheck="true"># msg['To'] = '616564099@qq.com'</span><span class="token comment" spellcheck="true"># msg['To'] = '发给你的邮件啊'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 通过ssl方式发送，服务器地址，端口</span>    s <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span><span class="token string">"smtp.qq.com"</span><span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 登录到邮箱</span>    s<span class="token punctuation">.</span>login<span class="token punctuation">(</span>msg_from<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 发送邮件：发送方，收件方，要发送的消息</span>    s<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>msg_from<span class="token punctuation">,</span> msg_to<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成功'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="二、生成二维码"><a href="#二、生成二维码" class="headerlink" title="二、生成二维码"></a>二、生成二维码</h2><h3 id="1-生成普通二维码"><a href="#1-生成普通二维码" class="headerlink" title="1 生成普通二维码"></a>1 生成普通二维码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> MyQR <span class="token keyword">import</span> myqr  <span class="token comment" spellcheck="true">#注意大小写</span>myqr<span class="token punctuation">.</span>run<span class="token punctuation">(</span>words<span class="token operator">=</span><span class="token string">"网址链接或者字符串，不支持中文"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 会在当前路径生成一个“qrcode.png”文件，扫描二维码就会跳转到指定路径</span></code></pre><h3 id="2-生成带图片的二维码"><a href="#2-生成带图片的二维码" class="headerlink" title="2 生成带图片的二维码"></a>2 生成带图片的二维码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> MyQR <span class="token keyword">import</span> myqrmyqr<span class="token punctuation">.</span>run<span class="token punctuation">(</span>    words<span class="token operator">=</span><span class="token string">'Why can Li Xiaotong be so beautiful'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true"># 扫描二维码后，显示的内容，或是跳转的链接</span>    version<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 设置容错率</span>    level<span class="token operator">=</span><span class="token string">'H'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 控制纠错水平，范围是L、M、Q、H，从左到右依次升高</span>    picture<span class="token operator">=</span><span class="token string">'a.jpg'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 图片所在目录，可以是动图</span>    colorized<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 黑白(False)还是彩色(True)</span>    contrast<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 用以调节图片的对比度，1.0 表示原始图片。默认为1.0。</span>    brightness<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 用来调节图片的亮度，用法同上。</span>    save_name<span class="token operator">=</span><span class="token string">'二维码.png'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 控制输出文件名，格式可以是 .jpg， .png ，.bmp ，.gif</span><span class="token punctuation">)</span></code></pre><h3 id="3-支持汉字生成二维码"><a href="#3-支持汉字生成二维码" class="headerlink" title="3 支持汉字生成二维码"></a>3 支持汉字生成二维码</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> qrcodeqr <span class="token operator">=</span> qrcode<span class="token punctuation">.</span>QRCode<span class="token punctuation">(</span>version<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>                          error_correction<span class="token operator">=</span>qrcode<span class="token punctuation">.</span>constants<span class="token punctuation">.</span>ERROR_CORRECT_L<span class="token punctuation">,</span>                          box_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>                          border<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>                          <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 添加数据</span>qr<span class="token punctuation">.</span>add_data<span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成二维码</span>qr<span class="token punctuation">.</span>make<span class="token punctuation">(</span>fit<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>img <span class="token operator">=</span> qr<span class="token punctuation">.</span>make_image<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># image.save(r"C:\Desktop\s.png")</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API规范</title>
      <link href="/task/2019/05/15/%E5%85%B6%E4%BB%96/RESTful%20API%E8%A7%84%E8%8C%83/"/>
      <url>/task/2019/05/15/%E5%85%B6%E4%BB%96/RESTful%20API%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<p>这是一种web api接口的设计风格，比较适用于前后端分离的项目，它的特点就是一切数据都是资源。</p><p>与编程语言无关，任何一个框架都可以使用这种规范。</p><h2 id="一、数据的安全保障"><a href="#一、数据的安全保障" class="headerlink" title="一、数据的安全保障"></a>一、数据的安全保障</h2><p>url链接一般采用https进行传输，相比于http更加安全</p><h2 id="二、接口特征表现"><a href="#二、接口特征表现" class="headerlink" title="二、接口特征表现"></a>二、接口特征表现</h2><p>用api关键字表示接口url：</p><ul><li><a href="https://api.baidu.com/">https://api.baidu.com</a></li><li><a href="https://www.baidu.com/api">https://www.baidu.com/api</a></li></ul><h2 id="三、多数据版本共存"><a href="#三、多数据版本共存" class="headerlink" title="三、多数据版本共存"></a>三、多数据版本共存</h2><p>在url链接中标识数据版本</p><ul><li><a href="https://api.baidu.com/v1">https://api.baidu.com/v1</a></li><li><a href="https://api.baidu.com/v2">https://api.baidu.com/v2</a></li></ul><p>v1，v2就相当于我们不同版本对应同样请求的接口</p><h2 id="四、数据即资源，均使用名词（可复数）"><a href="#四、数据即资源，均使用名词（可复数）" class="headerlink" title="四、数据即资源，均使用名词（可复数）"></a>四、数据即资源，均使用名词（可复数）</h2><ul><li><p>接口一般都是完成前后台数据的交互，交互的数据我们称之为资源</p><ul><li><a href="https://api.baidu.com/users">https://api.baidu.com/users</a></li><li><a href="https://api.baidu.com/books">https://api.baidu.com/books</a></li><li><a href="https://api.baidu.com/book">https://api.baidu.com/book</a></li></ul><p>注：一般提倡用资源的复数形式，在url链接中奖励不要出现操作资源的动词，错误示范：<a href="https://api.baidu.com/delete-user">https://api.baidu.com/delete-user</a></p></li><li><p>特殊的接口可以出现动词，因为这些接口一般没有一个明确的资源，或是动词就是接口的核心含义</p><ul><li><a href="https://api.baidu.com/place/search">https://api.baidu.com/place/search</a></li><li><a href="https://api.baidu.com/login">https://api.baidu.com/login</a></li></ul></li></ul><h2 id="五、资源操作由请求方式决定"><a href="#五、资源操作由请求方式决定" class="headerlink" title="五、资源操作由请求方式决定"></a>五、资源操作由请求方式决定</h2><p>操作资源一般都会涉及到增删改查，我们提供请求方式来标识增删改查动作</p><ul><li><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - get请求：获取所有书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - get请求：获取主键为1的书</li><li><a href="https://api.baidu.com/books">https://api.baidu.com/books</a> - post请求：新增一本书书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - put请求：整体修改主键为1的书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - patch请求：局部修改主键为1的书</li><li><a href="https://api.baidu.com/books/1">https://api.baidu.com/books/1</a> - delete请求：删除主键为1的书</li></ul><h2 id="六、可以通过url后的参数过滤"><a href="#六、可以通过url后的参数过滤" class="headerlink" title="六、可以通过url后的参数过滤"></a>六、可以通过url后的参数过滤</h2><ul><li><a href="https://api.example.com/v1/zoos?limit=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E6%95%B0%E9%87%8F">https://api.example.com/v1/zoos?limit=10：指定返回记录的数量</a></li><li><a href="https://api.example.com/v1/zoos?offset=10%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E8%AE%B0%E5%BD%95%E7%9A%84%E5%BC%80%E5%A7%8B%E4%BD%8D%E7%BD%AE">https://api.example.com/v1/zoos?offset=10：指定返回记录的开始位置</a></li><li><a href="https://api.example.com/v1/zoos?page=2&amp;per_page=100%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AC%AC%E5%87%A0%E9%A1%B5%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%AF%8F%E9%A1%B5%E7%9A%84%E8%AE%B0%E5%BD%95%E6%95%B0">https://api.example.com/v1/zoos?page=2&amp;per_page=100：指定第几页，以及每页的记录数</a></li><li><a href="https://api.example.com/v1/zoos?sortby=name&amp;order=asc%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E6%8C%89%E7%85%A7%E5%93%AA%E4%B8%AA%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%8E%92%E5%BA%8F%E9%A1%BA%E5%BA%8F">https://api.example.com/v1/zoos?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序</a></li><li><a href="https://api.example.com/v1/zoos?animal_type_id=1%EF%BC%9A%E6%8C%87%E5%AE%9A%E7%AD%9B%E9%80%89%E6%9D%A1%E4%BB%B6">https://api.example.com/v1/zoos?animal_type_id=1：指定筛选条件</a></li></ul><h2 id="七、响应状态码"><a href="#七、响应状态码" class="headerlink" title="七、响应状态码"></a>七、响应状态码</h2><h3 id="1-正常响应"><a href="#1-正常响应" class="headerlink" title="1 正常响应"></a>1 正常响应</h3><ul><li>响应状态码2xx<ul><li>200：常规请求</li><li>201：创建成功</li></ul></li></ul><h3 id="2-重定向响应"><a href="#2-重定向响应" class="headerlink" title="2 重定向响应"></a>2 重定向响应</h3><ul><li>响应状态码3xx<ul><li>301：永久重定向</li><li>302：暂时重定向</li></ul></li></ul><h3 id="3-客户端异常"><a href="#3-客户端异常" class="headerlink" title="3 客户端异常"></a>3 客户端异常</h3><ul><li>响应状态码4xx<ul><li>403：请求无权限</li><li>404：请求路径不存在</li><li>405：请求方法不存在</li></ul></li></ul><h3 id="4-服务器异常"><a href="#4-服务器异常" class="headerlink" title="4 服务器异常"></a>4 服务器异常</h3><ul><li>响应状态码5xx<ul><li>500：服务器异常</li></ul></li></ul><h2 id="八、-错误处理，应返回错误信息，error当做key"><a href="#八、-错误处理，应返回错误信息，error当做key" class="headerlink" title="八、 错误处理，应返回错误信息，error当做key"></a>八、 错误处理，应返回错误信息，error当做key</h2><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span>    error<span class="token punctuation">:</span> <span class="token string">"无权限操作"</span><span class="token punctuation">}</span></code></pre><h2 id="九、根据操作的不同，返回不同的数据格式"><a href="#九、根据操作的不同，返回不同的数据格式" class="headerlink" title="九、根据操作的不同，返回不同的数据格式"></a>九、根据操作的不同，返回不同的数据格式</h2><pre class=" language-python"><code class="language-python">GET <span class="token operator">/</span>collection：返回资源对象的列表（数组）GET <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回单个资源对象POST <span class="token operator">/</span>collection：返回新生成的资源对象PUT <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回完整的资源对象PATCH <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回完整的资源对象DELETE <span class="token operator">/</span>collection<span class="token operator">/</span>resource：返回一个空文档</code></pre><h2 id="十、可以在数据中携带需要请求资源的url地址"><a href="#十、可以在数据中携带需要请求资源的url地址" class="headerlink" title="十、可以在数据中携带需要请求资源的url地址"></a>十、可以在数据中携带需要请求资源的url地址</h2><pre class=" language-json"><code class="language-json"># Hypermedia API，RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么<span class="token punctuation">{</span>      <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>      <span class="token property">"results"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"肯德基(罗餐厅)"</span><span class="token punctuation">,</span>            <span class="token property">"img"</span><span class="token operator">:</span> <span class="token string">"https://image.baidu.com/kfc/001.png"</span>        <span class="token punctuation">}</span>          ...        <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>比较好的接口返回</p><pre class=" language-json"><code class="language-json"># 响应数据要有状态码、状态信息以及数据本身<span class="token punctuation">{</span>      <span class="token property">"status"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>      <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"ok"</span><span class="token punctuation">,</span>      <span class="token property">"results"</span><span class="token operator">:</span><span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"肯德基(罗餐厅)"</span><span class="token punctuation">,</span>            <span class="token property">"location"</span><span class="token operator">:</span><span class="token punctuation">{</span>                <span class="token property">"lat"</span><span class="token operator">:</span><span class="token number">31.415354</span><span class="token punctuation">,</span>                <span class="token property">"lng"</span><span class="token operator">:</span><span class="token number">121.357339</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"address"</span><span class="token operator">:</span><span class="token string">"月罗路2380号"</span><span class="token punctuation">,</span>            <span class="token property">"province"</span><span class="token operator">:</span><span class="token string">"上海市"</span><span class="token punctuation">,</span>            <span class="token property">"city"</span><span class="token operator">:</span><span class="token string">"上海市"</span><span class="token punctuation">,</span>            <span class="token property">"area"</span><span class="token operator">:</span><span class="token string">"宝山区"</span><span class="token punctuation">,</span>            <span class="token property">"street_id"</span><span class="token operator">:</span><span class="token string">"339ed41ae1d6dc320a5cb37c"</span><span class="token punctuation">,</span>            <span class="token property">"telephone"</span><span class="token operator">:</span><span class="token string">"(021)56761006"</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>            <span class="token property">"uid"</span><span class="token operator">:</span><span class="token string">"339ed41ae1d6dc320a5cb37c"</span>        <span class="token punctuation">}</span>          ...        <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resfulapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python奇闻杂技</title>
      <link href="/task/2019/03/15/python/%E6%A8%A1%E5%9D%97/python%E5%A5%87%E9%97%BB%E6%9D%82%E6%8A%80/"/>
      <url>/task/2019/03/15/python/%E6%A8%A1%E5%9D%97/python%E5%A5%87%E9%97%BB%E6%9D%82%E6%8A%80/</url>
      
        <content type="html"><![CDATA[<h2 id="一、eval函数"><a href="#一、eval函数" class="headerlink" title="一、eval函数"></a>一、eval函数</h2><p>eval()可以传三个参数，第一个参数用于计算，后面两个参数用于表达第一个参数的名称空间</p><p>当后两个参数都为空时，很好理解，就是一个string类型的算术表达式，计算出结果即可。等价于eval(expression)。</p><p>当locals参数为空，globals参数不为空时，先查找globals参数中是否存在变量，并计算。</p><p>当两个参数都不为空时，先查找locals参数，再查找globals参数。</p><p>1、简单表达式</p><p>print(eval(‘1+2’))</p><p>输出结果：3</p><p>2、字符串转字典</p><p>print(eval(“{‘name’:’linux’,’age’:18}”)</p><p>输出结果：{‘name’:’linux’,’age’:18}</p><p>3、传递全局变量</p><p>print(eval(“{‘name’:’linux’,’age’:age}”,{“age”:1822}))</p><p>输出结果：{‘name’: ‘linux’, ‘age’: 1822}</p><p>4、传递本地变量</p><p>age=18</p><p>print(eval(“{‘name’:’linux’,’age’:age}”,{“age”:1822},locals()))</p><p>输出结果：{‘name’: ‘linux’, ‘age’: 18}</p><p><strong>总结</strong>：eval最简单的用法就是去掉参数最外层的引号并执行剩下的yu’ju，比如把a=’123’转化成整形，eval也可以传表达式，比如print，input，复杂的甚至可以执行系统命令，删除数据等，所以使用时需要进行限制</p><h2 id="二、保留字（关键字）"><a href="#二、保留字（关键字）" class="headerlink" title="二、保留字（关键字）"></a>二、保留字（关键字）</h2><p>被编程语言内部定义保留使用的标识符</p><p>if elif等。。。</p><h2 id="三、turtle画笔模块"><a href="#三、turtle画笔模块" class="headerlink" title="三、turtle画笔模块"></a>三、turtle画笔模块</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> turtle<span class="token comment" spellcheck="true"># 窗体生成的宽，高，位置</span>turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 落笔的位置</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">250</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画笔大小</span>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 画笔颜色</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">"purple"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 线条的角度</span>turtle<span class="token punctuation">.</span>seth<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 一次画的角度，长度</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>    turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直线长度</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>circle<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span><span class="token number">40</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span>turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/huang_zhao/hz/raw/master/hz/1.png" alt="1" loading="lazy"></p><h2 id="四、json模块版本问题"><a href="#四、json模块版本问题" class="headerlink" title="四、json模块版本问题"></a>四、json模块版本问题</h2><p>json.loads转化bytes类型，3.6以上可以，3.5不可以</p><h2 id="五、jieba库"><a href="#五、jieba库" class="headerlink" title="五、jieba库"></a>五、jieba库</h2><p>jieba库能对中文分词，有三种分词模式</p><p>精确模式：把文本精确的分开，不存在冗余单词</p><p>全模式：把文本中所有可能的词语都扫描出来，有冗余</p><p>搜索引擎模式：在精确模式基础上，对长词再次切分</p><table><thead><tr><th align="center">函数</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">jieba.lcut(s)</td><td align="center">精确模式，返回一个列表类型的分词结果</td></tr><tr><td align="center">jieba.lcut(s,cut_all=True)</td><td align="center">全模式，返回一个列表模式的分词结果，存在冗余</td></tr><tr><td align="center">jieba.lcut_for_serch(s)</td><td align="center">搜索引擎模式，返回一个列表类型的分词结果，存在冗余</td></tr><tr><td align="center">jieba.add_word(w)</td><td align="center">向分词词典添加新词w</td></tr></tbody></table><pre class=" language-PYTHON"><code class="language-PYTHON">import jiebajieba.lcut("中国是一个伟大的国家")Building prefix dict from the default dictionary ...Loading model from cache /var/folders/mh/krrg51957cqgl0rhgnwyylvc0000gn/T/jieba.cacheLoading model cost 0.979 seconds.Prefix dict has been built succesfully.['中国', '是', '一个', '伟大', '的', '国家']jieba.lcut("中国是一个伟大的国家",cut_all=True)['中国', '国是', '一个', '伟大', '的', '国家']jieba.lcut("中华人民共和国是伟大的")['中华人民共和国', '是', '伟大', '的']jieba.lcut("中华人民共和国是伟大的",cut_all=True)['中华', '中华人民', '中华人民共和国', '华人', '人民', '人民共和国', '共和', '共和国', '国是', '伟大', '的']jieba.lcut_for_search("中华人民共和国是伟大的")['中华', '华人', '人民', '共和', '共和国', '中华人民共和国', '是', '伟大', '的']jieba.add_word("蟒蛇语言")</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask 中间件、蓝图，请求上下文执行流程</title>
      <link href="/task/2018/06/11/python/%E6%A1%86%E6%9E%B6/Flask%20%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%81%E8%93%9D%E5%9B%BE%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
      <url>/task/2018/06/11/python/%E6%A1%86%E6%9E%B6/Flask%20%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%81%E8%93%9D%E5%9B%BE%EF%BC%8C%E8%AF%B7%E6%B1%82%E4%B8%8A%E4%B8%8B%E6%96%87%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、flask中间件"><a href="#一、flask中间件" class="headerlink" title="一、flask中间件"></a>一、flask中间件</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>session<span class="token punctuation">,</span>request<span class="token punctuation">,</span>flash<span class="token punctuation">,</span>get_flashed_messages<span class="token punctuation">,</span>redirectapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Md</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>old_wsgi_app<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>old_wsgi_app <span class="token operator">=</span> old_wsgi_app    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>  environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始之前'</span><span class="token punctuation">)</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>old_wsgi_app<span class="token punctuation">(</span>environ<span class="token punctuation">,</span> start_response<span class="token punctuation">)</span>        <span class="token keyword">import</span> time        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束之后'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'index'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>wsgi_app <span class="token operator">=</span> Md<span class="token punctuation">(</span>app<span class="token punctuation">.</span>wsgi_app<span class="token punctuation">)</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># django中间件的功能就是在请求还没到路由之前对请求进行处理，在flask中对应着请求扩展</span>    <span class="token comment" spellcheck="true"># 而flask中间件则是通过对象的实例化去给请求生成过程添加额外功能</span>       <span class="token comment" spellcheck="true"># 在执行app.run方法的时候，最终执行的是run_simple最后执行app()也就是调用了app类的__call__方法内的self.wsgi_app()</span>    <span class="token comment" spellcheck="true"># 所以我们可以在run之前把wsgi_app()放到我们自定义的中间件对象中</span>    <span class="token comment" spellcheck="true"># 把原来的wsgi_app替换成新的，但是也要保证原来的功能执行了</span>    <span class="token comment" spellcheck="true"># ps：基本不用</span></code></pre><h2 id="二、猴子补丁（扩展）"><a href="#二、猴子补丁（扩展）" class="headerlink" title="二、猴子补丁（扩展）"></a>二、猴子补丁（扩展）</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 只是一个概念</span><span class="token comment" spellcheck="true"># 比如我一个项目中用的全是json，如果我想全都换成ujson来增加性能</span><span class="token comment" spellcheck="true"># 可以在每个页面都写</span><span class="token keyword">import</span> ujson <span class="token keyword">as</span> json<span class="token comment" spellcheck="true"># 但是这样太麻烦了</span><span class="token comment" spellcheck="true"># 而猴子补丁就利用了python一切皆对象的理念，在程序运行过程中，动态修改方法</span><span class="token comment" spellcheck="true"># class Monkey():</span><span class="token comment" spellcheck="true">#     def play(self):</span><span class="token comment" spellcheck="true">#         print('猴子在玩')</span><span class="token comment" spellcheck="true"># class Dog():</span><span class="token comment" spellcheck="true">#     def play(self):</span><span class="token comment" spellcheck="true">#         print('狗子在玩')</span><span class="token comment" spellcheck="true"># m=Monkey()</span><span class="token comment" spellcheck="true"># # m.play()</span><span class="token comment" spellcheck="true"># m.play=Dog().play</span><span class="token comment" spellcheck="true"># m.play()</span><span class="token comment" spellcheck="true"># 猴子补丁可以放在项目的入口，用新模块替换原来的模块，名字保持不变</span></code></pre><h2 id="三、蓝图（blueprint）"><a href="#三、蓝图（blueprint）" class="headerlink" title="三、蓝图（blueprint）"></a>三、蓝图（blueprint）</h2><p>为了防止项目大了之后全局app的循环导入问题</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 蓝图使用</span><span class="token comment" spellcheck="true"># 小型项目文件目录</span><span class="token operator">-</span>flask_pro    <span class="token operator">-</span>flask_test        <span class="token operator">-</span>__init__<span class="token punctuation">.</span>py        <span class="token operator">-</span>static        <span class="token operator">-</span>templates        <span class="token operator">-</span>views            <span class="token operator">-</span>order<span class="token punctuation">.</span>py            <span class="token operator">-</span>user<span class="token punctuation">.</span>py     <span class="token operator">-</span>manage<span class="token punctuation">.</span>py <span class="token comment" spellcheck="true"># 1 注册蓝图</span><span class="token comment" spellcheck="true"># 在init中 </span><span class="token keyword">from</span> flask <span class="token keyword">import</span>  Flaskapp<span class="token operator">=</span>Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">from</span> flask_test<span class="token punctuation">.</span>views <span class="token keyword">import</span> user<span class="token keyword">from</span> flask_test<span class="token punctuation">.</span>views <span class="token keyword">import</span> orderapp<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>user<span class="token punctuation">.</span>us<span class="token punctuation">)</span>app<span class="token punctuation">.</span>register_blueprint<span class="token punctuation">(</span>order<span class="token punctuation">.</span>ord<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 使用蓝图</span><span class="token comment" spellcheck="true"># 在视图页面user</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Blueprintus<span class="token operator">=</span>Blueprint<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span>__name__<span class="token punctuation">)</span>@us<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'login'</span><span class="token comment" spellcheck="true"># 蓝图也可以做路由分发</span><span class="token comment" spellcheck="true"># Blueprint（）中传参url_prefix = '/ooo' 表示该蓝图的根目录是/ooo</span><span class="token comment" spellcheck="true"># 传参 template_foder=‘xxx’ 会在当前目录找template对应的文件当做这个蓝图的模版目录</span></code></pre><h2 id="四、partal偏函数（扩展）"><a href="#四、partal偏函数（扩展）" class="headerlink" title="四、partal偏函数（扩展）"></a>四、partal偏函数（扩展）</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 偏函数的第一个参数可以放一个函数的内存地址</span><span class="token comment" spellcheck="true"># 后续参数为这个函数的参数，如果传的少了，这个偏函数的返回结果是一个新的函数</span><span class="token comment" spellcheck="true"># 这个函数已经通过偏函数为前几个参数传了值，后续只要补上后面的参数即可</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">+</span>c<span class="token operator">+</span>dtes<span class="token operator">=</span>partial<span class="token punctuation">(</span>test<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tes<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="五、threading-local"><a href="#五、threading-local" class="headerlink" title="五、threading.local"></a>五、threading.local</h2><p>flask实现每次请求都是不同的request但是这个request是全局变量的原因</p><p>当一个请求来的时候，uwsgi为我们开启了一个线程/协程</p><p>此时request作为全局变量是放在解释器中的，也就是如果多线程去操作这个数据的话必定会发生数据错乱，此时我们要保证数据不乱，同时不能用锁来影响我们的并发</p><pre class=" language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">from</span> greenlet <span class="token keyword">import</span> getcurrent <span class="token keyword">as</span> get_ident<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">from</span> threading <span class="token keyword">import</span> get_ident<span class="token comment" spellcheck="true"># 上面的代码保证了线程和协程都能有独自的id号</span><span class="token comment" spellcheck="true"># 因为如果在线程里开设了多个协程，只获取线程id就是一样的</span><span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">import</span> time<span class="token keyword">class</span> <span class="token class-name">Local</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span><span class="token string">'storage'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>        ident <span class="token operator">=</span> get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> ident <span class="token keyword">in</span> self<span class="token punctuation">.</span>storage<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># storage：｛线程id：app对象，。。｝</span>             self<span class="token punctuation">.</span>storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v         <span class="token keyword">else</span><span class="token punctuation">:</span>             self<span class="token punctuation">.</span>storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>k<span class="token punctuation">:</span> v<span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        ident <span class="token operator">=</span> get_ident<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>storage<span class="token punctuation">[</span>ident<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>obj <span class="token operator">=</span> Local<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">task</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj<span class="token punctuation">.</span>val <span class="token operator">=</span> arg    <span class="token comment" spellcheck="true"># obj.xxx = arg</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>task<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="六、请求上下文执行流程"><a href="#六、请求上下文执行流程" class="headerlink" title="六、请求上下文执行流程"></a>六、请求上下文执行流程</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 第一步 app.run 找到核心逻辑代码</span><span class="token comment" spellcheck="true"># 最终调用了werkzeug的run_simple，然后传了一堆配置参数，这个函数会调用执行app</span><span class="token comment" spellcheck="true"># 也就是会执行到Flask类的__call__方法</span><span class="token comment" spellcheck="true"># 这里又调用了wsgi_app方法，这就是整个请求流程的核心代码</span><span class="token comment" spellcheck="true"># 第二步 解析wsgi_app方法</span><span class="token comment" spellcheck="true"># 这一步返回了RequestContext对象，内部封装了本次请求request，session等信息</span>ctx <span class="token operator">=</span> self<span class="token punctuation">.</span>request_context<span class="token punctuation">(</span>environ<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 上面已经知道了这个ctx就是RequestContext对象</span>ctx<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这个push的最后为我们设置了真正的session</span><span class="token comment" spellcheck="true"># 在这之上调用了_request_ctx_stack.push</span>_request_ctx_stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># _request_ctx_stack是Flask创建出来就产生了的顶级变量，总共有6个</span><span class="token comment" spellcheck="true"># 它是由LocalStack类实例化得到的</span>_request_ctx_stack <span class="token operator">=</span> LocalStack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 也就是我们上面找的push实际上是LocalStack的函数</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_local<span class="token punctuation">,</span> <span class="token string">"stack"</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># _local是flask自带的local对象</span>            <span class="token comment" spellcheck="true"># 他的特点是不同线程放的值只有自己这次请求能用</span>            self<span class="token punctuation">.</span>_local<span class="token punctuation">.</span>stack <span class="token operator">=</span> rv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># obj是ctx对象</span>        rv<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>        <span class="token keyword">return</span> rv<span class="token comment" spellcheck="true"># 继续解析wsgi_app</span><span class="token comment" spellcheck="true"># 这一步从字面上意思就是把请求对象转化成响应对象，内部应该就是请求流程的整体逻辑了</span>response <span class="token operator">=</span> self<span class="token punctuation">.</span>full_dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">full_dispatch_request</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这是第一次请求时触发的被before_first装饰的函数</span>        <span class="token comment" spellcheck="true"># 内部就是执行了全部的这些函数然后把标志第一次的参数改成True</span>        self<span class="token punctuation">.</span>try_trigger_before_first_request_functions<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 信号相关</span>            request_started<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 被before_request装饰的函数，所以他的返回值已经被限定死了</span>            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>preprocess_request<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> rv <span class="token keyword">is</span> None<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 这里真正的根据路由执行视图函数</span>                rv <span class="token operator">=</span> self<span class="token punctuation">.</span>dispatch_request<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            rv <span class="token operator">=</span> self<span class="token punctuation">.</span>handle_user_exception<span class="token punctuation">(</span>e<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># rv是我们的响应对象，这里通过make_response处理了保证字符串也能转成response对象</span>        <span class="token comment" spellcheck="true"># 然后它还会调用视图中被after_reuqest装饰的函数，内部规定了传值和接收值，所以我们的请求扩展要那么写</span>        <span class="token comment" spellcheck="true"># 还会把session放到rv中，也就是在请求扩展中是可以拿到session的</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>finalize_request<span class="token punctuation">(</span>rv<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 继续解析wsgi_app</span><span class="token comment" spellcheck="true"># 上面已经拿到响应对象了，也就是其实到这里请求的所有流程已经结束了，在这最后会把我们的ctx对象从local中移除</span>ctx<span class="token punctuation">.</span>auto_pop<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 总结：从run方法开始，调用了run就是调用了werkzeug的run_simple</span><span class="token comment" spellcheck="true"># run_simple配置了很多参数调用了app，也就是调用了Flask类的__call__方法</span><span class="token comment" spellcheck="true"># 内部又调用了wsgi_app方法，这是Flask请求响应的核心逻辑</span><span class="token comment" spellcheck="true"># 先会生成一个ctx对象，这是本次请求的所有信息（request，session，app）通过线程号作为key，信息作为value放到local字典中，所以每次取的时候都是唯一的</span><span class="token comment" spellcheck="true"># 然后去执行了请求扩展的一些函数，比如befor_request</span><span class="token comment" spellcheck="true"># 请求处理完成之后就是获取响应对象，就是执行了视图函数，返回的响应对象需要传给响应扩展函数</span><span class="token comment" spellcheck="true"># 就是那些被after_request装饰的函数，执行完成后获得真正的响应对象，返回给前端</span><span class="token comment" spellcheck="true"># 最后要把ctx对象从原来的字典中移除，因为本次请求已经完成</span></code></pre><p><strong>如何全局拿到唯一的request对象</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># request是视图中的全局变量，但是却唯一</span><span class="token comment" spellcheck="true"># 这里使用偏函数包装起来，此时并没有执行</span><span class="token comment" spellcheck="true"># 我们可以打印request对象的方法，那么LocalProxy内部必定重写了__str__方法</span>request <span class="token operator">=</span> LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印的返回值是obj，这里可以猜测obj就是request对象</span>obj <span class="token operator">=</span> self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_get_current_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 去找LocalProxy内部的__local</span>        <span class="token keyword">if</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__local<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里用了封装，所以我们可以在__init__中找到_LocalProxy__local</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> local<span class="token punctuation">,</span> name<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"_LocalProxy__local"</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span>        object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__name__"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">if</span> callable<span class="token punctuation">(</span>local<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token operator">not</span> hasattr<span class="token punctuation">(</span>local<span class="token punctuation">,</span> <span class="token string">"__release_local__"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            object<span class="token punctuation">.</span>__setattr__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token string">"__wrapped__"</span><span class="token punctuation">,</span> local<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># local是我们在类实例化的时候通过偏函数传进来的</span><span class="token comment" spellcheck="true"># 这时候再看这一句实例化的代码就能理解了，此时实例化的过程中传进来的偏函数内存地址</span><span class="token comment" spellcheck="true"># 在__init__中被调用执行获得了执行的记过，而这个结果返回给了__str__让他去打印</span><span class="token comment" spellcheck="true"># 之前就说了视图中打印的request对象是唯一的，所以现在只要知道_lookup_req_object是什么就ok了</span>LocalProxy<span class="token punctuation">(</span>partial<span class="token punctuation">(</span>_lookup_req_object<span class="token punctuation">,</span> <span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">_lookup_req_object</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 去local中拿到ctx对象（上面就解析过，ctx包含了request，app，session）</span>    top <span class="token operator">=</span> _request_ctx_stack<span class="token punctuation">.</span>top    <span class="token keyword">if</span> top <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">(</span>_request_ctx_err_msg<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># name是偏函数传进来的request字符串，通过反射获取了指定ctx对象的request</span>    <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>top<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 至此我们知道了request是如何拿出来唯一的，还有一个小点就是如何拿到request内部的其他对象，request取值都是通过点</span><span class="token comment" spellcheck="true"># 那就必定重写了__getattr__</span>    <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"__members__"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> dir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 很清晰，从传过来的name来到request对象中反射</span>        <span class="token comment" spellcheck="true"># 比如request.method</span>        <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_get_current_object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 总结：Flask中的request虽然是个全局变量但是每次请求拿到的是唯一的，在Flask启动的时候就会创建LocalProxy对象</span><span class="token comment" spellcheck="true"># 它的实例化需要传一个参数，这里用的是偏函数，先从一个方法中通过request在ctx对象中的反射获取唯一的request对象</span><span class="token comment" spellcheck="true"># 然后在视图中打印的时候就会触发LocalProxy对象的__str__方法</span><span class="token comment" spellcheck="true"># 此时会从init中拿到实例化时被封装传进来的local，并执行，得到的就是唯一的那个request对象了</span><span class="token comment" spellcheck="true"># 然后在点取值，比如request.method的时候会触发__getattr__方法，同样是去拿到request对象从内部反射出结果返回</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
            <tag> python框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask 制定命令，sqlachemy</title>
      <link href="/task/2018/05/22/python/%E6%A1%86%E6%9E%B6/Flask%20%E5%88%B6%E5%AE%9A%E5%91%BD%E4%BB%A4%EF%BC%8Csqlachemy/"/>
      <url>/task/2018/05/22/python/%E6%A1%86%E6%9E%B6/Flask%20%E5%88%B6%E5%AE%9A%E5%91%BD%E4%BB%A4%EF%BC%8Csqlachemy/</url>
      
        <content type="html"><![CDATA[<h2 id="一、flask-script（制定命令）"><a href="#一、flask-script（制定命令）" class="headerlink" title="一、flask-script（制定命令）"></a>一、flask-script（制定命令）</h2><p>这是为了模拟类似django在命令行启动项目的方式</p><p>需要安装 <code>pip install flask-script</code></p><p><strong>使用</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Managerapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    manager <span class="token operator">=</span> Manager<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    manager<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 修改启动文件后  就只能在命令行启动这个项目了</span><span class="token comment" spellcheck="true"># python 启动文件名 runserver</span></code></pre><p><strong>自定义命令</strong></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 为函数加上装饰器即可</span><span class="token comment" spellcheck="true"># 启动命令为 python 文件名 方法名 -参数名 参数</span> @manager<span class="token punctuation">.</span>command <span class="token keyword">def</span> <span class="token function">custom</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> @manager<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'-n'</span><span class="token punctuation">,</span> <span class="token string">'--name'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">)</span> @manager<span class="token punctuation">.</span>option<span class="token punctuation">(</span><span class="token string">'-u'</span><span class="token punctuation">,</span> <span class="token string">'--url'</span><span class="token punctuation">,</span> dest<span class="token operator">=</span><span class="token string">'url'</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> url<span class="token punctuation">)</span></code></pre><h2 id="二、sqlachemy"><a href="#二、sqlachemy" class="headerlink" title="二、sqlachemy"></a>二、sqlachemy</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h3><ul><li>是一个第三方orm框架（对象关系映射）</li><li>django中的orm只能在django内部自己使用，这个是可以集成到不同框架中</li><li>orm不是一门语言特有的，每个语言都多多少少有几个orm框架</li><li>sqlachemy本身无法操作数据库，需要pymysql等第三方插件</li></ul><p>flask使用sqlachemy要注意几个事情</p><ol><li>必须做成单例模式，否则数据库连接池就没意义了</li><li>必须做到线程安全，每一个请求来只能使用自己的conn对象</li><li>连接池中的链接用了几次最好杀一下，不然容易造成内存溢出</li></ol><h3 id="2-基本使用（原生sql）"><a href="#2-基本使用（原生sql）" class="headerlink" title="2 基本使用（原生sql）"></a>2 基本使用（原生sql）</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> threading<span class="token keyword">import</span> sqlalchemy<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>engine<span class="token punctuation">.</span>base <span class="token keyword">import</span> Engine<span class="token comment" spellcheck="true"># 第一步生成一个engine对象</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>    <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/flask?charset=utf8"</span><span class="token punctuation">,</span>    max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>    pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>    pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>    pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第二步：创建连接（执行原生sql）</span>conn <span class="token operator">=</span> engine<span class="token punctuation">.</span>raw_connection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第三步：获取游标对象</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第四步：具体操作</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token string">'select * from boy'</span><span class="token punctuation">)</span>res<span class="token operator">=</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 比pymysql优势在，有数据库连接池</span></code></pre><h3 id="3-orm使用"><a href="#3-orm使用" class="headerlink" title="3 orm使用"></a>3 orm使用</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token comment" spellcheck="true"># 字段和字段属性</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> Index<span class="token comment" spellcheck="true"># 制造了一个类，作为所有模型类的基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>  <span class="token comment" spellcheck="true"># 数据库表名称(固定写法)，如果不写，默认以类名小写作为表的名字</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># id 主键</span>    <span class="token comment" spellcheck="true"># mysql中主键自动建索引：聚簇索引</span>    <span class="token comment" spellcheck="true"># 其他建建的索引叫：辅助索引</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># name列，索引，不可为空</span>    <span class="token comment" spellcheck="true"># email = Column(String(32), unique=True)  # 唯一</span>    <span class="token comment" spellcheck="true"># #datetime.datetime.now不能加括号，加了括号，以后永远是当前时间</span>    <span class="token comment" spellcheck="true"># ctime = Column(DateTime, default=datetime.datetime.now) # default默认值</span>    <span class="token comment" spellcheck="true"># extra = Column(Text, nullable=True)</span>     <span class="token comment" spellcheck="true">#类似于djagno的 Meta</span>    <span class="token comment" spellcheck="true"># __table_args__ = (</span>    <span class="token comment" spellcheck="true">#     UniqueConstraint('id', 'name', name='uix_id_name'), #联合唯一</span>    <span class="token comment" spellcheck="true">#     Index('ix_id_name', 'name', 'email'), #索引</span>    <span class="token comment" spellcheck="true"># )</span><span class="token comment" spellcheck="true"># 创建表</span><span class="token keyword">def</span> <span class="token function">create_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建engine对象</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过engine对象创建表</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除表</span><span class="token keyword">def</span> <span class="token function">drop_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建engine对象</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过engine对象删除所有表</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># create_table()</span>    drop_table<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="4-线程安全"><a href="#4-线程安全" class="headerlink" title="4 线程安全"></a>4 线程安全</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 基于scoped_session实现线程安全</span><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> models <span class="token keyword">import</span> User  <span class="token comment" spellcheck="true"># pycharm报错，不会影响我们</span><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> scoped_session<span class="token comment" spellcheck="true"># 1 制作engine</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2 制造一个 session 类（会话）</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 得到一个类</span><span class="token comment" spellcheck="true"># 3 得到一个session对象（线程安全的session）</span><span class="token comment" spellcheck="true">#现在的session已经不是session对象了</span><span class="token comment" spellcheck="true">#为什么线程安全，还是用的local</span>session <span class="token operator">=</span> scoped_session<span class="token punctuation">(</span>Session<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># session=Session()</span><span class="token comment" spellcheck="true"># 4 创建一个对象</span>obj1 <span class="token operator">=</span> User<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"2008"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 5 把对象通过add放入</span>session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># session.aaa()</span><span class="token comment" spellcheck="true"># 6 提交</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 类不继承Session类，但是有该类的所有方法（通过反射，一个个放进去）</span><span class="token comment" spellcheck="true"># scoped_session.add------->instrument(name)--->do函数内存地址---》现在假设我要这么用：session.add()--->do()</span><span class="token comment" spellcheck="true"># scoped_session.close----->instrument(name)--->do函数内存地址</span></code></pre><h3 id="5-基本增删改查"><a href="#5-基本增删改查" class="headerlink" title="5 基本增删改查"></a>5 基本增删改查</h3><pre class=" language-PYTHON"><code class="language-PYTHON">from sqlalchemy.orm import sessionmakerfrom sqlalchemy import create_enginefrom models import User,Person,Hobbyfrom sqlalchemy.orm import scoped_sessionfrom sqlalchemy.sql import textengine = create_engine("mysql+pymysql://root:123@127.0.0.1:3306/aaa", max_overflow=0, pool_size=5)Session = sessionmaker(bind=engine)# session = scoped_session(Session)session=Session()####1 新增多个对象# obj=User(name='xxx')# obj2=User(name='yyyy')# obj3=User(name='zzz')#新增同样对象# session.add_all([obj,obj2,obj3])#新增不同对象# session.add_all([Person(name='lqz'),Hobby()])####2 简单删除（查到删除）# res=session.query(User).filter_by(name='2008').delete()# res=session.query(User).filter(User.id>=2).delete()# # 影响1行# print(res)#### 3 修改# res=session.query(User).filter_by(id=1).update({User.name:'ccc'})# res=session.query(User).filter_by(id=1).update({'name':'ccc'})# session.query(User).filter(User.id > 0).update({User.name: User.name + "099"}, synchronize_session=False) # 如果要把它转成字符串相加# session.query(User).filter(User.id > 0).update({"age": User.age + 1}, synchronize_session="evaluate")  ## 如果要把它转成数字相加####4 基本查询操作# res=session.query(User).all()# print(type(res))# res=session.query(User).first()# print(res)#filter传的是表达式，filter_by传的是参数# res=session.query(User).filter(User.id==1).all()# res=session.query(User).filter(User.id>=1).all()# res=session.query(User).filter(User.id<1).all()# res=session.query(User).filter_by(name='ccc099').all()#了解# res = session.query(User).from_statement(text("SELECT * FROM users where name=:name")).params(name='ccc099').all()# print(res)session.commit()# 并没有真正关闭连接，而是放回池中session.close()</code></pre><h3 id="6-高级操作"><a href="#6-高级操作" class="headerlink" title="6 高级操作"></a>6 高级操作</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> models <span class="token keyword">import</span> User<span class="token punctuation">,</span>Person<span class="token punctuation">,</span>Hobby<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> textengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session<span class="token operator">=</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 1 查询名字为lqz的所有user对象</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter_by(name='ccc099').all()</span><span class="token comment" spellcheck="true"># 2 表达式，and条件连接</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.id > 1, User.name == 'egon').all()</span><span class="token comment" spellcheck="true"># 查找id在1和10之间，并且name=egon的对象</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.id.between(1, 10), User.name == 'egon').all()</span><span class="token comment" spellcheck="true"># in条件(class_,因为这是关键字，不能直接用)</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.id.in_([1,3,4])).all()</span><span class="token comment" spellcheck="true"># 取反 ~</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span><span class="token operator">~</span>User<span class="token punctuation">.</span>id<span class="token punctuation">.</span>in_<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#二次筛选</span><span class="token comment" spellcheck="true"># select *</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.id.in_(session.query(User.id).filter_by(name='egon'))).all()</span><span class="token comment" spellcheck="true"># # select name，id 。。。。</span><span class="token comment" spellcheck="true"># ret = session.query(User.id,User.name).filter(User.id.in_(session.query(User.id).filter_by(name='egon'))).all()</span><span class="token triple-quoted-string string">'''SELECT users.id AS users_id, users.name AS users_name FROM users WHERE users.id IN (SELECT users.id AS users_id FROM users WHERE users.name = %(name_1)s)'''</span><span class="token comment" spellcheck="true">#</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> and_<span class="token punctuation">,</span> or_<span class="token comment" spellcheck="true">#or_包裹的都是or条件，and_包裹的都是and条件</span><span class="token comment" spellcheck="true">#查询id>3并且name=egon的人</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(and_(User.id > 3, User.name == 'egon')).all()</span><span class="token comment" spellcheck="true"># 查询id大于2或者name=ccc099的数据</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(or_(User.id > 2, User.name == 'ccc099')).all()</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(</span><span class="token comment" spellcheck="true">#     or_(</span><span class="token comment" spellcheck="true">#         User.id &lt; 2,</span><span class="token comment" spellcheck="true">#         and_(User.name == 'egon', User.id > 3),</span><span class="token comment" spellcheck="true">#         User.extra != ""</span><span class="token comment" spellcheck="true">#     )).all()</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token triple-quoted-string string">'''select *from user where id&lt;2 or (name=egon and id >3) or extra !='''''</span><span class="token comment" spellcheck="true"># 通配符，以e开头，不以e开头</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(User.name.like('e%')).all()</span><span class="token comment" spellcheck="true"># ret = session.query(User).filter(~User.name.like('e%')).all()</span><span class="token comment" spellcheck="true"># 限制，用于分页，区间 limit</span><span class="token comment" spellcheck="true"># 前闭后开区间，1能取到，3取不到</span>ret <span class="token operator">=</span> session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''select * from users limit 1,2;'''</span><span class="token comment" spellcheck="true"># 排序，根据name降序排列（从大到小）</span><span class="token comment" spellcheck="true"># ret = session.query(User).order_by(User.name.desc()).all()</span><span class="token comment" spellcheck="true"># ret = session.query(User).order_by(User.name.asc()).all()</span><span class="token comment" spellcheck="true">#第一个条件降序排序后，再按第二个条件升序排</span><span class="token comment" spellcheck="true"># ret = session.query(User).order_by(User.id.asc(),User.name.desc()).all()</span><span class="token comment" spellcheck="true"># ret = session.query(User).order_by(User.name.desc(),User.id.asc()).all()</span><span class="token comment" spellcheck="true"># 分组</span><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> func<span class="token comment" spellcheck="true"># ret = session.query(User).group_by(User.name).all()</span><span class="token comment" spellcheck="true">#分组之后取最大id，id之和，最小id</span><span class="token comment" spellcheck="true"># sql 分组之后，要查询的字段只能有分组字段和聚合函数</span><span class="token comment" spellcheck="true"># ret = session.query(</span><span class="token comment" spellcheck="true">#     func.max(User.id),</span><span class="token comment" spellcheck="true">#     func.sum(User.id),</span><span class="token comment" spellcheck="true">#     func.min(User.id),</span><span class="token comment" spellcheck="true">#     User.name).group_by(User.name).all()</span><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">'''# select max(id),sum(id),min(id) from user group by name;## '''</span><span class="token comment" spellcheck="true"># for obj in ret:</span><span class="token comment" spellcheck="true">#     print(obj[0],'----',obj[1],'-----',obj[2],'-----',obj[3])</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true">#haviing筛选</span><span class="token comment" spellcheck="true"># ret = session.query(</span><span class="token comment" spellcheck="true">#     func.max(User.id),</span><span class="token comment" spellcheck="true">#     func.sum(User.id),</span><span class="token comment" spellcheck="true">#     func.min(User.id)).group_by(User.name).having(func.min(User.id) >2).all()</span><span class="token triple-quoted-string string">'''select max(id),sum(id),min(id) from user group by name having min(id)>2;'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="7-多表操作"><a href="#7-多表操作" class="headerlink" title="7 多表操作"></a>7 多表操作</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> models <span class="token keyword">import</span> User<span class="token punctuation">,</span>Person<span class="token punctuation">,</span>Hobby<span class="token punctuation">,</span>Boy<span class="token punctuation">,</span>Girl<span class="token punctuation">,</span>Boy2Girl<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>sql <span class="token keyword">import</span> textengine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa"</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>Session <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>engine<span class="token punctuation">)</span>session<span class="token operator">=</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###  1 一对多插入数据</span><span class="token comment" spellcheck="true"># obj=Hobby(caption='足球')</span><span class="token comment" spellcheck="true"># session.add(obj)</span><span class="token comment" spellcheck="true"># p=Person(name='张三',hobby_id=2)</span><span class="token comment" spellcheck="true"># session.add(p)</span><span class="token comment" spellcheck="true">### 2 方式二(默认情况传对象有问题)</span><span class="token comment" spellcheck="true">###### Person表中要加 hobby = relationship('Hobby', backref='pers')</span><span class="token comment" spellcheck="true"># p=Person(name='李四',hobby=Hobby(caption='美女'))</span><span class="token comment" spellcheck="true"># 等同于</span><span class="token comment" spellcheck="true"># p=Person(name='李四2')</span><span class="token comment" spellcheck="true"># p.hobby=Hobby(caption='美女2')</span><span class="token comment" spellcheck="true"># session.add(p)</span><span class="token comment" spellcheck="true">## 3 方式三，通过反向操作</span><span class="token comment" spellcheck="true"># hb = Hobby(caption='人妖')</span><span class="token comment" spellcheck="true"># hb.pers = [Person(name='文飞'), Person(name='博雅')]</span><span class="token comment" spellcheck="true"># session.add(hb)</span><span class="token comment" spellcheck="true">#### 4 查询（查询：基于连表的查询，基于对象的跨表查询）</span><span class="token comment" spellcheck="true">### 4.1 基于对象的跨表查询(子查询，两次查询)</span><span class="token comment" spellcheck="true"># 正查</span><span class="token comment" spellcheck="true"># p=session.query(Person).filter_by(name='张三').first()</span><span class="token comment" spellcheck="true"># print(p)</span><span class="token comment" spellcheck="true"># print(p.hobby.caption)</span><span class="token comment" spellcheck="true"># 反查</span><span class="token comment" spellcheck="true"># h=session.query(Hobby).filter_by(caption='人妖').first()</span><span class="token comment" spellcheck="true"># print(h.pers)</span><span class="token comment" spellcheck="true">### 4.2 基于连表的跨表查（查一次）</span><span class="token comment" spellcheck="true"># 默认根据外键连表</span><span class="token comment" spellcheck="true"># isouter=True 左外连，表示Person left join Hobby，没有右连接，反过来即可</span><span class="token comment" spellcheck="true"># 不写 inner join</span><span class="token comment" spellcheck="true"># person_list=session.query(Person,Hobby).join(Hobby,isouter=True).all()</span><span class="token comment" spellcheck="true"># print(person_list)</span><span class="token comment" spellcheck="true"># print(person_list)</span><span class="token comment" spellcheck="true"># for row in person_list:</span><span class="token comment" spellcheck="true">#     print(row[0].name,row[1].caption)</span><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">'''# select * from person left join hobby on person.hobby_id=hobby.id# '''</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># ret = session.query(Person, Hobby).filter(Person.hobby_id == Hobby.id)</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">'''# select * from user,hobby where user.id=favor.nid;## '''</span><span class="token comment" spellcheck="true">#join表，默认是inner join</span><span class="token comment" spellcheck="true"># ret = session.query(Person).join(Hobby)</span><span class="token comment" spellcheck="true"># # ret = session.query(Hobby).join(Person,isouter=True)</span><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">'''# SELECT *# FROM person INNER JOIN hobby ON hobby.id = person.hobby_id# '''</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true"># 指定连表字段（从来没用过）</span><span class="token comment" spellcheck="true"># ret = session.query(Person).join(Hobby,Person.nid==Hobby.id, isouter=True)</span><span class="token comment" spellcheck="true"># # ret = session.query(Person).join(Hobby,Person.hobby_id==Hobby.id, isouter=True).all()</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token triple-quoted-string string">'''SELECT *FROM person LEFT OUTER JOIN hobby ON person.nid = hobby.id'''</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true"># 组合（了解）UNION 操作符用于合并两个或多个 SELECT 语句的结果集</span><span class="token comment" spellcheck="true"># union和union all的区别？</span><span class="token comment" spellcheck="true"># q1 = session.query(User.name).filter(User.id > 2)  # 6条数据</span><span class="token comment" spellcheck="true"># q2 = session.query(User.name).filter(User.id &lt; 8) # 2条数据</span><span class="token comment" spellcheck="true"># q1 = session.query(User.id,User.name).filter(User.id > 2)  # 6条数据</span><span class="token comment" spellcheck="true"># q2 = session.query(User.id,User.name).filter(User.id &lt; 8) # 2条数据</span><span class="token comment" spellcheck="true"># ret = q1.union_all(q2).all()</span><span class="token comment" spellcheck="true"># ret1 = q1.union(q2).all()</span><span class="token comment" spellcheck="true"># print(ret)</span><span class="token comment" spellcheck="true"># print(ret1)</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># q1 = session.query(User.name).filter(User.id > 2)</span><span class="token comment" spellcheck="true"># q2 = session.query(Hobby.caption).filter(Hobby.nid &lt; 2)</span><span class="token comment" spellcheck="true"># ret = q1.union_all(q2).all()</span><span class="token comment" spellcheck="true">#### 多对多</span><span class="token comment" spellcheck="true"># session.add_all([</span><span class="token comment" spellcheck="true">#     Boy(hostname='霍建华'),</span><span class="token comment" spellcheck="true">#     Boy(hostname='胡歌'),</span><span class="token comment" spellcheck="true">#     Girl(name='刘亦菲'),</span><span class="token comment" spellcheck="true">#     Girl(name='林心如'),</span><span class="token comment" spellcheck="true"># ])</span><span class="token comment" spellcheck="true"># session.add_all([</span><span class="token comment" spellcheck="true">#     Boy2Girl(girl_id=1, boy_id=1),</span><span class="token comment" spellcheck="true">#     Boy2Girl(girl_id=2, boy_id=1)</span><span class="token comment" spellcheck="true"># ])</span><span class="token comment" spellcheck="true">##### 要有girls = relationship('Girl', secondary='boy2girl', backref='boys')</span><span class="token comment" spellcheck="true"># girl = Girl(name='张娜拉')</span><span class="token comment" spellcheck="true"># girl.boys = [Boy(hostname='张铁林'),Boy(hostname='费玉清')]</span><span class="token comment" spellcheck="true"># session.add(girl)</span><span class="token comment" spellcheck="true"># boy=Boy(hostname='蔡徐坤')</span><span class="token comment" spellcheck="true"># boy.girls=[Girl(name='谢娜'),Girl(name='巧碧螺')]</span><span class="token comment" spellcheck="true"># session.add(boy)</span><span class="token comment" spellcheck="true"># session.commit()</span><span class="token comment" spellcheck="true"># 基于对象的跨表查</span><span class="token comment" spellcheck="true"># girl=session.query(Girl).filter_by(id=3).first()</span><span class="token comment" spellcheck="true"># print(girl.boys)</span><span class="token comment" spellcheck="true">#### 基于连表的跨表查询</span><span class="token comment" spellcheck="true"># 查询蔡徐坤约过的所有妹子</span><span class="token triple-quoted-string string">'''select girl.name from girl,boy,Boy2Girl where boy.id=Boy2Girl.boy_id and girl.id=Boy2Girl.girl_id where boy.name='蔡徐坤''''</span><span class="token comment" spellcheck="true"># ret=session.query(Girl.name).filter(Boy.id==Boy2Girl.boy_id,Girl.id==Boy2Girl.girl_id,Boy.hostname=='蔡徐坤').all()</span><span class="token triple-quoted-string string">'''select girl.name from girl inner join Boy2Girl on girl.id=Boy2Girl.girl_id inner join boy on boy.id=Boy2Girl.boy_id where boy.hostname='蔡徐坤''''</span><span class="token comment" spellcheck="true"># ret=session.query(Girl.name).join(Boy2Girl).join(Boy).filter(Boy.hostname=='蔡徐坤').all()</span>ret<span class="token operator">=</span>session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>Girl<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Boy2Girl<span class="token punctuation">)</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>Boy<span class="token punctuation">)</span><span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>hostname<span class="token operator">=</span><span class="token string">'蔡徐坤'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token comment" spellcheck="true">### 执行原生sql（用的最多的）</span><span class="token comment" spellcheck="true">### django中orm如何执行原生sql</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># cursor = session.execute('insert into users(name) values(:value)',params={"value":'xxx'})</span><span class="token comment" spellcheck="true"># print(cursor.lastrowid)</span><span class="token comment" spellcheck="true"># session.commit()</span>session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="8-models-py"><a href="#8-models-py" class="headerlink" title="8 models.py"></a>8 models.py</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建一个个类（继承谁？字段怎么写）</span><span class="token keyword">import</span> datetime<span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token comment" spellcheck="true"># 字段和字段属性</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">,</span> DateTime<span class="token punctuation">,</span> UniqueConstraint<span class="token punctuation">,</span> Index<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> relationship<span class="token comment" spellcheck="true"># 制造了一个类，作为所有模型类的基类</span>Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'users'</span>  <span class="token comment" spellcheck="true"># 数据库表名称(固定写法)，如果不写，默认以类名小写作为表的名字</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># id 主键</span>    <span class="token comment" spellcheck="true"># mysql中主键自动建索引：聚簇索引</span>    <span class="token comment" spellcheck="true"># 其他建建的索引叫：辅助索引</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># name列，索引，不可为空</span>    <span class="token comment" spellcheck="true"># email = Column(String(32), unique=True)  # 唯一</span>    <span class="token comment" spellcheck="true"># #datetime.datetime.now不能加括号，加了括号，以后永远是当前时间</span>    <span class="token comment" spellcheck="true"># ctime = Column(DateTime, default=datetime.datetime.now) # default默认值</span>    <span class="token comment" spellcheck="true"># extra = Column(Text, nullable=True)</span>    <span class="token comment" spellcheck="true">#类似于djagno的 Meta</span>    <span class="token comment" spellcheck="true"># __table_args__ = (</span>    <span class="token comment" spellcheck="true">#     UniqueConstraint('id', 'name', name='uix_id_name'), #联合唯一</span>    <span class="token comment" spellcheck="true">#     Index('ix_id_name', 'name', 'email'), #索引</span>    <span class="token comment" spellcheck="true"># )</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># python是强类型语言</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token operator">+</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 一对多关系</span><span class="token comment" spellcheck="true"># 一个Hobby可以有很多人喜欢</span><span class="token comment" spellcheck="true"># 一个人只能由一个Hobby</span><span class="token keyword">class</span> <span class="token class-name">Hobby</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'hobby'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    caption <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'篮球'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'person'</span>    nid <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># hobby指的是tablename而不是类名，uselist=False</span>    <span class="token comment" spellcheck="true"># 一对多的关系，关联字段写在多的一方</span>    hobby_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">"hobby.id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 默认可以为空</span>    <span class="token comment" spellcheck="true"># 跟数据库无关，不会新增字段，只用于快速链表操作</span>    <span class="token comment" spellcheck="true"># 类名，backref用于反向查询</span>    hobby <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Hobby'</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'pers'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 多对多关系</span><span class="token comment" spellcheck="true"># 实实在在存在的表</span><span class="token keyword">class</span> <span class="token class-name">Boy2Girl</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'boy2girl'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># autoincrement自增，默认是True</span>    girl_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'girl.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    boy_id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> ForeignKey<span class="token punctuation">(</span><span class="token string">'boy.id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'girl'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>    __tablename__ <span class="token operator">=</span> <span class="token string">'boy'</span>    id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    hostname <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> nullable<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 与生成表结构无关，仅用于查询方便,放在哪个单表中都可以</span>    <span class="token comment" spellcheck="true"># secondary 通过哪个表建关联，跟django中的through一模一样</span>    girls <span class="token operator">=</span> relationship<span class="token punctuation">(</span><span class="token string">'Girl'</span><span class="token punctuation">,</span> secondary<span class="token operator">=</span><span class="token string">'boy2girl'</span><span class="token punctuation">,</span> backref<span class="token operator">=</span><span class="token string">'boys'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建表</span><span class="token keyword">def</span> <span class="token function">create_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建engine对象</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过engine对象创建表</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除表</span><span class="token keyword">def</span> <span class="token function">drop_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建engine对象</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span>        <span class="token string">"mysql+pymysql://root:123@127.0.0.1:3306/aaa?charset=utf8"</span><span class="token punctuation">,</span>        max_overflow<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 超过连接池大小外最多创建的连接</span>        pool_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 连接池大小</span>        pool_timeout<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 池中没有线程最多等待的时间，否则报错</span>        pool_recycle<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 多久之后对线程池中的线程进行一次连接的回收（重置）</span>    <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 通过engine对象删除所有表</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>drop_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    create_table<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 原来已经存在user表，再执行一次不会有问题</span>    <span class="token comment" spellcheck="true"># drop_table()</span><span class="token comment" spellcheck="true"># 创建库？手动创建库</span><span class="token comment" spellcheck="true"># 问题，sqlachemy支持修改字段吗？不支持</span></code></pre><h3 id="9-flask-sqlachemy"><a href="#9-flask-sqlachemy" class="headerlink" title="9 flask-sqlachemy"></a>9 flask-sqlachemy</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span> Flask<span class="token operator">-</span>SQLAlchemy<span class="token number">2</span> flask<span class="token operator">-</span>migrate    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db init 初始化：只执行一次    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db migrate 等同于 makemigartions    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db upgrade 等同于migrate<span class="token number">3</span> 看代码<span class="token number">4</span> Flask<span class="token operator">-</span>SQLAlchemy如何使用    <span class="token number">1</span> <span class="token keyword">from</span> flask_sqlalchemy <span class="token keyword">import</span> SQLAlchemy    <span class="token number">2</span> db <span class="token operator">=</span> SQLAlchemy<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token number">3</span> db<span class="token punctuation">.</span>init_app<span class="token punctuation">(</span>app<span class="token punctuation">)</span>    <span class="token number">4</span> 以后在视图函数中使用        <span class="token operator">-</span>db<span class="token punctuation">.</span>session 就是咱们讲的session<span class="token number">5</span> flask<span class="token operator">-</span>migrate的使用（表创建，字段修改）    <span class="token number">1</span> <span class="token keyword">from</span> flask_migrate <span class="token keyword">import</span> Migrate<span class="token punctuation">,</span>MigrateCommand    <span class="token number">2</span> Migrate<span class="token punctuation">(</span>app<span class="token punctuation">,</span>db<span class="token punctuation">)</span>    <span class="token number">3</span> manager<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span><span class="token string">'db'</span><span class="token punctuation">,</span> MigrateCommand<span class="token punctuation">)</span><span class="token number">6</span> 直接使用    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db init 初始化：只执行一次，创建migrations文件夹    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db migrate 等同于 makemigartions    <span class="token operator">-</span>python3 manage<span class="token punctuation">.</span>py db upgrade 等同于migrate</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
            <tag> python框架 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
