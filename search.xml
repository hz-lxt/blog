<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>celery基础</title>
      <link href="/task/2020/04/25/celery/"/>
      <url>/task/2020/04/25/celery/</url>
      
        <content type="html"><![CDATA[<h2 id="一、celery介绍"><a href="#一、celery介绍" class="headerlink" title="一、celery介绍"></a>一、celery介绍</h2><p>Celery 官网：<a href="http://www.celeryproject.org/">http://www.celeryproject.org/</a></p><p>Celery 官方文档英文版：<a href="http://docs.celeryproject.org/en/latest/index.html">http://docs.celeryproject.org/en/latest/index.html</a></p><p>Celery 官方文档中文版：<a href="http://docs.jinkan.org/docs/celery/">http://docs.jinkan.org/docs/celery/</a></p><ul><li>异步任务框架</li><li>执行异步任务</li><li>执行延迟任务</li><li>执行定时任务</li></ul><h2 id="二、celery架构"><a href="#二、celery架构" class="headerlink" title="二、celery架构"></a>二、celery架构</h2><p><img src="C:\Users\HZ\Desktop\007S8ZIlgy1ggqw0f7bltj30q80c174d.jpg" alt="007S8ZIlgy1ggqw0f7bltj30q80c174d" loading="lazy"></p><h4 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h4><p>Celery本身不提供消息服务，但是可以方便的和第三方提供的消息中间件集成。包括，RabbitMQ, Redis等等</p><h4 id="任务执行单元"><a href="#任务执行单元" class="headerlink" title="任务执行单元"></a>任务执行单元</h4><p>Worker是Celery提供的任务执行的单元，worker并发的运行在分布式的系统节点中。</p><h4 id="任务结果存储"><a href="#任务结果存储" class="headerlink" title="任务结果存储"></a>任务结果存储</h4><p>Task result store用来存储Worker执行的任务的结果，Celery支持以不同方式存储任务的结果，包括AMQP, redis等</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>异步执行：解决耗时任务,将耗时操作任务提交给Celery去异步执行，比如发送短信/邮件、消息推送、音视频处理等等</p><p>延迟执行：解决延迟任务</p><p>定时执行：解决周期(周期)任务,比如每天数据统计</p><h2 id="三、celery使用"><a href="#三、celery使用" class="headerlink" title="三、celery使用"></a>三、celery使用</h2><p>安装：<code>pip install celery</code></p><p>根据celery架构，我们可以看出，worker就像是一个工人，一直在工作，如果有工作的时候就会从broker（Redist）里去拿过来执行，并放到pakend（redist）中存放结果</p><h3 id="方式一：在一个文件夹内的三个页面"><a href="#方式一：在一个文件夹内的三个页面" class="headerlink" title="方式一：在一个文件夹内的三个页面"></a>方式一：在一个文件夹内的三个页面</h3><p><strong>worker执行页面</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> celery<span class="token comment"># broker存储的位置</span>broker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span><span class="token comment"># backend存储的位置</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment"># 实例化的celery对象</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">)</span><span class="token comment"># 需要添加的任务</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>broker提交任务的页面</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> add<span class="token comment"># 执行这个文件，就是把这个任务添加到数据库中，只要worker在工作</span><span class="token comment"># 就会把这个任务从数据库1中拿出来执行，并把结果放到数据库2中</span>ret <span class="token operator">=</span> add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment"># ret 是这个任务的uuid，用于获取任务结果</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>backend获取任务结果的页面</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> celery_test <span class="token keyword">import</span> app<span class="token keyword">from</span> celery<span class="token punctuation">.</span>result <span class="token keyword">import</span> AsyncResult<span class="token comment"># 任务对象的唯一标识：uuid</span><span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">'19dc2faa-39f9-47b6-af77-e9d3a4d05d2e'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    async1 <span class="token operator">=</span> AsyncResult<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token builtin">id</span><span class="token punctuation">,</span> app<span class="token operator">=</span>app<span class="token punctuation">)</span>    <span class="token keyword">if</span> async1<span class="token punctuation">.</span>successful<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> async1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>failed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务失败'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'PENDING'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务等待中被执行'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'RETRY'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务异常后正在重试'</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> async1<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token string">'STARTED'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'任务已经开始被执行'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"><a href="#方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）" class="headerlink" title="方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）"></a>方式二：worker单独做一个项目文件，添加任务和获取结果分离出来（执行异步任务）</h3><p>创建一个celery项目（包），内部必须含有名字为celery的py文件，在内部创建celery对象</p><p><strong>celery.py</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span><span class="token string">'redis://127.0.0.1:6379/2'</span>app<span class="token operator">=</span>celery<span class="token punctuation">.</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task1'</span><span class="token punctuation">,</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写需要添加的任务也在这个包内，可创建不同的任务文件，可添加多个</p><p><strong>task1.py</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行延迟任务"><a href="#执行延迟任务" class="headerlink" title="执行延迟任务"></a>执行延迟任务</h3><p>添加任务页面</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 执行延迟任务就是多个一个时间参数</span><span class="token comment"># 这里注意，时间参数是根据utc时间，并不是中国时间</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token punctuation">,</span> timedelta<span class="token comment"># 时间对象必须和时间对象相加</span>eta<span class="token operator">=</span>datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>add<span class="token punctuation">.</span>apply_async<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span> eta<span class="token operator">=</span>eta<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>celery页面</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.tasks.low'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token string">'args'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment"># celery beat -A pc_celery -l info</span><span class="token comment"># celery -A pc_celery worker -l info -P eventlet</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、django中配置celery"><a href="#四、django中配置celery" class="headerlink" title="四、django中配置celery"></a>四、django中配置celery</h2><p>celery包最好放在根路径下</p><p><strong>添加定时任务</strong></p><p>celery.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token comment"># 配置django配置</span>os<span class="token punctuation">.</span>environ<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">'DJANGO_SETTINGS_MODULE'</span><span class="token punctuation">,</span> <span class="token string">'luffyapi.settings.dev'</span><span class="token punctuation">)</span><span class="token comment"># 配置celery的worker环境</span><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celerybroker <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/1'</span>backend <span class="token operator">=</span> <span class="token string">'redis://127.0.0.1:6379/2'</span><span class="token comment"># 实例化worker对象app，用include添加定时任务</span>app<span class="token operator">=</span>Celery<span class="token punctuation">(</span>__name__<span class="token punctuation">,</span>broker<span class="token operator">=</span>broker<span class="token punctuation">,</span>backend<span class="token operator">=</span>backend<span class="token punctuation">,</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'celery_task.task2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 时区</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>timezone <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment"># 是否使用UTC</span>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>enable_utc <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># 任务的定时配置</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedelta<span class="token keyword">from</span> celery<span class="token punctuation">.</span>schedules <span class="token keyword">import</span> crontabapp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>beat_schedule <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'low-task'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'task'</span><span class="token punctuation">:</span> <span class="token string">'celery_task.task2.update_banner'</span><span class="token punctuation">,</span>        <span class="token string">'schedule'</span><span class="token punctuation">:</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment"># 'schedule': crontab(hour=8, day_of_week=1),  # 每周一早八点</span>        <span class="token comment"># 'args': (),</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment"># 定时任务的添加必须要新启动一个beat命令去工作</span><span class="token comment"># celery beat -A celery_task -l info</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>task定时任务</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>celery <span class="token keyword">import</span> app<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>cache <span class="token keyword">import</span> cache<span class="token comment"># 每三秒跟新一次缓存</span><span class="token comment"># 添加一个任务，celery内设定间隔时间3秒</span><span class="token comment"># 任务内去cache跟新banner_list，从数据库中拿到banner放到cache中的banner_list中</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>models <span class="token keyword">import</span> Banner<span class="token comment"># from luffyapi.settings import const</span><span class="token comment"># [OrderedDict(</span><span class="token comment">#     [('image', 'http://127.0.0.1:8000/media/banner/banner1.png'), ('link', '/free-courses'), ('name', 'banner1')]),</span><span class="token comment">#  OrderedDict(</span><span class="token comment">#      [('image', 'http://127.0.0.1:8000/media/banner/banner2.png'), ('link', '/light-courses'), ('name', 'banner2')]),</span><span class="token comment">#  OrderedDict(</span><span class="token comment">#      [('image', 'http://127.0.0.1:8000/media/banner/banner3.png'), ('link', '/actual-courses'), ('name', 'banner3')])]</span><span class="token keyword">from</span> home<span class="token punctuation">.</span>sers <span class="token keyword">import</span> BannerSer<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span><span class="token keyword">def</span> <span class="token function">update_banner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    queryset <span class="token operator">=</span> Banner<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>is_delete<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    banner_ser <span class="token operator">=</span> BannerSer<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> banner <span class="token keyword">in</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">:</span>        banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000'</span> <span class="token operator">+</span> banner<span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span>    cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'banner_list'</span><span class="token punctuation">,</span> banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>banner_ser<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'更新banner成功'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步任务框架 </tag>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列</title>
      <link href="/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/task/2020/03/24/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1 定义"></a>1 定义</h3><p>消息队列：是一种数据结构</p><p>生产者：把数据放入到队列中的一方</p><p>消费者：把数据从队列中取出的一方</p><h3 id="2-存在的意义"><a href="#2-存在的意义" class="headerlink" title="2 存在的意义"></a>2 存在的意义</h3><h4 id="2-1-解耦"><a href="#2-1-解耦" class="headerlink" title="2.1 解耦"></a>2.1 解耦</h4><p>场景一：</p><p>存在三个系统</p><p>a系统要给b系统发送数据，调用系统b的接口</p><p>a系统要给c系统发送数据，调用系统c的接口</p><p>如果有一天b不需要a的数据了，就需要让a注释掉掉b接口的代码</p><p>如果新增系统d要接受数据，又要增加调用系统d的代码</p><p><strong>这些调用逻辑都是一些重复的不可避免的劳动</strong></p><p>此处的a系统与bcd系统高度耦合了，因为之间的数据交互如果需要修改，或者接受数据的系统出现了问题，那么a系统的调用逻辑还要思考需不需要继续发送数据</p><p>场景二：</p><p>在上述场景加入消息队列，消息队列是生产者（a系统）与消费者（bcd系统）之间的一个数据交互中转站</p><p>a系统发布消息，bcd订阅消息，如果不需要订阅就取消订阅即可，并不需要修改发布消息的代码</p><h4 id="2-2-异步"><a href="#2-2-异步" class="headerlink" title="2.2 异步"></a>2.2 异步</h4><p>消息队列是一个异步任务，如果a系统要完成<strong>产生数据（100ms）</strong>，<strong>发送数据至系统b（300ms）</strong>，<strong>发送数据至系统c（300ms）</strong></p><p>此时a系统完成消息发送是一个同步任务，完成时间是100+300+300=700ms</p><p>如果用了消息队列，a系统只要产生消息，并发送至消息队列，由消息队列异步回调订阅过的系统接口</p><p>此时a系统完成发送消息的时间是100ms</p><h4 id="2-3-削峰-限流"><a href="#2-3-削峰-限流" class="headerlink" title="2.3 削峰/限流"></a>2.3 削峰/限流</h4><p>如果有一个商场网站出了促销活动，此时每秒的请求数是5000，一般的mysql只能处理2000个左右的并发。</p><p>此时在用户与mysql之间加入mq，它可以接受者5000个请求，但是只给mysql发送2000个。</p><p>就像一个喷水的管子，如果突然流水量过大，管子就会裂开，我们通过开关把水流量放小一点就问题不大，但是我们要知道，在这个开关后水压还是这么大，mq做到的只是限制最大量。</p><h4 id="2-4-其他应用场景"><a href="#2-4-其他应用场景" class="headerlink" title="2.4 其他应用场景"></a>2.4 其他应用场景</h4><ul><li><strong>日志处理</strong>：将大量日志存储到消息队列中（一般采用分布式消息队列kafka），解决大量日志传输的问题。其中，消息队列负责日志数据的接收，存储和转发；</li><li><strong>消息通讯</strong>：点对点通讯或聊天室通讯。</li></ul><h3 id="3-使用消息队列会有什么优缺点"><a href="#3-使用消息队列会有什么优缺点" class="headerlink" title="3 使用消息队列会有什么优缺点"></a>3 使用消息队列会有什么优缺点</h3><p>优点其实就是上文中谈到的，在特殊场景下的应用好处，解耦、异步与削峰等。</p><p><strong>系统可用性</strong>：<br> 系统因为依赖与MQ消息队列这个服务，若这个服务崩溃了，那么我们的整个系统将不可用。为此往往我们都是通过集群/分布式部署来实现MQ高可用的。</p><p>高可用：通常来描述一个系统经过专门的设计，从而减少停工时间，而保持其服务的高度可用性</p><p><strong>系统复杂度</strong>：<br> 我们将数据写到消息队列上，就有可能会存在数据丢失的情况。以及我们如何保证消息没有被重复消费等问题。</p><p><strong>一致性问题</strong>：<br> A系统将请求写入到消息队列后就返回请求成功了，假设在多机部署的时候，系统B、C写库成功，假设D写入失败了，这种情况下就会产生数据不一致的问题。</p><p><a href="https://www.jianshu.com/p/ec7c2503c3ef">https://www.jianshu.com/p/ec7c2503c3ef</a></p>]]></content>
      
      
      <categories>
          
          <category> 每日学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题及解决</title>
      <link href="/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
      <url>/task/2020/03/15/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、同源策略"><a href="#一、同源策略" class="headerlink" title="一、同源策略"></a>一、同源策略</h2><p>同源策略：请求的url地址,必须与浏览器上的url地址处于同域上,也就是域名,端口,协议相同</p><p>比如:我在本地上的域名是127.0.0.1:8000,请求另外一个域名：127.0.0.1:8001一段数据</p><p>浏览器上就会报错，这就是同源策略的保护,如果浏览器对javascript没有同源策略的保护,那么一些重要的机密网站将会很危险</p><h2 id="二、CORS（跨域资源共享）简介"><a href="#二、CORS（跨域资源共享）简介" class="headerlink" title="二、CORS（跨域资源共享）简介"></a>二、CORS（跨域资源共享）简介</h2><p><strong>服务端对某个来源的请求开放请求资源的接口，就是cors</strong></p><p>整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p><strong>因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。</strong></p><h2 id="三、CORS两种请求详解"><a href="#三、CORS两种请求详解" class="headerlink" title="三、CORS两种请求详解"></a>三、CORS两种请求详解</h2><p>只要同时满足以下两大条件，就属于简单请求，只要其中一个不满足就是非简单请求</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""（1) 请求方法是以下三种方法之一：    HEAD    GET    POST"""</span><span class="token triple-quoted-string string">"""（2）HTTP的头信息不超出以下几种字段：    Accept    Accept-Language    Content-Language    Last-Event-ID    Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>两种请求的区别</strong></p><ul><li>简单请求：一次请求</li><li>非简单请求：两次请求，会在数据请求发送之前，先发送一次‘预检’请求，如果通过了则可以发送真正的请求</li></ul><p><strong>预检</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">=</span><span class="token operator">></span> 如果复杂请求是PUT等请求，则服务端需要设置允许某请求，否则“预检”不通过       Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Method<span class="token operator">=</span><span class="token operator">></span> 如果复杂请求设置了请求头，则服务端需要设置允许某请求头，否则“预检”不通过       Access<span class="token operator">-</span>Control<span class="token operator">-</span>Request<span class="token operator">-</span>Headers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>支持跨域，简单请求</strong></p><p>服务器设置响应头：Access-Control-Allow-Origin = ‘域名’ 或 ‘*’</p><p><strong>支持跨域，复杂请求</strong></p><p>由于复杂请求时，首先会发送“预检”请求，如果“预检”成功，则发送真实数据。</p><ul><li>“预检”请求时，允许请求方式则需服务器设置响应头：Access-Control-Request-Method</li><li>“预检”请求时，允许请求头则需服务器设置响应头：Access-Control-Request-Headers</li></ul><h2 id="四、django中解决跨域的两种方式"><a href="#四、django中解决跨域的两种方式" class="headerlink" title="四、django中解决跨域的两种方式"></a>四、django中解决跨域的两种方式</h2><h3 id="1-自定义中间件"><a href="#1-自定义中间件" class="headerlink" title="1 自定义中间件"></a>1 自定义中间件</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定制中间件</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>deprecation <span class="token keyword">import</span> MiddlewareMixin<span class="token keyword">class</span> <span class="token class-name">CorsMiddleWare</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>method<span class="token operator">==</span><span class="token string">"OPTIONS"</span><span class="token punctuation">:</span>            <span class="token comment">#可以加*</span>            response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Headers"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Content-Type"</span>        response<span class="token punctuation">[</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"http://localhost:8080"</span>        <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-使用django-cors-headers-解决跨域问题"><a href="#2-使用django-cors-headers-解决跨域问题" class="headerlink" title="2 使用django-cors-headers 解决跨域问题"></a>2 使用django-cors-headers 解决跨域问题</h3><ul><li><p>安装：pip install django-cors-headers</p></li><li><p>注册app：’corsheaders’</p></li><li><p>添加中间件：’corsheaders.middleware.CorsMiddleware’,</p></li><li><pre><code class="python"># 基本配置CORS_ALLOW_CREDENTIALS = TrueCORS_ORIGIN_ALLOW_ALL = TrueCORS_ORIGIN_WHITELIST = (    &#39;*&#39;)CORS_ALLOW_METHODS = (    &#39;DELETE&#39;,    &#39;GET&#39;,    &#39;OPTIONS&#39;,    &#39;PATCH&#39;,    &#39;POST&#39;,    &#39;PUT&#39;,    &#39;VIEW&#39;,)CORS_ALLOW_HEADERS = (    &#39;XMLHttpRequest&#39;,    &#39;X_FILENAME&#39;,    &#39;accept-encoding&#39;,    &#39;authorization&#39;,    &#39;content-type&#39;,    &#39;dnt&#39;,    &#39;origin&#39;,    &#39;user-agent&#39;,    &#39;x-csrftoken&#39;,    &#39;x-requested-with&#39;,    &#39;Pragma&#39;,)</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 每日学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 跨域问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf内置排序源码</title>
      <link href="/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/"/>
      <url>/task/2020/02/15/drf%E5%86%85%E7%BD%AE%E6%8E%92%E5%BA%8F%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>如果我们要用排序，那么写的视图类就必须直接或间接继承ListModelMixin，因为其内部有帮我们排序的放方法</p><p>ListModelMixin</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 调用了视图类对象的filter_queryset方法</span>queryset <span class="token operator">=</span> self<span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>get_queryset<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是我们视图类本身没有，根据orm查找顺序，我们就要看第一位父类</p><p>最后找到GenericAPIView的filter_queryset方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># filter_backends就是我们在视图类中写的drf内置的排序类</span>    <span class="token keyword">for</span> backend <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>filter_backends<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 实例化排序类对象，并调用它的filter_queryset方法</span>        queryset <span class="token operator">=</span> backend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>filter_queryset<span class="token punctuation">(</span>self<span class="token punctuation">.</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> self<span class="token punctuation">)</span>        <span class="token keyword">return</span> queryset    <span class="token comment"># 视图类中我们是这样设置的</span>    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>OrderingFilter<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OrderingFilter的filter_queryset方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_queryset</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 调用了自己的get_ordering方法返回值应到是原本的queryset对象</span>    ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>get_ordering<span class="token punctuation">(</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span>    <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>        <span class="token comment"># 下面是得到ordering的方法，返回的结果是('id', 'price')，直接通过这个排序</span>        <span class="token keyword">return</span> queryset<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token operator">*</span>ordering<span class="token punctuation">)</span>    <span class="token keyword">return</span> queryset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OrderingFilter的get_ordering方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_ordering</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># ordering_param是在drf的配置文件中的字符串：ordering</span>    <span class="token comment"># params就是从url后ordering跟的排序字符串</span>    <span class="token comment"># params：‘id，name，price’</span>params <span class="token operator">=</span> request<span class="token punctuation">.</span>query_params<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>ordering_param<span class="token punctuation">)</span>    <span class="token keyword">if</span> params<span class="token punctuation">:</span>        <span class="token comment"># 通过一个列表生成式得到['id','name','price']</span>    fields <span class="token operator">=</span> <span class="token punctuation">[</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> param <span class="token keyword">in</span> params<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 通过内部remove_invalid_fields去移除fields中和视图类中设置不匹配的</span>        <span class="token comment"># 视图类是这样设置的ordering_fields = ('id', 'price')</span>        <span class="token comment"># 所以这里name是无效排序，就会通过这个方法移除</span>   ordering <span class="token operator">=</span> self<span class="token punctuation">.</span>remove_invalid_fields<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> fields<span class="token punctuation">,</span> view<span class="token punctuation">,</span> request<span class="token punctuation">)</span>        <span class="token keyword">if</span> ordering<span class="token punctuation">:</span>            <span class="token keyword">return</span> ordering<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> python函数 </tag>
            
            <tag> 面试 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>drf☞jwt自动签发与手动签发</title>
      <link href="/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/"/>
      <url>/task/2020/02/15/drf%E2%98%9Ejwt%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%8F%91%E4%B8%8E%E6%89%8B%E5%8A%A8%E7%AD%BE%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="一、自动签发"><a href="#一、自动签发" class="headerlink" title="一、自动签发"></a>一、自动签发</h2><p><strong>urls</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>views <span class="token keyword">import</span> obtain_jwt_token<span class="token comment"># 使用jwt自带的登录视图</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'login/'</span><span class="token punctuation">,</span> obtain_jwt_token<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>settings</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetimeJWT_AUTH<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token comment"># 配置响应格式，必须和自动签发使用</span>  <span class="token string">'JWT_RESPONSE_PAYLOAD_HANDLER'</span><span class="token punctuation">:</span><span class="token string">'app01.utils.my_jwt_response_payload_handler'</span><span class="token punctuation">,</span>    <span class="token string">'JWT_EXPIRATION_DELTA'</span><span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 过期时间，手动配置</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>utils</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 重写jwt响应格式（需要到settings配置）</span><span class="token comment"># 与之配合使用的必须是自动签发</span><span class="token keyword">def</span> <span class="token function">my_jwt_response_payload_handler</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> request<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 返回什么，前端就能看到什么样子</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>        <span class="token string">'msg'</span><span class="token punctuation">:</span><span class="token string">'登录成功'</span><span class="token punctuation">,</span>        <span class="token string">'status'</span><span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span>        <span class="token string">'username'</span><span class="token punctuation">:</span>user<span class="token punctuation">.</span>username    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接在前端提交post请求发送账号和密码，会返回我们定义好的响应格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span>    <span class="token string">"token"</span><span class="token punctuation">:</span> <span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6Imh6IiwiZXhwIjoxNTk1NDE1MTEyLCJlbWFpbCI6IiJ9.BxBdsm6oBz8iPAwSSpo_7IaU4pBp6RjK4c0GJ_FYN1E"</span><span class="token punctuation">,</span>    <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"登录成功"</span><span class="token punctuation">,</span>    <span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"hz"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后拿出token对测试类发送测试请求</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestAPI</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token comment"># 因为内置的他没有对匿名用户设置拦截，素以匿名用户也能看到ok</span><span class="token comment"># 我们用request.user来区分</span><span class="token comment"># 这里可能会出现我登录了很多次，用每次不同的token都能登录</span><span class="token comment"># 这是因为token校验的是规则，是要加密规则符合且没有超时，那用哪次token都一样的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、手动签发"><a href="#二、手动签发" class="headerlink" title="二、手动签发"></a>二、手动签发</h2><p><strong>utils</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>authentication <span class="token keyword">import</span> BaseJSONWebTokenAuthentication<span class="token punctuation">,</span>jwt_decode_handler<span class="token keyword">import</span> jwt<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> AuthenticationFailed<span class="token keyword">class</span> <span class="token class-name">MyAuthentication</span><span class="token punctuation">(</span>BaseJSONWebTokenAuthentication<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 这里重写的逻辑和BaseJSONWebTokenAuthentication里的authenticate一模一样</span>    <span class="token keyword">def</span> <span class="token function">authenticate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        jwt_token <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'HTTP_AUTHORIZATION'</span><span class="token punctuation">)</span> <span class="token comment"># 获取浏览器传来的token</span>        <span class="token keyword">if</span> jwt_token<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                payload <span class="token operator">=</span> jwt_decode_handler<span class="token punctuation">(</span>jwt_token<span class="token punctuation">)</span> <span class="token comment"># 传入token，拿出第二段用户信息,有内置的校验token功能</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>ExpiredSignature<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'签名过期'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> jwt<span class="token punctuation">.</span>InvalidTokenError<span class="token punctuation">:</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'用户非法'</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token comment"># 所有异常都会走到这</span>                <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment"># 通过内置的方法把payload转换成用户对象</span>            user <span class="token operator">=</span> self<span class="token punctuation">.</span>authenticate_credentials<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">return</span> user<span class="token punctuation">,</span><span class="token boolean">None</span> <span class="token comment"># ===》request.user,request.auth</span>        <span class="token keyword">raise</span> AuthenticationFailed<span class="token punctuation">(</span><span class="token string">'您没有携带认证信息'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>sers</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token comment"># 多方序列化校验登录</span><span class="token keyword">import</span> re<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError<span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token keyword">from</span> rest_framework_jwt<span class="token punctuation">.</span>utils <span class="token keyword">import</span> jwt_encode_handler<span class="token punctuation">,</span>jwt_payload_handler<span class="token keyword">class</span> <span class="token class-name">LoginSer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 我们要提交校验数据的时候，如果直接用下面Meta绑定给模型类的话</span>    <span class="token comment"># 关键点2：这里如果不写username的话，序列化器直接用的是模型类的username</span>    <span class="token comment"># 这两者的区别在于，如果覆盖写了username，他表示的可以是任何前端传来的数据，如果是模型类绑定，那只能是用户名了</span>    <span class="token comment"># 我们这里username用于多方登录的校验数据，必须要重写</span>    <span class="token comment"># 而password不用重写，因为password用的就是模型类本身的</span>    username <span class="token operator">=</span> serializers<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> models<span class="token punctuation">.</span>User        fields <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token string">'password'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>        password <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> username<span class="token punctuation">:</span>            <span class="token keyword">if</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^1[3-9][0-9]&#123;9&#125;$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>mobile<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'^.+@.+$'</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 邮箱</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>email<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                user <span class="token operator">=</span> models<span class="token punctuation">.</span>User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> user<span class="token punctuation">:</span>                <span class="token keyword">if</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment"># 关键点3：jwt_payload_handler把用户数据对象转化成用户信息的字典</span>                    <span class="token comment"># jwt_encode_handler把用户信息的字典转化成token</span>                    payload <span class="token operator">=</span> jwt_payload_handler<span class="token punctuation">(</span>user<span class="token punctuation">)</span>                    <span class="token comment"># print('user:',user,type(user))</span>                    token <span class="token operator">=</span> jwt_encode_handler<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>                    <span class="token comment"># print('payload:',payload,type(payload))</span>                    <span class="token comment"># print('token:',token)</span>                    <span class="token comment"># 关键点4：如果我们要给序列化器添加数据，让视图函数去使用</span>                    <span class="token comment"># 通常都是传给对象的context属性,当然直接赋值也可以，这只是他给我们提供的传值接口</span>                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'token'</span><span class="token punctuation">]</span> <span class="token operator">=</span> token                    self<span class="token punctuation">.</span>context<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> user                    self<span class="token punctuation">.</span>user <span class="token operator">=</span> user                    <span class="token keyword">return</span> attrs                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'密码错误'</span><span class="token punctuation">)</span>            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'不存在用户'</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token string">'请输入用户名'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>views</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">LoginApi</span><span class="token punctuation">(</span>ViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 在调用序列化类给context传数据，可以直接在序列化类中调用</span>        <span class="token comment"># 关键点1：注意区分序列化传值与反序列化</span>        <span class="token comment"># 这里只要拿字典取校验数据，那就传给data</span>        <span class="token comment"># 如果是要把数据对象转化成字典就传给instance</span>        user_ser <span class="token operator">=</span> sers<span class="token punctuation">.</span>LoginSer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span> context<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'request'</span><span class="token punctuation">:</span> request<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        user_ser<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        token <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> user_ser<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>user_ser<span class="token punctuation">.</span>user<span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span> <span class="token string">'token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span> <span class="token string">'username'</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>username<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> drf </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔法方法</title>
      <link href="/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/task/2020/01/25/python%20%E9%AD%94%E6%B3%95%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-str"><a href="#一、-str" class="headerlink" title="一、__str__"></a>一、<code>__str__</code></h2><p>改变对象的字符串显示，可以理解为print打印对象的显示</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age            <span class="token comment"># 定义对象的字符串表示</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name    s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>  <span class="token comment"># 会调用s1的__str__方法</span><span class="token operator">>></span><span class="token operator">></span> 张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、-repr"><a href="#二、-repr" class="headerlink" title="二、__repr__"></a>二、<code>__repr__</code></h2><p>在python解释器环境下，会默认显示对象的repr表示。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         self<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">return</span> self<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s1张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><p>str函数或者print函数调用的是obj.<strong>str</strong>()<br>repr函数或者交互式解释器调用的是obj.<strong>repr</strong>()</p><p>注意：<br>如果__str__没有被定义，那么就会使用__repr__来代替输出。<br>__str__和__repr__方法的返回值都必须是字符串。</p><h2 id="三、-format"><a href="#三、-format" class="headerlink" title="三、__format__"></a>三、<code>__format__</code></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    __format_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'n-a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&#123;obj.name&#125;-年龄是：&#123;obj.age&#125;'</span><span class="token punctuation">,</span>  <span class="token comment"># 名字是：lqz-年龄是：18</span>        <span class="token string">'n:a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&#123;obj.name&#125;：年龄是：&#123;obj.age&#125;'</span><span class="token punctuation">,</span>  <span class="token comment"># 名字是：lqz：年龄是：18</span>        <span class="token string">'n/a'</span><span class="token punctuation">:</span> <span class="token string">'名字是：&#123;obj.name&#125;/年龄是：&#123;obj.age&#125;'</span><span class="token punctuation">,</span>  <span class="token comment"># 名字是：/年龄是：18</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">def</span> <span class="token function">__format__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> format_spec<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> format_spec <span class="token keyword">or</span> format_spec <span class="token keyword">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">:</span>            format_spec <span class="token operator">=</span> <span class="token string">'n-a'</span>        fmt <span class="token operator">=</span> self<span class="token punctuation">.</span>__format_dict<span class="token punctuation">[</span>format_spec<span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span> <span class="token comment">#&#123;obj.name&#125;:&#123;obj.age&#125;</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>obj<span class="token operator">=</span>self<span class="token punctuation">)</span>s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'lqz'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>ret <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token string">'n/a'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token comment"># lqz/24</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、-del"><a href="#四、-del" class="headerlink" title="四、__del__"></a>四、<code>__del__</code></h2><p>当对象的内存被施放的时候执行</p><p>注：此方法一般无须定义，因为Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行，所以析构函数的调用是由解释器在进行垃圾回收时自动触发执行的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__del__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除了...'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># &lt;__main__.A object at 0x10164fb00></span><span class="token keyword">del</span> a  <span class="token comment"># 删除了...</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># NameError: name 'a' is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、-dict-和-slots"><a href="#五、-dict-和-slots" class="headerlink" title="五、__dict__和__slots__"></a>五、<code>__dict__和__slots__</code></h2><p>Python中的类，都会从object里继承一个__dict__属性，这个属性中存放着类的属性和方法对应的键值对。一个类实例化之后，这个类的实例也具有这么一个__dict__属性。但是二者并不相同。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    some <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> numa <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment"># &#123;'num': 10&#125;</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>  <span class="token comment"># &#123;'num': 10, 'age': 10&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的例子可以看出来，实例只保存实例的属性和方法，类的属性和方法它是不保存的。正是由于类和实例有__dict__属性，所以类和实例可以在运行过程动态添加属性和方法。</p><p>但是由于每实例化一个类都要分配一个__dict__变量，容易浪费内存。因此在Python中有一个内置的__slots__属性。当一个类设置了__slots__属性后，这个类的__dict__属性就不存在了（同理，该类的实例也不存在__dict__属性），如此一来，设置了__slots__属性的类的属性，只能是预先设定好的。</p><p>当你定义__slots__后，__slots__就会为实例使用一种更加紧凑的内部表示。实例通过一个很小的固定大小的小型数组来构建的，而不是为每个实例都定义一个__dict__字典，在__slots__中列出的属性名在内部被映射到这个数组的特定索引上。使用__slots__带来的副作用是我们没有办法给实例添加任何新的属性了。</p><p>注意：尽管__slots__看起来是个非常有用的特性，但是除非你十分确切的知道要使用它，否则尽量不要使用它。比如定义了__slots__属性的类就不支持多继承。__slots__通常都是作为一种优化工具来使用。–摘自《Python Cookbook》8.4</p><p>注意事项：<br>__slots__的很多特性都依赖于普通的基于字典的实现。<br>另外，定义了__slots__后的类不再 支持一些普通类特性了,比如多继承。大多数情况下,你应该只在那些经常被使用到的用作数据结构的类上定义__slots__，比如在程序中需要创建某个类的几百万个实例对象 。<br>关于__slots__的一个常见误区是它可以作为一个封装工具来防止用户给实例增加新的属性。尽管使用__slots__可以达到这样的目的,但是这个并不是它的初衷。它更多的是用来作为一个内存优化工具。</p><h2 id="六、-item-、-attr-系列"><a href="#六、-item-、-attr-系列" class="headerlink" title="六、__item__、__attr__系列"></a>六、<code>__item__、__attr__系列</code></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__setitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj[key]=lqz赋值时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">def</span> <span class="token function">__delitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj[key]时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__delattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del obj.key时，执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>item<span class="token punctuation">)</span>            <span class="token keyword">def</span> <span class="token function">__setattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.key = value的时候执行我'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>__dict__<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value            <span class="token keyword">def</span> <span class="token function">__getattr__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'obj.get(key)的时候执行我'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">[</span>item<span class="token punctuation">]</span>f1 <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token string">'sb'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>f1<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">'泡妞'</span><span class="token keyword">del</span> f1<span class="token punctuation">.</span>hobby<span class="token keyword">del</span> f1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span>f1<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'lqz'</span><span class="token keyword">print</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、-init"><a href="#七、-init" class="headerlink" title="七、__init__"></a>七、<code>__init__</code></h2><p>使用Python写面向对象的代码的时候我们都会习惯性写一个 <strong>init</strong> 方法，<strong>init</strong> 方法通常用在初始化一个类实例的时候。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: &#123;&#125;(&#123;&#125;)>'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是<strong>init__最普通的用法了。但是__init__其实不是实例化一个类的时候第一个被调用的方法。当使用 Persion(name, age) 来实例化一个类时，最先被调用的方法其实是 __new</strong> 方法。</p><h2 id="八、-new"><a href="#八、-new" class="headerlink" title="八、__new__"></a>八、<code>__new__</code></h2><p>其实__init__是在类实例被创建之后调用的，它完成的是类实例的初始化操作，而 __new__方法正是创建这个类实例的方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__new__，创建类实例'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Person<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用__init__，初始化实例'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'&lt;Person: &#123;&#125;(&#123;&#125;)>'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">调用__new__，创建类实例调用__init__，初始化实例<span class="token operator">&lt;</span>Person<span class="token punctuation">:</span> 张三<span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>__new__方法在类定义中不是必须写的，如果没定义的话默认会调用object.__new__去创建一个对象（因为创建类的时候默认继承的就是object）。</p><p>如果我们在类中定义了__new__方法，就是重写了默认的__new__方法，我们可以借此自定义创建对象的行为。</p><p>举个例子：</p><p>重写类的__new__方法来实现单例模式。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">:</span>    <span class="token comment"># 重写__new__方法，实现每一次实例化的时候，返回同一个instance对象</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> <span class="token string">'_instance'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>_instance <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>Singleton<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>_instance    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> ages1 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>  <span class="token comment"># 这两实例都一样</span><span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> s2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="九、-call"><a href="#九、-call" class="headerlink" title="九、__call__"></a>九、<code>__call__</code></h2><p><strong>call</strong> 方法的执行是由对象后加括号触发的，即：对象()。拥有此方法的对象可以像函数一样被调用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'调用对象的__call__方法'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>  <span class="token comment"># 类Person可调用</span>a<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 对象a可以调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong> </p><p>__new__、__init__、__call__等方法都不是必须写的。</p><h2 id="十、-doc"><a href="#十、-doc" class="headerlink" title="十、__doc__"></a>十、<code>__doc__</code></h2><p>定义类的描述信息（注释）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""我是A类的描述信息"""</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十一、-iter-和-next"><a href="#十一、-iter-和-next" class="headerlink" title="十一、__iter__和__next__"></a>十一、<code>__iter__和__next__</code></h2><p>如果一个对象拥有了__iter__和__next__方法，那这个对象就是迭代器</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> start<span class="token punctuation">,</span> stop<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> stop<span class="token punctuation">:</span>            start<span class="token punctuation">,</span> stop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start        self<span class="token punctuation">.</span>start <span class="token operator">=</span> start        self<span class="token punctuation">.</span>stop <span class="token operator">=</span> stop    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self    <span class="token keyword">def</span> <span class="token function">__next__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>start <span class="token operator">>=</span> self<span class="token punctuation">.</span>stop<span class="token punctuation">:</span>            <span class="token keyword">raise</span> StopIteration        n <span class="token operator">=</span> self<span class="token punctuation">.</span>start        self<span class="token punctuation">.</span>start <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> na <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterator<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> Iterator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> A<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>aaa<span class="token operator">=</span>A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">next</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#抛异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十二、-enter-和-exit"><a href="#十二、-enter-和-exit" class="headerlink" title="十二、__enter__和__exit__"></a>十二、<code>__enter__和__exit__</code></h2><p>一个对象如果实现了__enter__和___exit__方法，那么这个对象就支持上下文管理协议，即with语句</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块时执行此方法，此方法如果有返回值会赋值给as声明的变量'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token string">'oo'</span>    <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'退出with代码块时执行此方法'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> exc_type<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">,</span> exc_val<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token keyword">with</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入with语句块'</span><span class="token punctuation">)</span>    <span class="token comment"># with语句中代码块出现异常，则with后的代码都无法执行。</span>    <span class="token comment"># raise AttributeError('sb')</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment">#f打印出oo</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'嘿嘿嘿'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十三、-len"><a href="#十三、-len" class="headerlink" title="十三、__len__"></a>十三、<code>__len__</code></h2><p>拥有__len__方法的对象支持len(obj)操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__dict__<span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十四、-hash"><a href="#十四、-hash" class="headerlink" title="十四、__hash__"></a>十四、<code>__hash__</code></h2><p>拥有__hash__方法的对象支持hash(obj)操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">def</span> <span class="token function">__hash__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">hash</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="十五、-eq"><a href="#十五、-eq" class="headerlink" title="十五、__eq__"></a>十五、<code>__eq__</code></h2><p>拥有__eq__方法的对象支持相等的比较操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 打印出比较的第二个对象的x值</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>x <span class="token operator">+</span>self<span class="token punctuation">.</span>y <span class="token operator">==</span> obj<span class="token punctuation">.</span>x<span class="token operator">+</span>obj<span class="token punctuation">.</span>y<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>a <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>b <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python函数 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
